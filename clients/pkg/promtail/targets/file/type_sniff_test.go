package file

import (
	"bytes"
	"fmt"
	"io"
	"strings"
	"testing"

	"github.com/stretchr/testify/assert"
)

func Test_checkIfBinary(t *testing.T) {
	// from https://mimesniff.spec.whatwg.org/#terminology:
	// A binary data byte is a byte in the range 0x00 to 0x08 (NUL to BS), the byte 0x0B (VT),
	// a byte in the range 0x0E to 0x1A (SO to SUB), or a byte in the range 0x1C to 0x1F (FS to US).

	blank := ""
	for i := 0; i < 512; i++ {
		blank += " "
	}
	binaryBytes := []byte{0x00, 0x07, 0x0B, 0x0E, 0x19, 0x1C, 0x1D, 0x1F}

	tests := []struct {
		name   string
		reader io.Reader
		err    error
	}{
		{
			name:   "plain text",
			reader: strings.NewReader("this is plain text"),
			err:    nil,
		},
		{
			name:   "empty file",
			reader: strings.NewReader(""),
			err:    nil,
		},
		{
			name:   "blank file",
			reader: strings.NewReader("                         "),
			err:    nil,
		},
		{
			name:   "blank text content",
			reader: strings.NewReader(blank),
			err:    nil,
		},
		{
			// only the first 512 bytes are examined
			name:   "blank text content followed by 8 binary bytes",
			reader: strings.NewReader(fmt.Sprintf("%s%s", blank, binaryBytes)),
			err:    nil,
		},
		{
			// only the first 512 bytes are examined
			name:   "8 binary bytes followed by 512 bytes of blank data",
			reader: strings.NewReader(fmt.Sprintf("%s%s", binaryBytes, blank)),
			err:    errBinaryContent,
		},
		{
			// https://www.freedesktop.org/wiki/Software/systemd/journal-files/#header
			// header (first 8 bytes) is plain text "LPKSHHRH", but thereafter is binary
			name:   "first 512 bytes from a systemd journal file",
			reader: bytes.NewBuffer([]byte{
				0x4c, 0x50, 0x4b, 0x53, 0x48, 0x48, 0x52, 0x48, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0xa3, 0x5d, 0x26, 0x80, 0xe5, 0x47, 0x17,
				0x98, 0x8f, 0xb2, 0x71, 0x76, 0xa1, 0x6a, 0xb7, 0x69, 0xd6, 0xe6, 0x75, 0x67, 0x1b, 0x42, 0xf6,
				0xb4, 0x4e, 0x5f, 0x1b, 0x8d, 0xfa, 0x20, 0x1e, 0xde, 0x67, 0x55, 0xa5, 0xc0, 0xbb, 0x4a, 0x99,
				0xb4, 0xf8, 0x7d, 0x22, 0x1d, 0x12, 0x5f, 0x2d, 0xc3, 0xe8, 0x3e, 0x74, 0xa1, 0x22, 0x48, 0x34,
				0xa6, 0x09, 0x54, 0xd3, 0x3d, 0xe9, 0x02, 0x14, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x10, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x80, 0xe3, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0xd0, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x5a, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x43, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc2, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0xfd, 0x1a, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x91, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x08, 0x0c, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x09, 0xc4, 0x5c, 0xc6, 0xc6, 0x05, 0x00,
				0x34, 0xcb, 0x06, 0x4c, 0x51, 0xc7, 0x05, 0x00, 0x33, 0x09, 0xce, 0x99, 0xcb, 0x00, 0x00, 0x00,
				0x9e, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x08, 0x5d, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x5d, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00,
				0xb8, 0x18, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb8, 0x18, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0xc8, 0xef, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0xef, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00,
			}),
			err: errBinaryContent,
		},
		{
			name:   "slice of binary bytes",
			reader: bytes.NewBuffer(binaryBytes),
			err:    errBinaryContent,
		},
	}
	for _, tt := range tests {

		t.Run(tt.name, func(t *testing.T) {
			assert.ErrorIs(t, tt.err, checkIfBinary(tt.reader))
		})
	}
}