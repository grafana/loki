---
alwaysApply: false
---
## Pattern 1: Add Environment Variable to Component

### Goal
Add environment variable to a component (e.g., JAEGER_AGENT_HOST to distributor)

### Solution
**No template changes needed** - use extraEnv

**values.yaml**:
```yaml
distributor:
  extraEnv:
    - name: JAEGER_AGENT_HOST
      value: jaeger-agent.monitoring.svc
    - name: JAEGER_SAMPLER_TYPE
      value: const
    - name: JAEGER_SAMPLER_PARAM
      value: "1"
```

**Template Pattern** (already in templates):
```yaml
{{- with (concat .Values.global.extraEnv .Values.distributor.extraEnv) | uniq }}
env:
  {{- toYaml . | nindent 12 }}
{{- end }}
```

### Global Application

To add to ALL components:

```yaml
global:
  extraEnv:
    - name: JAEGER_AGENT_HOST
      value: jaeger-agent.monitoring.svc
```

---

## Pattern 2: Add Volume Mount to Component

### Goal
Mount custom CA certificates to all write components

### Solution
**No template changes needed** - use extraVolumes/extraVolumeMounts

**values.yaml**:
```yaml
write:
  extraVolumes:
    - name: custom-ca
      configMap:
        name: custom-ca-certs
  extraVolumeMounts:
    - name: custom-ca
      mountPath: /etc/ssl/certs/custom-ca.crt
      subPath: ca.crt
      readOnly: true
```

**Template Pattern** (already in templates):
```yaml
volumes:
  {{- with (concat .Values.global.extraVolumes .Values.write.extraVolumes) | uniq }}
  {{- toYaml . | nindent 8 }}
  {{- end }}

volumeMounts:
  {{- with (concat .Values.global.extraVolumeMounts .Values.write.extraVolumeMounts) | uniq }}
  {{- toYaml . | nindent 12 }}
  {{- end }}
```

---

## Pattern 3: Add Init Container to Component

### Goal
Add init container to wait for external service

### Solution
**No template changes needed** - use initContainers

**values.yaml**:
```yaml
backend:
  initContainers:
    - name: wait-for-postgres
      image: postgres:15-alpine
      command:
        - sh
        - -c
        - |
          until pg_isready -h postgres.database.svc -p 5432; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
```

**Template Pattern** (already in templates):
```yaml
{{- with .Values.backend.initContainers }}
initContainers:
  {{- toYaml . | nindent 8 }}
{{- end }}
```

---

## Pattern 4: Add Sidecar Container

### Goal
Add log forwarding sidecar to write pods

### Solution
**No template changes needed** - use extraContainers

**values.yaml**:
```yaml
write:
  extraContainers:
    - name: log-forwarder
      image: fluent/fluent-bit:2.0
      volumeMounts:
        - name: data
          mountPath: /var/loki
          readOnly: true
        - name: fluent-bit-config
          mountPath: /fluent-bit/etc
  
  extraVolumes:
    - name: fluent-bit-config
      configMap:
        name: fluent-bit-config
```

---

## Pattern 5: Modify Loki Configuration Section

### Goal
Add new Loki configuration section or modify existing

### Approach A: Use Individual Sections (Recommended)

**No template changes** - add to values.yaml:

```yaml
loki:
  querier:
    max_concurrent: 8
    query_timeout: 10m
    tail_max_duration: 2h
  
  query_range:
    align_queries_with_step: true
    parallelise_shardable_queries: true
    cache_index_stats_results: true
```

**Template** (`templates/config.yaml`):
```yaml
{{- with .Values.loki.querier }}
querier:
  {{- tpl (. | toYaml) $ | nindent 4 }}
{{- end }}
```

### Approach B: Add New Section to Template

**If section doesn't exist in config.yaml**:

**1. Update values.yaml**:
```yaml
loki:
  custom_section:
    custom_key: value
```

**2. Update templates/config.yaml**:
```yaml
# Add after existing sections
{{- with .Values.loki.custom_section }}
custom_section:
  {{- tpl (. | toYaml) $ | nindent 4 }}
{{- end }}
```

**3. Test**:
```bash
helm template loki . -f values.yaml --show-only templates/config.yaml
```

---

## Pattern 6: Modify Nginx Gateway Routing

### Goal
Add custom endpoint routing or modify existing routes

### Solution
Modify `templates/_helpers.tpl` in `loki.nginxFile` define

**Example**: Add /custom endpoint routing to backend

**File**: `templates/_helpers.tpl`  
**Location**: Inside `{{- define "loki.nginxFile" -}}`, after existing location blocks

```yaml
    # Custom endpoint
    location = /custom/endpoint {
      {{- with .Values.gateway.nginxConfig.locationSnippet }}
      {{- tpl . $ | nindent 6 }}
      {{- end }}
      proxy_pass       {{ $backendUrl }}$request_uri;
    }
```

**Variables Available**:
- `$singleBinaryUrl` - SingleBinary service URL
- `$writeUrl` - Write service URL
- `$readUrl` - Read service URL
- `$backendUrl` - Backend service URL
- `$distributorUrl` - Distributor service URL
- `$ingesterUrl` - Ingester service URL
- `$queryFrontendUrl` - Query frontend service URL
- `$rulerUrl` - Ruler service URL
- `$compactorUrl` - Compactor service URL
- `$schedulerUrl` - Query scheduler service URL
- `$indexGatewayUrl` - Index gateway service URL

**Example**: WebSocket Support
```yaml
    location = /loki/api/v1/tail {
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      {{- with .Values.gateway.nginxConfig.locationSnippet }}
      {{- tpl . $ | nindent 6 }}
      {{- end }}
      proxy_pass       {{ $queryFrontendUrl }}$request_uri;
    }
```

---

## Pattern 7: Add Custom Nginx Configuration

### Goal
Inject custom nginx configuration without modifying templates

### Solution
Use nginx config snippets in values.yaml

**HTTP Block Snippet**:
```yaml
gateway:
  nginxConfig:
    httpSnippet: |
      # Custom HTTP-level config
      proxy_buffering off;
      proxy_request_buffering off;
      
      # Custom upstream
      upstream custom_backend {
        server backend-1:8080;
        server backend-2:8080;
      }
      
      # Custom map
      map $http_x_custom_header $custom_value {
        default "value1";
        "special" "value2";
      }
```

**Server Block Snippet**:
```yaml
gateway:
  nginxConfig:
    serverSnippet: |
      # Custom server-level config
      error_page 404 /custom_404.html;
      
      location = /custom_404.html {
        internal;
        return 404 "Not found\n";
      }
```

**Location Block Snippet** (applied to ALL locations):
```yaml
gateway:
  nginxConfig:
    locationSnippet: |
      # Applied to every location block
      proxy_set_header X-Custom-Header "value";
      proxy_set_header X-Scope-OrgID $remote_user;
      
      # Auth request
      auth_request /auth;
```

**Complete Override**:
```yaml
gateway:
  nginxConfig:
    file: |
      # Complete custom nginx.conf
      worker_processes 2;
      events {
        worker_connections 1024;
      }
      http {
        server {
          listen 8080;
          location / {
            proxy_pass http://loki-read:3100;
          }
        }
      }
```

---

## Pattern 8: Add New Storage Backend

### Goal
Support new object storage type (e.g., Oracle Cloud)

### Files to Modify

**1. templates/_helpers.tpl** - Add to `loki.lokiStorageConfig`:

```yaml
{{- else if eq .ctx.Values.loki.storage.type "oracle" -}}
{{- with .ctx.Values.loki.storage.oracle }}
oracle:
  bucket_name: {{ $bucketName }}
  namespace: {{ .namespace }}
  region: {{ .region }}
  {{- with .tenancy_ocid }}
  tenancy_ocid: {{ . }}
  {{- end }}
  {{- with .user_ocid }}
  user_ocid: {{ . }}
  {{- end }}
  {{- with .private_key }}
  private_key: {{ . }}
  {{- end }}
  {{- with .fingerprint }}
  fingerprint: {{ . }}
  {{- end }}
{{- end -}}
```

**2. templates/_helpers.tpl** - Update `loki.isUsingObjectStorage`:

```yaml
{{- define "loki.isUsingObjectStorage" -}}
{{- has .Values.loki.storage.type (list "s3" "gcs" "azure" "swift" "alibabacloud" "cos" "bos" "oracle") }}
{{- end -}}
```

**3. values.yaml** - Add configuration section:

```yaml
loki:
  storage:
    oracle:
      namespace: null
      region: null
      tenancy_ocid: null
      user_ocid: null
      private_key: null
      fingerprint: null
```

**4. templates/_helpers.tpl** - Add to `enterprise-logs.adminAPIStorageConfig` if enterprise:

```yaml
  {{- else if eq .Values.loki.storage.type "oracle" -}}
  {{- with .Values.loki.storage.oracle }}
  backend: "oracle"
  oracle:
    bucket_name: {{ $.Values.loki.storage.bucketNames.admin }}
    # ... oracle config
  {{- end -}}
```

---

## Pattern 9: Add Health Check Endpoint

### Goal
Add custom health check endpoint to components

### Solution A: Use Probe Configuration

**values.yaml**:
```yaml
distributor:
  livenessProbe:
    httpGet:
      path: /custom/health
      port: http-metrics
    initialDelaySeconds: 30
    periodSeconds: 10
  
  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 30
```

### Solution B: Modify Probe Default

**templates/_helpers.tpl** - Add component-specific probe helper:

```yaml
{{- define "loki.distributor.livenessProbe" }}
{{- with .Values.distributor.livenessProbe | default .Values.loki.livenessProbe }}
livenessProbe:
  {{- toYaml . | nindent 2 }}
{{- end }}
{{- end }}
```

**Template**: `templates/distributor/deployment-distributor.yaml`

```yaml
{{- include "loki.distributor.livenessProbe" . | nindent 10 }}
```

---

## Pattern 10: Add Service Port

### Goal
Expose additional port on component service

### Files to Modify

**1. templates/[component]/deployment-[component].yaml** - Add container port:

```yaml
ports:
  - name: http-metrics
    containerPort: 3100
    protocol: TCP
  - name: grpc
    containerPort: 9095
    protocol: TCP
  - name: custom-metrics  # NEW
    containerPort: 9999
    protocol: TCP
```

**2. templates/[component]/service-[component].yaml** - Add service port:

```yaml
ports:
  - name: http-metrics
    port: 3100
    targetPort: http-metrics
  - name: grpc
    port: 9095
    targetPort: grpc
  - name: custom-metrics  # NEW
    port: 9999
    targetPort: custom-metrics
```

**3. values.yaml** - Document the port (optional):

```yaml
[component]:
  # Custom metrics port exposed on 9999
  customMetricsPort: 9999
```

---

## Pattern 11: Add New Component

### Goal
Add completely new component to chart (e.g., log-archiver)

### Step-by-Step

**1. Create directory**:
```bash
mkdir -p templates/log-archiver
```

**2. Create `templates/log-archiver/_helpers-log-archiver.tpl`**:

```yaml
{{/*
log-archiver fullname
*/}}
{{- define "loki.logArchiverFullname" -}}
{{ include "loki.fullname" . }}-log-archiver
{{- end }}

{{/*
log-archiver common labels
*/}}
{{- define "loki.logArchiverLabels" -}}
{{ include "loki.labels" . }}
app.kubernetes.io/component: log-archiver
{{- end }}

{{/*
log-archiver selector labels
*/}}
{{- define "loki.logArchiverSelectorLabels" -}}
{{ include "loki.selectorLabels" . }}
app.kubernetes.io/component: log-archiver
{{- end }}

{{/*
log-archiver priority class name
*/}}
{{- define "loki.logArchiverPriorityClassName" -}}
{{- $pcn := coalesce .Values.global.priorityClassName .Values.logArchiver.priorityClassName -}}
{{- if $pcn }}
priorityClassName: {{ $pcn }}
{{- end }}
{{- end }}
```

**3. Create `templates/log-archiver/deployment-log-archiver.yaml`**:

```yaml
{{- $isDistributed := eq (include "loki.deployment.isDistributed" .) "true" -}}
{{- if and $isDistributed (gt (int .Values.logArchiver.replicas) 0) }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "loki.logArchiverFullname" . }}
  namespace: {{ include "loki.namespace" . }}
  labels:
    {{- include "loki.logArchiverLabels" . | nindent 4 }}
  {{- with .Values.loki.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
{{- if not .Values.logArchiver.autoscaling.enabled }}
  replicas: {{ .Values.logArchiver.replicas }}
{{- end }}
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  revisionHistoryLimit: {{ .Values.loki.revisionHistoryLimit }}
  selector:
    matchLabels:
      {{- include "loki.logArchiverSelectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- include "loki.config.checksum" . | nindent 8 }}
        {{- with .Values.loki.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- with .Values.logArchiver.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "loki.logArchiverLabels" . | nindent 8 }}
        {{- with merge (dict) .Values.loki.podLabels .Values.logArchiver.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ include "loki.serviceAccountName" . }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- include "loki.logArchiverPriorityClassName" . | nindent 6 }}
      securityContext:
        {{- toYaml .Values.loki.podSecurityContext | nindent 8 }}
      terminationGracePeriodSeconds: {{ .Values.logArchiver.terminationGracePeriodSeconds }}
      containers:
        - name: log-archiver
          image: {{ include "loki.image" . }}
          imagePullPolicy: {{ .Values.loki.image.pullPolicy }}
          args:
            - -config.file=/etc/loki/config/config.yaml
            - -target=log-archiver
            {{- with (concat .Values.global.extraArgs .Values.logArchiver.extraArgs) | uniq }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          ports:
            - name: http-metrics
              containerPort: 3100
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
          {{- with (concat .Values.global.extraEnv .Values.logArchiver.extraEnv) | uniq }}
          env:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with (concat .Values.global.extraEnvFrom .Values.logArchiver.extraEnvFrom) | uniq }}
          envFrom:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          securityContext:
            {{- toYaml .Values.loki.containerSecurityContext | nindent 12 }}
          {{- with .Values.loki.readinessProbe }}
          readinessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: config
              mountPath: /etc/loki/config
            - name: runtime-config
              mountPath: /etc/loki/runtime-config
            {{- if .Values.enterprise.enabled }}
            - name: license
              mountPath: /etc/loki/license
            {{- end }}
            {{- with (concat .Values.global.extraVolumeMounts .Values.logArchiver.extraVolumeMounts) | uniq }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          resources:
            {{- toYaml .Values.logArchiver.resources | nindent 12 }}
      {{- with .Values.logArchiver.affinity }}
      affinity:
        {{- tpl ( . | toYaml) $ | nindent 8 }}
      {{- end }}
      {{- with .Values.logArchiver.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.logArchiver.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: config
          {{- include "loki.configVolume" . | nindent 10 }}
        - name: runtime-config
          configMap:
            name: {{ template "loki.name" . }}-runtime
        {{- if .Values.enterprise.enabled }}
        - name: license
          secret:
          {{- if .Values.enterprise.useExternalLicense }}
            secretName: {{ .Values.enterprise.externalLicenseName }}
          {{- else }}
            secretName: enterprise-logs-license
          {{- end }}
        {{- end }}
        {{- with (concat .Values.global.extraVolumes .Values.logArchiver.extraVolumes) | uniq }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
{{- end }}
```

**4. Create `templates/log-archiver/service-log-archiver.yaml`**:

```yaml
{{- $isDistributed := eq (include "loki.deployment.isDistributed" .) "true" -}}
{{- if and $isDistributed (gt (int .Values.logArchiver.replicas) 0) }}
apiVersion: v1
kind: Service
metadata:
  name: {{ include "loki.logArchiverFullname" . }}
  namespace: {{ include "loki.namespace" . }}
  labels:
    {{- include "loki.logArchiverLabels" . | nindent 4 }}
  annotations:
    {{- with .Values.loki.serviceAnnotations }}
    {{- toYaml . | nindent 4}}
    {{- end }}
    {{- with .Values.logArchiver.serviceAnnotations }}
    {{- toYaml . | nindent 4}}
    {{- end }}
spec:
  type: ClusterIP
  ports:
    - name: http-metrics
      port: 3100
      targetPort: http-metrics
    - name: grpc
      port: 9095
      targetPort: grpc
  selector:
    {{- include "loki.logArchiverSelectorLabels" . | nindent 4 }}
{{- end }}
```

**5. Add HPA** (optional) - `templates/log-archiver/hpa.yaml`

**6. Add PDB** (optional) - `templates/log-archiver/poddisruptionbudget-log-archiver.yaml`

**7. Update values.yaml**:

```yaml
# Add new section
logArchiver:
  replicas: 0
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage: null
  priorityClassName: null
  podLabels: {}
  podAnnotations: {}
  serviceAnnotations: {}
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  resources: {}
  initContainers: []
  extraContainers: []
  terminationGracePeriodSeconds: 30
  nodeSelector: {}
  affinity: {}
  tolerations: []
  topologySpreadConstraints: []
```

---

## Pattern 12: Add Custom Loki Target

### Goal
Add support for custom Loki -target value

### Solution
Configure existing component with custom targetModule

**values.yaml**:
```yaml
backend:
  targetModule: "backend,custom-target"
  extraArgs:
    - -custom-target.config=value
```

**Template** (already supports this):
```yaml
args:
  - -config.file=/etc/loki/config/config.yaml
  - -target={{ .Values.backend.targetModule }}
```

**Loki Config**:
```yaml
loki:
  custom_target:
    enabled: true
    custom_config: value
```

**Template** (`templates/config.yaml` - add new section):
```yaml
{{- with .Values.loki.custom_target }}
custom_target:
  {{- tpl (. | toYaml) $ | nindent 4 }}
{{- end }}
```

---

## Pattern 13: Modify Deployment Strategy

### Goal
Change update strategy for component

### Solution
Configure in values.yaml - templates already support

**RollingUpdate with Partition** (StatefulSet):
```yaml
ingester:
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 3  # Update pods 3+ first, 0-2 last
```

**OnDelete** (Manual control):
```yaml
ingester:
  updateStrategy:
    type: OnDelete  # Manual pod deletion required
```

**Deployment Strategy**:
```yaml
gateway:
  deploymentStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0  # Zero downtime
```

---

## Pattern 14: Add Custom Labels

### Goal
Add custom labels to pods for monitoring/routing

### Solution
**No template changes** - use podLabels

**values.yaml**:
```yaml
write:
  podLabels:
    monitoring: enabled
    team: platform
    environment: production
    cost-center: "12345"
```

**Template Pattern** (already in templates):
```yaml
labels:
  {{- include "loki.writeLabels" . | nindent 8 }}
  {{- with merge (dict) .Values.loki.podLabels .Values.write.podLabels }}
  {{- tpl (toYaml .) $ | nindent 8 }}
  {{- end }}
```

**Service Labels**:
```yaml
write:
  service:
    labels:
      traffic-policy: local
```

---

## Pattern 15: Configure Service Mesh (Istio)

### Goal
Add Istio annotations and appProtocol

### Solution

**values.yaml**:
```yaml
# Global pod annotations for Istio sidecar
loki:
  podAnnotations:
    sidecar.istio.io/inject: "true"
    traffic.sidecar.istio.io/includeInboundPorts: "3100,9095"

# Set appProtocol for protocol selection
distributor:
  appProtocol:
    grpc: "grpc"

querier:
  appProtocol:
    grpc: "grpc"

# Disable mTLS for memberlist (gossip)
memberlist:
  service:
    annotations:
      traffic.sidecar.istio.io/excludeInboundPorts: "7946"
```

**Template Support** (already in service templates):
```yaml
{{- if .Values.distributor.appProtocol.grpc }}
appProtocol: {{ .Values.distributor.appProtocol.grpc }}
{{- end }}
```

---

## Pattern 16: Add Topology Spread Constraints

### Goal
Improve pod distribution across zones/nodes

### Solution
**No template changes** - configure in values

**values.yaml**:
```yaml
distributor:
  topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: topology.kubernetes.io/zone
      whenUnsatisfiable: DoNotSchedule
      labelSelector:
        matchLabels:
          app.kubernetes.io/component: distributor
          app.kubernetes.io/name: '{{ include "loki.name" . }}'
          app.kubernetes.io/instance: '{{ .Release.Name }}'
    
    - maxSkew: 2
      topologyKey: kubernetes.io/hostname
      whenUnsatisfiable: ScheduleAnyway
```

**Template Pattern** (already supports tpl):
```yaml
{{- with .Values.distributor.topologySpreadConstraints }}
topologySpreadConstraints:
  {{- tpl ( . | toYaml) $ | nindent 8 }}
{{- end }}
```

---

## Pattern 17: Add PodDisruptionBudget to Component

### Goal
Add PDB to component that doesn't have one

### Solution
Create new template file

**File**: `templates/[component]/poddisruptionbudget-[component].yaml`

```yaml
{{- $isDistributed := eq (include "loki.deployment.isDistributed" .) "true" -}}
{{- if and $isDistributed (gt (int .Values.[component].replicas) 1) }}
{{- if kindIs "invalid" .Values.[component].maxUnavailable }}
{{- fail "`.Values.[component].maxUnavailable` must be set when replicas > 1." }}
{{- else }}
apiVersion: {{ include "loki.pdb.apiVersion" . }}
kind: PodDisruptionBudget
metadata:
  name: {{ include "loki.[component]Fullname" . }}
  namespace: {{ include "loki.namespace" . }}
  labels:
    {{- include "loki.[component]Labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "loki.[component]SelectorLabels" . | nindent 6 }}
  {{- with .Values.[component].maxUnavailable }}
  maxUnavailable: {{ . }}
  {{- end }}
{{- end }}
{{- end }}
```

**values.yaml**:
```yaml
[component]:
  maxUnavailable: 1
```

---

## Pattern 18: Modify Config Generation Logic

### Goal
Change how Loki configuration is generated

### Files to Modify

**templates/config.yaml** - Main config generation

**Example**: Add conditional section based on feature flag

**values.yaml**:
```yaml
loki:
  customFeature:
    enabled: true
    setting: value
```

**templates/config.yaml** - Add section:
```yaml
    {{- if .Values.loki.customFeature.enabled }}
    {{- with .Values.loki.customFeature }}
    custom_feature:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}
    {{- end }}
```

**Example**: Add automatic config based on deployment mode

```yaml
    {{- if eq (include "loki.deployment.isDistributed" .) "true" }}
    distributed_only_config:
      option: value
    {{- end }}
```

---

## Pattern 19: Add Helper Function

### Goal
Create reusable helper function for address calculation

### File to Modify
`templates/_helpers.tpl`

**Example**: Add custom backend address helper

```yaml
{{/*
Determine custom backend address
*/}}
{{- define "loki.customBackendAddress" -}}
{{- $isSimpleScalable := eq (include "loki.deployment.isScalable" .) "true" -}}
{{- $isDistributed := eq (include "loki.deployment.isDistributed" .) "true" -}}
{{- $address := "" -}}
{{- if $isSimpleScalable -}}
{{- $address = printf "%s.%s.svc.%s:%s" (include "loki.backendFullname" .) (include "loki.namespace" .) .Values.global.clusterDomain (.Values.loki.server.http_listen_port | toString) -}}
{{- else if $isDistributed -}}
{{- $address = printf "%s.%s.svc.%s:%s" (include "loki.customBackendFullname" .) (include "loki.namespace" .) .Values.global.clusterDomain (.Values.loki.server.http_listen_port | toString) -}}
{{- end -}}
{{- printf "%s" $address }}
{{- end }}
```

**Usage in templates**:
```yaml
- -custom-backend.address={{ include "loki.customBackendAddress" . }}
```

**Usage in values**:
```yaml
loki:
  customConfig:
    backend_address: '{{ include "loki.customBackendAddress" . }}'
```

---

## Pattern 20: Add ServiceMonitor for Custom Component

### Goal
Add Prometheus scraping for new component

### Solution
ServiceMonitor selector auto-includes components

**Requirement**: Service must NOT have label `prometheus.io/service-monitor: "false"`

**Service template** - Ensure no exclusion label:
```yaml
metadata:
  labels:
    {{- include "loki.[component]Labels" . | nindent 4 }}
    # Do NOT add: prometheus.io/service-monitor: "false"
```

**Automatic**: ServiceMonitor template uses:
```yaml
selector:
  matchLabels:
    {{- include "loki.selectorLabels" $ | nindent 6 }}
  matchExpressions:
    - key: prometheus.io/service-monitor
      operator: NotIn
      values:
        - "false"
```

**Custom Metrics Port**:
```yaml
# If using non-standard port
[component]:
  service:
    annotations:
      prometheus.io/port: "9999"
```

---

## Pattern 21: Add Deployment Mode Validation

### Goal
Add validation rule for new configuration requirement

### File to Modify
`templates/validate.yaml`

**Example**: Validate new component requires object storage

```yaml
{{- $isUsingFilesystem := eq (include "loki.isUsingObjectStorage" .) "false" }}
{{- $newComponentEnabled := gt (int .Values.newComponent.replicas) 0 }}

{{- if and $isUsingFilesystem $newComponentEnabled }}
{{- fail "newComponent requires object storage backend (s3, gcs, azure, etc.)"}}
{{- end }}
```

**Example**: Validate configuration consistency

```yaml
{{- if and .Values.feature1.enabled (not .Values.feature2.enabled) }}
{{- fail "feature1 requires feature2 to be enabled"}}
{{- end }}
```

---

## Pattern 22: Override Image for Single Component

### Goal
Use different image for specific component

### Solution
Configure per-component image overrides

**values.yaml**:
```yaml
compactor:
  image:
    registry: custom-registry.io
    repository: custom/loki-compactor
    tag: v1.2.3
    digest: sha256:abc123...
```

**Template Support** (component-specific image helpers):
```go
{{- define "loki.compactorImage" -}}
{{- $dict := dict "loki" .Values.loki.image "service" .Values.compactor.image "global" .Values.global.image "defaultVersion" .Chart.AppVersion -}}
{{- include "loki.lokiImage" $dict -}}
{{- end }}
```

**Usage**:
```yaml
image: {{ include "loki.compactorImage" . }}
```

---

## Pattern 23: Add Custom Resource via extraObjects

### Goal
Deploy additional Kubernetes resources with Loki

### Solution
Use extraObjects in values.yaml

**values.yaml**:
```yaml
extraObjects:
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: '{{ include "loki.fullname" . }}-custom'
      namespace: '{{ include "loki.namespace" . }}'
    data:
      custom.conf: |
        key=value
  
  - apiVersion: v1
    kind: Service
    metadata:
      name: '{{ include "loki.fullname" . }}-custom-svc'
    spec:
      selector:
        app: custom
      ports:
        - port: 8080
  
  # Multiline string for templating field names
  - |
    apiVersion: v1
    kind: Secret
    metadata:
      name: {{ include "loki.fullname" . }}-tokens
    data:
      {{- range .Values.loki.tenants }}
      {{ .name }}: {{ .password | b64enc | quote }}
      {{- end }}
```

**Template**: `templates/extra-manifests.yaml` (already handles all formats)

---

## Pattern 24: Modify Resource Name Generation

### Goal
Customize resource names (e.g., add prefix/suffix)

### Solution A: Use nameOverride / fullnameOverride

**values.yaml**:
```yaml
nameOverride: custom-loki
fullnameOverride: my-custom-loki-installation
```

**Effect**:
- `nameOverride` affects `loki.name` helper
- `fullnameOverride` affects `loki.fullname` helper
- All resource names updated

### Solution B: Modify Helper Functions

**templates/_helpers.tpl** - Modify `loki.fullname`:

```yaml
{{- define "loki.fullname" -}}
{{- if .Values.fullnameOverride }}
{{- .Values.fullnameOverride | trunc 63 | trimSuffix "-" }}
{{- else }}
{{- $name := include "loki.name" . }}
{{- $prefix := .Values.globalNamePrefix | default "" -}}
{{- if contains $name .Release.Name }}
{{- printf "%s%s" $prefix .Release.Name | trunc 63 | trimSuffix "-" }}
{{- else }}
{{- printf "%s%s-%s" $prefix .Release.Name $name | trunc 63 | trimSuffix "-" }}
{{- end }}
{{- end }}
{{- end }}
```

**values.yaml**:
```yaml
globalNamePrefix: "prod-"
```

---

## Pattern 25: Add Node Affinity

### Goal
Schedule component on specific node pool

### Solution
Use nodeSelector or affinity

**Simple (nodeSelector)**:
```yaml
write:
  nodeSelector:
    node.kubernetes.io/instance-type: r5.2xlarge
    workload: logging
```

**Advanced (affinity)**:
```yaml
write:
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: node.kubernetes.io/instance-type
                operator: In
                values:
                  - r5.2xlarge
                  - r5.4xlarge
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          preference:
            matchExpressions:
              - key: workload
                operator: In
                values: [logging]
    
    # Keep pod anti-affinity
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/component: write
          topologyKey: kubernetes.io/hostname
```

---

## Pattern 26: Add Tolerations

### Goal
Schedule on nodes with taints

### Solution
Configure tolerations in values.yaml

```yaml
write:
  tolerations:
    - key: "workload"
      operator: "Equal"
      value: "logging"
      effect: "NoSchedule"
    
    - key: "node-role.kubernetes.io/logging"
      operator: "Exists"
      effect: "NoSchedule"
```

**Template** (already supports):
```yaml
{{- with .Values.write.tolerations }}
tolerations:
  {{- toYaml . | nindent 8 }}
{{- end }}
```

---

## Pattern 27: Modify PodDisruptionBudget

### Goal
Change PDB settings

### Solution
Configure maxUnavailable or minAvailable

**values.yaml**:
```yaml
distributor:
  maxUnavailable: 2  # Allow 2 pods down simultaneously
```

**OR** (modify template for minAvailable):

**templates/distributor/poddisruptionbudget-distributor.yaml**:
```yaml
spec:
  # Replace maxUnavailable with minAvailable
  minAvailable: {{ .Values.distributor.minAvailable }}
```

**values.yaml**:
```yaml
distributor:
  minAvailable: 1  # Always keep 1 pod available
```

---

## Pattern 28: Add Custom Validation

### Goal
Prevent invalid configuration combinations

### File to Modify
`templates/validate.yaml`

**Example**: Ensure feature combination is valid

```yaml
{{- if and .Values.feature1.enabled .Values.feature2.enabled }}
{{- if not .Values.feature3.enabled }}
{{- fail "feature1 and feature2 require feature3 to be enabled"}}
{{- end }}
{{- end }}
```

**Example**: Validate resource ranges

```yaml
{{- $writeReplicas := int .Values.write.replicas }}
{{- if and (gt $writeReplicas 0) (lt $writeReplicas 3) }}
{{- fail "write.replicas must be 0 or >= 3 for high availability"}}
{{- end }}
```

---

## Config Generation Flow

### Understanding the Flow

```
values.yaml
    ↓
templates/_helpers.tpl (storage/address helpers)
    ↓
templates/config.yaml (Loki config generation)
    ↓
ConfigMap or Secret (loki)
    ↓
Mounted in all pods at /etc/loki/config/config.yaml
    ↓
Loki process reads config
```

### Config Merge Order

1. **Start**: `loki.config` templated string
2. **Parse**: Convert to YAML object
3. **Merge**: `loki.structuredConfig` overwrites parsed config
4. **Template**: Apply `tpl` function for template expressions
5. **Output**: Final YAML string

**Code** (`templates/_helpers.tpl`):
```go
{{- define "loki.calculatedConfig" -}}
{{ tpl (mergeOverwrite (tpl .Values.loki.config . | fromYaml) .Values.loki.structuredConfig | toYaml) . }}
{{- end }}
```

**Usage** (`templates/config.yaml`):
```yaml
data:
  config.yaml: |
    {{ include "loki.calculatedConfig" . | nindent 4 }}
```

---

## Service Discovery Patterns

### Internal Component Discovery

**Template Pattern**:
```yaml
# In values or config
frontend_worker:
  scheduler_address: '{{ include "loki.querySchedulerAddress" . }}'
```

**Helper Expansion**:
```go
loki-query-scheduler.loki.svc.cluster.local:9095
```

### DNS Service Discovery (Headless Services)

**For StatefulSets**:
```yaml
server_address: 'dns+loki-index-gateway-headless.loki.svc.cluster.local:9095'
```

**For GRPC Load Balancing**:
```yaml
server_address: 'dns:///loki-distributor-headless.loki.svc.cluster.local:9095'
```

**Bloom Gateway (SRV)**:
```yaml
addresses: 'dnssrvnoa+_grpc._tcp.loki-bloom-gateway-headless.loki.svc.cluster.local'
```

### Service Address Helpers

All defined in `templates/_helpers.tpl`:

```go
{{ include "loki.compactorAddress" . }}
// Returns: loki-backend.ns.svc.cluster.local:9095
// Or: loki-compactor.ns.svc.cluster.local:9095 (if Distributed)

{{ include "loki.indexGatewayAddress" . }}
// Returns: dns+loki-backend-headless.ns.svc.cluster.local:9095
// Or: dns+loki-index-gateway-headless.ns.svc.cluster.local:9095

{{ include "loki.bloomGatewayAddresses" . }}
// Returns: dnssrvnoa+_grpc._tcp.loki-bloom-gateway-headless.ns.svc.cluster.local
```

---

## Volume Mount Patterns

### Config Mounts (Standard on All Components)

```yaml
volumeMounts:
  - name: config
    mountPath: /etc/loki/config
  - name: runtime-config
    mountPath: /etc/loki/runtime-config

volumes:
  - name: config
    {{- include "loki.configVolume" . | nindent 10 }}
    # Expands to configMap or secret
  - name: runtime-config
    configMap:
      name: {{ template "loki.name" . }}-runtime
```

### License Mount (Enterprise)

```yaml
{{- if .Values.enterprise.enabled }}
volumeMounts:
  - name: license
    mountPath: /etc/loki/license

volumes:
  - name: license
    secret:
    {{- if .Values.enterprise.useExternalLicense }}
      secretName: {{ .Values.enterprise.externalLicenseName }}
    {{- else }}
      secretName: enterprise-logs-license
    {{- end }}
{{- end }}
```

### Data Mounts (StatefulSets)

```yaml
volumeMounts:
  - name: data
    mountPath: /var/loki

# PVC (if enabled)
volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ReadWriteOnce]
      resources:
        requests:
          storage: 10Gi

# OR emptyDir
volumes:
  - name: data
    emptyDir: {}
```

---

## Debugging & Troubleshooting Modifications

### Technique 1: Template Rendering

**Render single template**:
```bash
helm template loki . \
  -f values.yaml \
  --show-only templates/write/statefulset-write.yaml
```

**Render all templates**:
```bash
helm template loki . -f values.yaml > rendered.yaml
```

**Check specific helper**:
```bash
helm template loki . -f values.yaml --show-only templates/config.yaml | grep -A20 "storage:"
```

### Technique 2: Dry-Run Validation

```bash
helm upgrade --install loki . \
  -f values.yaml \
  --dry-run \
  --debug \
  --namespace loki
```

**Benefits**:
- Validates against K8s API
- Shows exactly what would be applied
- Catches API compatibility issues

### Technique 3: Diff Before Upgrade

```bash
helm diff upgrade loki . \
  -f values.yaml \
  --namespace loki
```

**Requires**: helm-diff plugin
```bash
helm plugin install https://github.com/databus23/helm-diff
```

### Technique 4: Extract Generated Config

```bash
# Get ConfigMap
kubectl get configmap loki -n loki -o yaml > loki-config.yaml

# Decode if Secret
kubectl get secret loki -n loki -o jsonpath='{.data.config\.yaml}' | base64 -d > loki-config.yaml
```

**Compare with template**:
```bash
helm template loki . -f values.yaml --show-only templates/config.yaml > expected-config.yaml
diff expected-config.yaml loki-config.yaml
```

---

## Testing Modifications

### Unit Test Approach

**File**: `test/config_test.go`  
**Method**: Template rendering tests (currently disabled)

### Integration Test Approach

**Directory**: `test/integration/`

**Example**: `test/integration/single-binary/test-plan.yaml`

```yaml
apiVersion: helm-chart-toolbox.grafana.com/v1
kind: TestPlan
name: single-binary
subject:
  releaseName: loki
  namespace: loki
  path: ../../..
  valuesFile: ../../../ci/default-single-binary-values.yaml
  extraArgs:
    - --dependency-update

cluster:
  type: kind

tests:
  - type: kubernetes-objects-test
    values:
      checks:
        - kind: StatefulSet
          name: loki
          namespace: loki
```

### Manual Testing

**1. Create test cluster**:
```bash
kind create cluster --name loki-test
```

**2. Install with modifications**:
```bash
cd production/helm/loki
helm install loki . -f my-test-values.yaml --namespace loki --create-namespace
```

**3. Validate**:
```bash
kubectl get all -n loki
kubectl logs -l app.kubernetes.io/name=loki -n loki
```

**4. Test functionality**:
```bash
# Port-forward
kubectl port-forward svc/loki-gateway 3100:80 -n loki

# Push logs
curl -H "Content-Type: application/json" \
  -XPOST http://localhost:3100/loki/api/v1/push \
  --data-raw '{"streams": [{"stream": {"job": "test"}, "values": [["'$(date +%s)000000000'", "test message"]]}]}'

# Query logs
curl "http://localhost:3100/loki/api/v1/query_range" \
  --data-urlencode 'query={job="test"}' | jq
```

**5. Cleanup**:
```bash
helm uninstall loki -n loki
kind delete cluster --name loki-test
```

---

## Common Modification Workflows

### Workflow 1: Add Feature to Existing Component

**Steps**:
1. Update `values.yaml` with new configuration options
2. Check if template changes needed (usually not if using extra*)
3. Test rendering: `helm template loki . -f values.yaml`
4. Apply to test cluster
5. Validate feature works
6. Update CHANGELOG.md
7. Update README.md if user-facing
8. Create PR

**Example**: Add custom metrics port to distributor

**values.yaml**:
```yaml
distributor:
  customMetricsPort: 9999
  extraArgs:
    - -custom.metrics.port=9999
  
  # Add container port via extraContainers
  extraContainers:
    - name: metrics-proxy
      image: nginx:alpine
      ports:
        - name: custom-metrics
          containerPort: 9999
```

### Workflow 2: Support New Kubernetes Feature

**Example**: Add support for K8s 1.30 traffic distribution

**1. Check K8s version**:
```yaml
{{- if semverCompare ">=1.30-0" (include "loki.kubeVersion" .) }}
```

**2. Update service template**:

**templates/distributor/service-distributor.yaml**:
```yaml
spec:
  type: {{ .Values.distributor.serviceType }}
  {{- if and (semverCompare ">=1.30-0" (include "loki.kubeVersion" .)) .Values.distributor.trafficDistribution }}
  trafficDistribution: {{ .Values.distributor.trafficDistribution }}
  {{- end }}
```

**3. Add to values.yaml**:
```yaml
distributor:
  trafficDistribution: ""  # PreferClose or empty
```

**4. Document in values comments**

### Workflow 3: Update Chart Dependencies

**1. Update Chart.yaml**:
```yaml
dependencies:
  - name: minio
    version: 5.5.0  # Updated version
    repository: https://charts.min.io/
    condition: minio.enabled
```

**2. Update dependencies**:
```bash
helm dependency update production/helm/loki/
```

**3. Test compatibility**:
```bash
helm template loki production/helm/loki/ -f values.yaml
```

**4. Update Chart.lock** (auto-generated)

**5. Update CHANGELOG.md**:
```markdown
- [CHANGE] Updated MinIO subchart to 5.5.0 [#XXXXX](...)
```

---

## Helper Function Development

### Creating New Helper

**Purpose**: Reusable template logic

**Location**: `templates/_helpers.tpl` or `templates/[component]/_helpers-[component].tpl`

**Pattern**:
```yaml
{{/*
Description of helper
Params: (if using dict)
  ctx = . context
  param1 = description
Returns: description
*/}}
{{- define "loki.helperName" -}}
{{- $value := "default" -}}
{{- if .condition -}}
{{- $value = "conditional-value" -}}
{{- end -}}
{{- printf "%s" $value }}
{{- end }}
```

**With Parameters (dict)**:
```yaml
{{- define "loki.resourceName" -}}
{{- $resourceName := include "loki.fullname" .ctx -}}
{{- if .component -}}{{- $resourceName = printf "%s-%s" $resourceName .component -}}{{- end -}}
{{- if .suffix -}}{{- $resourceName = printf "%s-%s" $resourceName .suffix -}}{{- end -}}
{{- $resourceName -}}
{{- end -}}
```

**Usage**:
```yaml
{{ include "loki.resourceName" (dict "ctx" $ "component" "chunks-cache" "suffix" "l2") }}
```

---

## Conditional Rendering Best Practices

### Multi-Condition Checks

```yaml
{{- $isDistributed := eq (include "loki.deployment.isDistributed" .) "true" -}}
{{- $isEnterpriseEnabled := .Values.enterprise.enabled -}}
{{- $hasReplicas := gt (int .Values.[component].replicas) 0 -}}

{{- if and $isDistributed $isEnterpriseEnabled $hasReplicas }}
# Render only if Distributed + Enterprise + replicas > 0
{{- end }}
```

### Default Value Patterns

**Coalesce** (first non-empty):
```yaml
{{- $pcn := coalesce .Values.global.priorityClassName .Values.[component].priorityClassName -}}
```

**Default** (fallback):
```yaml
{{- $value := .Values.[component].setting | default .Values.loki.defaultSetting -}}
```

**Ternary**:
```yaml
{{- $name := ternary "enterprise-logs" "loki" .Values.enterprise.enabled }}
```

---

## Label & Annotation Management

### Standard Labels

All resources include:
```yaml
labels:
  helm.sh/chart: loki-6.38.0
  app.kubernetes.io/name: loki
  app.kubernetes.io/instance: release-name
  app.kubernetes.io/version: "3.5.3"
  app.kubernetes.io/component: [component]
```

**Generated By**: `loki.labels` helper

### Selector Labels

```yaml
selectorLabels:
  app.kubernetes.io/name: loki
  app.kubernetes.io/instance: release-name
  app.kubernetes.io/component: [component]
```

**Generated By**: `loki.selectorLabels` + component helpers

### Merging Custom Labels

**Template Pattern**:
```yaml
labels:
  {{- include "loki.[component]Labels" . | nindent 8 }}
  {{- with merge (dict) .Values.loki.podLabels .Values.[component].podLabels }}
  {{- tpl (toYaml .) $ | nindent 8 }}
  {{- end }}
```

**Merge Order**: Component labels < Global podLabels < Component podLabels

---

## Checksum Annotation Pattern

### Purpose
Force pod restart when config/secrets change

### Pattern

**Template**:
```yaml
annotations:
  checksum/config: {{ include "loki.configMapOrSecretContentHash" (dict "ctx" . "name" "/config.yaml") }}
```

**Helper** (`templates/_helpers.tpl`):
```go
{{- define "loki.configMapOrSecretContentHash" -}}
{{ get (include (print .ctx.Template.BasePath .name) .ctx | fromYaml) "data" | toYaml | sha256sum }}
{{- end }}
```

**Effect**:
- Calculates SHA256 of ConfigMap/Secret data
- Changes when config changes
- Triggers rolling update

**Example**: Add checksum for custom config

```yaml
annotations:
  checksum/config: {{ include "loki.config.checksum" . }}
  checksum/custom: {{ include (print $.Template.BasePath "/custom-configmap.yaml") . | fromYaml | get "data" | toYaml | sha256sum }}
```

---

## Working with Helm Functions

### Common Functions Used

**String Functions**:
- `printf` - Format string
- `trim`, `trimSuffix`, `trimPrefix` - Trim strings
- `lower`, `upper` - Case conversion
- `replace` - String replacement
- `trunc` - Truncate to length

**Conversion Functions**:
- `toYaml`, `fromYaml` - YAML marshaling
- `toJson`, `fromJson` - JSON marshaling
- `toString`, `toInt` - Type conversion
- `b64enc`, `b64dec` - Base64 encoding

**List Functions**:
- `concat` - Concatenate lists
- `uniq` - Remove duplicates
- `has` - Check if list contains value

**Logic Functions**:
- `and`, `or`, `not` - Boolean logic
- `eq`, `ne` - Equality
- `lt`, `gt`, `le`, `ge` - Comparison
- `default` - Default value
- `coalesce` - First non-empty
- `ternary` - If-then-else

**Template Functions**:
- `tpl` - Render template string
- `include` - Include named template
- `toYaml` | `nindent` - Indent YAML

**Loki Helpers**:
- `merge` - Deep merge maps
- `mergeOverwrite` - Merge with overwrite
- `omit` - Remove keys from map
- `dig` - Safe nested access
- `semverCompare` - Version comparison
- `kindIs` - Type checking

---

## Advanced Patterns

### Pattern: Conditional Service Creation

**Goal**: Only create service if certain conditions met

**Template**: `templates/[component]/service-[component].yaml`

```yaml
{{- $isDistributed := eq (include "loki.deployment.isDistributed" .) "true" -}}
{{- $isEnabled := .Values.[component].enabled -}}
{{- $hasReplicas := gt (int .Values.[component].replicas) 0 -}}
{{- if and $isDistributed $isEnabled $hasReplicas }}
apiVersion: v1
kind: Service
# ...
{{- end }}
```

### Pattern: Dynamic Resource Name

**Goal**: Support multiple instances of same component type

**values.yaml**:
```yaml
customComponents:
  - name: writer-high-priority
    targetModule: write
    replicas: 3
  - name: writer-low-priority
    targetModule: write
    replicas: 2
```

**Template**:
```yaml
{{- range .Values.customComponents }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "loki.fullname" $ }}-{{ .name }}
spec:
  replicas: {{ .replicas }}
  # ...
{{- end }}
```

### Pattern: Multi-Cluster Service

**Goal**: Service that spans clusters

**values.yaml**:
```yaml
[component]:
  service:
    annotations:
      service.kubernetes.io/topology-mode: auto
      service.kubernetes.io/topology-aware-hints: auto
```

**K8s 1.21+**: Enables topology-aware routing

---

## Migration Helpers

### Migrating Custom Templates to New Version

**Steps**:
1. **Diff upstream changes**:
```bash
git diff v6.37.0..v6.38.0 production/helm/loki/templates/
```

2. **Identify conflicts** with custom changes

3. **Merge strategies**:
   - **Helper functions**: Usually safe to keep upstream
   - **Resource templates**: Merge annotations/labels carefully
   - **Config generation**: Prefer upstream, re-apply custom sections

4. **Test merged templates**:
```bash
helm template loki . -f values.yaml --debug
```

### Preserving Custom Modifications

**Strategy 1**: Use values.yaml only (no template changes)
- Leverage extra*, extraObjects
- Safest for upgrades

**Strategy 2**: Fork and maintain
- Create fork of chart
- Cherry-pick upstream updates
- More maintenance burden

**Strategy 3**: Wrapper chart
```yaml
# Chart.yaml
dependencies:
  - name: loki
    version: 6.38.0
    repository: https://grafana.github.io/helm-charts
```

```yaml
# values.yaml
loki:
  # Overrides for subchart
  write:
    extraEnv:
      - name: CUSTOM
        value: value
```

---

## Performance Optimization Modifications

### Optimize Config Checksum

**Issue**: Config checksum changes on every render

**Solution**: Use stable hash or disable

**Template** (remove checksum):
```yaml
annotations:
  # checksum/config: {{ include "loki.config.checksum" . }}  # REMOVED
  {{- with .Values.[component].podAnnotations }}
  {{- toYaml . | nindent 8 }}
  {{- end }}
```

**Trade-off**: Pods won't auto-restart on config change

### Reduce Template Size

**Issue**: Large values.yaml, slow rendering

**Solution**: Split values into multiple files

```bash
helm install loki . \
  -f values-base.yaml \
  -f values-storage.yaml \
  -f values-monitoring.yaml \
  -n loki
```

---

## Security Hardening Modifications

### Add Pod Security Standards

**values.yaml**:
```yaml
loki:
  podLabels:
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted
```

### Add seccomp Profile

```yaml
loki:
  podSecurityContext:
    seccompProfile:
      type: RuntimeDefault
  
  containerSecurityContext:
    seccompProfile:
      type: RuntimeDefault
```

### Disable Auto-Mount Service Account Token

```yaml
serviceAccount:
  automountServiceAccountToken: false
```

**Ensure components don't need K8s API access**

---

## Documentation Update Requirements

When modifying templates, update:

**1. CHANGELOG.md** - Add entry in Unreleased section

**2. CONTRIBUTING.md** - If changing contribution process

**3. README.md** - Run `make helm-docs` to regenerate

**4. Commit Message** - Follow conventional commits:
```
feat(helm): add support for custom metrics port
fix(helm): correct service selector for zone-aware ingesters
docs(helm): update configuration examples
chore(helm): update dependencies
```

---

## Common Pitfalls & Solutions

### Pitfall 1: Forgot to Zero Other Deployment Modes

**Symptom**: Multiple deployment modes active, validation errors

**Solution**: Always zero out unused modes
```yaml
deploymentMode: Distributed
# Zero out others
singleBinary:
  replicas: 0
backend:
  replicas: 0
read:
  replicas: 0
write:
  replicas: 0
```

### Pitfall 2: Template Variables Not Scoped

**Issue**: Using `.Values` in range loop loses context

**Wrong**:
```yaml
{{- range .Values.items }}
  value: {{ .Values.global.setting }}  # .Values doesn't exist here
{{- end }}
```

**Correct**:
```yaml
{{- $global := .Values.global.setting }}
{{- range .Values.items }}
  value: {{ $global }}
{{- end }}
```

**OR**:
```yaml
{{- range .Values.items }}
  value: {{ $.Values.global.setting }}  # Use $ for root context
{{- end }}
```

### Pitfall 3: Indentation Errors

**Issue**: YAML indentation wrong in template output

**Tool**: Use `nindent` instead of manual spaces

**Wrong**:
```yaml
{{- toYaml .Values.data | indent 4 }}  # Doesn't indent first line
```

**Correct**:
```yaml
{{- toYaml .Values.data | nindent 4 }}  # Indents all lines
```

### Pitfall 4: Missing Conditional for Optional Features

**Issue**: Template renders invalid YAML when feature disabled

**Example**:
```yaml
# Wrong
volumeMounts:
  - name: custom
    mountPath: {{ .Values.feature.mountPath }}  # Empty if feature disabled
```

**Correct**:
```yaml
volumeMounts:
  {{- if .Values.feature.enabled }}
  - name: custom
    mountPath: {{ .Values.feature.mountPath }}
  {{- end }}
```

### Pitfall 5: Not Using tpl for User Values

**Issue**: Template expressions in values not rendered

**Example**:
```yaml
# values.yaml
affinity:
  nodeAffinity:
    # ...
      values:
        - '{{ .Values.nodeType }}'  # Won't work without tpl
```

**Template Must Use tpl**:
```yaml
{{- with .Values.affinity }}
affinity:
  {{- tpl ( . | toYaml) $ | nindent 8 }}
{{- end }}
```

---

## Modification Checklist

Before submitting template changes:

- [ ] Changes tested with `helm template`
- [ ] Changes tested with `helm install --dry-run`
- [ ] All deployment modes tested (SingleBinary, SimpleScalable, Distributed)
- [ ] Backwards compatibility considered
- [ ] values.yaml updated with new options
- [ ] values.yaml comments added/updated
- [ ] CHANGELOG.md entry added
- [ ] README.md regenerated if needed (`make helm-docs`)
- [ ] Conventional commit message written
- [ ] No hardcoded values (use values.yaml)
- [ ] Proper indentation (use nindent)
- [ ] Template expressions in values use tpl
- [ ] Helper functions documented
- [ ] Validation added to validate.yaml if needed
- [ ] ServiceMonitor compatible (correct labels)
- [ ] Security contexts preserved
- [ ] RBAC permissions sufficient
- [ ] Network policies updated if needed

---

## Quick Command Reference

### Template Development

```bash
# Render all templates
helm template loki production/helm/loki/ -f values.yaml

# Render specific template
helm template loki production/helm/loki/ -f values.yaml \
  --show-only templates/write/statefulset-write.yaml

# Render with debug (see values, computed values)
helm template loki production/helm/loki/ -f values.yaml --debug

# Lint templates
helm lint production/helm/loki/ -f values.yaml

# Validate against cluster
helm install loki production/helm/loki/ -f values.yaml --dry-run --debug
```

### Testing

```bash
# Install to test cluster
cd production/helm/loki
make install-distributed  # or install-single-binary

# Update existing
make update

# Test specific scenario
helm template --values scenarios/simple-thanos-values.yaml

# Diff changes
helm diff upgrade loki . -f values.yaml
```

### Documentation

```bash
# Regenerate README.md
cd production/helm/loki
make helm-docs  # Run from repo root (requires helm-docs tool)

# Validate YAML syntax
cd src
yamllint -c .yamllint.yaml .
```

---

## Next Steps

- Review **[Architecture](./loki-helm-architecture.mdc)** for component understanding
- Check **[Templates Reference](./loki-helm-templates.mdc)** for template details
- See **[Examples](./loki-helm-examples.mdc)** for configuration patterns
- Read **[Values Guide](./loki-helm-values.mdc)** for configuration options
