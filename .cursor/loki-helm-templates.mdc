# Loki Helm Chart - Complete Template Files Reference

## Overview

This document provides comprehensive documentation for all 161 template files across 27 component directories in the Loki Helm chart.

## Template Directory Structure

```
templates/
├── _helpers.tpl                    # Global helper functions (1248 lines)
├── config.yaml                     # Main Loki configuration
├── validate.yaml                   # Deployment validation
├── extra-manifests.yaml            # Custom manifest injection
├── NOTES.txt                       # Post-install notes
├── runtime-configmap.yaml          # Runtime configuration
├── secret-license.yaml             # Enterprise license
├── serviceaccount.yaml             # Main service account
├── role.yaml                       # RBAC Role
├── rolebinding.yaml                # RBAC RoleBinding
├── podsecuritypolicy.yaml          # PSP
├── securitycontextconstraints.yaml # OpenShift SCC
├── service-memberlist.yaml         # Memberlist gossip
├── networkpolicy.yaml              # K8s NetworkPolicy
├── ciliumnetworkpolicy.yaml        # Cilium NetworkPolicy
├── ingress.yaml                    # Direct ingress (no gateway)
└── [27 component directories]/     # Component-specific templates
```

---

## Core Templates

### templates/_helpers.tpl

**Purpose**: Global helper functions and template macros  
**Lines**: 1248  
**Type**: Template library  
**Active In**: All deployments

**Key Helper Functions**:

#### Label & Naming Helpers
- `loki.validLabelValue` - Sanitize label values per K8s spec
- `loki.name` - Chart name (enterprise-logs or loki)
- `loki.namespace` - Namespace with override support
- `loki.fullname` - Full resource name
- `loki.singleBinaryFullname` - Single binary name
- `loki.chart` - Chart name and version
- `loki.labels` - Common labels
- `loki.selectorLabels` - Selector labels
- `loki.clusterLabel` - Cluster label for rules/alerts

#### Resource Naming
- `loki.resourceName` - Generic resource naming (supports zones, suffixes)
  - Params: ctx, component, rolloutZoneName, suffix
  - Validates 253 character K8s limit

#### Deployment Mode Detection
```go
loki.deployment.isSingleBinary    // Returns "true" if SingleBinary mode
loki.deployment.isScalable        // Returns "true" if SimpleScalable mode
loki.deployment.isDistributed     // Returns "true" if Distributed mode
```

#### Storage Configuration Helpers
- `loki.commonStorageConfig` - Generate storage config for chunks
- `loki.rulerStorageConfig` - Generate ruler storage config
- `loki.lokiStorageConfig` - Generic storage config builder
- `loki.lokiStorageConfig.s3` - S3-specific config
- `loki.lokiStorageConfig.gcs` - GCS-specific config
- `loki.lokiStorageConfig.azure` - Azure-specific config
- `enterprise-logs.adminAPIStorageConfig` - Admin API storage (GEL)
- `loki.thanosStorageConfig` - Thanos object store config
- `loki.rulerThanosStorageConfig` - Ruler Thanos config

#### Image Helpers
- `loki.baseImage` - Base image reference builder
- `loki.lokiImage` - Loki OSS image
- `loki.enterpriseImage` - GEL image
- `loki.image` - Auto-select OSS or GEL
- `loki.memcachedImage` - Memcached image
- `loki.memcachedExporterImage` - Memcached exporter image
- `loki.gatewayImage` - Nginx gateway image

#### Service Address Helpers
```go
loki.minio                    // MinIO endpoint
loki.memberlist               // Memberlist service name
loki.host                     // Public Loki host
loki.address                  // Full HTTP address
loki.compactorAddress         // Compactor GRPC address
loki.querySchedulerAddress    // Scheduler address (empty if not distributed)
loki.querierAddress           // Querier HTTP address
loki.indexGatewayAddress      // Index gateway with dns+ prefix
loki.bloomPlannerAddress      // Bloom planner address
loki.bloomGatewayAddresses    // Bloom gateway SRV addresses
```

#### Ingress Helpers
- `loki.ingress.apiVersion` - Detect ingress API version
- `loki.ingress.isStable` - Check if networking.k8s.io/v1
- `loki.ingress.supportsIngressClassName` - Check className support
- `loki.ingress.supportsPathType` - Check pathType support
- `loki.ingress.servicePaths` - Generate service paths by deployment mode
- `loki.ingress.distributedServicePaths` - Distributed mode paths
- `loki.ingress.scalableServicePaths` - SimpleScalable paths
- `loki.ingress.legacyScalableServicePaths` - Legacy 2-target paths
- `loki.ingress.singleBinaryServicePaths` - SingleBinary paths
- `loki.ingress.servicePath` - Path helper (handles API version differences)

#### Nginx Gateway Configuration
- `loki.nginxFile` - Complete nginx.conf generation (370 lines)
  - Configures worker processes, error logging
  - HTTP block with client limits, timeouts
  - Server block with listen ports, SSL
  - Location blocks for all Loki endpoints
  - Backend URL calculation based on deployment mode
  - Support for custom URLs via nginxConfig.custom*Url

#### API Version Helpers
- `loki.kubeVersion` - Get Kubernetes version with override
- `loki.pdb.apiVersion` - PodDisruptionBudget API version (policy/v1 or v1beta1)
- `loki.hpa.apiVersion` - HPA API version (autoscaling/v2, v2beta2, or v2beta1)

#### Utility Helpers
- `loki.configVolume` - ConfigMap or Secret volume source
- `loki.enableServiceLinks` - Enable/disable service links
- `loki.calculatedConfig` - Merge config with structuredConfig
- `loki.config.checksum` - Config checksum annotation
- `loki.configMapOrSecretContentHash` - Calculate content hash
- `loki.isUsingObjectStorage` - Detect object storage (s3, gcs, azure, etc.)
- `loki.testSchemaObjectStore` - Test schema object store type
- `loki.memcached.suffix` - Memcached resource suffix

#### Enterprise Helpers
- `enterprise-logs.adminTokenSecret` - Admin token secret name
- `enterprise-logs.provisionedSecretPrefix` - Provisioned tenant secret prefix
- `enterprise-logs.selfMonitoringTenantSecret` - Self-monitoring secret

#### Monitoring Helpers
- `loki.logsInstanceClient` - LogsInstance client config
- `loki.ruleGroupToYaml` - Convert rule group to YAML

---

### templates/config.yaml

**Purpose**: Generate main Loki configuration (ConfigMap or Secret)  
**Active In**: All deployments  
**Deployment Type**: ConfigMap (default) or Secret

**Key Sections Generated**:
1. Enterprise config (if enabled) or auth_enabled
2. Server config (HTTP/GRPC ports)
3. Pattern ingester config (if enabled)
4. Memberlist config (join_members)
5. Ingester config
6. Ingester client config
7. Block builder config
8. Common config (path_prefix, replication_factor, compactor address)
9. Limits config
10. Runtime config file reference
11. Chunk store config (with memcached if enabled)
12. Schema config or test schema
13. Ruler config (if enabled)
14. Ruler storage (if Thanos + ruler enabled)
15. Table manager (if legacy retention enabled)
16. Query range config (with results cache if enabled)
17. Storage config (with Thanos if enabled)
18. Query scheduler config
19. Compactor config
20. Compactor GRPC client config
21. Analytics config
22. UI config (if enabled)
23. Querier config
24. Index gateway config
25. Frontend config (scheduler address, tail proxy)
26. Frontend worker config (scheduler address)
27. Distributor config
28. Tracing config
29. Bloom build config
30. Bloom gateway config
31. Operational config

**Conditional Logic**:
```yaml
{{- if .Values.enterprise.enabled}}
  {{- tpl .Values.enterprise.config . }}
{{- else }}
  auth_enabled: {{ .Values.loki.auth_enabled }}
{{- end }}
```

**Storage Config Injection**:
```yaml
common:
  storage:
    {{- include "loki.commonStorageConfig" . | nindent 4}}
```

**Uses Helpers**: `loki.commonStorageConfig`, `loki.rulerConfig`, `loki.rulerThanosStorageConfig`

---

### templates/validate.yaml

**Purpose**: Validation rules preventing invalid deployment configurations  
**Active In**: All deployments (fails helm install/upgrade if invalid)  
**Type**: Template with no output (just fails)

**Validations**:

1. **Reject top-level config**:
```yaml
{{- if .Values.config }}
{{- fail "Top level 'config' is not allowed..." }}
{{- end }}
```

2. **Helm test requires canary**:
```yaml
{{- if and (not .Values.lokiCanary.enabled) .Values.test.enabled }}
{{- fail "Helm test requires the Loki Canary to be enabled"}}
{{- end }}
```

3. **SingleBinary with filesystem**: replicas must be 1
```yaml
{{- if and $isUsingFilesystem (gt $singleBinaryReplicas 1) }}
{{- fail "Cannot run more than 1 Single Binary replica without an object storage backend."}}
{{- end }}
```

4. **Scalable/Distributed requires object storage**:
```yaml
{{- if and $isUsingFilesystem (and (eq $singleBinaryReplicas 0) (or $atLeastOneScalableReplica $atLeastOneDistributedReplica)) }}
{{- fail "Cannot run scalable targets (backend, read, write) or distributed targets without an object storage backend."}}
{{- end }}
```

5. **Mixed modes require explicit transition mode**

6. **Schema config required**:
```yaml
{{- if and (empty .Values.loki.schemaConfig) (empty .Values.loki.structuredConfig.schema_config) (not .Values.loki.useTestSchema) }}
{{- fail "You must provide a schema_config..."}}
{{- end }}
```

7. **Bucket names validation** (if object storage):
- chunks bucket required
- ruler bucket required if ruler.enabled and not local storage
- admin bucket required if enterprise.adminApi.enabled

8. **Enterprise provisioner requires admin token**:
```yaml
{{- if and .Values.enterprise.enabled .Values.enterprise.provisioner.enabled }}
{{- if not .Values.enterprise.adminToken.secret }}
{{- fail "enterprise.adminToken.secret must be set..."}}
{{- end }}
{{- end }}
```

---

### templates/runtime-configmap.yaml

**Purpose**: Runtime-reloadable configuration  
**Active In**: All deployments  
**Type**: ConfigMap

**Content**:
```yaml
data:
  runtime-config.yaml: |
    {{- tpl (toYaml .Values.loki.runtimeConfig) . | nindent 4 }}
```

**Mounted At**: `/etc/loki/runtime-config/runtime-config.yaml`

**Common Use Cases**:
- Per-tenant limits overrides
- Ingester stream limits
- Query limits

**Example Values**:
```yaml
loki:
  runtimeConfig:
    ingester:
      max_chunk_age: 2h
    overrides:
      tenant1:
        ingestion_rate_mb: 10
```

---

### templates/serviceaccount.yaml

**Purpose**: Main service account for Loki components  
**Active In**: If serviceAccount.create=true (default)  
**Type**: ServiceAccount

**Features**:
- Annotations support (e.g., AWS IRSA, GCP Workload Identity)
- Image pull secrets
- Auto-mount token control

**Template Logic**:
```yaml
{{ if .Values.serviceAccount.create }}
  name: {{ include "loki.serviceAccountName" . }}
  annotations:
    {{- tpl (toYaml .Values.serviceAccount.annotations | nindent 4) $ }}
{{- end }}
```

---

### templates/secret-license.yaml

**Purpose**: GEL license secret  
**Active In**: enterprise.enabled=true AND useExternalLicense=false  
**Type**: Secret

**Content**:
```yaml
data:
  license.jwt: {{ .Values.enterprise.license.contents | b64enc }}
```

**Referenced By**: All enterprise components mount this as volume at `/etc/loki/license`

---

### templates/service-memberlist.yaml

**Purpose**: Headless service for memberlist gossip protocol  
**Active In**: All multi-component deployments  
**Type**: Service (ClusterIP: None)

**Configuration**:
```yaml
spec:
  clusterIP: None
  ports:
    - name: tcp
      port: 7946
      targetPort: http-memberlist
  publishNotReadyAddresses: {{ .Values.memberlist.service.publishNotReadyAddresses }}
  selector:
    app.kubernetes.io/part-of: memberlist  # Key selector
```

**Components Joining**: All pods with `app.kubernetes.io/part-of: memberlist` label

---

### templates/extra-manifests.yaml

**Purpose**: Inject additional custom Kubernetes manifests  
**Active In**: If extraObjects defined  
**Type**: Any

**Supported Formats**:
1. List of objects
2. Map of objects (keys ignored)
3. Multiline strings (for templating field names)

**Template Logic**:
```yaml
{{- range $extraObjects }}
  {{- if kindIs "map" . }}
    {{- tpl (toYaml .) $ | nindent 0 }}
  {{- else if kindIs "string" . }}
    {{- tpl . $ | nindent 0 }}
  {{- end }}
{{- end }}
```

**Example Usage**:
```yaml
extraObjects:
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: '{{ include "loki.fullname" . }}-custom'
    data:
      key: value
```

---

### templates/ingress.yaml

**Purpose**: Direct Loki ingress (alternative to gateway)  
**Active In**: ingress.enabled=true  
**Type**: Ingress

**Features**:
- IngressClassName support (K8s 1.18+)
- TLS configuration
- Multi-host support with templating
- Path routing based on deployment mode
- Uses `loki.ingress.servicePaths` helper to route to correct services

**Deployment Mode Path Routing**:
- Calls `loki.ingress.servicePaths` which delegates to:
  - `loki.ingress.singleBinaryServicePaths` (SingleBinary)
  - `loki.ingress.scalableServicePaths` (SimpleScalable 3-target)
  - `loki.ingress.legacyScalableServicePaths` (SimpleScalable 2-target)
  - `loki.ingress.distributedServicePaths` (Distributed)

**Example Paths** (Distributed):
```yaml
paths:
  distributor:
    - /api/prom/push
    - /loki/api/v1/push
  queryFrontend:
    - /loki/api/v1/query
    - /loki/api/v1/query_range
  ruler:
    - /loki/api/v1/rules
  compactor:
    - /loki/api/v1/delete
```

---

### templates/networkpolicy.yaml

**Purpose**: Kubernetes NetworkPolicy resources  
**Active In**: networkPolicy.enabled=true AND networkPolicy.flavor=kubernetes  
**Type**: NetworkPolicy

**Policies Created**:

1. **namespace-only**: Allows all ingress/egress within namespace
2. **egress-dns**: Allows DNS queries
3. **ingress**: Allows ingress to gateway/read/write on http-metrics port
4. **ingress-metrics**: Allows metrics scraping from configured namespaces
5. **egress-alertmanager**: Allows backend → alertmanager
6. **egress-external-storage**: Allows → object storage on specified ports/CIDRs
7. **egress-discovery**: Allows → discovery service

**Configuration**:
```yaml
networkPolicy:
  enabled: true
  flavor: kubernetes
  ingress:
    namespaceSelector:
      matchLabels:
        name: ingress-namespace
  metrics:
    namespaceSelector:
      matchLabels:
        name: monitoring
```

---

### templates/ciliumnetworkpolicy.yaml

**Purpose**: Cilium NetworkPolicy resources (more expressive than K8s)  
**Active In**: networkPolicy.enabled=true AND networkPolicy.flavor=cilium  
**Type**: CiliumNetworkPolicy

**Additional Features**:
- `egressWorld.enabled` - Allow write/read/backend → world
- `egressKubeApiserver.enabled` - Allow backend → kube-apiserver
- Supports toPorts with protocol specification
- Entity selectors (world, kube-apiserver)

---

### templates/podsecuritypolicy.yaml

**Purpose**: Pod Security Policy (deprecated K8s 1.25+)  
**Active In**: rbac.pspEnabled=true  
**Type**: PodSecurityPolicy

**Restrictions**:
- No privileged containers
- No privilege escalation
- Must run as non-root
- Drop ALL capabilities
- ReadOnlyRootFilesystem
- Limited volume types

---

### templates/securitycontextconstraints.yaml

**Purpose**: OpenShift Security Context Constraints  
**Active In**: rbac.sccEnabled=true  
**Type**: SecurityContextConstraints

**Features**:
- `allowHostDirVolumePlugin: {{ .Values.rbac.sccAllowHostDirVolumePlugin }}`
- Configurable hostPath volume support

---

### templates/role.yaml & templates/rolebinding.yaml

**Purpose**: Namespaced RBAC for PSP, SCC, or sidecar rules  
**Active In**: PSP/SCC enabled OR sidecar.rules.enabled with rbac.namespaced  
**Type**: Role, RoleBinding

**Permissions**:
- PSP: use podsecuritypolicies
- SCC: use securitycontextconstraints
- Sidecar: get/watch/list configmaps and secrets

---

## Component Templates by Directory

### admin-api/ (3 files) - Enterprise Only

**Active In**: Distributed + enterprise.enabled + enterprise.adminApi.enabled

#### templates/admin-api/_helpers.yaml
- `enterprise-logs.adminApiFullname`
- `enterprise-logs.adminApiLabels`
- `enterprise-logs.adminApiSelectorLabels`

#### templates/admin-api/deployment-admin-api.yaml
**Type**: Deployment  
**Args**: `-target=admin-api`, `-config.file=/etc/loki/config/config.yaml`  
**MinIO Args**: Auto-added if minio.enabled (backend-type, s3 config)  
**Ports**: 3100 (http-metrics), 9095 (grpc), 7946 (memberlist)  
**Volumes**: config, license, storage (emptyDir)  
**Probes**: Configurable liveness/readiness/startup

#### templates/admin-api/service-admin-api.yaml
**Type**: Service (ClusterIP)  
**Ports**: 3100 (http-metrics), 9095 (grpc)

---

### backend/ (8 files) - SimpleScalable 3-Target Mode

**Active In**: SimpleScalable + read.legacyReadTarget=false

#### templates/backend/_helpers-backend.tpl
- `loki.backendFullname` → `loki-backend`
- `loki.backendLabels`
- `loki.backendSelectorLabels`
- `loki.backendPriorityClassName`

#### templates/backend/statefulset-backend.yaml
**Type**: StatefulSet  
**Args**: `-target=backend`, `-legacy-read-mode=false`  
**Replicas**: 0 if SingleBinary mode, otherwise backend.replicas  
**Ports**: http-metrics, grpc, http-memberlist  
**Service Name**: `loki-backend-headless`  
**Volumes**: tmp (emptyDir), data (PVC or emptyDir), config, runtime-config, license (if enterprise)  
**Volume Claims**: data PVC if persistence.volumeClaimsEnabled  
**PVC Retention**: Auto-delete if enableStatefulSetAutoDeletePVC  
**Sidecar**: loki-sc-rules container if sidecar.rules.enabled  
**PodManagementPolicy**: backend.podManagementPolicy (default: Parallel)

#### templates/backend/service-backend.yaml
**Type**: Service (ClusterIP)  
**Ports**: http-metrics (3100), grpc (9095)

#### templates/backend/service-backend-headless.yaml
**Type**: Service (ClusterIP: None)  
**Purpose**: StatefulSet stable network identity  
**Labels**: `variant: headless`, `prometheus.io/service-monitor: "false"`

#### templates/backend/query-scheduler-discovery.yaml
**Type**: Service (ClusterIP: None)  
**Purpose**: Query scheduler service discovery (for querier/frontend to find scheduler)  
**Name**: `loki-query-scheduler-discovery`  
**Selectors**: Uses backend selector labels  
**publishNotReadyAddresses**: true

#### templates/backend/hpa.yaml
**Type**: HorizontalPodAutoscaler (v2 or v2beta1)  
**Active If**: SimpleScalable + non-legacy + autoscaling.enabled  
**Target**: StatefulSet backend  
**Metrics**: CPU and/or memory utilization  
**Behavior**: Configurable scale up/down policies

#### templates/backend/poddisruptionbudget-backend.yaml
**Type**: PodDisruptionBudget (policy/v1)  
**Active If**: SimpleScalable + non-legacy + replicas > 1  
**MaxUnavailable**: 1

#### templates/backend/clusterrole.yaml
**Type**: ClusterRole  
**Active If**: NOT rbac.namespaced AND NOT rbac.useExistingRole  
**Purpose**: RBAC for sidecar rules  
**Rules**: get/watch/list configmaps and secrets (if sidecar.rules.enabled)

#### templates/backend/clusterrolebinding.yaml
**Type**: ClusterRoleBinding  
**Active If**: NOT rbac.namespaced  
**Binds**: ServiceAccount → ClusterRole

---

### bloom-builder/ (6 files) - Experimental

**Active In**: Distributed + bloomPlanner.replicas > 0

#### templates/bloom-builder/_helpers-bloom-builder.tpl
- `loki.bloomBuilderFullname` → `loki-bloom-builder`
- `loki.bloomBuilderLabels`
- `loki.bloomBuilderSelectorLabels`
- `loki.bloomBuilderPriorityClassName`

#### templates/bloom-builder/deployment-bloom-builder.yaml
**Type**: Deployment  
**Args**: `-target=bloom-builder`  
**Ports**: 3100, 9095, 7946  
**Volumes**: config, runtime-config, license, temp (emptyDir), data (emptyDir)  
**Strategy**: maxSurge=0, maxUnavailable=1

#### templates/bloom-builder/service-bloom-builder.yaml
**Type**: Service (ClusterIP)  
**publishNotReadyAddresses**: true

#### templates/bloom-builder/service-bloom-builder-headless.yaml
**Type**: Service (ClusterIP: None)  
**Active If**: replicas > 0 OR autoscaling.enabled  
**Ports**: Includes grpclb on port 9096

#### templates/bloom-builder/hpa.yaml
**Type**: HorizontalPodAutoscaler  
**Active If**: bloomBuilder.autoscaling.enabled  
**Supports**: Custom metrics, behavior policies

#### templates/bloom-builder/poddisruptionbudget-bloom-builder.yaml
**Type**: PodDisruptionBudget  
**Active If**: replicas > 1  
**Fails If**: maxUnavailable not set when replicas > 1

---

### bloom-gateway/ (3 files) - Experimental

**Active In**: Distributed + bloomGateway.replicas > 0

#### templates/bloom-gateway/_helpers-bloom-gateway.tpl
- `loki.bloomGatewayFullname`
- `loki.bloomGatewayLabels`
- `loki.bloomGatewaySelectorLabels`
- `loki.bloomGateway.livenessProbe` - Defaults to loki.livenessProbe
- `loki.bloomGateway.readinessProbe`
- `loki.bloomGateway.startupProbe`
- `loki.bloomGatewayPriorityClassName`
- `loki.bloomGatewayServiceAccountName`

#### templates/bloom-gateway/statefulset-bloom-gateway.yaml
**Type**: StatefulSet  
**Args**: `-target=bloom-gateway`  
**Volumes**: temp, config, runtime-config, data (PVC or emptyDir), license  
**Volume Claims**: Supports multiple claims from persistence.claims  
**ServiceName**: `loki-bloom-gateway-headless`

#### templates/bloom-gateway/service-bloom-gateway-headless.yaml
**Type**: Service (ClusterIP: None)  
**Active If**: replicas > 0

---

### bloom-planner/ (3 files) - Experimental

**Active In**: Distributed + bloomPlanner.replicas > 0

#### templates/bloom-planner/_helpers-bloom-planner.tpl
- Similar helper pattern to bloom-gateway

#### templates/bloom-planner/statefulset-bloom-planner.yaml
**Type**: StatefulSet  
**Args**: `-target=bloom-planner`  
**Similar structure to bloom-gateway**

#### templates/bloom-planner/service-bloom-planner-headless.yaml
**Type**: Service (ClusterIP: None)

---

### chunks-cache/ (3 files) - Memcached

**Active In**: chunksCache.enabled=true (all modes)

#### templates/chunks-cache/statefulset-chunks-cache.yaml
**Type**: Uses `loki.memcached.statefulSet` template  
**Creates**: 1 or 2 StatefulSets (L1 and optionally L2)  
**Pattern**:
```yaml
{{- include "loki.memcached.statefulSet" (dict "ctx" $ "memcacheConfig" .Values.chunksCache "valuesSection" "chunksCache" "component" "chunks-cache") }}

{{- if .Values.chunksCache.l2.enabled }}
---
{{ include "loki.memcached.statefulSet" (dict "ctx" $ "memcacheConfig" .Values.chunksCache.l2 "valuesSection" "chunksCache" "component" "chunks-cache") }}
{{- end -}}
```

#### templates/chunks-cache/service-chunks-cache-headless.yaml
**Type**: Uses `loki.memcached.service` template  
**Creates**: Headless service(s) for memcached

#### templates/chunks-cache/poddisruptionbudget-chunks-cache.yaml
**Type**: Uses `loki.memcached.pdb` template  
**Creates**: PDB if enabled and replicas > 1

---

### compactor/ (3 files) - Distributed

**Active In**: Distributed mode

#### templates/compactor/_helpers-compactor.tpl
- `loki.compactorFullname`
- `loki.compactorLabels`
- `loki.compactorSelectorLabels`
- `loki.compactorImage` - Supports per-component image override
- `loki.compactor.readinessProbe` - Defaults to loki.readinessProbe
- `loki.compactor.livenessProbe`
- `loki.compactorPriorityClassName`
- `loki.compactorServiceAccountName`

#### templates/compactor/statefulset-compactor.yaml
**Type**: StatefulSet  
**Args**: `-target=compactor`  
**Replicas**: Fixed (compactor.replicas, typically 1)  
**PodManagementPolicy**: Parallel  
**ServiceName**: `loki-compactor-headless`  
**Volumes**: temp, config, runtime-config, data (PVC or emptyDir), license  
**Volume Claims**: Supports multiple from persistence.claims  
**Lifecycle**: Configurable lifecycle hooks  
**UpdateStrategy**: Rolling update with partition support

#### templates/compactor/service-compactor.yaml
**Type**: Service  
**Service Type**: Configurable (compactor.serviceType, default ClusterIP)  
**Ports**: 3100 (http-metrics), 9095 (grpc)

**Note**: No headless service template (uses main service + DNS)

---

### distributor/ (6 files) - Distributed

**Active In**: Distributed mode

#### templates/distributor/_helpers-distributor.tpl
- `loki.distributorFullname`
- `loki.distributorLabels`
- `loki.distributorSelectorLabels`
- `loki.distributorPriorityClassName`

#### templates/distributor/deployment-distributor.yaml
**Type**: Deployment  
**Args**: `-target=distributor`  
**Zone Awareness**: Auto-adds `-distributor.zone-awareness-enabled=true` if ingester zones enabled  
**Replicas**: Fixed or autoscaling  
**Strategy**: maxSurge configurable, maxUnavailable=1  
**Ports**: 3100, 9095, 7946  
**Volumes**: config, runtime-config, license

#### templates/distributor/service-distributor.yaml
**Type**: Service  
**Service Type**: Configurable (default ClusterIP)  
**trafficDistribution**: Configurable (K8s 1.30+ feature)

#### templates/distributor/service-distributor-headless.yaml
**Type**: Service (ClusterIP: None)  
**Purpose**: For GRPC load balancing via dns:/// prefix

#### templates/distributor/hpa.yaml
**Type**: HorizontalPodAutoscaler  
**Active If**: autoscaling.enabled  
**Supports**: Custom metrics, behavior policies

#### templates/distributor/poddisruptionbudget-distributor.yaml
**Type**: PodDisruptionBudget  
**Active If**: replicas > 1  
**Requires**: maxUnavailable set (fails if not)

---

### gateway/ (9 files) - All Modes

**Active In**: gateway.enabled=true (all modes, optional)

#### templates/gateway/_helpers-gateway.tpl
- `loki.gatewayFullname`
- `loki.gatewayLabels`
- `loki.gatewaySelectorLabels`
- `loki.gatewayAuthSecret` - Basic auth secret name
- `loki.gatewayImage`
- `loki.gatewayPriorityClassName`

#### templates/gateway/deployment-gateway-nginx.yaml
**Type**: Deployment  
**Active If**: gateway.enabled AND NOT (enterprise.enabled AND enterprise.gelGateway)  
**Image**: nginxinc/nginx-unprivileged:1.29-alpine  
**Container**: nginx  
**Replicas**: Fixed or autoscaling  
**Volumes**:
- config (ConfigMap with nginx.conf)
- auth (Secret with .htpasswd if basicAuth.enabled)
- tmp (emptyDir)
- docker-entrypoint-d-override (emptyDir)

**Strategy**: Configurable via deploymentStrategy

**Readiness Probe**:
```yaml
httpGet:
  path: /
  port: http-metrics
```

#### templates/gateway/deployment-gateway-enterprise.yaml
**Type**: Deployment  
**Active If**: gateway.enabled AND enterprise.enabled AND enterprise.gelGateway  
**Image**: grafana/enterprise-logs  
**Args**: `-target=gateway`, `-config.file=/etc/loki/config/config.yaml`  
**Proxy URLs**: Auto-configured if useDefaultProxyURLs=true
  - Distributed: Routes to admin-api, distributor-headless, ingester, query-frontend, ruler
  - SimpleScalable: Routes to backend, write-headless, read
**Volumes**: config, license, storage (emptyDir)

#### templates/gateway/configmap-gateway.yaml
**Type**: ConfigMap  
**Active If**: gateway.enabled AND NOT gelGateway  
**Data**: nginx.conf from `gateway.nginxConfig.file` (uses `loki.nginxFile` helper)

#### templates/gateway/service-gateway.yaml
**Type**: Service  
**Service Type**: Configurable (default ClusterIP)  
**Port**: Configurable (default 80)  
**LoadBalancerIP**: If type=LoadBalancer  
**NodePort**: If type=NodePort  
**Label**: `prometheus.io/service-monitor: "false"` if nginx gateway

#### templates/gateway/ingress-gateway.yaml
**Type**: Ingress  
**Active If**: gateway.enabled AND gateway.ingress.enabled  
**Features**: IngressClassName, TLS, host templating via tpl

#### templates/gateway/secret-gateway.yaml
**Type**: Secret  
**Active If**: gateway.enabled AND basicAuth.enabled AND NOT basicAuth.existingSecret  
**Data**: `.htpasswd` generated from loki.tenants or basicAuth.username/password

#### templates/gateway/hpa.yaml
**Type**: HorizontalPodAutoscaler  
**Active If**: gateway.autoscaling.enabled

#### templates/gateway/poddisruptionbudget-gateway.yaml
**Type**: PodDisruptionBudget  
**Active If**: gateway.enabled AND (replicas > 1 OR autoscaling.minReplicas > 1)  
**MaxUnavailable**: 1

---

### index-gateway/ (5 files) - Distributed

**Active In**: Distributed mode

#### templates/index-gateway/_helpers-index-gateway.tpl
- `loki.indexGatewayFullname`
- `loki.indexGatewayLabels`
- `loki.indexGatewaySelectorLabels`
- `loki.indexGatewayImage`
- `loki.indexGatewayPriorityClassName`

#### templates/index-gateway/statefulset-index-gateway.yaml
**Type**: StatefulSet  
**Args**: `-target=index-gateway`  
**Replicas**: Fixed (indexGateway.replicas)  
**UpdateStrategy**: Configurable via indexGateway.updateStrategy  
**Volumes**: config, runtime-config, data, license  
**Volume Claims**: data PVC if persistence.enabled AND NOT inMemory  
**In-Memory Option**: emptyDir with medium: Memory if persistence.inMemory  
**Memberlist**: Joins if indexGateway.joinMemberlist=true (port 7946)

#### templates/index-gateway/service-index-gateway.yaml
**Type**: Service  
**Service Type**: Configurable (default ClusterIP)

#### templates/index-gateway/service-index-gateway-headless.yaml
**Type**: Service (ClusterIP: None)  
**Purpose**: For dns+ resolution in index_gateway_client.server_address

#### templates/index-gateway/poddisruptionbudget-index-gateway.yaml
**Type**: PodDisruptionBudget  
**Active If**: replicas > 1  
**Requires**: maxUnavailable set

---

### ingester/ (16 files) - Distributed

**Active In**: Distributed mode

#### templates/ingester/_helpers-ingester.tpl
- `loki.ingesterFullname`
- `loki.ingesterLabels`
- `loki.ingesterSelectorLabels`
- `loki.ingesterPriorityClassName`
- `loki.ingester.readinessProbe`
- `loki.ingester.livenessProbe`
- `loki.ingester.replicaCount` - Calculates replicas per zone (ceil(replicas/3))
- `loki.ingester.maxUnavailable` - Calculates max unavailable per zone
- `loki.prefixRolloutGroup` - Rollout group prefix
- `loki.prefixIngesterName` - Ingester name prefix (optional)

#### templates/ingester/statefulset-ingester.yaml
**Type**: StatefulSet  
**Active If**: NOT zoneAwareReplication.enabled OR zoneAwareReplication.migration.enabled  
**Args**: `-target=ingester`, `-ingester.availability-zone=zone-default`  
**No Tokens File**: Regular ingester doesn't use tokens file  
**Volumes**: config, runtime-config, data, license  
**Volume Claims**: From persistence.claims if enabled  
**In-Memory Option**: emptyDir with medium: Memory if persistence.inMemory

#### templates/ingester/statefulset-ingester-zone-{a,b,c}.yaml (3 files)
**Type**: StatefulSet  
**Active If**: zoneAwareReplication.enabled  
**Replicas**: Per zone (total_replicas / 3)  
**Args**:
- `-ingester.availability-zone=zone-{a,b,c}`
- `-ingester.unregister-on-shutdown=false`
- `-ingester.tokens-file-path=/var/loki/ring-tokens`

**Labels**:
- `name: ingester-zone-{a,b,c}` (with optional prefix)
- `rollout-group: ingester` (with optional prefix)

**Annotations**:
- `rollout-max-unavailable: "X"` - Calculated per zone

**Affinity**: Custom podAntiAffinity
- Prevents pods from same rollout-group but different zones on same host
- Allows multiple pods from same zone on same host (for rollout efficiency)

**Service Name**: `loki-ingester-zone-{a,b,c}-headless`

**Zone-Specific Config**: nodeSelector, extraAffinity, annotations from zoneA/B/C values

#### templates/ingester/service-ingester.yaml
**Type**: Service (ClusterIP)  
**Service Type**: Configurable

#### templates/ingester/service-ingester-headless.yaml
**Type**: Service (ClusterIP: None)  
**Active If**: NOT zoneAwareReplication.enabled OR migration.enabled  
**Selectors**: Regular ingester selector labels (no zone filter)

#### templates/ingester/service-ingester-zone-{a,b,c}-headless.yaml (3 files)
**Type**: Service (ClusterIP: None)  
**Active If**: zoneAwareReplication.enabled  
**Selectors**: Filters by `name: ingester-zone-{a,b,c}` and `rollout-group: ingester`  
**Purpose**: Each zone has independent service for targeted operations

#### templates/ingester/hpa.yaml
**Type**: HorizontalPodAutoscaler  
**Active If**: autoscaling.enabled AND (NOT zoneAware OR migration.enabled)  
**Target**: Regular ingester StatefulSet

#### templates/ingester/hpa-zone-{a,b,c}.yaml (3 files)
**Type**: HorizontalPodAutoscaler  
**Active If**: autoscaling.enabled AND zoneAwareReplication.enabled  
**Target**: Zone-specific StatefulSet  
**Min/Max Replicas**: Same for all zones

#### templates/ingester/poddisruptionbudget-ingester.yaml
**Type**: PodDisruptionBudget  
**Active If**: replicas > 1 AND (NOT zoneAware OR migration.enabled)  
**Match Expressions**: Excludes zone-aware ingesters (rollout-group NotIn ingester)

#### templates/ingester/poddisruptionbudget-ingester-rollout.yaml
**Type**: PodDisruptionBudget  
**Active If**: replicas > 1 AND zoneAwareReplication.enabled  
**Selectors**: `rollout-group: ingester` (matches all zones)  
**MaxUnavailable**: Global limit across all zones

---

### loki-canary/ (4 files) - All Modes

**Active In**: lokiCanary.enabled=true

#### templates/loki-canary/_helpers.tpl
- `loki-canary.fullname`
- `loki-canary.labels`
- `loki-canary.selectorLabels`
- `loki-canary.image`
- `loki-canary.priorityClassName`

#### templates/loki-canary/daemonset.yaml
**Type**: DaemonSet or Deployment (kind configurable)  
**Container**: loki-canary  
**Args**:
- `-addr=` (loki URL, auto-configured or custom)
- `-labelname=pod` (label to track)
- `-labelvalue=$(POD_NAME)`
- `-user=`, `-tenant-id=`, `-pass=` (if auth enabled)
- `-push=true` (if push enabled)

**Env Vars**:
- POD_NAME from metadata
- USER/PASS from enterprise secret if enterprise.enabled

**Port**: 3500 (http-metrics)  
**UpdateStrategy**: Configurable for DaemonSet

#### templates/loki-canary/service.yaml
**Type**: Service (ClusterIP)  
**Port**: 3500

#### templates/loki-canary/serviceaccount.yaml
**Type**: ServiceAccount  
**Purpose**: Dedicated SA for canary

---

### memcached/ (3 files) - Shared Templates

**Purpose**: Reusable templates for memcached StatefulSets  
**Used By**: chunks-cache, results-cache

#### templates/memcached/_memcached-statefulset.tpl
**Define**: `loki.memcached.statefulSet`  
**Params**: ctx, memcacheConfig, valuesSection, component

**Features**:
- Dual containers: memcached + exporter (if enabled)
- Dynamic memory calculation: `requestMemory = (allocatedMemory * 1.2)`
- Extended options support: `ext_path` for persistence
- Persistence via volumeClaimTemplates
- Auto-calculates persistence size: `storageSize * 0.9`

**Memcached Args**:
```
-m {{ .allocatedMemory }}
--extended=modern,track_sizes{{ if .persistence.enabled }},ext_path={{ .persistence.mountPath }}/file:{{ $persistenceSize }}G,ext_wbuf_size=16{{ end }}{{ with .extraExtendedOptions }},{{ . }}{{ end }}
-I {{ .maxItemMemory }}m
-c {{ .connectionLimit }}
-v
-u {{ .port }}
```

**Exporter Container**: prom/memcached-exporter on port 9150

#### templates/memcached/_memcached-svc.tpl
**Define**: `loki.memcached.service`  
**Type**: Service (ClusterIP: None)  
**Ports**: Memcached client port + metrics port (if exporter enabled)

#### templates/memcached/_memcached-pdb.tpl
**Define**: `loki.memcached.pdb`  
**Type**: PodDisruptionBudget  
**Active If**: enabled AND replicas > 1

---

### monitoring/ (11 files) - Observability

#### templates/monitoring/_helpers-monitoring.tpl
- `loki.logsInstanceClient` - Generates LogsInstance client config
- `loki.ruleGroupToYaml` - Converts rule groups to YAML
- `grafana-agent.priorityClassName`

#### templates/monitoring/servicemonitor.yaml
**Type**: ServiceMonitor (Prometheus Operator CRD)  
**Active If**: monitoring.serviceMonitor.enabled AND CRD exists  
**Selector**: Matches all Loki services except those with `prometheus.io/service-monitor: "false"`  
**Relabelings**:
- Adds namespace prefix to job label
- Adds cluster label

#### templates/monitoring/loki-alerts.yaml
**Type**: PrometheusRule  
**Active If**: monitoring.rules.enabled AND monitoring.rules.alerting AND CRD exists  
**Source**: `src/alerts.yaml.tpl`  
**Alert Groups**:
- loki_alerts: LokiRequestErrors, LokiRequestPanics, LokiRequestLatency, LokiTooManyCompactorsRunning
- loki_canaries_alerts: LokiCanaryLatency

**Disabling Alerts**:
```yaml
monitoring:
  rules:
    disabled:
      LokiRequestErrors: true
```

#### templates/monitoring/loki-rules.yaml
**Type**: PrometheusRule  
**Active If**: monitoring.rules.enabled AND CRD exists  
**Source**: `src/rules.yaml.tpl`  
**Recording Rules**:
- job:loki_request_duration_seconds:{99quantile,50quantile,avg}
- job_route:loki_request_duration_seconds:* (with route dimension)
- namespace_job_route:loki_request_duration_seconds:* (with namespace)
**Additional Groups**: Via monitoring.rules.additionalGroups

#### templates/monitoring/grafana-agent.yaml
**Type**: GrafanaAgent, ServiceAccount, ClusterRole, ClusterRoleBinding  
**Active If**: monitoring.selfMonitoring.enabled  
**Purpose**: Grafana Agent Operator resources for log collection  
**Selectors**: Targets LogsInstance/MetricsInstance with matching labels

#### templates/monitoring/pod-logs.yaml
**Type**: PodLogs (Grafana Agent Operator CRD)  
**Active If**: monitoring.selfMonitoring.enabled  
**Purpose**: Collect logs from Loki pods  
**Pipeline Stages**: cri (default), plus additionalPipelineStages  
**Relabelings**: pod labels → Loki labels, job name formatting

#### templates/monitoring/logs-instance.yaml
**Type**: LogsInstance (Grafana Agent Operator CRD)  
**Active If**: monitoring.selfMonitoring.enabled  
**Clients**: Auto-configured push to Loki + custom clients  
**Selectors**: Targets PodLogs with matching labels

#### templates/monitoring/metrics-instance.yaml
**Type**: MetricsInstance (Grafana Agent Operator CRD)  
**Active If**: monitoring.serviceMonitor.enabled AND metricsInstance.enabled AND CRD exists  
**Purpose**: Remote write metrics from Loki ServiceMonitor

#### templates/monitoring/dashboards/configmap-1.yaml
**Type**: ConfigMap  
**Active If**: monitoring.dashboards.enabled  
**Dashboards**:
- loki-chunks.json
- loki-deletion.json
- loki-logs.json
- loki-mixin-recording-rules.json
- loki-operational.json

**Namespace**: Configurable (can deploy to Grafana namespace)  
**Labels**: Configurable (e.g., `grafana_dashboard: "1"`)

#### templates/monitoring/dashboards/configmap-2.yaml
**Type**: ConfigMap  
**Dashboards**:
- loki-reads-resources.json
- loki-reads.json
- loki-retention.json
- loki-writes-resources.json
- loki-writes.json

---

### overrides-exporter/ (5 files) - Distributed + Enterprise

**Active In**: Distributed + overridesExporter.enabled

#### templates/overrides-exporter/_helpers-overrides-exporter.tpl
- Standard component helper pattern

#### templates/overrides-exporter/deployment-overrides-exporter.yaml
**Type**: Deployment  
**Args**: `-target=overrides-exporter`  
**Purpose**: Export tenant limits as Prometheus metrics  
**Ports**: 3100, 9095, 7946  
**Volumes**: config, runtime-config, license

#### templates/overrides-exporter/service-overrides-exporter.yaml
**Type**: Service (ClusterIP)  
**publishNotReadyAddresses**: true

#### templates/overrides-exporter/service-overrides-exporter-headless.yaml
**Type**: Service (ClusterIP: None)

#### templates/overrides-exporter/poddisruptionbudget-overrides-exporter.yaml
**Type**: PodDisruptionBudget  
**Active If**: replicas > 1

---

### pattern-ingester/ (3 files) - Distributed

**Active In**: Distributed + patternIngester.replicas > 0

#### templates/pattern-ingester/_helpers-pattern-ingester.tpl
- `loki.patternIngesterFullname`
- `loki.patternIngesterLabels`
- `loki.patternIngesterSelectorLabels`
- `loki.patternIngester.readinessProbe`
- `loki.patternIngesterPriorityClassName`
- `loki.patternIngesterServiceAccountName`

#### templates/pattern-ingester/statefulset-pattern-ingester.yaml
**Type**: StatefulSet  
**Active If**: replicas > 0 (wrapped in conditional)  
**Args**: `-target=pattern-ingester`  
**Requires**: loki.pattern_ingester.enabled=true in config  
**Volumes**: temp, config, runtime-config, data, license  
**Volume Claims**: From persistence.claims

#### templates/pattern-ingester/poddisruptionbudget-pattern-ingester.yaml
**Type**: PodDisruptionBudget  
**Active If**: replicas > 1

**Note**: No service template - uses direct pod addressing or not exposed

---

### provisioner/ (5 files) - Enterprise Only

**Active In**: enterprise.enabled + enterprise.provisioner.enabled

#### templates/provisioner/_helpers.yaml
- `enterprise-logs.provisionerFullname`
- `enterprise-logs.provisionerLabels`
- `enterprise-logs.provisionerSelectorLabels`
- `enterprise-logs.provisionerImage`

#### templates/provisioner/job-provisioner.yaml
**Type**: Job  
**Hook**: post-install (configurable via hookType)  
**Weight**: 15 (runs after other resources)  
**Container**: enterprise-provisioner image  
**Command**: Shell script that runs /usr/bin/provisioner for each tenant  
**Outputs**: Tokens to stdout/logs (manual secret creation required)  
**Volume Mounts**: admin-token secret at `/bootstrap/token`

**Provisions**:
1. Additional tenants from enterprise.provisioner.additionalTenants
2. Self-monitoring tenant from monitoring.selfMonitoring.tenant

**Example Script**:
```bash
/usr/bin/provisioner \
  -cluster-name={{ include "loki.clusterName" $ }} \
  -api-url={{ tpl $.Values.enterprise.provisioner.apiUrl $ }} \
  -tenant={{ .name }} \
  -access-policy=write-{{ .name }}:{{ .name }}:logs:write \
  -access-policy=read-{{ .name }}:{{ .name }}:logs:read \
  -token=write-{{ .name }} \
  -token=read-{{ .name }}
```

#### templates/provisioner/serviceaccount-provisioner.yaml
**Type**: ServiceAccount  
**Hook**: post-install

#### templates/provisioner/role-provisioner.yaml
**Type**: Role or ClusterRole (depends on rbac.namespaced)  
**Hook**: post-install  
**Permissions**: create secrets

#### templates/provisioner/rolebinding-provisioner.yaml
**Type**: RoleBinding or ClusterRoleBinding  
**Hook**: post-install

---

### querier/ (5 files) - Distributed

**Active In**: Distributed mode

#### templates/querier/_helpers-querier.tpl
- Standard component helper pattern

#### templates/querier/deployment-querier.yaml
**Type**: Deployment  
**Args**: `-target=querier`  
**Zone Awareness**: Adds `-distributor.zone-awareness-enabled=true` if ingester zones enabled and not migration read-path-disabled  
**Strategy**: maxSurge configurable, maxUnavailable=1  
**Volumes**: config, runtime-config, data (emptyDir), license

#### templates/querier/service-querier.yaml
**Type**: Service  
**Service Type**: Configurable

#### templates/querier/hpa.yaml
**Type**: HorizontalPodAutoscaler  
**Active If**: autoscaling.enabled

#### templates/querier/poddisruptionbudget-querier.yaml
**Type**: PodDisruptionBudget  
**Active If**: replicas > 1

---

### query-frontend/ (6 files) - Distributed

**Active In**: Distributed mode

#### templates/query-frontend/_helpers-query-frontend.tpl
- Standard component helper pattern

#### templates/query-frontend/deployment-query-frontend.yaml
**Type**: Deployment  
**Args**: `-target=query-frontend`  
**Strategy**: maxSurge=0, maxUnavailable=1  
**Volumes**: config, runtime-config, license (no data volume - stateless)

#### templates/query-frontend/service-query-frontend.yaml
**Type**: Service  
**Service Type**: Configurable  
**publishNotReadyAddresses**: true

#### templates/query-frontend/service-query-frontend-headless.yaml
**Type**: Service (ClusterIP: None)  
**publishNotReadyAddresses**: true  
**Ports**: http-metrics (3100), grpc (9095), grpclb (9096)

#### templates/query-frontend/hpa.yaml
**Type**: HorizontalPodAutoscaler  
**Active If**: autoscaling.enabled

#### templates/query-frontend/poddisruptionbudget-query-frontend.yaml
**Type**: PodDisruptionBudget  
**Active If**: replicas > 1

---

### query-scheduler/ (4 files) - Distributed

**Active In**: Distributed mode

#### templates/query-scheduler/_helpers-query-scheduler.tpl
- Standard component helper pattern
- `loki.querySchedulerImage`

#### templates/query-scheduler/deployment-query-scheduler.yaml
**Type**: Deployment  
**Args**: `-target=query-scheduler`  
**Replicas**: Fixed (no autoscaling)  
**Strategy**: maxSurge=0, maxUnavailable=1  
**Volumes**: config, runtime-config, license

#### templates/query-scheduler/service-query-scheduler.yaml
**Type**: Service (ClusterIP: None)  
**publishNotReadyAddresses**: true  
**Port Names**: http-metrics (3100), grpclb (9095)  
**Note**: Uses grpclb not grpc for query scheduler

#### templates/query-scheduler/poddisruptionbudget-query-scheduler.yaml
**Type**: PodDisruptionBudget  
**Active If**: replicas > 1

---

### read/ (7 files) - SimpleScalable

**Active In**: SimpleScalable mode

#### templates/read/_helpers-read.tpl
- `loki.readFullname` → `loki-read`
- `loki.readLabels`
- `loki.readSelectorLabels`
- `loki.readPriorityClassName`

#### templates/read/deployment-read.yaml
**Type**: Deployment  
**Active If**: SimpleScalable AND read.legacyReadTarget=false (3-target mode)  
**Args**:
- `-target=read`
- `-legacy-read-mode=false`
- `-common.compactor-grpc-address=loki-backend.ns.svc:9095`
**Volumes**: tmp, data (emptyDir - stateless), config, runtime-config, license  
**Liveness Probe**: Configurable via read.livenessProbe

#### templates/read/statefulset-read.yaml
**Type**: StatefulSet  
**Active If**: SimpleScalable AND read.legacyReadTarget=true (2-target legacy mode)  
**Args**: `-target=read` (no legacy-read-mode flag)  
**Replicas**: 0 if SingleBinary mode  
**ServiceName**: `loki-read-headless`  
**Volume Claims**: data PVC  
**PVC Auto-Delete**: Delete (whenDeleted/whenScaled)

#### templates/read/service-read.yaml
**Type**: Service  
**Service Type**: Configurable  
**Active If**: SimpleScalable

#### templates/read/service-read-headless.yaml
**Type**: Service (ClusterIP: None)  
**Active If**: SimpleScalable

#### templates/read/hpa.yaml
**Type**: HorizontalPodAutoscaler  
**Active If**: SimpleScalable AND autoscaling.enabled  
**Target**: Deployment if non-legacy, StatefulSet if legacy

#### templates/read/poddisruptionbudget-read.yaml
**Type**: PodDisruptionBudget  
**Active If**: SimpleScalable AND replicas > 1  
**MaxUnavailable**: 1

---

### results-cache/ (3 files) - Memcached

**Active In**: resultsCache.enabled=true

#### templates/results-cache/statefulset-results-cache.yaml
**Uses**: `loki.memcached.statefulSet` template  
**Name**: `loki-results-cache`

#### templates/results-cache/service-results-cache-headless.yaml
**Uses**: `loki.memcached.service` template

#### templates/results-cache/poddisruptionbudget-results-cache.yaml
**Type**: PodDisruptionBudget  
**Active If**: enabled AND memcached.enabled AND replicas > 1  
**Direct Template** (not using shared helper)

---

### ruler/ (5 files) - Distributed

**Active In**: Distributed + ruler.enabled=true

#### templates/ruler/_helpers-ruler.tpl
- `loki.rulerFullname`
- `loki.rulerLabels`
- `loki.rulerSelectorLabels`
- `loki.rulerImage`
- `loki.rulerRulesDirName` - Format directory name for rules
- `loki.rulerPriorityClassName`

#### templates/ruler/statefulset-ruler.yaml
**Type**: StatefulSet  
**Args**: `-target=ruler`  
**ServiceName**: `loki-ruler` (NOT headless, ClusterIP: None on main service)  
**Volumes**:
- config, runtime-config, license
- tmp (emptyDir)
- data (PVC or emptyDir)
- sc-rules-volume (if sidecar.rules.enabled AND ruler.sidecar=true)
- Per-directory ConfigMaps from ruler.directories

**Volume Mounts**: Mounts each rules directory at `/etc/loki/rules/{dir}`

**Sidecar Support**: loki-sc-rules container if enabled (dynamic rules from ConfigMaps/Secrets)

**Default Container**: `kubectl.kubernetes.io/default-container: "ruler"`

#### templates/ruler/service-ruler.yaml
**Type**: Service (ClusterIP: None)  
**Active If**: ruler.enabled  
**Ports**: 3100, 9095

#### templates/ruler/configmap-ruler.yaml
**Type**: ConfigMap (one per directory)  
**Active If**: ruler.directories defined  
**Name**: `loki-ruler-rules-{dirname}`  
**Data**: Files from ruler.directories.{dir}

**Example**:
```yaml
ruler:
  directories:
    fake:
      rules.yaml: |
        groups:
          - name: example
            rules: []
```

#### templates/ruler/poddisruptionbudget-ruler.yaml
**Type**: PodDisruptionBudget  
**Active If**: ruler.enabled AND replicas > 1

---

### single-binary/ (6 files) - SingleBinary Mode

**Active In**: SingleBinary mode

#### templates/single-binary/_helpers-single-binary.tpl
- `loki.singleBinaryLabels`
- `loki.singleBinarySelectorLabels`
- `loki.singleBinaryPriorityClassName`
- `loki.singleBinaryReplicas` - Calculates replicas (1 if filesystem, otherwise singleBinary.replicas)

#### templates/single-binary/statefulset.yaml
**Type**: StatefulSet  
**Args**: `-target=all` (runs all Loki modules)  
**Replicas**: Via `loki.singleBinaryReplicas` helper  
**ServiceName**: `loki-headless`  
**PodManagementPolicy**: Parallel  
**Volumes**: tmp, config, runtime-config, storage (PVC if enabled), license  
**Sidecar**: loki-sc-rules if sidecar.rules.enabled  
**PVC**: Named "storage" (not "data")  
**PVC Auto-Delete**: If persistence.enabled and enableStatefulSetAutoDeletePVC

**Default Container**: `kubectl.kubernetes.io/default-container: "loki"`

#### templates/single-binary/service.yaml
**Type**: Service  
**Name**: `loki` (uses singleBinaryFullname which equals release name typically)  
**Service Type**: Configurable  
**Ports**: http-metrics, grpc  
**SelectorLabels**: Includes custom selectorLabels if configured

#### templates/single-binary/service-headless.yaml
**Type**: Service (ClusterIP: None)  
**Name**: `loki-headless`  
**Label**: `prometheus.io/service-monitor: "false"`

#### templates/single-binary/hpa.yaml
**Type**: HorizontalPodAutoscaler  
**Active If**: SingleBinary AND objectStorage AND autoscaling.enabled  
**Target**: StatefulSet

#### templates/single-binary/pdb.yaml
**Type**: PodDisruptionBudget  
**Active If**: podDisruptionBudget defined AND SingleBinary mode  
**Content**: Direct from podDisruptionBudget value

---

### table-manager/ (4 files) - DEPRECATED

**Active In**: tableManager.enabled=true (legacy only)

#### templates/table-manager/_helpers-table-manager.tpl
- Standard helper pattern

#### templates/table-manager/deployment-table-manager.yaml
**Type**: Deployment  
**Args**: `-target=table-manager`  
**Replicas**: 1 (fixed)  
**Purpose**: Legacy DynamoDB/Cassandra/Bigtable table management  
**Volumes**: config, license  
**Deprecated**: Not needed for boltdb-shipper or tsdb

#### templates/table-manager/service-table-manager.yaml
**Type**: Service (ClusterIP)  
**Ports**: http-metrics, grpc

#### templates/table-manager/servicemonitor-table-manager.yaml
**Type**: ServiceMonitor  
**Active If**: tableManager.enabled AND serviceMonitor.enabled

---

### tests/ (2 files) - Helm Testing

#### templates/tests/_helpers.tpl
- `loki.helmTestImage`
- `loki.helmTestLabels`

#### templates/tests/test-canary.yaml
**Type**: Pod  
**Hook**: test  
**Active If**: test.enabled AND lokiCanary.enabled  
**Container**: loki-helm-test  
**Image**: grafana/loki-helm-test  
**Env Vars**:
- CANARY_SERVICE_ADDRESS
- CANARY_PROMETHEUS_ADDRESS (legacy)
- CANARY_TEST_TIMEOUT

**Test Command**: `-test.v`  
**RestartPolicy**: Never

**Purpose**: Validates canary is collecting and querying logs successfully

---

### write/ (6 files) - SimpleScalable

**Active In**: SimpleScalable mode

#### templates/write/_helpers-write.tpl
- `loki.writeFullname` → `loki-write`
- `loki.writeLabels`
- `loki.writeSelectorLabels`
- `loki.writePriorityClassName`

#### templates/write/statefulset-write.yaml
**Type**: StatefulSet  
**Args**: `-target=write`  
**Replicas**: 0 if SingleBinary mode, otherwise write.replicas  
**ServiceName**: `loki-write-headless`  
**PodManagementPolicy**: Parallel (default)  
**Volumes**:
- data (PVC or via dataVolumeParameters)
- config, runtime-config, license

**Lifecycle Hook** (auto-added if autoscaling.enabled):
```yaml
lifecycle:
  preStop:
    httpGet:
      path: "/ingester/shutdown?terminate=false&flush=true"
      port: http-metrics
```

**Volume Claims**:
- data PVC if volumeClaimsEnabled
- Plus extraVolumeClaimTemplates

**PVC Auto-Delete**: If enabled and volumeClaimsEnabled

#### templates/write/service-write.yaml
**Type**: Service  
**Service Type**: Configurable

#### templates/write/service-write-headless.yaml
**Type**: Service (ClusterIP: None)  
**appProtocol**: tcp on grpc port

#### templates/write/hpa.yaml
**Type**: HorizontalPodAutoscaler  
**Active If**: SimpleScalable AND autoscaling.enabled  
**Target**: StatefulSet write

#### templates/write/poddisruptionbudget-write.yaml
**Type**: PodDisruptionBudget  
**Active If**: SimpleScalable AND replicas > 1  
**MaxUnavailable**: 1

---

## Template Patterns & Best Practices

### 1. Component Template Pattern

Every component follows a consistent structure:

```
templates/[component]/
├── _helpers-[component].tpl         # Helper functions
├── deployment-[component].yaml      # Deployment resource
│   OR
│   statefulset-[component].yaml     # StatefulSet resource
├── service-[component].yaml         # Main service
├── service-[component]-headless.yaml # Headless service (if StatefulSet)
├── hpa.yaml                         # HorizontalPodAutoscaler (if supported)
└── poddisruptionbudget-[component].yaml # PDB (if needed)
```

### 2. Conditional Rendering Pattern

```yaml
{{- $isDistributed := eq (include "loki.deployment.isDistributed" .) "true" -}}
{{- if $isDistributed }}
# Component only in Distributed mode
{{- end }}
```

### 3. Helper Definition Pattern

```yaml
{{- define "[component].componentFullname" -}}
{{ include "loki.fullname" . }}-[component]
{{- end }}

{{- define "[component].componentLabels" -}}
{{ include "loki.labels" . }}
app.kubernetes.io/component: [component]
{{- end }}
```

### 4. PDB Validation Pattern

```yaml
{{- if gt (int .Values.[component].replicas) 1 }}
{{- if kindIs "invalid" .Values.[component].maxUnavailable }}
{{- fail "maxUnavailable must be set when replicas > 1" }}
{{- else }}
# Render PDB
{{- end }}
{{- end }}
```

### 5. Volume Mount Pattern

```yaml
volumeMounts:
  - name: config
    mountPath: /etc/loki/config
  - name: runtime-config
    mountPath: /etc/loki/runtime-config
  {{- if .Values.enterprise.enabled }}
  - name: license
    mountPath: /etc/loki/license
  {{- end }}
  {{- with (concat .Values.global.extraVolumeMounts .Values.[component].extraVolumeMounts) | uniq }}
  {{- toYaml . | nindent 12 }}
  {{- end }}
```

### 6. Environment Variable Pattern

```yaml
{{- with (concat .Values.global.extraEnv .Values.[component].extraEnv) | uniq }}
env:
  {{- toYaml . | nindent 12 }}
{{- end }}
{{- with (concat .Values.global.extraEnvFrom .Values.[component].extraEnvFrom) | uniq }}
envFrom:
  {{- toYaml . | nindent 12 }}
{{- end }}
```

### 7. Affinity Template Pattern

```yaml
{{- with .Values.[component].affinity }}
affinity:
  {{- tpl ( . | toYaml) $ | nindent 8 }}
{{- end }}
```

**Note**: Uses `tpl` to allow template expressions in affinity values

### 8. DNS Config Pattern

```yaml
{{- with .Values.[component].dnsConfig | default .Values.loki.dnsConfig }}
dnsConfig:
  {{- toYaml . | nindent 8 }}
{{- end }}
```

**Fallback**: Component-specific dnsConfig, else global loki.dnsConfig

### 9. Topology Spread Pattern

```yaml
{{- with .Values.[component].topologySpreadConstraints }}
topologySpreadConstraints:
  {{- tpl ( . | toYaml) $ | nindent 8 }}
{{- end }}
```

### 10. Config Checksum Annotation

```yaml
annotations:
  checksum/config: {{ include "loki.configMapOrSecretContentHash" (dict "ctx" . "name" "/config.yaml") }}
```

**Purpose**: Forces pod restart when config changes

### 11. Service Account Pattern

```yaml
serviceAccountName: {{ include "loki.serviceAccountName" . }}
automountServiceAccountToken: {{ .Values.serviceAccount.automountServiceAccountToken }}
```

Most components use shared service account; some support dedicated SAs.

### 12. Security Context Pattern

```yaml
securityContext:
  {{- toYaml .Values.loki.podSecurityContext | nindent 8 }}
containers:
  - name: [component]
    securityContext:
      {{- toYaml .Values.loki.containerSecurityContext | nindent 12 }}
```

**Pod-level**: fsGroup, runAsUser, runAsGroup  
**Container-level**: readOnlyRootFilesystem, capabilities, allowPrivilegeEscalation

### 13. Probe Pattern

```yaml
{{- with .Values.[component].livenessProbe | default .Values.loki.livenessProbe }}
livenessProbe:
  {{- toYaml . | nindent 12 }}
{{- end }}
```

**Fallback**: Component-specific probe, else global loki probe

### 14. Image Pull Secrets Pattern

```yaml
{{- with .Values.imagePullSecrets }}
imagePullSecrets:
  {{- toYaml . | nindent 8 }}
{{- end }}
```

**Global**: Applied to all components

### 15. Label Merge Pattern

```yaml
labels:
  {{- include "[component].componentLabels" . | nindent 8 }}
  {{- with merge (dict) .Values.loki.podLabels .Values.[component].podLabels }}
  {{- tpl (toYaml .) $ | nindent 8 }}
  {{- end }}
```

**Combines**: Standard labels + global podLabels + component podLabels

### 16. Extra Containers Pattern

```yaml
{{- if .Values.[component].extraContainers }}
{{- toYaml .Values.[component].extraContainers | nindent 8}}
{{- end }}
```

**Allows**: Sidecars, log shippers, monitoring agents

### 17. Init Containers Pattern

```yaml
{{- with .Values.[component].initContainers }}
initContainers:
  {{- toYaml . | nindent 8 }}
{{- end }}
```

### 18. Host Users Pattern

```yaml
{{- if and (semverCompare ">=1.33-0" (include "loki.kubeVersion" .)) (kindIs "bool" .Values.[component].hostUsers) }}
hostUsers: {{ .Values.[component].hostUsers }}
{{- end }}
```

**K8s 1.33+**: User namespace isolation feature

### 19. Revision History Limit

```yaml
revisionHistoryLimit: {{ .Values.loki.revisionHistoryLimit }}
```

**Global**: Applied to all Deployments/StatefulSets (default: 10)

### 20. Service Port Pattern

```yaml
ports:
  - name: http-metrics
    port: {{ .Values.loki.server.http_listen_port }}  # Default: 3100
    targetPort: http-metrics
  - name: grpc
    port: {{ .Values.loki.server.grpc_listen_port }}  # Default: 9095
    targetPort: grpc
```

**Configurable**: Via loki.server.* values

---

## Template Modification Guidelines

### Adding New Component Feature

**Example**: Add init container support to a component

1. **Update values.yaml**:
```yaml
[component]:
  initContainers: []
```

2. **Update template** (`templates/[component]/{deployment|statefulset}-[component].yaml`):
```yaml
spec:
  template:
    spec:
      {{- with .Values.[component].initContainers }}
      initContainers:
        {{- toYaml . | nindent 8 }}
      {{- end }}
```

### Adding New Component

1. Create directory: `templates/new-component/`
2. Create `_helpers-new-component.tpl`:
```yaml
{{- define "loki.newComponentFullname" -}}
{{ include "loki.fullname" . }}-new-component
{{- end }}

{{- define "loki.newComponentLabels" -}}
{{ include "loki.labels" . }}
app.kubernetes.io/component: new-component
{{- end }}

{{- define "loki.newComponentSelectorLabels" -}}
{{ include "loki.selectorLabels" . }}
app.kubernetes.io/component: new-component
{{- end }}

{{- define "loki.newComponentPriorityClassName" -}}
{{- $pcn := coalesce .Values.global.priorityClassName .Values.newComponent.priorityClassName -}}
{{- if $pcn }}
priorityClassName: {{ $pcn }}
{{- end }}
{{- end }}
```

3. Create deployment/statefulset following existing patterns
4. Create service files
5. Add HPA/PDB if needed
6. Update values.yaml with configuration section
7. Update `templates/validate.yaml` if deployment-mode-specific
8. Update `templates/_helpers.tpl` if address helper needed

### Modifying Nginx Gateway Routing

Location: `templates/_helpers.tpl` in `loki.nginxFile` define

**Example**: Add new endpoint routing
```yaml
location = /new/endpoint {
  {{- with .Values.gateway.nginxConfig.locationSnippet }}
  {{- tpl . $ | nindent 6 }}
  {{- end }}
  proxy_pass       {{ $backendUrl }}$request_uri;
}
```

### Adding Storage Backend Support

Location: `templates/_helpers.tpl` storage helpers

1. Update `loki.lokiStorageConfig`:
```yaml
{{- else if eq .ctx.Values.loki.storage.type "newtype" -}}
{{- with .ctx.Values.loki.storage.newtype }}
newtype:
  bucket_name: {{ $bucketName }}
  {{- toYaml (omit . "bucket_name") | nindent 2 }}
{{- end -}}
```

2. Update `loki.isUsingObjectStorage`:
```yaml
{{- has .Values.loki.storage.type (list "s3" "gcs" "azure" "swift" "alibabacloud" "cos" "bos" "newtype") }}
```

3. Add to `enterprise-logs.adminAPIStorageConfig` if needed

---

## Common Template Variables

### Deployment Mode Variables

Typically set at top of template:
```yaml
{{- $isDistributed := eq (include "loki.deployment.isDistributed" .) "true" -}}
{{- $isSimpleScalable := eq (include "loki.deployment.isScalable" .) "true" -}}
{{- $isSingleBinary := eq (include "loki.deployment.isSingleBinary" .) "true" -}}
```

### API Version Variables

```yaml
{{- $ingressApiIsStable := eq (include "loki.ingress.isStable" .) "true" -}}
{{- $autoscalingv2 := .Capabilities.APIVersions.Has "autoscaling/v2" -}}
```

### Common Conditionals

```yaml
{{- if semverCompare ">=1.19-0" (include "loki.kubeVersion" .) }}
  # K8s 1.19+ features
{{- end }}

{{- if semverCompare ">= 1.23-0" (include "loki.kubeVersion" .) }}
  # K8s 1.23+ features (e.g., PVC retention policy)
{{- end }}

{{- if semverCompare ">=1.33-0" (include "loki.kubeVersion" .)) }}
  # K8s 1.33+ features (e.g., hostUsers)
{{- end }}
```

---

## Template Include Patterns

### Calling Helper Functions

```yaml
# Include with no indentation
{{ include "loki.labels" . }}

# Include with indentation
{{- include "loki.labels" . | nindent 4 }}

# Include and convert to boolean
{{- $isDistributed := eq (include "loki.deployment.isDistributed" .) "true" -}}

# Include with dict parameters
{{- include "loki.memcached.statefulSet" (dict "ctx" $ "memcacheConfig" .Values.chunksCache "component" "chunks-cache") }}
```

### TPL Function Usage

```yaml
# Template values that may contain Go templates
{{- tpl .Values.backend.affinity $ }}

# Template and convert to YAML
{{- tpl (.Values.backend.affinity | toYaml) . | nindent 8 }}

# Template string values
{{ tpl .Values.loki.configObjectName . }}
```

### Resource Name Building

```yaml
# Simple component name
{{ include "loki.backendFullname" . }}

# Complex name with zone/suffix
{{ include "loki.resourceName" (dict "ctx" $ "component" "chunks-cache" "suffix" .suffix) }}
```

---

## Next Steps

- For values.yaml structure and configuration layers, see **[Values Configuration Guide](./loki-helm-values.mdc)**
- For complete deployment examples, see **[Examples & Best Practices](./loki-helm-examples.mdc)**
- For common modifications, see **[Modification Guide](./loki-helm-modification-guide.mdc)**
