<lexer>
  <config>
    <name>V</name>
    <alias>v</alias>
    <alias>vlang</alias>
    <filename>*.v</filename>
    <filename>*.vv</filename>
    <filename>v.mod</filename>
    <mime_type>text/x-v</mime_type>
    <ensure_nl>true</ensure_nl>
  </config>
  <rules>
    <state name="root">
      <rule pattern="\n">
        <token type="Text"/>
      </rule>
      <rule pattern="\s+">
        <token type="Text"/>
      </rule>
      <rule pattern="\\\n">
        <token type="Text"/>
      </rule>
      <rule pattern="(?&lt;=module\s+\w[^\n]*\s+)(//[^\n]+\n)+(?=\n)">
        <token type="LiteralStringDoc"/>
      </rule>
      <rule pattern="(// *)(\w+)([^\n]+\n)(?=(?://[^\n]*\n)* *(?:pub +)?(?:fn|struct|union|type|interface|enum|const) +\2\b)">
        <bygroups>
          <token type="LiteralStringDoc"/>
          <token type="GenericEmph"/>
          <token type="LiteralStringDoc"/>
        </bygroups>
        <push state="string-doc"/>
      </rule>
      <rule pattern="//[^\n]*\n">
        <token type="CommentSingle"/>
      </rule>
      <rule pattern="/\*(?:(?:/\*(?:.|\n)*?\*/)*|.|\n)*\*/">
        <token type="CommentMultiline"/>
      </rule>
      <rule pattern="\b(import|module)\b">
        <token type="KeywordNamespace"/>
      </rule>
      <rule pattern="\b(fn|struct|union|map|chan|type|interface|enum|const|mut|shared|pub|__global)\b">
        <token type="KeywordDeclaration"/>
      </rule>
      <rule pattern="\?">
        <token type="KeywordDeclaration"/>
      </rule>
      <rule pattern="(?&lt;=\)\s*)!">
        <token type="KeywordDeclaration"/>
      </rule>
      <rule pattern="[ \t]*#include[^\n]+">
        <using lexer="c"/>
      </rule>
      <rule pattern="[ \t]*#\w[^\n]*">
        <token type="CommentPreproc"/>
      </rule>
      <rule pattern="(sql)(\s+)(\w+)(\s+)({)([^}]*?)(})">
        <bygroups>
          <token type="Keyword"/>
          <token type="Text"/>
          <token type="Name"/>
          <token type="Text"/>
          <token type="Punctuation"/>
          <using lexer="sql"/>
          <token type="Punctuation"/>
        </bygroups>
      </rule>
      <rule pattern="\$(?=\w)">
        <token type="Operator"/>
      </rule>
      <rule pattern="(?&lt;=\$)(?:embed_file|pkgconfig|tmpl|env|compile_error|compile_warn)">
        <token type="NameBuiltin"/>
      </rule>
      <rule pattern="(asm)(\s+)(\w+)(\s*)({)([^}]*?)(})">
        <bygroups>
          <token type="Keyword"/>
          <token type="Text"/>
          <token type="KeywordType"/>
          <token type="Text"/>
          <token type="Punctuation"/>
          <using lexer="nasm"/>
          <token type="Punctuation"/>
        </bygroups>
      </rule>
      <rule pattern="\b_(?:un)?likely_(?=\()">
        <token type="NameFunctionMagic"/>
      </rule>
      <rule pattern="(?&lt;=\$if.+?(?:&amp;&amp;|\|\|)?)((no_segfault_handler|no_bounds_checking|little_endian|freestanding|no_backtrace|big_endian|cplusplus|dragonfly|prealloc|android|windows|no_main|solaris|darwin|clang|tinyc|glibc|mingw|haiku|macos|amd64|arm64|debug|linux|prod|msvc|test|hpux|mach|x32|x64|gcc|qnx|gnu|ios|mac|js))+">
        <token type="NameBuiltin"/>
      </rule>
      <rule pattern="@(VMOD_FILE|VEXEROOT|VMODROOT|METHOD|STRUCT|COLUMN|VHASH|FILE|LINE|VEXE|MOD|FN)\b">
        <token type="NameVariableMagic"/>
      </rule>
      <rule pattern="\b(?&lt;!@)(__offsetof|isreftype|continue|volatile|typeof|static|unsafe|return|assert|sizeof|atomic|select|match|break|defer|rlock|lock|else|goto|for|in|is|as|or|if|go)\b">
        <token type="Keyword"/>
      </rule>
      <rule pattern="\b(?&lt;!@)(none|true|false|si_s_code|si_g32_code|si_g64_code)\b">
        <token type="KeywordConstant"/>
      </rule>
      <rule pattern="\b(?&lt;!@)(vstring_literal_with_len|utf8_str_visible_length|get_str_intp_u64_format|get_str_intp_u32_format|utf32_decode_to_buffer|utf32_to_str_no_malloc|panic_optional_not_set|panic_result_not_set|contains_any_substr|strip_margin_custom|starts_with_capital|cstring_to_vstring|winapi_lasterr_str|c_error_number_str|panic_error_number|substr_with_check|string_from_wide2|sort_with_compare|trim_string_right|string_from_wide|sort_ignore_case|trim_string_left|reverse_in_place|split_into_lines|vstring_with_len|compare_strings|all_before_last|print_backtrace|repeat_to_depth|length_in_bytes|error_with_code|vstring_literal|gc_check_leaks|clone_to_depth|vcalloc_noscan|all_after_last|utf8_char_len|panic_lasterr|memdup_noscan|malloc_noscan|str_intp_rune|last_index_u8|utf8_to_utf32|flush_stderr|flush_stdout|str_intp_sub|replace_each|replace_once|vstrlen_char|utf8_getchar|str_intp_g64|contains_any|find_between|realloc_data|strip_margin|utf32_to_str|is_bin_digit|is_hex_digit|is_oct_digit|proc_pidpath|str_intp_g32|delete_many|delete_last|str_escaped|index_after|sort_by_len|str_intp_sq|starts_with|trim_space|last_index|parse_uint|is_capital|trim_right|join_lines|capitalize|all_before|after_char|match_glob|utf32_code|eq_epsilon|tos_clone|substr_ni|v_realloc|push_many|is_letter|split_nth|split_any|trim_left|index_any|ascii_str|parse_int|all_after|ends_with|is_title|contains|eprintln|is_space|index_u8|is_digit|vmemmove|byterune|is_alnum|pointers|grow_len|is_lower|grow_cap|str_intp|to_upper|hex_full|len_utf8|is_upper|try_push|to_lower|compare|vmemset|try_pop|vcalloc|reverse|vmemcmp|vstring|replace|ptr_str|strlong|to_wide|bytestr|f32_abs|f32_max|println|f32_min|f64_max|vmemcpy|vstrlen|prepend|vbytes|strsci|substr|string|insert|eprint|filter|delete|repeat|malloc|memdup|fields|before|reduce|string|isize|count|index|title|bytes|clone|usize|error|after|split|runes|print|panic|first|close|limit|isnil|bool|rune|tos3|u128|hex2|i128|hash|code|tos4|free|exit|keys|tos2|last|trim|strg|tos5|move|copy|drop|sort|dump|join|free|cap|int|any|all|any|len|map|pop|hex|f64|f32|u16|msg|i64|i16|u32|str|tos|u64|i8|u8)(?=\()">
        <token type="NameBuiltin"/>
      </rule>
      <rule pattern="\b(?&lt;!@)(StrIntpCgenData|VAssertMetaInfo|StructAttribute|AttributeKind|FunctionData|StrIntpData|StrIntpType|MethodArgs|StrIntpMem|ArrayFlags|FieldData|SortedMap|ChanState|string|array|Error|map)\b">
        <token type="NameBuiltin"/>
      </rule>
      <rule pattern="\b(?&lt;!@)(voidptr|string|error|isize|usize|i128|u128|bool|rune|int|f32|f64|i64|i16|u64|any|u32|u16|i8|u8)\b">
        <token type="KeywordType"/>
      </rule>
      <rule pattern="\bit\b">
        <token type="NameVariableMagic"/>
      </rule>
      <rule pattern="(?&lt;!fn\s+)(?&lt;=\w+\s+|^)\[(?=:if +)?(?=\w+)">
        <token type="Punctuation"/>
        <push state="attribute"/>
      </rule>
      <rule pattern="(&lt;&lt;=|&gt;&gt;=|&gt;&gt;&gt;=|&gt;&gt;&gt;|&lt;&lt;|&gt;&gt;|&lt;=|&gt;=|\^=|\+=|-=|\*=|/=|%=|&amp;=|\|=|&amp;&amp;|\|\||&lt;-|\+\+|--|==|!=|:=|\.\.\.|\.\.|[+\-*/%&amp;|^~=#@!])">
        <token type="Operator"/>
      </rule>
      <rule pattern="[\d_]+(\.\d+e[+\-]?\d+|\.\d+|e[+\-]?\d+)">
        <token type="LiteralNumberFloat"/>
      </rule>
      <rule pattern="\.\d+(e[+\-]?\d+)?">
        <token type="LiteralNumberFloat"/>
      </rule>
      <rule pattern="0o[0-7_]+">
        <token type="LiteralNumberOct"/>
      </rule>
      <rule pattern="0x[0-9a-fA-F_]+">
        <token type="LiteralNumberHex"/>
      </rule>
      <rule pattern="0b[01_]+">
        <token type="LiteralNumberBin"/>
      </rule>
      <rule pattern="(0|[1-9][0-9_]*)">
        <token type="LiteralNumberInteger"/>
      </rule>
      <rule pattern="`">
        <token type="LiteralStringChar"/>
        <push state="char"/>
      </rule>
      <rule>
        <include state="strings"/>
      </rule>
      <rule pattern="@?[A-Z]\w*">
        <token type="NameClass"/>
      </rule>
      <rule pattern="(?&lt;=[^\W\d]\w*)(&lt;)([A-Z]\w*)(&gt;)">
        <bygroups>
          <token type="Punctuation"/>
          <token type="NameClass"/>
          <token type="Punctuation"/>
        </bygroups>
      </rule>
      <rule pattern="@?[^\W\d]\w*(?=\()">
        <token type="NameFunction"/>
      </rule>
      <rule pattern="(?&lt;=fn\s+)@?[^\W\d]\w*(?=\s*\()">
        <token type="NameFunction"/>
      </rule>
      <rule pattern="(?&lt;=(?:continue|break|goto)\s+)\w+">
        <token type="NameLabel"/>
      </rule>
      <rule pattern="\b[^\W\d]\w*(?=:(?:$|\s+for))">
        <token type="NameLabel"/>
      </rule>
      <rule pattern="[&lt;&gt;()\[\]{}.,;:]">
        <token type="Punctuation"/>
      </rule>
      <rule pattern="@?[^\W\d]\w*">
        <token type="NameVariable"/>
      </rule>
    </state>
    <state name="char">
      <rule pattern="`">
        <token type="LiteralStringChar"/>
        <pop depth="1"/>
      </rule>
      <rule>
        <include state="char-escape"/>
      </rule>
      <rule pattern="[^\\]">
        <token type="LiteralStringChar"/>
      </rule>
    </state>
    <state name="string-doc">
      <rule pattern="(// *)(#+ [^\n]+)(\n)">
        <bygroups>
          <token type="LiteralStringDoc"/>
          <token type="GenericHeading"/>
          <token type="Text"/>
        </bygroups>
      </rule>
      <rule pattern="// *([=_*~-])\1{2,}\n">
        <token type="LiteralStringDelimiter"/>
      </rule>
      <rule pattern="//[^\n]*\n">
        <token type="LiteralStringDoc"/>
      </rule>
      <rule>
        <mutators>
          <pop depth="1"/>
        </mutators>
      </rule>
    </state>
    <state name="string-curly-interpolation">
      <rule pattern="}">
        <token type="Punctuation"/>
        <pop depth="1"/>
      </rule>
      <rule>
        <include state="strings"/>
      </rule>
      <rule pattern="(:)( *?)([ 0&#39;#+-])?(?:(\.)?([0-9]+))?([fFgeEGxXobsd])?">
        <bygroups>
          <token type="Punctuation"/>
          <token type="Text"/>
          <token type="Operator"/>
          <token type="Punctuation"/>
          <token type="LiteralNumber"/>
          <token type="LiteralStringAffix"/>
        </bygroups>
      </rule>
      <rule pattern="[^}&#34;&#39;:]+">
        <usingself state="root"/>
      </rule>
    </state>
    <state name="attribute">
      <rule pattern="\]">
        <token type="Punctuation"/>
        <pop depth="1"/>
      </rule>
      <rule pattern="&#39;">
        <token type="Punctuation"/>
        <push state="string-single"/>
      </rule>
      <rule pattern="&#34;">
        <token type="Punctuation"/>
        <push state="string-double"/>
      </rule>
      <rule pattern="[;:]">
        <token type="Punctuation"/>
      </rule>
      <rule pattern="(?&lt;=\[)if\b">
        <token type="Keyword"/>
      </rule>
      <rule pattern="\s+">
        <token type="Text"/>
      </rule>
      <rule pattern="(?&lt;=: *)\w+">
        <token type="LiteralString"/>
      </rule>
      <rule pattern="[^\W\d]\w*">
        <token type="NameAttribute"/>
      </rule>
    </state>
    <state name="strings">
      <rule pattern="(c)?(&#34;)">
        <bygroups>
          <token type="LiteralStringAffix"/>
          <token type="LiteralStringDouble"/>
        </bygroups>
        <push state="string-double"/>
      </rule>
      <rule pattern="(c)?(&#39;)">
        <bygroups>
          <token type="LiteralStringAffix"/>
          <token type="LiteralStringSingle"/>
        </bygroups>
        <push state="string-single"/>
      </rule>
      <rule pattern="(r)(&#34;[^&#34;]+&#34;)">
        <bygroups>
          <token type="LiteralStringAffix"/>
          <token type="LiteralString"/>
        </bygroups>
      </rule>
      <rule pattern="(r)(&#39;[^&#39;]+&#39;)">
        <bygroups>
          <token type="LiteralStringAffix"/>
          <token type="LiteralString"/>
        </bygroups>
      </rule>
    </state>
    <state name="string-double">
      <rule pattern="&#34;">
        <token type="LiteralStringDouble"/>
        <pop depth="1"/>
      </rule>
      <rule>
        <include state="char-escape"/>
      </rule>
      <rule pattern="(\$)((?!\\){)">
        <bygroups>
          <token type="Operator"/>
          <token type="Punctuation"/>
        </bygroups>
        <push state="string-curly-interpolation"/>
      </rule>
      <rule pattern="\$">
        <token type="Operator"/>
        <push state="string-interpolation"/>
      </rule>
      <rule pattern="[^&#34;]+?">
        <token type="LiteralStringDouble"/>
      </rule>
    </state>
    <state name="string-single">
      <rule pattern="&#39;">
        <token type="LiteralStringSingle"/>
        <pop depth="1"/>
      </rule>
      <rule>
        <include state="char-escape"/>
      </rule>
      <rule pattern="(\$)((?!\\){)">
        <bygroups>
          <token type="Operator"/>
          <token type="Punctuation"/>
        </bygroups>
        <push state="string-curly-interpolation"/>
      </rule>
      <rule pattern="\$">
        <token type="Operator"/>
        <push state="string-interpolation"/>
      </rule>
      <rule pattern="[^&#39;]+?">
        <token type="LiteralStringSingle"/>
      </rule>
    </state>
    <state name="char-escape">
      <rule pattern="\\[`&#39;&#34;\\abfnrtv$]|\\x[0-9a-fA-F]{2}|\\[0-7]{1,3}|\\u[0-9a-fA-F]{4}|\\U[0-9a-fA-F]{8}">
        <token type="LiteralStringEscape"/>
      </rule>
    </state>
    <state name="string-interpolation">
      <rule pattern="(\.)?(@)?(?:([^\W\d]\w*)(\()([^)]*)(\))|([^\W\d]\w*))">
        <bygroups>
          <token type="Punctuation"/>
          <token type="Operator"/>
          <token type="NameFunction"/>
          <token type="Punctuation"/>
          <usingself state="root"/>
          <token type="Punctuation"/>
          <token type="NameVariable"/>
        </bygroups>
      </rule>
      <rule>
        <mutators>
          <pop depth="1"/>
        </mutators>
      </rule>
    </state>
  </rules>
</lexer>