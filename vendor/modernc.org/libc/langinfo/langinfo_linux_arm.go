// Code generated by 'ccgo langinfo/gen.c -crt-import-path "" -export-defines "" -export-enums "" -export-externs X -export-fields F -export-structs "" -export-typedefs "" -header -hide _OSSwapInt16,_OSSwapInt32,_OSSwapInt64 -o langinfo/langinfo_linux_arm.go -pkgname langinfo', DO NOT EDIT.

package langinfo

import (
	"math"
	"reflect"
	"sync/atomic"
	"unsafe"
)

var _ = math.Pi
var _ reflect.Kind
var _ atomic.Value
var _ unsafe.Pointer

const (
	NL_CAT_LOCALE             = 1
	NL_SETD                   = 1
	X_ATFILE_SOURCE           = 1
	X_BITS_LOCALE_H           = 1
	X_BITS_TYPES_LOCALE_T_H   = 1
	X_BITS_TYPES___LOCALE_T_H = 1
	X_DEFAULT_SOURCE          = 1
	X_FEATURES_H              = 1
	X_FILE_OFFSET_BITS        = 64
	X_LANGINFO_H              = 1
	X_NL_TYPES_H              = 1
	X_POSIX_C_SOURCE          = 200809
	X_POSIX_SOURCE            = 1
	X_STDC_PREDEF_H           = 1
	X_SYS_CDEFS_H             = 1
	Linux                     = 1
	Unix                      = 1
)

// Definition of locale category symbol values.
//    Copyright (C) 2001-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// Construct an `nl_item' value for `nl_langinfo' from a locale category
//    (LC_*) and an item index within the category.  Some code may depend on
//    the item values within a category increasing monotonically with the
//    indices.

// Extract the category and item index from a constructed `nl_item' value.

// Enumeration of locale items that can be queried with `nl_langinfo'.
const ( /* langinfo.h:41:1: */
	// LC_TIME category: date and time formatting.

	// Abbreviated days of the week.
	ABDAY_1 = 131072 // Sun
	ABDAY_2 = 131073
	ABDAY_3 = 131074
	ABDAY_4 = 131075
	ABDAY_5 = 131076
	ABDAY_6 = 131077
	ABDAY_7 = 131078

	// Long-named days of the week.
	DAY_1 = 131079 // Sunday
	DAY_2 = 131080 // Monday
	DAY_3 = 131081 // Tuesday
	DAY_4 = 131082 // Wednesday
	DAY_5 = 131083 // Thursday
	DAY_6 = 131084 // Friday
	DAY_7 = 131085 // Saturday

	// Abbreviated month names, in the grammatical form used when the month
	//      is a part of a complete date.
	ABMON_1  = 131086 // Jan
	ABMON_2  = 131087
	ABMON_3  = 131088
	ABMON_4  = 131089
	ABMON_5  = 131090
	ABMON_6  = 131091
	ABMON_7  = 131092
	ABMON_8  = 131093
	ABMON_9  = 131094
	ABMON_10 = 131095
	ABMON_11 = 131096
	ABMON_12 = 131097

	// Long month names, in the grammatical form used when the month
	//      is a part of a complete date.
	MON_1  = 131098 // January
	MON_2  = 131099
	MON_3  = 131100
	MON_4  = 131101
	MON_5  = 131102
	MON_6  = 131103
	MON_7  = 131104
	MON_8  = 131105
	MON_9  = 131106
	MON_10 = 131107
	MON_11 = 131108
	MON_12 = 131109

	AM_STR = 131110 // Ante meridiem string.
	PM_STR = 131111 // Post meridiem string.

	D_T_FMT    = 131112 // Date and time format for strftime.
	D_FMT      = 131113 // Date format for strftime.
	T_FMT      = 131114 // Time format for strftime.
	T_FMT_AMPM = 131115 // 12-hour time format for strftime.

	ERA         = 131116 // Alternate era.
	X__ERA_YEAR = 131117 // Year in alternate era format.
	ERA_D_FMT   = 131118 // Date in alternate era format.
	ALT_DIGITS  = 131119 // Alternate symbols for digits.
	ERA_D_T_FMT = 131120 // Date and time in alternate era format.
	ERA_T_FMT   = 131121 // Time in alternate era format.

	X_NL_TIME_ERA_NUM_ENTRIES = 131122 // Number entries in the era arrays.
	X_NL_TIME_ERA_ENTRIES     = 131123 // Structure with era entries in usable form.

	X_NL_WABDAY_1 = 131124 // Sun
	X_NL_WABDAY_2 = 131125
	X_NL_WABDAY_3 = 131126
	X_NL_WABDAY_4 = 131127
	X_NL_WABDAY_5 = 131128
	X_NL_WABDAY_6 = 131129
	X_NL_WABDAY_7 = 131130

	// Long-named days of the week.
	X_NL_WDAY_1 = 131131 // Sunday
	X_NL_WDAY_2 = 131132 // Monday
	X_NL_WDAY_3 = 131133 // Tuesday
	X_NL_WDAY_4 = 131134 // Wednesday
	X_NL_WDAY_5 = 131135 // Thursday
	X_NL_WDAY_6 = 131136 // Friday
	X_NL_WDAY_7 = 131137 // Saturday

	// Abbreviated month names, in the grammatical form used when the month
	//      is a part of a complete date.
	X_NL_WABMON_1  = 131138 // Jan
	X_NL_WABMON_2  = 131139
	X_NL_WABMON_3  = 131140
	X_NL_WABMON_4  = 131141
	X_NL_WABMON_5  = 131142
	X_NL_WABMON_6  = 131143
	X_NL_WABMON_7  = 131144
	X_NL_WABMON_8  = 131145
	X_NL_WABMON_9  = 131146
	X_NL_WABMON_10 = 131147
	X_NL_WABMON_11 = 131148
	X_NL_WABMON_12 = 131149

	// Long month names, in the grammatical form used when the month
	//      is a part of a complete date.
	X_NL_WMON_1  = 131150 // January
	X_NL_WMON_2  = 131151
	X_NL_WMON_3  = 131152
	X_NL_WMON_4  = 131153
	X_NL_WMON_5  = 131154
	X_NL_WMON_6  = 131155
	X_NL_WMON_7  = 131156
	X_NL_WMON_8  = 131157
	X_NL_WMON_9  = 131158
	X_NL_WMON_10 = 131159
	X_NL_WMON_11 = 131160
	X_NL_WMON_12 = 131161

	X_NL_WAM_STR = 131162 // Ante meridiem string.
	X_NL_WPM_STR = 131163 // Post meridiem string.

	X_NL_WD_T_FMT    = 131164 // Date and time format for strftime.
	X_NL_WD_FMT      = 131165 // Date format for strftime.
	X_NL_WT_FMT      = 131166 // Time format for strftime.
	X_NL_WT_FMT_AMPM = 131167 // 12-hour time format for strftime.

	X_NL_WERA_YEAR    = 131168 // Year in alternate era format.
	X_NL_WERA_D_FMT   = 131169 // Date in alternate era format.
	X_NL_WALT_DIGITS  = 131170 // Alternate symbols for digits.
	X_NL_WERA_D_T_FMT = 131171 // Date and time in alternate era format.
	X_NL_WERA_T_FMT   = 131172 // Time in alternate era format.

	X_NL_TIME_WEEK_NDAYS    = 131173
	X_NL_TIME_WEEK_1STDAY   = 131174
	X_NL_TIME_WEEK_1STWEEK  = 131175
	X_NL_TIME_FIRST_WEEKDAY = 131176
	X_NL_TIME_FIRST_WORKDAY = 131177
	X_NL_TIME_CAL_DIRECTION = 131178
	X_NL_TIME_TIMEZONE      = 131179

	X_DATE_FMT      = 131180 // strftime format for date.
	X_NL_W_DATE_FMT = 131181

	X_NL_TIME_CODESET = 131182

	// Long month names, in the grammatical form used when the month
	//      is named by itself.
	X__ALTMON_1  = 131183 // January
	X__ALTMON_2  = 131184
	X__ALTMON_3  = 131185
	X__ALTMON_4  = 131186
	X__ALTMON_5  = 131187
	X__ALTMON_6  = 131188
	X__ALTMON_7  = 131189
	X__ALTMON_8  = 131190
	X__ALTMON_9  = 131191
	X__ALTMON_10 = 131192
	X__ALTMON_11 = 131193
	X__ALTMON_12 = 131194

	// Long month names, in the grammatical form used when the month
	//      is named by itself.
	X_NL_WALTMON_1  = 131195 // January
	X_NL_WALTMON_2  = 131196
	X_NL_WALTMON_3  = 131197
	X_NL_WALTMON_4  = 131198
	X_NL_WALTMON_5  = 131199
	X_NL_WALTMON_6  = 131200
	X_NL_WALTMON_7  = 131201
	X_NL_WALTMON_8  = 131202
	X_NL_WALTMON_9  = 131203
	X_NL_WALTMON_10 = 131204
	X_NL_WALTMON_11 = 131205
	X_NL_WALTMON_12 = 131206

	// Abbreviated month names, in the grammatical form used when the month
	//      is named by itself.
	X_NL_ABALTMON_1  = 131207 // Jan
	X_NL_ABALTMON_2  = 131208
	X_NL_ABALTMON_3  = 131209
	X_NL_ABALTMON_4  = 131210
	X_NL_ABALTMON_5  = 131211
	X_NL_ABALTMON_6  = 131212
	X_NL_ABALTMON_7  = 131213
	X_NL_ABALTMON_8  = 131214
	X_NL_ABALTMON_9  = 131215
	X_NL_ABALTMON_10 = 131216
	X_NL_ABALTMON_11 = 131217
	X_NL_ABALTMON_12 = 131218

	// Abbreviated month names, in the grammatical form used when the month
	//      is named by itself.
	X_NL_WABALTMON_1  = 131219 // Jan
	X_NL_WABALTMON_2  = 131220
	X_NL_WABALTMON_3  = 131221
	X_NL_WABALTMON_4  = 131222
	X_NL_WABALTMON_5  = 131223
	X_NL_WABALTMON_6  = 131224
	X_NL_WABALTMON_7  = 131225
	X_NL_WABALTMON_8  = 131226
	X_NL_WABALTMON_9  = 131227
	X_NL_WABALTMON_10 = 131228
	X_NL_WABALTMON_11 = 131229
	X_NL_WABALTMON_12 = 131230

	X_NL_NUM_LC_TIME = 131231 // Number of indices in LC_TIME category.

	// LC_COLLATE category: text sorting.
	//      This information is accessed by the strcoll and strxfrm functions.
	//      These `nl_langinfo' names are used only internally.
	X_NL_COLLATE_NRULES           = 196608
	X_NL_COLLATE_RULESETS         = 196609
	X_NL_COLLATE_TABLEMB          = 196610
	X_NL_COLLATE_WEIGHTMB         = 196611
	X_NL_COLLATE_EXTRAMB          = 196612
	X_NL_COLLATE_INDIRECTMB       = 196613
	X_NL_COLLATE_GAP1             = 196614
	X_NL_COLLATE_GAP2             = 196615
	X_NL_COLLATE_GAP3             = 196616
	X_NL_COLLATE_TABLEWC          = 196617
	X_NL_COLLATE_WEIGHTWC         = 196618
	X_NL_COLLATE_EXTRAWC          = 196619
	X_NL_COLLATE_INDIRECTWC       = 196620
	X_NL_COLLATE_SYMB_HASH_SIZEMB = 196621
	X_NL_COLLATE_SYMB_TABLEMB     = 196622
	X_NL_COLLATE_SYMB_EXTRAMB     = 196623
	X_NL_COLLATE_COLLSEQMB        = 196624
	X_NL_COLLATE_COLLSEQWC        = 196625
	X_NL_COLLATE_CODESET          = 196626
	X_NL_NUM_LC_COLLATE           = 196627

	// LC_CTYPE category: character classification.
	//      This information is accessed by the functions in <ctype.h>.
	//      These `nl_langinfo' names are used only internally.
	X_NL_CTYPE_CLASS                        = 0
	X_NL_CTYPE_TOUPPER                      = 1
	X_NL_CTYPE_GAP1                         = 2
	X_NL_CTYPE_TOLOWER                      = 3
	X_NL_CTYPE_GAP2                         = 4
	X_NL_CTYPE_CLASS32                      = 5
	X_NL_CTYPE_GAP3                         = 6
	X_NL_CTYPE_GAP4                         = 7
	X_NL_CTYPE_GAP5                         = 8
	X_NL_CTYPE_GAP6                         = 9
	X_NL_CTYPE_CLASS_NAMES                  = 10
	X_NL_CTYPE_MAP_NAMES                    = 11
	X_NL_CTYPE_WIDTH                        = 12
	X_NL_CTYPE_MB_CUR_MAX                   = 13
	X_NL_CTYPE_CODESET_NAME                 = 14
	CODESET                                 = 14
	X_NL_CTYPE_TOUPPER32                    = 15
	X_NL_CTYPE_TOLOWER32                    = 16
	X_NL_CTYPE_CLASS_OFFSET                 = 17
	X_NL_CTYPE_MAP_OFFSET                   = 18
	X_NL_CTYPE_INDIGITS_MB_LEN              = 19
	X_NL_CTYPE_INDIGITS0_MB                 = 20
	X_NL_CTYPE_INDIGITS1_MB                 = 21
	X_NL_CTYPE_INDIGITS2_MB                 = 22
	X_NL_CTYPE_INDIGITS3_MB                 = 23
	X_NL_CTYPE_INDIGITS4_MB                 = 24
	X_NL_CTYPE_INDIGITS5_MB                 = 25
	X_NL_CTYPE_INDIGITS6_MB                 = 26
	X_NL_CTYPE_INDIGITS7_MB                 = 27
	X_NL_CTYPE_INDIGITS8_MB                 = 28
	X_NL_CTYPE_INDIGITS9_MB                 = 29
	X_NL_CTYPE_INDIGITS_WC_LEN              = 30
	X_NL_CTYPE_INDIGITS0_WC                 = 31
	X_NL_CTYPE_INDIGITS1_WC                 = 32
	X_NL_CTYPE_INDIGITS2_WC                 = 33
	X_NL_CTYPE_INDIGITS3_WC                 = 34
	X_NL_CTYPE_INDIGITS4_WC                 = 35
	X_NL_CTYPE_INDIGITS5_WC                 = 36
	X_NL_CTYPE_INDIGITS6_WC                 = 37
	X_NL_CTYPE_INDIGITS7_WC                 = 38
	X_NL_CTYPE_INDIGITS8_WC                 = 39
	X_NL_CTYPE_INDIGITS9_WC                 = 40
	X_NL_CTYPE_OUTDIGIT0_MB                 = 41
	X_NL_CTYPE_OUTDIGIT1_MB                 = 42
	X_NL_CTYPE_OUTDIGIT2_MB                 = 43
	X_NL_CTYPE_OUTDIGIT3_MB                 = 44
	X_NL_CTYPE_OUTDIGIT4_MB                 = 45
	X_NL_CTYPE_OUTDIGIT5_MB                 = 46
	X_NL_CTYPE_OUTDIGIT6_MB                 = 47
	X_NL_CTYPE_OUTDIGIT7_MB                 = 48
	X_NL_CTYPE_OUTDIGIT8_MB                 = 49
	X_NL_CTYPE_OUTDIGIT9_MB                 = 50
	X_NL_CTYPE_OUTDIGIT0_WC                 = 51
	X_NL_CTYPE_OUTDIGIT1_WC                 = 52
	X_NL_CTYPE_OUTDIGIT2_WC                 = 53
	X_NL_CTYPE_OUTDIGIT3_WC                 = 54
	X_NL_CTYPE_OUTDIGIT4_WC                 = 55
	X_NL_CTYPE_OUTDIGIT5_WC                 = 56
	X_NL_CTYPE_OUTDIGIT6_WC                 = 57
	X_NL_CTYPE_OUTDIGIT7_WC                 = 58
	X_NL_CTYPE_OUTDIGIT8_WC                 = 59
	X_NL_CTYPE_OUTDIGIT9_WC                 = 60
	X_NL_CTYPE_TRANSLIT_TAB_SIZE            = 61
	X_NL_CTYPE_TRANSLIT_FROM_IDX            = 62
	X_NL_CTYPE_TRANSLIT_FROM_TBL            = 63
	X_NL_CTYPE_TRANSLIT_TO_IDX              = 64
	X_NL_CTYPE_TRANSLIT_TO_TBL              = 65
	X_NL_CTYPE_TRANSLIT_DEFAULT_MISSING_LEN = 66
	X_NL_CTYPE_TRANSLIT_DEFAULT_MISSING     = 67
	X_NL_CTYPE_TRANSLIT_IGNORE_LEN          = 68
	X_NL_CTYPE_TRANSLIT_IGNORE              = 69
	X_NL_CTYPE_MAP_TO_NONASCII              = 70
	X_NL_CTYPE_NONASCII_CASE                = 71
	X_NL_CTYPE_EXTRA_MAP_1                  = 72
	X_NL_CTYPE_EXTRA_MAP_2                  = 73
	X_NL_CTYPE_EXTRA_MAP_3                  = 74
	X_NL_CTYPE_EXTRA_MAP_4                  = 75
	X_NL_CTYPE_EXTRA_MAP_5                  = 76
	X_NL_CTYPE_EXTRA_MAP_6                  = 77
	X_NL_CTYPE_EXTRA_MAP_7                  = 78
	X_NL_CTYPE_EXTRA_MAP_8                  = 79
	X_NL_CTYPE_EXTRA_MAP_9                  = 80
	X_NL_CTYPE_EXTRA_MAP_10                 = 81
	X_NL_CTYPE_EXTRA_MAP_11                 = 82
	X_NL_CTYPE_EXTRA_MAP_12                 = 83
	X_NL_CTYPE_EXTRA_MAP_13                 = 84
	X_NL_CTYPE_EXTRA_MAP_14                 = 85
	X_NL_NUM_LC_CTYPE                       = 86

	// LC_MONETARY category: formatting of monetary quantities.
	//      These items each correspond to a member of `struct lconv',
	//      defined in <locale.h>.
	X__INT_CURR_SYMBOL                   = 262144
	X__CURRENCY_SYMBOL                   = 262145
	X__MON_DECIMAL_POINT                 = 262146
	X__MON_THOUSANDS_SEP                 = 262147
	X__MON_GROUPING                      = 262148
	X__POSITIVE_SIGN                     = 262149
	X__NEGATIVE_SIGN                     = 262150
	X__INT_FRAC_DIGITS                   = 262151
	X__FRAC_DIGITS                       = 262152
	X__P_CS_PRECEDES                     = 262153
	X__P_SEP_BY_SPACE                    = 262154
	X__N_CS_PRECEDES                     = 262155
	X__N_SEP_BY_SPACE                    = 262156
	X__P_SIGN_POSN                       = 262157
	X__N_SIGN_POSN                       = 262158
	X_NL_MONETARY_CRNCYSTR               = 262159
	X__INT_P_CS_PRECEDES                 = 262160
	X__INT_P_SEP_BY_SPACE                = 262161
	X__INT_N_CS_PRECEDES                 = 262162
	X__INT_N_SEP_BY_SPACE                = 262163
	X__INT_P_SIGN_POSN                   = 262164
	X__INT_N_SIGN_POSN                   = 262165
	X_NL_MONETARY_DUO_INT_CURR_SYMBOL    = 262166
	X_NL_MONETARY_DUO_CURRENCY_SYMBOL    = 262167
	X_NL_MONETARY_DUO_INT_FRAC_DIGITS    = 262168
	X_NL_MONETARY_DUO_FRAC_DIGITS        = 262169
	X_NL_MONETARY_DUO_P_CS_PRECEDES      = 262170
	X_NL_MONETARY_DUO_P_SEP_BY_SPACE     = 262171
	X_NL_MONETARY_DUO_N_CS_PRECEDES      = 262172
	X_NL_MONETARY_DUO_N_SEP_BY_SPACE     = 262173
	X_NL_MONETARY_DUO_INT_P_CS_PRECEDES  = 262174
	X_NL_MONETARY_DUO_INT_P_SEP_BY_SPACE = 262175
	X_NL_MONETARY_DUO_INT_N_CS_PRECEDES  = 262176
	X_NL_MONETARY_DUO_INT_N_SEP_BY_SPACE = 262177
	X_NL_MONETARY_DUO_P_SIGN_POSN        = 262178
	X_NL_MONETARY_DUO_N_SIGN_POSN        = 262179
	X_NL_MONETARY_DUO_INT_P_SIGN_POSN    = 262180
	X_NL_MONETARY_DUO_INT_N_SIGN_POSN    = 262181
	X_NL_MONETARY_UNO_VALID_FROM         = 262182
	X_NL_MONETARY_UNO_VALID_TO           = 262183
	X_NL_MONETARY_DUO_VALID_FROM         = 262184
	X_NL_MONETARY_DUO_VALID_TO           = 262185
	X_NL_MONETARY_CONVERSION_RATE        = 262186
	X_NL_MONETARY_DECIMAL_POINT_WC       = 262187
	X_NL_MONETARY_THOUSANDS_SEP_WC       = 262188
	X_NL_MONETARY_CODESET                = 262189
	X_NL_NUM_LC_MONETARY                 = 262190

	// LC_NUMERIC category: formatting of numbers.
	//      These also correspond to members of `struct lconv'; see <locale.h>.
	X__DECIMAL_POINT              = 65536
	RADIXCHAR                     = 65536
	X__THOUSANDS_SEP              = 65537
	THOUSEP                       = 65537
	X__GROUPING                   = 65538
	X_NL_NUMERIC_DECIMAL_POINT_WC = 65539
	X_NL_NUMERIC_THOUSANDS_SEP_WC = 65540
	X_NL_NUMERIC_CODESET          = 65541
	X_NL_NUM_LC_NUMERIC           = 65542

	X__YESEXPR            = 327680 // Regex matching ``yes'' input.
	X__NOEXPR             = 327681 // Regex matching ``no'' input.
	X__YESSTR             = 327682 // Output string for ``yes''.
	X__NOSTR              = 327683 // Output string for ``no''.
	X_NL_MESSAGES_CODESET = 327684
	X_NL_NUM_LC_MESSAGES  = 327685

	X_NL_PAPER_HEIGHT  = 458752
	X_NL_PAPER_WIDTH   = 458753
	X_NL_PAPER_CODESET = 458754
	X_NL_NUM_LC_PAPER  = 458755

	X_NL_NAME_NAME_FMT  = 524288
	X_NL_NAME_NAME_GEN  = 524289
	X_NL_NAME_NAME_MR   = 524290
	X_NL_NAME_NAME_MRS  = 524291
	X_NL_NAME_NAME_MISS = 524292
	X_NL_NAME_NAME_MS   = 524293
	X_NL_NAME_CODESET   = 524294
	X_NL_NUM_LC_NAME    = 524295

	X_NL_ADDRESS_POSTAL_FMT   = 589824
	X_NL_ADDRESS_COUNTRY_NAME = 589825
	X_NL_ADDRESS_COUNTRY_POST = 589826
	X_NL_ADDRESS_COUNTRY_AB2  = 589827
	X_NL_ADDRESS_COUNTRY_AB3  = 589828
	X_NL_ADDRESS_COUNTRY_CAR  = 589829
	X_NL_ADDRESS_COUNTRY_NUM  = 589830
	X_NL_ADDRESS_COUNTRY_ISBN = 589831
	X_NL_ADDRESS_LANG_NAME    = 589832
	X_NL_ADDRESS_LANG_AB      = 589833
	X_NL_ADDRESS_LANG_TERM    = 589834
	X_NL_ADDRESS_LANG_LIB     = 589835
	X_NL_ADDRESS_CODESET      = 589836
	X_NL_NUM_LC_ADDRESS       = 589837

	X_NL_TELEPHONE_TEL_INT_FMT = 655360
	X_NL_TELEPHONE_TEL_DOM_FMT = 655361
	X_NL_TELEPHONE_INT_SELECT  = 655362
	X_NL_TELEPHONE_INT_PREFIX  = 655363
	X_NL_TELEPHONE_CODESET     = 655364
	X_NL_NUM_LC_TELEPHONE      = 655365

	X_NL_MEASUREMENT_MEASUREMENT = 720896
	X_NL_MEASUREMENT_CODESET     = 720897
	X_NL_NUM_LC_MEASUREMENT      = 720898

	X_NL_IDENTIFICATION_TITLE        = 786432
	X_NL_IDENTIFICATION_SOURCE       = 786433
	X_NL_IDENTIFICATION_ADDRESS      = 786434
	X_NL_IDENTIFICATION_CONTACT      = 786435
	X_NL_IDENTIFICATION_EMAIL        = 786436
	X_NL_IDENTIFICATION_TEL          = 786437
	X_NL_IDENTIFICATION_FAX          = 786438
	X_NL_IDENTIFICATION_LANGUAGE     = 786439
	X_NL_IDENTIFICATION_TERRITORY    = 786440
	X_NL_IDENTIFICATION_AUDIENCE     = 786441
	X_NL_IDENTIFICATION_APPLICATION  = 786442
	X_NL_IDENTIFICATION_ABBREVIATION = 786443
	X_NL_IDENTIFICATION_REVISION     = 786444
	X_NL_IDENTIFICATION_DATE         = 786445
	X_NL_IDENTIFICATION_CATEGORY     = 786446
	X_NL_IDENTIFICATION_CODESET      = 786447
	X_NL_NUM_LC_IDENTIFICATION       = 786448

	// This marks the highest value used.
	X_NL_NUM = 786449
)

type Ptrdiff_t = int32 /* <builtin>:3:26 */

type Size_t = uint32 /* <builtin>:9:23 */

type Wchar_t = uint32 /* <builtin>:15:24 */

type X__builtin_va_list = uintptr /* <builtin>:46:14 */
type X__float128 = float64        /* <builtin>:47:21 */

// Access to locale-dependent parameters.
//    Copyright (C) 1995-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// Get the type definition.
// Copyright (C) 1996-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// Copyright (C) 1991-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// These are defined by the user (or the compiler)
//    to specify the desired environment:
//
//    __STRICT_ANSI__	ISO Standard C.
//    _ISOC99_SOURCE	Extensions to ISO C89 from ISO C99.
//    _ISOC11_SOURCE	Extensions to ISO C99 from ISO C11.
//    _ISOC2X_SOURCE	Extensions to ISO C99 from ISO C2X.
//    __STDC_WANT_LIB_EXT2__
// 			Extensions to ISO C99 from TR 27431-2:2010.
//    __STDC_WANT_IEC_60559_BFP_EXT__
// 			Extensions to ISO C11 from TS 18661-1:2014.
//    __STDC_WANT_IEC_60559_FUNCS_EXT__
// 			Extensions to ISO C11 from TS 18661-4:2015.
//    __STDC_WANT_IEC_60559_TYPES_EXT__
// 			Extensions to ISO C11 from TS 18661-3:2015.
//
//    _POSIX_SOURCE	IEEE Std 1003.1.
//    _POSIX_C_SOURCE	If ==1, like _POSIX_SOURCE; if >=2 add IEEE Std 1003.2;
// 			if >=199309L, add IEEE Std 1003.1b-1993;
// 			if >=199506L, add IEEE Std 1003.1c-1995;
// 			if >=200112L, all of IEEE 1003.1-2004
// 			if >=200809L, all of IEEE 1003.1-2008
//    _XOPEN_SOURCE	Includes POSIX and XPG things.  Set to 500 if
// 			Single Unix conformance is wanted, to 600 for the
// 			sixth revision, to 700 for the seventh revision.
//    _XOPEN_SOURCE_EXTENDED XPG things and X/Open Unix extensions.
//    _LARGEFILE_SOURCE	Some more functions for correct standard I/O.
//    _LARGEFILE64_SOURCE	Additional functionality from LFS for large files.
//    _FILE_OFFSET_BITS=N	Select default filesystem interface.
//    _ATFILE_SOURCE	Additional *at interfaces.
//    _GNU_SOURCE		All of the above, plus GNU extensions.
//    _DEFAULT_SOURCE	The default set of features (taking precedence over
// 			__STRICT_ANSI__).
//
//    _FORTIFY_SOURCE	Add security hardening to many library functions.
// 			Set to 1 or 2; 2 performs stricter checks than 1.
//
//    _REENTRANT, _THREAD_SAFE
// 			Obsolete; equivalent to _POSIX_C_SOURCE=199506L.
//
//    The `-ansi' switch to the GNU C compiler, and standards conformance
//    options such as `-std=c99', define __STRICT_ANSI__.  If none of
//    these are defined, or if _DEFAULT_SOURCE is defined, the default is
//    to have _POSIX_SOURCE set to one and _POSIX_C_SOURCE set to
//    200809L, as well as enabling miscellaneous functions from BSD and
//    SVID.  If more than one of these are defined, they accumulate.  For
//    example __STRICT_ANSI__, _POSIX_SOURCE and _POSIX_C_SOURCE together
//    give you ISO C, 1003.1, and 1003.2, but nothing else.
//
//    These are defined by this file and are used by the
//    header files to decide what to declare or define:
//
//    __GLIBC_USE (F)	Define things from feature set F.  This is defined
// 			to 1 or 0; the subsequent macros are either defined
// 			or undefined, and those tests should be moved to
// 			__GLIBC_USE.
//    __USE_ISOC11		Define ISO C11 things.
//    __USE_ISOC99		Define ISO C99 things.
//    __USE_ISOC95		Define ISO C90 AMD1 (C95) things.
//    __USE_ISOCXX11	Define ISO C++11 things.
//    __USE_POSIX		Define IEEE Std 1003.1 things.
//    __USE_POSIX2		Define IEEE Std 1003.2 things.
//    __USE_POSIX199309	Define IEEE Std 1003.1, and .1b things.
//    __USE_POSIX199506	Define IEEE Std 1003.1, .1b, .1c and .1i things.
//    __USE_XOPEN		Define XPG things.
//    __USE_XOPEN_EXTENDED	Define X/Open Unix things.
//    __USE_UNIX98		Define Single Unix V2 things.
//    __USE_XOPEN2K        Define XPG6 things.
//    __USE_XOPEN2KXSI     Define XPG6 XSI things.
//    __USE_XOPEN2K8       Define XPG7 things.
//    __USE_XOPEN2K8XSI    Define XPG7 XSI things.
//    __USE_LARGEFILE	Define correct standard I/O things.
//    __USE_LARGEFILE64	Define LFS things with separate names.
//    __USE_FILE_OFFSET64	Define 64bit interface as default.
//    __USE_MISC		Define things from 4.3BSD or System V Unix.
//    __USE_ATFILE		Define *at interfaces and AT_* constants for them.
//    __USE_GNU		Define GNU extensions.
//    __USE_FORTIFY_LEVEL	Additional security measures used, according to level.
//
//    The macros `__GNU_LIBRARY__', `__GLIBC__', and `__GLIBC_MINOR__' are
//    defined by this file unconditionally.  `__GNU_LIBRARY__' is provided
//    only for compatibility.  All new code should use the other symbols
//    to test for features.
//
//    All macros listed above as possibly being defined by this file are
//    explicitly undefined if they are not explicitly defined.
//    Feature-test macros that are not defined by the user or compiler
//    but are implied by the other feature-test macros defined (or by the
//    lack of any definitions) are defined by the file.
//
//    ISO C feature test macros depend on the definition of the macro
//    when an affected header is included, not when the first system
//    header is included, and so they are handled in
//    <bits/libc-header-start.h>, which does not have a multiple include
//    guard.  Feature test macros that can be handled from the first
//    system header included are handled here.

// Undefine everything, so we get a clean slate.

// Suppress kernel-name space pollution unless user expressedly asks
//    for it.

// Convenience macro to test the version of gcc.
//    Use like this:
//    #if __GNUC_PREREQ (2,8)
//    ... code requiring gcc 2.8 or later ...
//    #endif
//    Note: only works for GCC 2.0 and later, because __GNUC_MINOR__ was
//    added in 2.0.

// Similarly for clang.  Features added to GCC after version 4.2 may
//    or may not also be available in clang, and clang's definitions of
//    __GNUC(_MINOR)__ are fixed at 4 and 2 respectively.  Not all such
//    features can be queried via __has_extension/__has_feature.

// Whether to use feature set F.

// _BSD_SOURCE and _SVID_SOURCE are deprecated aliases for
//    _DEFAULT_SOURCE.  If _DEFAULT_SOURCE is present we do not
//    issue a warning; the expectation is that the source is being
//    transitioned to use the new macro.

// If _GNU_SOURCE was defined by the user, turn on all the other features.

// If nothing (other than _GNU_SOURCE and _DEFAULT_SOURCE) is defined,
//    define _DEFAULT_SOURCE.

// This is to enable the ISO C2X extension.

// This is to enable the ISO C11 extension.

// This is to enable the ISO C99 extension.

// This is to enable the ISO C90 Amendment 1:1995 extension.

// If none of the ANSI/POSIX macros are defined, or if _DEFAULT_SOURCE
//    is defined, use POSIX.1-2008 (or another version depending on
//    _XOPEN_SOURCE).

// Some C libraries once required _REENTRANT and/or _THREAD_SAFE to be
//    defined in all multithreaded code.  GNU libc has not required this
//    for many years.  We now treat them as compatibility synonyms for
//    _POSIX_C_SOURCE=199506L, which is the earliest level of POSIX with
//    comprehensive support for multithreaded code.  Using them never
//    lowers the selected level of POSIX conformance, only raises it.

// The function 'gets' existed in C89, but is impossible to use
//    safely.  It has been removed from ISO C11 and ISO C++14.  Note: for
//    compatibility with various implementations of <cstdio>, this test
//    must consider only the value of __cplusplus when compiling C++.

// GNU formerly extended the scanf functions with modified format
//    specifiers %as, %aS, and %a[...] that allocate a buffer for the
//    input using malloc.  This extension conflicts with ISO C99, which
//    defines %a as a standalone format specifier that reads a floating-
//    point number; moreover, POSIX.1-2008 provides the same feature
//    using the modifier letter 'm' instead (%ms, %mS, %m[...]).
//
//    We now follow C99 unless GNU extensions are active and the compiler
//    is specifically in C89 or C++98 mode (strict or not).  For
//    instance, with GCC, -std=gnu11 will have C99-compliant scanf with
//    or without -D_GNU_SOURCE, but -std=c89 -D_GNU_SOURCE will have the
//    old extension.

// Get definitions of __STDC_* predefined macros, if the compiler has
//    not preincluded this header automatically.
// Copyright (C) 1991-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// This macro indicates that the installed library is the GNU C Library.
//    For historic reasons the value now is 6 and this will stay from now
//    on.  The use of this variable is deprecated.  Use __GLIBC__ and
//    __GLIBC_MINOR__ now (see below) when you want to test for a specific
//    GNU C library version and use the values in <gnu/lib-names.h> to get
//    the sonames of the shared libraries.

// Major and minor version number of the GNU C library package.  Use
//    these macros to test for features in specific releases.

// This is here only because every header file already includes this one.
// Copyright (C) 1992-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// We are almost always included from features.h.

// The GNU libc does not support any K&R compilers or the traditional mode
//    of ISO C compilers anymore.  Check for some of the combinations not
//    anymore supported.

// Some user header file might have defined this before.

// All functions, except those with callbacks or those that
//    synchronize memory, are leaf functions.

// GCC can always grok prototypes.  For C++ programs we add throw()
//    to help it optimize the function calls.  But this works only with
//    gcc 2.8.x and egcs.  For gcc 3.2 and up we even mark C functions
//    as non-throwing using a function attribute since programs can use
//    the -fexceptions options for C code as well.

// Compilers that are not clang may object to
//        #if defined __clang__ && __has_extension(...)
//    even though they do not need to evaluate the right-hand side of the &&.

// These two macros are not used in glibc anymore.  They are kept here
//    only because some other projects expect the macros to be defined.

// For these things, GCC behaves the ANSI way normally,
//    and the non-ANSI way under -traditional.

// This is not a typedef so `const __ptr_t' does the right thing.

// C++ needs to know that types and declarations are C, not C++.

// Fortify support.

// Support for flexible arrays.
//    Headers that should use flexible arrays only if they're "real"
//    (e.g. only if they won't affect sizeof()) should test
//    #if __glibc_c99_flexarr_available.

// __asm__ ("xyz") is used throughout the headers to rename functions
//    at the assembly language level.  This is wrapped by the __REDIRECT
//    macro, in order to support compilers that can do this some other
//    way.  When compilers don't support asm-names at all, we have to do
//    preprocessor tricks instead (which don't have exactly the right
//    semantics, but it's the best we can do).
//
//    Example:
//    int __REDIRECT(setpgrp, (__pid_t pid, __pid_t pgrp), setpgid);

//
// #elif __SOME_OTHER_COMPILER__
//
// # define __REDIRECT(name, proto, alias) name proto; 	_Pragma("let " #name " = " #alias)

// GCC has various useful declarations that can be made with the
//    `__attribute__' syntax.  All of the ways we use this do fine if
//    they are omitted for compilers that don't understand it.

// At some point during the gcc 2.96 development the `malloc' attribute
//    for functions was introduced.  We don't want to use it unconditionally
//    (although this would be possible) since it generates warnings.

// Tell the compiler which arguments to an allocation function
//    indicate the size of the allocation.

// At some point during the gcc 2.96 development the `pure' attribute
//    for functions was introduced.  We don't want to use it unconditionally
//    (although this would be possible) since it generates warnings.

// This declaration tells the compiler that the value is constant.

// At some point during the gcc 3.1 development the `used' attribute
//    for functions was introduced.  We don't want to use it unconditionally
//    (although this would be possible) since it generates warnings.

// Since version 3.2, gcc allows marking deprecated functions.

// Since version 4.5, gcc also allows one to specify the message printed
//    when a deprecated function is used.  clang claims to be gcc 4.2, but
//    may also support this feature.

// At some point during the gcc 2.8 development the `format_arg' attribute
//    for functions was introduced.  We don't want to use it unconditionally
//    (although this would be possible) since it generates warnings.
//    If several `format_arg' attributes are given for the same function, in
//    gcc-3.0 and older, all but the last one are ignored.  In newer gccs,
//    all designated arguments are considered.

// At some point during the gcc 2.97 development the `strfmon' format
//    attribute for functions was introduced.  We don't want to use it
//    unconditionally (although this would be possible) since it
//    generates warnings.

// The nonull function attribute allows to mark pointer parameters which
//    must not be NULL.

// If fortification mode, we warn about unused results of certain
//    function calls which can lead to problems.

// Forces a function to be always inlined.
// The Linux kernel defines __always_inline in stddef.h (283d7573), and
//    it conflicts with this definition.  Therefore undefine it first to
//    allow either header to be included first.

// Associate error messages with the source location of the call site rather
//    than with the source location inside the function.

// GCC 4.3 and above with -std=c99 or -std=gnu99 implements ISO C99
//    inline semantics, unless -fgnu89-inline is used.  Using __GNUC_STDC_INLINE__
//    or __GNUC_GNU_INLINE is not a good enough check for gcc because gcc versions
//    older than 4.3 may define these macros and still not guarantee GNU inlining
//    semantics.
//
//    clang++ identifies itself as gcc-4.2, but has support for GNU inlining
//    semantics, that can be checked for by using the __GNUC_STDC_INLINE_ and
//    __GNUC_GNU_INLINE__ macro definitions.

// GCC 4.3 and above allow passing all anonymous arguments of an
//    __extern_always_inline function to some other vararg function.

// It is possible to compile containing GCC extensions even if GCC is
//    run in pedantic mode if the uses are carefully marked using the
//    `__extension__' keyword.  But this is not generally available before
//    version 2.8.

// __restrict is known in EGCS 1.2 and above.

// ISO C99 also allows to declare arrays as non-overlapping.  The syntax is
//      array_name[restrict]
//    GCC 3.1 supports this.

// Describes a char array whose address can safely be passed as the first
//    argument to strncpy and strncat, as the char array is not necessarily
//    a NUL-terminated string.

// Undefine (also defined in libc-symbols.h).
// Copies attributes from the declaration or type referenced by
//    the argument.

// Copyright (C) 1999-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// Properties of long double type.
//    Copyright (C) 2016-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License  published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// This header is included by <sys/cdefs.h>.
//
//    If long double is ABI-compatible with double, it should define
//    __NO_LONG_DOUBLE_MATH to 1; otherwise, it should leave
//    __NO_LONG_DOUBLE_MATH undefined.
//
//    If this build of the GNU C Library supports both long double
//    ABI-compatible with double and some other long double format not
//    ABI-compatible with double, it should define
//    __LONG_DOUBLE_MATH_OPTIONAL to 1; otherwise, it should leave
//    __LONG_DOUBLE_MATH_OPTIONAL undefined.
//
//    If __NO_LONG_DOUBLE_MATH is already defined, this header must not
//    define anything; this is needed to work with the definition of
//    __NO_LONG_DOUBLE_MATH in nldbl-compat.h.

// In the default version of this header, long double is
//    ABI-compatible with double.

// __glibc_macro_warning (MESSAGE) issues warning MESSAGE.  This is
//    intended for use in preprocessor macros.
//
//    Note: MESSAGE must be a _single_ string; concatenation of string
//    literals is not supported.

// Generic selection (ISO C11) is a C-only feature, available in GCC
//    since version 4.9.  Previous versions do not provide generic
//    selection, even though they might set __STDC_VERSION__ to 201112L,
//    when in -std=c11 mode.  Thus, we must check for !defined __GNUC__
//    when testing __STDC_VERSION__ for generic selection support.
//    On the other hand, Clang also defines __GNUC__, so a clang-specific
//    check is required to enable the use of generic selection.

// If we don't have __REDIRECT, prototypes will be missing if
//    __USE_FILE_OFFSET64 but not __USE_LARGEFILE[64].

// Decide whether we can define 'extern inline' functions in headers.

// This is here only because every header file already includes this one.
//    Get the definitions of all the appropriate `__stub_FUNCTION' symbols.
//    <gnu/stubs.h> contains `#define __stub_FUNCTION' when FUNCTION is a stub
//    that will always return failure (and set errno to ENOSYS).
// This file is automatically generated.
//    This file selects the right generated file of `__stub_FUNCTION' macros
//    based on the architecture being compiled for.

// This file is automatically generated.
//    It defines a symbol `__stub_FUNCTION' for each function
//    in the C library which is a stub, meaning it will fail
//    every time called, usually setting errno to ENOSYS.

// The default message set used by the gencat program.

// Value for FLAG parameter of `catgets' to say we want XPG4 compliance.

// Message catalog descriptor type.
type Nl_catd = uintptr /* nl_types.h:33:14 */

// Type used by `nl_langinfo'.
type Nl_item = int32 /* nl_types.h:36:13 */

// POSIX.1-2008 extended locale interface (see locale.h).
// Definition of locale_t.
//    Copyright (C) 2017-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// Definition of struct __locale_struct and __locale_t.
//    Copyright (C) 1997-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// POSIX.1-2008: the locale_t type, representing a locale context
//    (implementation-namespace version).  This type should be treated
//    as opaque by applications; some details are exposed for the sake of
//    efficiency in e.g. ctype functions.

type X__locale_struct = struct {
	F__locales       [13]uintptr
	F__ctype_b       uintptr
	F__ctype_tolower uintptr
	F__ctype_toupper uintptr
	F__names         [13]uintptr
} /* __locale_t.h:28:1 */

type X__locale_t = uintptr /* __locale_t.h:42:32 */

type Locale_t = X__locale_t /* locale_t.h:24:20 */

var _ uint8 /* gen.c:2:13: */
