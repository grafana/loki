{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='v1beta2', url='', help=''),
  controllerRevision: (import 'controllerRevision.libsonnet'),
  daemonSet: (import 'daemonSet.libsonnet'),
  daemonSetCondition: (import 'daemonSetCondition.libsonnet'),
  daemonSetSpec: (import 'daemonSetSpec.libsonnet'),
  daemonSetStatus: (import 'daemonSetStatus.libsonnet'),
  daemonSetUpdateStrategy: (import 'daemonSetUpdateStrategy.libsonnet'),
  deployment: (import 'deployment.libsonnet'),
  deploymentCondition: (import 'deploymentCondition.libsonnet'),
  deploymentSpec: (import 'deploymentSpec.libsonnet'),
  deploymentStatus: (import 'deploymentStatus.libsonnet'),
  deploymentStrategy: (import 'deploymentStrategy.libsonnet'),
  replicaSet: (import 'replicaSet.libsonnet'),
  replicaSetCondition: (import 'replicaSetCondition.libsonnet'),
  replicaSetSpec: (import 'replicaSetSpec.libsonnet'),
  replicaSetStatus: (import 'replicaSetStatus.libsonnet'),
  rollingUpdateDaemonSet: (import 'rollingUpdateDaemonSet.libsonnet'),
  rollingUpdateDeployment: (import 'rollingUpdateDeployment.libsonnet'),
  rollingUpdateStatefulSetStrategy: (import 'rollingUpdateStatefulSetStrategy.libsonnet'),
  scale: (import 'scale.libsonnet'),
  scaleSpec: (import 'scaleSpec.libsonnet'),
  scaleStatus: (import 'scaleStatus.libsonnet'),
  statefulSet: (import 'statefulSet.libsonnet'),
  statefulSetCondition: (import 'statefulSetCondition.libsonnet'),
  statefulSetSpec: (import 'statefulSetSpec.libsonnet'),
  statefulSetStatus: (import 'statefulSetStatus.libsonnet'),
  statefulSetUpdateStrategy: (import 'statefulSetUpdateStrategy.libsonnet')
}