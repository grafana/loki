version: 2

workflows:
  version: 2
  test-build-deploy:
    jobs:
    - test
    - test-helm
    - build
    - lint
    - publish:
        requires:
        - test
        - test-helm
        - build
        - lint
        filters:
          branches:
            only: master
    - publish-master:
        requires:
        - test
        - test-helm
        - build
        - lint
        filters:
          branches:
            only: master
    - publish-helm:
        requires:
        - test
        - test-helm
        - build
        - lint
        filters:
          branches:
            only: master
    - deploy:
        requires:
        - publish
        filters:
          branches:
            only: master

# https://circleci.com/blog/circleci-hacks-reuse-yaml-in-your-circleci-config-with-yaml/
defaults: &defaults
  docker:
    - image: grafana/loki-build-image:0.3.0
  working_directory: /go/src/github.com/grafana/loki

jobs:
  test:
    <<: *defaults
    steps:
      - checkout

      - run:
          name: Run Unit Tests
          command: |
            make test

  lint:
    <<: *defaults
    steps:
      - checkout

      - run:
          name: Lint
          command: |
            make lint

      - run:
          name: Check Generated Fies
          command: |
            make BUILD_IN_CONTAINER=false check-generated-files

  build:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: Promtail cross platform
          command: |
            make GOOS=linux BUILD_IN_CONTAINER=false promtail
            rm cmd/promtail/promtail
            make GOOS=windows BUILD_IN_CONTAINER=false promtail

      - run:
          name: Build Images
          command: |
            make images

      - run:
          name: Save Images
          command: |
            make save-images

      - save_cache:
          key: v1-loki-{{ .Branch }}-{{ .Revision }}
          paths:
          - images/

      - save_cache:
          key: v1-loki-plugin-{{ .Branch }}-{{ .Revision }}
          paths:
          - cmd/docker-driver/docker-driver

  publish:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker

      - restore_cache:
          key: v1-loki-{{ .Branch }}-{{ .Revision }}
      - restore_cache:
          key: v1-loki-plugin-{{ .Branch }}-{{ .Revision }}

      - run:
          name: Load Images
          command: |
            make load-images

      - run:
          name: Push Images
          command: |
            if [ -n "$DOCKER_USER" ]; then
              docker login -u "$DOCKER_USER" -p "$DOCKER_PASS" &&
              make push-images
            fi

      - run:
          name: Push Docker Plugin
          command: |
            if [ -n "$DOCKER_USER" ]; then
              docker login -u "$DOCKER_USER" -p "$DOCKER_PASS" &&
              make BUILD_IN_CONTAINER=false docker-driver-push
            fi

  publish-master:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker

      - restore_cache:
          key: v1-loki-{{ .Branch }}-{{ .Revision }}
      - restore_cache:
          key: v1-loki-plugin-{{ .Branch }}-{{ .Revision }}

      - run:
          name: Load Images
          command: |
            make load-images

      - run:
          name: Push Images
          command: |
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASS" &&
            make push-latest

      - run:
          name: Push Docker Plugin
          command: |
            if [ -n "$DOCKER_USER" ]; then
              docker login -u "$DOCKER_USER" -p "$DOCKER_PASS" &&
              PLUGIN_TAG=master make BUILD_IN_CONTAINER=false docker-driver-push && PLUGIN_TAG=latest make BUILD_IN_CONTAINER=false docker-driver-push
            fi

  test-helm:
    environment:
      CT_VERSION: 2.3.3
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run:
          name: Install k3s
          command: |
            curl -sfL https://get.k3s.io | sh -
            sudo chmod 755 /etc/rancher/k3s/k3s.yaml
            mkdir -p ~/.kube
            cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
      - run:
          name: Install Helm
          command: |
            curl -L https://git.io/get_helm.sh | bash
            kubectl apply -f tools/helm.yaml
            helm init --service-account helm --wait
      - run:
          name: Install Chart Testing tool
          command: |
            pip install yamale yamllint
            curl -Lo ct.tgz https://github.com/helm/chart-testing/releases/download/v${CT_VERSION}/chart-testing_${CT_VERSION}_linux_amd64.tar.gz
            sudo tar -C /usr/local/bin -xvf ct.tgz
            sudo mv /usr/local/bin/etc /etc/ct/
      - run:
          name: Run Chart Tests
          command: |
            ct lint --chart-dirs=production/helm --check-version-increment=false --validate-maintainers=false
            ct install --build-id=${CIRCLE_BUILD_NUM} --charts production/helm/loki-stack

  publish-helm:
    <<: *defaults
    steps:
      - add_ssh_keys:
          fingerprints:
            - "5a:d3:08:5e:f7:53:a0:c4:e9:5d:83:c6:02:6a:d9:bd"
      - checkout
      - run: make helm-publish

  deploy:
    <<: *defaults
    steps:
      - checkout

      - run: |
          curl -s --header "Content-Type: application/json" \
            --data "{\"build_parameters\": {\"CIRCLE_JOB\": \"deploy\", \"IMAGE_NAMES\": \"$(make images)\"}}" \
            --request POST \
            https://circleci.com/api/v1.1/project/github/raintank/deployment_tools/tree/master?circle-token=$CIRCLE_TOKEN

  release:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          key: v1-loki-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Load Images
          command: |
            touch loki-build-image/.uptodate &&
            make BUILD_IN_CONTAINER=false load-images
      - run:
          name: "Print Tag"
          command: echo ${CIRCLE_TAG}
      - run:
          name: "Release"
          command: |
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASS" &&
            make VERSION=${CIRCLE_TAG} release-perform
