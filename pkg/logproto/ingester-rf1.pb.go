// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/logproto/ingester-rf1.proto

package logproto

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	push "github.com/grafana/loki/pkg/push"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("pkg/logproto/ingester-rf1.proto", fileDescriptor_8ef2a56eb3f3c377) }

var fileDescriptor_8ef2a56eb3f3c377 = []byte{
	// 250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2f, 0xc8, 0x4e, 0xd7,
	0xcf, 0xc9, 0x4f, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0xcf, 0xcc, 0x4b, 0x4f, 0x2d, 0x2e, 0x49,
	0x2d, 0xd2, 0x2d, 0x4a, 0x33, 0xd4, 0x03, 0x0b, 0x09, 0x71, 0xc0, 0x24, 0xa5, 0x44, 0xd2, 0xf3,
	0xd3, 0xf3, 0x21, 0xea, 0x40, 0x2c, 0x88, 0xbc, 0x94, 0x7c, 0x7a, 0x7e, 0x7e, 0x7a, 0x4e, 0xaa,
	0x3e, 0x98, 0x97, 0x54, 0x9a, 0xa6, 0x5f, 0x92, 0x99, 0x9b, 0x5a, 0x5c, 0x92, 0x98, 0x5b, 0x00,
	0x55, 0x20, 0x8d, 0x62, 0x03, 0x8c, 0x01, 0x95, 0x14, 0x06, 0x49, 0x16, 0x94, 0x16, 0x67, 0x80,
	0x09, 0x88, 0xa0, 0x91, 0x0b, 0x17, 0x67, 0x40, 0x69, 0x71, 0x46, 0x6a, 0x51, 0x90, 0x9b, 0xa1,
	0x90, 0x39, 0x17, 0x0b, 0x88, 0x23, 0x24, 0xaa, 0x07, 0xd7, 0x0a, 0xe2, 0x07, 0xa5, 0x16, 0x96,
	0xa6, 0x16, 0x97, 0x48, 0x89, 0xa1, 0x0b, 0x17, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x2a, 0x31, 0x38,
	0xc5, 0x5e, 0x78, 0x28, 0xc7, 0x70, 0xe3, 0xa1, 0x1c, 0xc3, 0x87, 0x87, 0x72, 0x8c, 0x0d, 0x8f,
	0xe4, 0x18, 0x57, 0x3c, 0x92, 0x63, 0x3c, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07,
	0x8f, 0xe4, 0x18, 0x5f, 0x3c, 0x92, 0x63, 0xf8, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86,
	0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x88, 0x52, 0x4f, 0xcf, 0x2c, 0xc9, 0x28, 0x4d,
	0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0x2f, 0x4a, 0x4c, 0x4b, 0xcc, 0x4b, 0xd4, 0xcf, 0xc9, 0xcf,
	0xce, 0xd4, 0x2f, 0x33, 0xd6, 0x47, 0xf6, 0x48, 0x12, 0x1b, 0x98, 0x32, 0x06, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x29, 0x6e, 0xb8, 0x46, 0x41, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PusherRF1Client is the client API for PusherRF1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PusherRF1Client interface {
	Push(ctx context.Context, in *push.PushRequest, opts ...grpc.CallOption) (*push.PushResponse, error)
}

type pusherRF1Client struct {
	cc *grpc.ClientConn
}

func NewPusherRF1Client(cc *grpc.ClientConn) PusherRF1Client {
	return &pusherRF1Client{cc}
}

func (c *pusherRF1Client) Push(ctx context.Context, in *push.PushRequest, opts ...grpc.CallOption) (*push.PushResponse, error) {
	out := new(push.PushResponse)
	err := c.cc.Invoke(ctx, "/logproto.PusherRF1/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PusherRF1Server is the server API for PusherRF1 service.
type PusherRF1Server interface {
	Push(context.Context, *push.PushRequest) (*push.PushResponse, error)
}

// UnimplementedPusherRF1Server can be embedded to have forward compatible implementations.
type UnimplementedPusherRF1Server struct {
}

func (*UnimplementedPusherRF1Server) Push(ctx context.Context, req *push.PushRequest) (*push.PushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}

func RegisterPusherRF1Server(s *grpc.Server, srv PusherRF1Server) {
	s.RegisterService(&_PusherRF1_serviceDesc, srv)
}

func _PusherRF1_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(push.PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PusherRF1Server).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logproto.PusherRF1/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PusherRF1Server).Push(ctx, req.(*push.PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PusherRF1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "logproto.PusherRF1",
	HandlerType: (*PusherRF1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _PusherRF1_Push_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/logproto/ingester-rf1.proto",
}
