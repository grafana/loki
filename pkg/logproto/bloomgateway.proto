syntax = "proto3";

package logproto;

import "gogoproto/gogo.proto";
import "pkg/logproto/logproto.proto";

option go_package = "github.com/grafana/loki/v3/pkg/logproto";

message FilterChunkRefRequest {
  int64 from = 1 [
    (gogoproto.customtype) = "github.com/prometheus/common/model.Time",
    (gogoproto.nullable) = false
  ];
  int64 through = 2 [
    (gogoproto.customtype) = "github.com/prometheus/common/model.Time",
    (gogoproto.nullable) = false
  ];
  repeated GroupedChunkRefs refs = 3;
  // TODO(salvacorts): Delete this field once the weekly release is done.
  repeated LineFilter filters = 4 [
    (gogoproto.customtype) = "github.com/grafana/loki/v3/pkg/logql/syntax.LineFilter",
    (gogoproto.nullable) = false
  ];
  Plan plan = 5 [
    (gogoproto.customtype) = "github.com/grafana/loki/v3/pkg/querier/plan.QueryPlan",
    (gogoproto.nullable) = false
  ];
}

message FilterChunkRefResponse {
  repeated GroupedChunkRefs chunkRefs = 1;
}

message ShortRef {
  int64 from = 1 [
    (gogoproto.customtype) = "github.com/prometheus/common/model.Time",
    (gogoproto.nullable) = false
  ];
  int64 through = 2 [
    (gogoproto.customtype) = "github.com/prometheus/common/model.Time",
    (gogoproto.nullable) = false
  ];
  uint32 checksum = 3;
}

message GroupedChunkRefs {
  uint64 fingerprint = 1;
  string tenant = 2;
  repeated ShortRef refs = 3;
}

service BloomGateway {
  rpc FilterChunkRefs(FilterChunkRefRequest) returns (FilterChunkRefResponse) {}
}
