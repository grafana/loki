// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/logproto/indexgateway.proto

package logproto

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_prometheus_common_model "github.com/prometheus/common/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ShardsRequest struct {
	From                github_com_prometheus_common_model.Time `protobuf:"varint,1,opt,name=from,proto3,customtype=github.com/prometheus/common/model.Time" json:"from"`
	Through             github_com_prometheus_common_model.Time `protobuf:"varint,2,opt,name=through,proto3,customtype=github.com/prometheus/common/model.Time" json:"through"`
	Matchers            string                                  `protobuf:"bytes,3,opt,name=matchers,proto3" json:"matchers,omitempty"`
	TargetBytesPerShard uint64                                  `protobuf:"varint,4,opt,name=target_bytes_per_shard,json=targetBytesPerShard,proto3" json:"target_bytes_per_shard,omitempty"`
	Bounds              []FPBounds                              `protobuf:"bytes,5,rep,name=bounds,proto3" json:"bounds"`
}

func (m *ShardsRequest) Reset()      { *m = ShardsRequest{} }
func (*ShardsRequest) ProtoMessage() {}
func (*ShardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d27585148d0a52c8, []int{0}
}
func (m *ShardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardsRequest.Merge(m, src)
}
func (m *ShardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ShardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ShardsRequest proto.InternalMessageInfo

func (m *ShardsRequest) GetMatchers() string {
	if m != nil {
		return m.Matchers
	}
	return ""
}

func (m *ShardsRequest) GetTargetBytesPerShard() uint64 {
	if m != nil {
		return m.TargetBytesPerShard
	}
	return 0
}

func (m *ShardsRequest) GetBounds() []FPBounds {
	if m != nil {
		return m.Bounds
	}
	return nil
}

type ShardsResponse struct {
	Shards []Shard `protobuf:"bytes,1,rep,name=shards,proto3" json:"shards"`
}

func (m *ShardsResponse) Reset()      { *m = ShardsResponse{} }
func (*ShardsResponse) ProtoMessage() {}
func (*ShardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d27585148d0a52c8, []int{1}
}
func (m *ShardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardsResponse.Merge(m, src)
}
func (m *ShardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ShardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ShardsResponse proto.InternalMessageInfo

func (m *ShardsResponse) GetShards() []Shard {
	if m != nil {
		return m.Shards
	}
	return nil
}

type Shard struct {
	Bounds FPBounds            `protobuf:"bytes,1,opt,name=bounds,proto3" json:"bounds"`
	Stats  *IndexStatsResponse `protobuf:"bytes,2,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (m *Shard) Reset()      { *m = Shard{} }
func (*Shard) ProtoMessage() {}
func (*Shard) Descriptor() ([]byte, []int) {
	return fileDescriptor_d27585148d0a52c8, []int{2}
}
func (m *Shard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Shard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Shard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Shard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Shard.Merge(m, src)
}
func (m *Shard) XXX_Size() int {
	return m.Size()
}
func (m *Shard) XXX_DiscardUnknown() {
	xxx_messageInfo_Shard.DiscardUnknown(m)
}

var xxx_messageInfo_Shard proto.InternalMessageInfo

func (m *Shard) GetBounds() FPBounds {
	if m != nil {
		return m.Bounds
	}
	return FPBounds{}
}

func (m *Shard) GetStats() *IndexStatsResponse {
	if m != nil {
		return m.Stats
	}
	return nil
}

// FPBounds is identical to the definition in `pkg/storage/bloom/v1/bounds.FingerprintBounds`
// which ensures we can cast between them without allocations.
type FPBounds struct {
	Min github_com_prometheus_common_model.Fingerprint `protobuf:"varint,1,opt,name=min,proto3,casttype=github.com/prometheus/common/model.Fingerprint" json:"min,omitempty"`
	Max github_com_prometheus_common_model.Fingerprint `protobuf:"varint,2,opt,name=max,proto3,casttype=github.com/prometheus/common/model.Fingerprint" json:"max,omitempty"`
}

func (m *FPBounds) Reset()      { *m = FPBounds{} }
func (*FPBounds) ProtoMessage() {}
func (*FPBounds) Descriptor() ([]byte, []int) {
	return fileDescriptor_d27585148d0a52c8, []int{3}
}
func (m *FPBounds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FPBounds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FPBounds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FPBounds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FPBounds.Merge(m, src)
}
func (m *FPBounds) XXX_Size() int {
	return m.Size()
}
func (m *FPBounds) XXX_DiscardUnknown() {
	xxx_messageInfo_FPBounds.DiscardUnknown(m)
}

var xxx_messageInfo_FPBounds proto.InternalMessageInfo

func (m *FPBounds) GetMin() github_com_prometheus_common_model.Fingerprint {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *FPBounds) GetMax() github_com_prometheus_common_model.Fingerprint {
	if m != nil {
		return m.Max
	}
	return 0
}

func init() {
	proto.RegisterType((*ShardsRequest)(nil), "indexgatewaypb.ShardsRequest")
	proto.RegisterType((*ShardsResponse)(nil), "indexgatewaypb.ShardsResponse")
	proto.RegisterType((*Shard)(nil), "indexgatewaypb.Shard")
	proto.RegisterType((*FPBounds)(nil), "indexgatewaypb.FPBounds")
}

func init() { proto.RegisterFile("pkg/logproto/indexgateway.proto", fileDescriptor_d27585148d0a52c8) }

var fileDescriptor_d27585148d0a52c8 = []byte{
	// 651 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xbf, 0x4f, 0xdb, 0x40,
	0x18, 0xf5, 0x91, 0x84, 0xc2, 0xd1, 0x32, 0x5c, 0x7f, 0x60, 0x05, 0xb8, 0x44, 0x51, 0xa5, 0xa6,
	0x8b, 0x5d, 0x05, 0xa9, 0x73, 0x15, 0xda, 0x44, 0x48, 0xb4, 0xa2, 0xa6, 0x62, 0x60, 0x28, 0xbd,
	0x24, 0x1f, 0xb6, 0x45, 0xec, 0x73, 0xef, 0xce, 0x2a, 0x6c, 0x9d, 0x3b, 0x75, 0xea, 0xdf, 0xc0,
	0x9f, 0xc2, 0xc8, 0x88, 0x3a, 0xa0, 0x62, 0x96, 0x8e, 0xcc, 0x9d, 0x2a, 0x9f, 0x71, 0x30, 0x21,
	0x48, 0x88, 0x29, 0xf6, 0x7b, 0xef, 0x7b, 0xdf, 0x4f, 0x07, 0xd7, 0xa2, 0x3d, 0xd7, 0x1e, 0x72,
	0x37, 0x12, 0x5c, 0x71, 0xdb, 0x0f, 0x07, 0xb0, 0xef, 0x32, 0x05, 0xdf, 0xd8, 0x81, 0xa5, 0x21,
	0x32, 0x5f, 0xc4, 0xa2, 0x5e, 0xf5, 0x89, 0xcb, 0x5d, 0x9e, 0xa9, 0xd3, 0xa7, 0x4c, 0x55, 0x5d,
	0xbc, 0x66, 0x93, 0x3f, 0x64, 0x64, 0xe3, 0x70, 0x0a, 0x3f, 0xda, 0xf4, 0x98, 0x18, 0x48, 0x07,
	0xbe, 0xc6, 0x20, 0x15, 0x59, 0xc5, 0xe5, 0x5d, 0xc1, 0x03, 0x13, 0xd5, 0x51, 0xb3, 0xd4, 0xb6,
	0x8f, 0x4e, 0x6b, 0xc6, 0xef, 0xd3, 0xda, 0x0b, 0xd7, 0x57, 0x5e, 0xdc, 0xb3, 0xfa, 0x3c, 0xb0,
	0x23, 0xc1, 0x03, 0x50, 0x1e, 0xc4, 0xd2, 0xee, 0xf3, 0x20, 0xe0, 0xa1, 0x1d, 0xf0, 0x01, 0x0c,
	0xad, 0x4f, 0x7e, 0x00, 0x8e, 0x0e, 0x26, 0x6b, 0xf8, 0x81, 0xf2, 0x04, 0x8f, 0x5d, 0xcf, 0x9c,
	0xba, 0x9f, 0x4f, 0x1e, 0x4f, 0xaa, 0x78, 0x26, 0x60, 0xaa, 0xef, 0x81, 0x90, 0x66, 0xa9, 0x8e,
	0x9a, 0xb3, 0xce, 0xe8, 0x9d, 0xac, 0xe0, 0x67, 0x8a, 0x09, 0x17, 0xd4, 0x4e, 0xef, 0x40, 0x81,
	0xdc, 0x89, 0x40, 0xec, 0xc8, 0xb4, 0x1b, 0xb3, 0x5c, 0x47, 0xcd, 0xb2, 0xf3, 0x38, 0x63, 0xdb,
	0x29, 0xb9, 0x01, 0x42, 0x37, 0x4a, 0x5e, 0xe3, 0xe9, 0x1e, 0x8f, 0xc3, 0x81, 0x34, 0x2b, 0xf5,
	0x52, 0x73, 0xae, 0x65, 0x5a, 0xd7, 0xc7, 0x68, 0x75, 0x36, 0xda, 0x9a, 0x6f, 0x97, 0xd3, 0xa2,
	0x9d, 0x4b, 0x75, 0xe3, 0x1d, 0x9e, 0xcf, 0x27, 0x25, 0x23, 0x1e, 0x4a, 0x20, 0x2b, 0x78, 0x5a,
	0x67, 0x93, 0x26, 0xd2, 0x4e, 0x4f, 0xc7, 0x9d, 0xb4, 0x3e, 0xb7, 0xc9, 0xa4, 0x0d, 0x89, 0x2b,
	0xe3, 0x75, 0xa4, 0xa3, 0xbe, 0x73, 0x1d, 0xa4, 0x85, 0x2b, 0x52, 0x31, 0x25, 0xf5, 0x64, 0xe7,
	0x5a, 0x4b, 0xd6, 0x68, 0xa5, 0x6b, 0x69, 0xfc, 0x66, 0xca, 0xe5, 0x25, 0x3a, 0x99, 0xb4, 0xf1,
	0x0b, 0xe1, 0x99, 0xdc, 0x8e, 0xbc, 0xc5, 0xa5, 0xc0, 0x0f, 0x75, 0xd6, 0x72, 0xbb, 0xf5, 0xef,
	0xb4, 0x66, 0xdd, 0x61, 0x29, 0x1d, 0x3f, 0x74, 0x41, 0x44, 0xc2, 0x0f, 0x95, 0x93, 0x86, 0x6b,
	0x17, 0xb6, 0xaf, 0x8b, 0xb8, 0xaf, 0x0b, 0xdb, 0x6f, 0xfd, 0xa8, 0xe0, 0x87, 0xba, 0xec, 0x6e,
	0xd6, 0x36, 0x59, 0xc3, 0xf8, 0x63, 0x0c, 0xe2, 0x40, 0x83, 0x64, 0xf1, 0xaa, 0xb9, 0x2b, 0xf4,
	0xf2, 0x52, 0xab, 0x4b, 0x93, 0xc9, 0xac, 0xf3, 0x57, 0x88, 0xac, 0xe3, 0xb9, 0x2e, 0xa8, 0x55,
	0x2f, 0x0e, 0xf7, 0x1c, 0xd8, 0x25, 0x05, 0x79, 0x01, 0xce, 0xcd, 0x96, 0x6f, 0x61, 0x33, 0xb7,
	0x86, 0x41, 0x3a, 0x78, 0xb6, 0x0b, 0x6a, 0x13, 0x84, 0x0f, 0x92, 0x54, 0xaf, 0xa9, 0x33, 0x30,
	0x77, 0x5a, 0x9c, 0xc8, 0x8d, 0x7c, 0x3e, 0xe3, 0x85, 0x75, 0xd6, 0x83, 0xe1, 0x07, 0x16, 0x80,
	0xec, 0x70, 0xf1, 0x1e, 0x94, 0xf0, 0xfb, 0xe9, 0x1b, 0x69, 0x5e, 0x45, 0xde, 0x22, 0xc9, 0x73,
	0x2c, 0x8c, 0x29, 0x0b, 0xfe, 0x5f, 0xb0, 0xa9, 0xa1, 0x2d, 0x36, 0x8c, 0xc7, 0x13, 0xbc, 0x1c,
	0x0b, 0x9b, 0xa0, 0xb9, 0x43, 0x86, 0x2e, 0x9e, 0x49, 0x1b, 0x4b, 0x0f, 0xab, 0xb8, 0xa0, 0xe2,
	0xf5, 0xdd, 0x58, 0xd0, 0xcd, 0xd3, 0x6c, 0x18, 0xe4, 0x8d, 0x1e, 0xe9, 0x16, 0x1f, 0xc6, 0x01,
	0x90, 0x42, 0xc2, 0x0c, 0xc9, 0x5d, 0xcc, 0x9b, 0xc4, 0xc8, 0x61, 0x3d, 0x5b, 0x8a, 0xfe, 0xb2,
	0xc8, 0xf2, 0xc4, 0xcf, 0x6f, 0x54, 0x0d, 0xbd, 0x8d, 0xce, 0x0f, 0xa6, 0xbd, 0x7d, 0x7c, 0x46,
	0x8d, 0x93, 0x33, 0x6a, 0x5c, 0x9c, 0x51, 0xf4, 0x3d, 0xa1, 0xe8, 0x30, 0xa1, 0xe8, 0x28, 0xa1,
	0xe8, 0x38, 0xa1, 0xe8, 0x4f, 0x42, 0xd1, 0xdf, 0x84, 0x1a, 0x17, 0x09, 0x45, 0x3f, 0xcf, 0xa9,
	0x71, 0x7c, 0x4e, 0x8d, 0x93, 0x73, 0x6a, 0x6c, 0x3f, 0x2f, 0xdc, 0xbd, 0x2b, 0xd8, 0x2e, 0x0b,
	0x99, 0x3d, 0xe4, 0x7b, 0xbe, 0x5d, 0xfc, 0xdf, 0xed, 0x4d, 0xeb, 0x9f, 0x95, 0xff, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xa6, 0x8b, 0xe7, 0x08, 0xd5, 0x05, 0x00, 0x00,
}

func (this *ShardsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShardsRequest)
	if !ok {
		that2, ok := that.(ShardsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.From.Equal(that1.From) {
		return false
	}
	if !this.Through.Equal(that1.Through) {
		return false
	}
	if this.Matchers != that1.Matchers {
		return false
	}
	if this.TargetBytesPerShard != that1.TargetBytesPerShard {
		return false
	}
	if len(this.Bounds) != len(that1.Bounds) {
		return false
	}
	for i := range this.Bounds {
		if !this.Bounds[i].Equal(&that1.Bounds[i]) {
			return false
		}
	}
	return true
}
func (this *ShardsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShardsResponse)
	if !ok {
		that2, ok := that.(ShardsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Shards) != len(that1.Shards) {
		return false
	}
	for i := range this.Shards {
		if !this.Shards[i].Equal(&that1.Shards[i]) {
			return false
		}
	}
	return true
}
func (this *Shard) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Shard)
	if !ok {
		that2, ok := that.(Shard)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Bounds.Equal(&that1.Bounds) {
		return false
	}
	if !this.Stats.Equal(that1.Stats) {
		return false
	}
	return true
}
func (this *FPBounds) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FPBounds)
	if !ok {
		that2, ok := that.(FPBounds)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Min != that1.Min {
		return false
	}
	if this.Max != that1.Max {
		return false
	}
	return true
}
func (this *ShardsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&logproto.ShardsRequest{")
	s = append(s, "From: "+fmt.Sprintf("%#v", this.From)+",\n")
	s = append(s, "Through: "+fmt.Sprintf("%#v", this.Through)+",\n")
	s = append(s, "Matchers: "+fmt.Sprintf("%#v", this.Matchers)+",\n")
	s = append(s, "TargetBytesPerShard: "+fmt.Sprintf("%#v", this.TargetBytesPerShard)+",\n")
	if this.Bounds != nil {
		vs := make([]*FPBounds, len(this.Bounds))
		for i := range vs {
			vs[i] = &this.Bounds[i]
		}
		s = append(s, "Bounds: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ShardsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&logproto.ShardsResponse{")
	if this.Shards != nil {
		vs := make([]*Shard, len(this.Shards))
		for i := range vs {
			vs[i] = &this.Shards[i]
		}
		s = append(s, "Shards: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Shard) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&logproto.Shard{")
	s = append(s, "Bounds: "+strings.Replace(this.Bounds.GoString(), `&`, ``, 1)+",\n")
	if this.Stats != nil {
		s = append(s, "Stats: "+fmt.Sprintf("%#v", this.Stats)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FPBounds) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&logproto.FPBounds{")
	s = append(s, "Min: "+fmt.Sprintf("%#v", this.Min)+",\n")
	s = append(s, "Max: "+fmt.Sprintf("%#v", this.Max)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringIndexgateway(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IndexGatewayClient is the client API for IndexGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IndexGatewayClient interface {
	/// QueryIndex reads the indexes required for given query & sends back the batch of rows
	/// in rpc streams
	QueryIndex(ctx context.Context, in *QueryIndexRequest, opts ...grpc.CallOption) (IndexGateway_QueryIndexClient, error)
	/// GetChunkRef returns chunk reference that match the provided label matchers
	GetChunkRef(ctx context.Context, in *GetChunkRefRequest, opts ...grpc.CallOption) (*GetChunkRefResponse, error)
	GetSeries(ctx context.Context, in *GetSeriesRequest, opts ...grpc.CallOption) (*GetSeriesResponse, error)
	LabelNamesForMetricName(ctx context.Context, in *LabelNamesForMetricNameRequest, opts ...grpc.CallOption) (*LabelResponse, error)
	LabelValuesForMetricName(ctx context.Context, in *LabelValuesForMetricNameRequest, opts ...grpc.CallOption) (*LabelResponse, error)
	// Note: this MUST be the same as the variant defined in
	// logproto.proto on the Querier service.
	GetStats(ctx context.Context, in *IndexStatsRequest, opts ...grpc.CallOption) (*IndexStatsResponse, error)
	// Note: this MUST be the same as the variant defined in
	// logproto.proto on the Querier service.
	GetVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*VolumeResponse, error)
	// GetShards is an optimized implemented shard-planning implementation
	// on the index gateway and not on the ingester.
	GetShards(ctx context.Context, in *ShardsRequest, opts ...grpc.CallOption) (IndexGateway_GetShardsClient, error)
}

type indexGatewayClient struct {
	cc *grpc.ClientConn
}

func NewIndexGatewayClient(cc *grpc.ClientConn) IndexGatewayClient {
	return &indexGatewayClient{cc}
}

func (c *indexGatewayClient) QueryIndex(ctx context.Context, in *QueryIndexRequest, opts ...grpc.CallOption) (IndexGateway_QueryIndexClient, error) {
	stream, err := c.cc.NewStream(ctx, &_IndexGateway_serviceDesc.Streams[0], "/indexgatewaypb.IndexGateway/QueryIndex", opts...)
	if err != nil {
		return nil, err
	}
	x := &indexGatewayQueryIndexClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IndexGateway_QueryIndexClient interface {
	Recv() (*QueryIndexResponse, error)
	grpc.ClientStream
}

type indexGatewayQueryIndexClient struct {
	grpc.ClientStream
}

func (x *indexGatewayQueryIndexClient) Recv() (*QueryIndexResponse, error) {
	m := new(QueryIndexResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *indexGatewayClient) GetChunkRef(ctx context.Context, in *GetChunkRefRequest, opts ...grpc.CallOption) (*GetChunkRefResponse, error) {
	out := new(GetChunkRefResponse)
	err := c.cc.Invoke(ctx, "/indexgatewaypb.IndexGateway/GetChunkRef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexGatewayClient) GetSeries(ctx context.Context, in *GetSeriesRequest, opts ...grpc.CallOption) (*GetSeriesResponse, error) {
	out := new(GetSeriesResponse)
	err := c.cc.Invoke(ctx, "/indexgatewaypb.IndexGateway/GetSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexGatewayClient) LabelNamesForMetricName(ctx context.Context, in *LabelNamesForMetricNameRequest, opts ...grpc.CallOption) (*LabelResponse, error) {
	out := new(LabelResponse)
	err := c.cc.Invoke(ctx, "/indexgatewaypb.IndexGateway/LabelNamesForMetricName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexGatewayClient) LabelValuesForMetricName(ctx context.Context, in *LabelValuesForMetricNameRequest, opts ...grpc.CallOption) (*LabelResponse, error) {
	out := new(LabelResponse)
	err := c.cc.Invoke(ctx, "/indexgatewaypb.IndexGateway/LabelValuesForMetricName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexGatewayClient) GetStats(ctx context.Context, in *IndexStatsRequest, opts ...grpc.CallOption) (*IndexStatsResponse, error) {
	out := new(IndexStatsResponse)
	err := c.cc.Invoke(ctx, "/indexgatewaypb.IndexGateway/GetStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexGatewayClient) GetVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*VolumeResponse, error) {
	out := new(VolumeResponse)
	err := c.cc.Invoke(ctx, "/indexgatewaypb.IndexGateway/GetVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexGatewayClient) GetShards(ctx context.Context, in *ShardsRequest, opts ...grpc.CallOption) (IndexGateway_GetShardsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_IndexGateway_serviceDesc.Streams[1], "/indexgatewaypb.IndexGateway/GetShards", opts...)
	if err != nil {
		return nil, err
	}
	x := &indexGatewayGetShardsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IndexGateway_GetShardsClient interface {
	Recv() (*ShardsResponse, error)
	grpc.ClientStream
}

type indexGatewayGetShardsClient struct {
	grpc.ClientStream
}

func (x *indexGatewayGetShardsClient) Recv() (*ShardsResponse, error) {
	m := new(ShardsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IndexGatewayServer is the server API for IndexGateway service.
type IndexGatewayServer interface {
	/// QueryIndex reads the indexes required for given query & sends back the batch of rows
	/// in rpc streams
	QueryIndex(*QueryIndexRequest, IndexGateway_QueryIndexServer) error
	/// GetChunkRef returns chunk reference that match the provided label matchers
	GetChunkRef(context.Context, *GetChunkRefRequest) (*GetChunkRefResponse, error)
	GetSeries(context.Context, *GetSeriesRequest) (*GetSeriesResponse, error)
	LabelNamesForMetricName(context.Context, *LabelNamesForMetricNameRequest) (*LabelResponse, error)
	LabelValuesForMetricName(context.Context, *LabelValuesForMetricNameRequest) (*LabelResponse, error)
	// Note: this MUST be the same as the variant defined in
	// logproto.proto on the Querier service.
	GetStats(context.Context, *IndexStatsRequest) (*IndexStatsResponse, error)
	// Note: this MUST be the same as the variant defined in
	// logproto.proto on the Querier service.
	GetVolume(context.Context, *VolumeRequest) (*VolumeResponse, error)
	// GetShards is an optimized implemented shard-planning implementation
	// on the index gateway and not on the ingester.
	GetShards(*ShardsRequest, IndexGateway_GetShardsServer) error
}

// UnimplementedIndexGatewayServer can be embedded to have forward compatible implementations.
type UnimplementedIndexGatewayServer struct {
}

func (*UnimplementedIndexGatewayServer) QueryIndex(req *QueryIndexRequest, srv IndexGateway_QueryIndexServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryIndex not implemented")
}
func (*UnimplementedIndexGatewayServer) GetChunkRef(ctx context.Context, req *GetChunkRefRequest) (*GetChunkRefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChunkRef not implemented")
}
func (*UnimplementedIndexGatewayServer) GetSeries(ctx context.Context, req *GetSeriesRequest) (*GetSeriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeries not implemented")
}
func (*UnimplementedIndexGatewayServer) LabelNamesForMetricName(ctx context.Context, req *LabelNamesForMetricNameRequest) (*LabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LabelNamesForMetricName not implemented")
}
func (*UnimplementedIndexGatewayServer) LabelValuesForMetricName(ctx context.Context, req *LabelValuesForMetricNameRequest) (*LabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LabelValuesForMetricName not implemented")
}
func (*UnimplementedIndexGatewayServer) GetStats(ctx context.Context, req *IndexStatsRequest) (*IndexStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (*UnimplementedIndexGatewayServer) GetVolume(ctx context.Context, req *VolumeRequest) (*VolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVolume not implemented")
}
func (*UnimplementedIndexGatewayServer) GetShards(req *ShardsRequest, srv IndexGateway_GetShardsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetShards not implemented")
}

func RegisterIndexGatewayServer(s *grpc.Server, srv IndexGatewayServer) {
	s.RegisterService(&_IndexGateway_serviceDesc, srv)
}

func _IndexGateway_QueryIndex_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryIndexRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IndexGatewayServer).QueryIndex(m, &indexGatewayQueryIndexServer{stream})
}

type IndexGateway_QueryIndexServer interface {
	Send(*QueryIndexResponse) error
	grpc.ServerStream
}

type indexGatewayQueryIndexServer struct {
	grpc.ServerStream
}

func (x *indexGatewayQueryIndexServer) Send(m *QueryIndexResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _IndexGateway_GetChunkRef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChunkRefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexGatewayServer).GetChunkRef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indexgatewaypb.IndexGateway/GetChunkRef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexGatewayServer).GetChunkRef(ctx, req.(*GetChunkRefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexGateway_GetSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexGatewayServer).GetSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indexgatewaypb.IndexGateway/GetSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexGatewayServer).GetSeries(ctx, req.(*GetSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexGateway_LabelNamesForMetricName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabelNamesForMetricNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexGatewayServer).LabelNamesForMetricName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indexgatewaypb.IndexGateway/LabelNamesForMetricName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexGatewayServer).LabelNamesForMetricName(ctx, req.(*LabelNamesForMetricNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexGateway_LabelValuesForMetricName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabelValuesForMetricNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexGatewayServer).LabelValuesForMetricName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indexgatewaypb.IndexGateway/LabelValuesForMetricName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexGatewayServer).LabelValuesForMetricName(ctx, req.(*LabelValuesForMetricNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexGateway_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexGatewayServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indexgatewaypb.IndexGateway/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexGatewayServer).GetStats(ctx, req.(*IndexStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexGateway_GetVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexGatewayServer).GetVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indexgatewaypb.IndexGateway/GetVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexGatewayServer).GetVolume(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexGateway_GetShards_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ShardsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IndexGatewayServer).GetShards(m, &indexGatewayGetShardsServer{stream})
}

type IndexGateway_GetShardsServer interface {
	Send(*ShardsResponse) error
	grpc.ServerStream
}

type indexGatewayGetShardsServer struct {
	grpc.ServerStream
}

func (x *indexGatewayGetShardsServer) Send(m *ShardsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _IndexGateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "indexgatewaypb.IndexGateway",
	HandlerType: (*IndexGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChunkRef",
			Handler:    _IndexGateway_GetChunkRef_Handler,
		},
		{
			MethodName: "GetSeries",
			Handler:    _IndexGateway_GetSeries_Handler,
		},
		{
			MethodName: "LabelNamesForMetricName",
			Handler:    _IndexGateway_LabelNamesForMetricName_Handler,
		},
		{
			MethodName: "LabelValuesForMetricName",
			Handler:    _IndexGateway_LabelValuesForMetricName_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _IndexGateway_GetStats_Handler,
		},
		{
			MethodName: "GetVolume",
			Handler:    _IndexGateway_GetVolume_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueryIndex",
			Handler:       _IndexGateway_QueryIndex_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetShards",
			Handler:       _IndexGateway_GetShards_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/logproto/indexgateway.proto",
}

func (m *ShardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bounds) > 0 {
		for iNdEx := len(m.Bounds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bounds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIndexgateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.TargetBytesPerShard != 0 {
		i = encodeVarintIndexgateway(dAtA, i, uint64(m.TargetBytesPerShard))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Matchers) > 0 {
		i -= len(m.Matchers)
		copy(dAtA[i:], m.Matchers)
		i = encodeVarintIndexgateway(dAtA, i, uint64(len(m.Matchers)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Through != 0 {
		i = encodeVarintIndexgateway(dAtA, i, uint64(m.Through))
		i--
		dAtA[i] = 0x10
	}
	if m.From != 0 {
		i = encodeVarintIndexgateway(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Shards) > 0 {
		for iNdEx := len(m.Shards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Shards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIndexgateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Shard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Shard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Shard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Stats != nil {
		{
			size, err := m.Stats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIndexgateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Bounds.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintIndexgateway(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *FPBounds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FPBounds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FPBounds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Max != 0 {
		i = encodeVarintIndexgateway(dAtA, i, uint64(m.Max))
		i--
		dAtA[i] = 0x10
	}
	if m.Min != 0 {
		i = encodeVarintIndexgateway(dAtA, i, uint64(m.Min))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintIndexgateway(dAtA []byte, offset int, v uint64) int {
	offset -= sovIndexgateway(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ShardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != 0 {
		n += 1 + sovIndexgateway(uint64(m.From))
	}
	if m.Through != 0 {
		n += 1 + sovIndexgateway(uint64(m.Through))
	}
	l = len(m.Matchers)
	if l > 0 {
		n += 1 + l + sovIndexgateway(uint64(l))
	}
	if m.TargetBytesPerShard != 0 {
		n += 1 + sovIndexgateway(uint64(m.TargetBytesPerShard))
	}
	if len(m.Bounds) > 0 {
		for _, e := range m.Bounds {
			l = e.Size()
			n += 1 + l + sovIndexgateway(uint64(l))
		}
	}
	return n
}

func (m *ShardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Shards) > 0 {
		for _, e := range m.Shards {
			l = e.Size()
			n += 1 + l + sovIndexgateway(uint64(l))
		}
	}
	return n
}

func (m *Shard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Bounds.Size()
	n += 1 + l + sovIndexgateway(uint64(l))
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovIndexgateway(uint64(l))
	}
	return n
}

func (m *FPBounds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Min != 0 {
		n += 1 + sovIndexgateway(uint64(m.Min))
	}
	if m.Max != 0 {
		n += 1 + sovIndexgateway(uint64(m.Max))
	}
	return n
}

func sovIndexgateway(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIndexgateway(x uint64) (n int) {
	return sovIndexgateway(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ShardsRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForBounds := "[]FPBounds{"
	for _, f := range this.Bounds {
		repeatedStringForBounds += strings.Replace(strings.Replace(f.String(), "FPBounds", "FPBounds", 1), `&`, ``, 1) + ","
	}
	repeatedStringForBounds += "}"
	s := strings.Join([]string{`&ShardsRequest{`,
		`From:` + fmt.Sprintf("%v", this.From) + `,`,
		`Through:` + fmt.Sprintf("%v", this.Through) + `,`,
		`Matchers:` + fmt.Sprintf("%v", this.Matchers) + `,`,
		`TargetBytesPerShard:` + fmt.Sprintf("%v", this.TargetBytesPerShard) + `,`,
		`Bounds:` + repeatedStringForBounds + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShardsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForShards := "[]Shard{"
	for _, f := range this.Shards {
		repeatedStringForShards += strings.Replace(strings.Replace(f.String(), "Shard", "Shard", 1), `&`, ``, 1) + ","
	}
	repeatedStringForShards += "}"
	s := strings.Join([]string{`&ShardsResponse{`,
		`Shards:` + repeatedStringForShards + `,`,
		`}`,
	}, "")
	return s
}
func (this *Shard) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Shard{`,
		`Bounds:` + strings.Replace(strings.Replace(this.Bounds.String(), "FPBounds", "FPBounds", 1), `&`, ``, 1) + `,`,
		`Stats:` + strings.Replace(fmt.Sprintf("%v", this.Stats), "IndexStatsResponse", "IndexStatsResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FPBounds) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FPBounds{`,
		`Min:` + fmt.Sprintf("%v", this.Min) + `,`,
		`Max:` + fmt.Sprintf("%v", this.Max) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringIndexgateway(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ShardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndexgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= github_com_prometheus_common_model.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Through", wireType)
			}
			m.Through = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Through |= github_com_prometheus_common_model.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Matchers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndexgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndexgateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Matchers = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetBytesPerShard", wireType)
			}
			m.TargetBytesPerShard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetBytesPerShard |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bounds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndexgateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIndexgateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bounds = append(m.Bounds, FPBounds{})
			if err := m.Bounds[len(m.Bounds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndexgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndexgateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIndexgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndexgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndexgateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIndexgateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shards = append(m.Shards, Shard{})
			if err := m.Shards[len(m.Shards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndexgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndexgateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIndexgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Shard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndexgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Shard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Shard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bounds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndexgateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIndexgateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bounds.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndexgateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIndexgateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &IndexStatsResponse{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndexgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndexgateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIndexgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FPBounds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndexgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FPBounds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FPBounds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			m.Min = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Min |= github_com_prometheus_common_model.Fingerprint(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			m.Max = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Max |= github_com_prometheus_common_model.Fingerprint(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIndexgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndexgateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIndexgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIndexgateway(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIndexgateway
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndexgateway
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndexgateway
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIndexgateway
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthIndexgateway
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowIndexgateway
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipIndexgateway(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthIndexgateway
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthIndexgateway = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIndexgateway   = fmt.Errorf("proto: integer overflow")
)
