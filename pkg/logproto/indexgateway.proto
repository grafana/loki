syntax = "proto3";

package indexgatewaypb;

import "gogoproto/gogo.proto";
import "pkg/logproto/logproto.proto";

option go_package = "github.com/grafana/loki/pkg/logproto";

// This exists in a different file to retain proto namespacing compatibility with it's prior definition, but has been relocated to the logproto go pkg.
service IndexGateway {
  /// QueryIndex reads the indexes required for given query & sends back the batch of rows
  /// in rpc streams
  rpc QueryIndex(logproto.QueryIndexRequest) returns (stream logproto.QueryIndexResponse);
  /// GetChunkRef returns chunk reference that match the provided label matchers
  rpc GetChunkRef(logproto.GetChunkRefRequest) returns (logproto.GetChunkRefResponse) {}
  rpc GetSeries(logproto.GetSeriesRequest) returns (logproto.GetSeriesResponse) {}
  rpc LabelNamesForMetricName(logproto.LabelNamesForMetricNameRequest) returns (logproto.LabelResponse) {}

  rpc LabelValuesForMetricName(logproto.LabelValuesForMetricNameRequest) returns (logproto.LabelResponse) {}

  // Note: this MUST be the same as the variant defined in
  // logproto.proto on the Querier service.
  rpc GetStats(logproto.IndexStatsRequest) returns (logproto.IndexStatsResponse) {}

  // Note: this MUST be the same as the variant defined in
  // logproto.proto on the Querier service.
  rpc GetVolume(logproto.VolumeRequest) returns (logproto.VolumeResponse) {}

  // GetShards is an optimized implemented shard-planning implementation
  // on the index gateway and not on the ingester.
  rpc GetShards(ShardsRequest) returns (stream ShardsResponse);
}

message ShardsRequest {
  int64 from = 1 [
    (gogoproto.customtype) = "github.com/prometheus/common/model.Time",
    (gogoproto.nullable) = false
  ];
  int64 through = 2 [
    (gogoproto.customtype) = "github.com/prometheus/common/model.Time",
    (gogoproto.nullable) = false
  ];
  uint64 target_bytes_per_shard = 3;
  repeated FPBounds shards = 4 [
    (gogoproto.customtype) = "FingerprintBounds"
  ];
}

message ShardsResponse {
  repeated Shard shards = 1;
}

message Shard {
  FPBounds bounds = 1 [
    (gogoproto.customtype) = "FingerprintBounds"
  ];
  logproto.IndexStatsResponse stats = 2;
}

message FPBounds {
  uint64 min = 1 [
    (gogoproto.customtype) = "github.com/prometheus/common/model.Fingerprint"
  ];
  uint64 max = 2 [
    (gogoproto.customtype) = "github.com/prometheus/common/model.Fingerprint"
  ];
}
