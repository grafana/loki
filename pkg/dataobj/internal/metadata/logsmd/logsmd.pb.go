// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/dataobj/internal/metadata/logsmd/logsmd.proto

package logsmd

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	datasetmd "github.com/grafana/loki/v3/pkg/dataobj/internal/metadata/datasetmd"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ColumnType represents the valid types that a logs column can have.
type ColumnType int32

const (
	// Invalid column type.
	COLUMN_TYPE_UNSPECIFIED ColumnType = 0
	// COLUMN_TYPE_STREAM_ID is a column containing the stream the log record
	// belongs to.
	COLUMN_TYPE_STREAM_ID ColumnType = 1
	// COLUMN_TYPE_TIMESTAMP is a column containing the timestamp of the log
	// record.
	COLUMN_TYPE_TIMESTAMP ColumnType = 2
	// COLUMN_TYPE_METADATA is a column containing structured metadata values for
	// a specific key.
	COLUMN_TYPE_METADATA ColumnType = 3
	// COLUMN_TYPE_MESSAGE is a column containing the message of the log record.
	COLUMN_TYPE_MESSAGE ColumnType = 4
)

var ColumnType_name = map[int32]string{
	0: "COLUMN_TYPE_UNSPECIFIED",
	1: "COLUMN_TYPE_STREAM_ID",
	2: "COLUMN_TYPE_TIMESTAMP",
	3: "COLUMN_TYPE_METADATA",
	4: "COLUMN_TYPE_MESSAGE",
}

var ColumnType_value = map[string]int32{
	"COLUMN_TYPE_UNSPECIFIED": 0,
	"COLUMN_TYPE_STREAM_ID":   1,
	"COLUMN_TYPE_TIMESTAMP":   2,
	"COLUMN_TYPE_METADATA":    3,
	"COLUMN_TYPE_MESSAGE":     4,
}

func (ColumnType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_50d9821968c7172c, []int{0}
}

// Metadata describes the metadata for the logs section.
type Metadata struct {
	// Columns within the logs.
	Columns []*ColumnDesc `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (m *Metadata) Reset()      { *m = Metadata{} }
func (*Metadata) ProtoMessage() {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_50d9821968c7172c, []int{0}
}
func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(m, src)
}
func (m *Metadata) XXX_Size() int {
	return m.Size()
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

func (m *Metadata) GetColumns() []*ColumnDesc {
	if m != nil {
		return m.Columns
	}
	return nil
}

// ColumnDesc describes an individual column within the logs table.
type ColumnDesc struct {
	// Information about the column.
	Info *datasetmd.ColumnInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	// Column type.
	Type ColumnType `protobuf:"varint,2,opt,name=type,proto3,enum=dataobj.metadata.logs.v1.ColumnType" json:"type,omitempty"`
}

func (m *ColumnDesc) Reset()      { *m = ColumnDesc{} }
func (*ColumnDesc) ProtoMessage() {}
func (*ColumnDesc) Descriptor() ([]byte, []int) {
	return fileDescriptor_50d9821968c7172c, []int{1}
}
func (m *ColumnDesc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ColumnDesc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ColumnDesc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ColumnDesc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColumnDesc.Merge(m, src)
}
func (m *ColumnDesc) XXX_Size() int {
	return m.Size()
}
func (m *ColumnDesc) XXX_DiscardUnknown() {
	xxx_messageInfo_ColumnDesc.DiscardUnknown(m)
}

var xxx_messageInfo_ColumnDesc proto.InternalMessageInfo

func (m *ColumnDesc) GetInfo() *datasetmd.ColumnInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *ColumnDesc) GetType() ColumnType {
	if m != nil {
		return m.Type
	}
	return COLUMN_TYPE_UNSPECIFIED
}

// ColumnMetadata describes the metadata for a column.
type ColumnMetadata struct {
	// Pages within the column.
	Pages []*PageDesc `protobuf:"bytes,1,rep,name=pages,proto3" json:"pages,omitempty"`
}

func (m *ColumnMetadata) Reset()      { *m = ColumnMetadata{} }
func (*ColumnMetadata) ProtoMessage() {}
func (*ColumnMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_50d9821968c7172c, []int{2}
}
func (m *ColumnMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ColumnMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ColumnMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ColumnMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColumnMetadata.Merge(m, src)
}
func (m *ColumnMetadata) XXX_Size() int {
	return m.Size()
}
func (m *ColumnMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_ColumnMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_ColumnMetadata proto.InternalMessageInfo

func (m *ColumnMetadata) GetPages() []*PageDesc {
	if m != nil {
		return m.Pages
	}
	return nil
}

// PageDesc describes an individual page within a column.
type PageDesc struct {
	// Information about the page.
	Info *datasetmd.PageInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *PageDesc) Reset()      { *m = PageDesc{} }
func (*PageDesc) ProtoMessage() {}
func (*PageDesc) Descriptor() ([]byte, []int) {
	return fileDescriptor_50d9821968c7172c, []int{3}
}
func (m *PageDesc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageDesc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageDesc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageDesc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageDesc.Merge(m, src)
}
func (m *PageDesc) XXX_Size() int {
	return m.Size()
}
func (m *PageDesc) XXX_DiscardUnknown() {
	xxx_messageInfo_PageDesc.DiscardUnknown(m)
}

var xxx_messageInfo_PageDesc proto.InternalMessageInfo

func (m *PageDesc) GetInfo() *datasetmd.PageInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func init() {
	proto.RegisterEnum("dataobj.metadata.logs.v1.ColumnType", ColumnType_name, ColumnType_value)
	proto.RegisterType((*Metadata)(nil), "dataobj.metadata.logs.v1.Metadata")
	proto.RegisterType((*ColumnDesc)(nil), "dataobj.metadata.logs.v1.ColumnDesc")
	proto.RegisterType((*ColumnMetadata)(nil), "dataobj.metadata.logs.v1.ColumnMetadata")
	proto.RegisterType((*PageDesc)(nil), "dataobj.metadata.logs.v1.PageDesc")
}

func init() {
	proto.RegisterFile("pkg/dataobj/internal/metadata/logsmd/logsmd.proto", fileDescriptor_50d9821968c7172c)
}

var fileDescriptor_50d9821968c7172c = []byte{
	// 430 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x2c, 0xc8, 0x4e, 0xd7,
	0x4f, 0x49, 0x2c, 0x49, 0xcc, 0x4f, 0xca, 0xd2, 0xcf, 0xcc, 0x2b, 0x49, 0x2d, 0xca, 0x4b, 0xcc,
	0xd1, 0xcf, 0x4d, 0x2d, 0x49, 0x04, 0x09, 0xea, 0xe7, 0xe4, 0xa7, 0x17, 0xe7, 0xa6, 0x40, 0x29,
	0xbd, 0x82, 0xa2, 0xfc, 0x92, 0x7c, 0x21, 0x09, 0xa8, 0x72, 0x3d, 0x98, 0x2a, 0x3d, 0x90, 0xb4,
	0x5e, 0x99, 0xa1, 0x94, 0x39, 0x7e, 0xc3, 0x40, 0x44, 0x71, 0x6a, 0x49, 0x6e, 0x0a, 0x82, 0x05,
	0x31, 0x52, 0xc9, 0x8b, 0x8b, 0xc3, 0x17, 0xaa, 0x4a, 0xc8, 0x8e, 0x8b, 0x3d, 0x39, 0x3f, 0xa7,
	0x34, 0x37, 0xaf, 0x58, 0x82, 0x51, 0x81, 0x59, 0x83, 0xdb, 0x48, 0x45, 0x0f, 0x97, 0x85, 0x7a,
	0xce, 0x60, 0x85, 0x2e, 0xa9, 0xc5, 0xc9, 0x41, 0x30, 0x4d, 0x4a, 0xcd, 0x8c, 0x5c, 0x5c, 0x08,
	0x71, 0x21, 0x6b, 0x2e, 0x96, 0xcc, 0xbc, 0xb4, 0x7c, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x6e, 0x23,
	0x75, 0x4c, 0xb3, 0xa0, 0x6e, 0x41, 0x18, 0xe7, 0x99, 0x97, 0x96, 0x1f, 0x04, 0xd6, 0x24, 0x64,
	0xc1, 0xc5, 0x52, 0x52, 0x59, 0x90, 0x2a, 0xc1, 0xa4, 0xc0, 0xa8, 0xc1, 0x47, 0xd8, 0x21, 0x21,
	0x95, 0x05, 0xa9, 0x41, 0x60, 0x1d, 0x4a, 0x5e, 0x5c, 0x7c, 0x10, 0x31, 0xb8, 0xbf, 0x2c, 0xb8,
	0x58, 0x0b, 0x12, 0xd3, 0x53, 0x61, 0xbe, 0x52, 0xc2, 0x6d, 0x58, 0x40, 0x62, 0x7a, 0x2a, 0xd8,
	0x4f, 0x10, 0x0d, 0x4a, 0xae, 0x5c, 0x1c, 0x30, 0x21, 0x21, 0x4b, 0x14, 0xef, 0xa8, 0xe2, 0xf5,
	0x0e, 0x48, 0x13, 0xc2, 0x33, 0x5a, 0x93, 0xe0, 0x01, 0x03, 0x72, 0xa7, 0x90, 0x34, 0x97, 0xb8,
	0xb3, 0xbf, 0x4f, 0xa8, 0xaf, 0x5f, 0x7c, 0x48, 0x64, 0x80, 0x6b, 0x7c, 0xa8, 0x5f, 0x70, 0x80,
	0xab, 0xb3, 0xa7, 0x9b, 0xa7, 0xab, 0x8b, 0x00, 0x83, 0x90, 0x24, 0x97, 0x28, 0xb2, 0x64, 0x70,
	0x48, 0x90, 0xab, 0xa3, 0x6f, 0xbc, 0xa7, 0x8b, 0x00, 0x23, 0xba, 0x54, 0x88, 0xa7, 0xaf, 0x6b,
	0x70, 0x88, 0xa3, 0x6f, 0x80, 0x00, 0x93, 0x90, 0x04, 0x97, 0x08, 0xb2, 0x94, 0xaf, 0x6b, 0x88,
	0xa3, 0x8b, 0x63, 0x88, 0xa3, 0x00, 0xb3, 0x90, 0x38, 0x97, 0x30, 0xaa, 0x4c, 0x70, 0xb0, 0xa3,
	0xbb, 0xab, 0x00, 0x8b, 0x53, 0xe9, 0x85, 0x87, 0x72, 0x0c, 0x37, 0x1e, 0xca, 0x31, 0x7c, 0x78,
	0x28, 0xc7, 0xd8, 0xf0, 0x48, 0x8e, 0x71, 0xc5, 0x23, 0x39, 0xc6, 0x13, 0x8f, 0xe4, 0x18, 0x2f,
	0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0xf1, 0xc5, 0x23, 0x39, 0x86, 0x0f, 0x8f, 0xe4, 0x18,
	0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0xfb, 0xf4,
	0xcc, 0x92, 0x8c, 0xd2, 0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0xfd, 0xf4, 0xa2, 0xc4, 0xb4, 0xc4, 0x3c,
	0x50, 0x52, 0xcd, 0xce, 0xd4, 0x2f, 0x33, 0xd6, 0x27, 0x26, 0x41, 0x27, 0xb1, 0x81, 0xd3, 0x9d,
	0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x86, 0xa4, 0x27, 0x0d, 0xff, 0x02, 0x00, 0x00,
}

func (x ColumnType) String() string {
	s, ok := ColumnType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Metadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Metadata)
	if !ok {
		that2, ok := that.(Metadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Columns) != len(that1.Columns) {
		return false
	}
	for i := range this.Columns {
		if !this.Columns[i].Equal(that1.Columns[i]) {
			return false
		}
	}
	return true
}
func (this *ColumnDesc) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ColumnDesc)
	if !ok {
		that2, ok := that.(ColumnDesc)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *ColumnMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ColumnMetadata)
	if !ok {
		that2, ok := that.(ColumnMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Pages) != len(that1.Pages) {
		return false
	}
	for i := range this.Pages {
		if !this.Pages[i].Equal(that1.Pages[i]) {
			return false
		}
	}
	return true
}
func (this *PageDesc) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PageDesc)
	if !ok {
		that2, ok := that.(PageDesc)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	return true
}
func (this *Metadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&logsmd.Metadata{")
	if this.Columns != nil {
		s = append(s, "Columns: "+fmt.Sprintf("%#v", this.Columns)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ColumnDesc) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&logsmd.ColumnDesc{")
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ColumnMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&logsmd.ColumnMetadata{")
	if this.Pages != nil {
		s = append(s, "Pages: "+fmt.Sprintf("%#v", this.Pages)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PageDesc) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&logsmd.PageDesc{")
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringLogsmd(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Metadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Columns) > 0 {
		for iNdEx := len(m.Columns) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Columns[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogsmd(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ColumnDesc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ColumnDesc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ColumnDesc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintLogsmd(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLogsmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ColumnMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ColumnMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ColumnMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pages) > 0 {
		for iNdEx := len(m.Pages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLogsmd(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PageDesc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageDesc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PageDesc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLogsmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLogsmd(dAtA []byte, offset int, v uint64) int {
	offset -= sovLogsmd(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Metadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Columns) > 0 {
		for _, e := range m.Columns {
			l = e.Size()
			n += 1 + l + sovLogsmd(uint64(l))
		}
	}
	return n
}

func (m *ColumnDesc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovLogsmd(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovLogsmd(uint64(m.Type))
	}
	return n
}

func (m *ColumnMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pages) > 0 {
		for _, e := range m.Pages {
			l = e.Size()
			n += 1 + l + sovLogsmd(uint64(l))
		}
	}
	return n
}

func (m *PageDesc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovLogsmd(uint64(l))
	}
	return n
}

func sovLogsmd(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLogsmd(x uint64) (n int) {
	return sovLogsmd(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Metadata) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForColumns := "[]*ColumnDesc{"
	for _, f := range this.Columns {
		repeatedStringForColumns += strings.Replace(f.String(), "ColumnDesc", "ColumnDesc", 1) + ","
	}
	repeatedStringForColumns += "}"
	s := strings.Join([]string{`&Metadata{`,
		`Columns:` + repeatedStringForColumns + `,`,
		`}`,
	}, "")
	return s
}
func (this *ColumnDesc) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ColumnDesc{`,
		`Info:` + strings.Replace(fmt.Sprintf("%v", this.Info), "ColumnInfo", "datasetmd.ColumnInfo", 1) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ColumnMetadata) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPages := "[]*PageDesc{"
	for _, f := range this.Pages {
		repeatedStringForPages += strings.Replace(f.String(), "PageDesc", "PageDesc", 1) + ","
	}
	repeatedStringForPages += "}"
	s := strings.Join([]string{`&ColumnMetadata{`,
		`Pages:` + repeatedStringForPages + `,`,
		`}`,
	}, "")
	return s
}
func (this *PageDesc) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PageDesc{`,
		`Info:` + strings.Replace(fmt.Sprintf("%v", this.Info), "PageInfo", "datasetmd.PageInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringLogsmd(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogsmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogsmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogsmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogsmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Columns = append(m.Columns, &ColumnDesc{})
			if err := m.Columns[len(m.Columns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogsmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogsmd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLogsmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ColumnDesc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogsmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ColumnDesc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ColumnDesc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogsmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogsmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogsmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &datasetmd.ColumnInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogsmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ColumnType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogsmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogsmd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLogsmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ColumnMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogsmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ColumnMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ColumnMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogsmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogsmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogsmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pages = append(m.Pages, &PageDesc{})
			if err := m.Pages[len(m.Pages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogsmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogsmd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLogsmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageDesc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogsmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageDesc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageDesc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogsmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogsmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogsmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &datasetmd.PageInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogsmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogsmd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLogsmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLogsmd(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLogsmd
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogsmd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogsmd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLogsmd
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthLogsmd
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLogsmd
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLogsmd(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthLogsmd
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLogsmd = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLogsmd   = fmt.Errorf("proto: integer overflow")
)
