// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/dataobj/internal/metadata/filemd/filemd.proto

package filemd

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Metadata for the overall data object.
type Metadata struct {
	// Sections within the data object.
	Sections []*SectionInfo `protobuf:"bytes,1,rep,name=sections,proto3" json:"sections,omitempty"`
	// A list of strings used to resolve type name references.
	Dictionary []string `protobuf:"bytes,2,rep,name=dictionary,proto3" json:"dictionary,omitempty"`
	// A list of types used by sections. The zero index is reserved for an
	// invalid type.
	Types []*SectionType `protobuf:"bytes,3,rep,name=types,proto3" json:"types,omitempty"`
}

func (m *Metadata) Reset()      { *m = Metadata{} }
func (*Metadata) ProtoMessage() {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_be80f52d1e05bad9, []int{0}
}
func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(m, src)
}
func (m *Metadata) XXX_Size() int {
	return m.Size()
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

func (m *Metadata) GetSections() []*SectionInfo {
	if m != nil {
		return m.Sections
	}
	return nil
}

func (m *Metadata) GetDictionary() []string {
	if m != nil {
		return m.Dictionary
	}
	return nil
}

func (m *Metadata) GetTypes() []*SectionType {
	if m != nil {
		return m.Types
	}
	return nil
}

// SectionType specifies a namespaced type of section within a data object.
// Applications are responsible for interpreting SectionType for decoding.
type SectionType struct {
	// The reference to the type name.
	NameRef *SectionType_NameRef `protobuf:"bytes,1,opt,name=name_ref,json=nameRef,proto3" json:"name_ref,omitempty"`
	// An optional section-specified version of this type, used to inform section
	// implementations how to read the section.
	Version uint32 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *SectionType) Reset()      { *m = SectionType{} }
func (*SectionType) ProtoMessage() {}
func (*SectionType) Descriptor() ([]byte, []int) {
	return fileDescriptor_be80f52d1e05bad9, []int{1}
}
func (m *SectionType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SectionType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SectionType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SectionType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SectionType.Merge(m, src)
}
func (m *SectionType) XXX_Size() int {
	return m.Size()
}
func (m *SectionType) XXX_DiscardUnknown() {
	xxx_messageInfo_SectionType.DiscardUnknown(m)
}

var xxx_messageInfo_SectionType proto.InternalMessageInfo

func (m *SectionType) GetNameRef() *SectionType_NameRef {
	if m != nil {
		return m.NameRef
	}
	return nil
}

func (m *SectionType) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// NameRef is a tuple of references into the Metadata.dictionary which
// specifies the fully-qualified name of this type.
//
// Two data objects may have the same NameRef which refer to different names
// when resolved. Applications must resolve the name before interpreting the
// type.
type SectionType_NameRef struct {
	// An index into Metadata.dictionary specifying the namespace string of
	// this type (e.g., "github.com/grafana/loki").
	NamespaceRef uint32 `protobuf:"varint,1,opt,name=namespace_ref,json=namespaceRef,proto3" json:"namespace_ref,omitempty"`
	// An index into Metadata.dictionary specifying the kind of this type
	// (e.g., "logs").
	KindRef uint32 `protobuf:"varint,2,opt,name=kind_ref,json=kindRef,proto3" json:"kind_ref,omitempty"`
}

func (m *SectionType_NameRef) Reset()      { *m = SectionType_NameRef{} }
func (*SectionType_NameRef) ProtoMessage() {}
func (*SectionType_NameRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_be80f52d1e05bad9, []int{1, 0}
}
func (m *SectionType_NameRef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SectionType_NameRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SectionType_NameRef.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SectionType_NameRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SectionType_NameRef.Merge(m, src)
}
func (m *SectionType_NameRef) XXX_Size() int {
	return m.Size()
}
func (m *SectionType_NameRef) XXX_DiscardUnknown() {
	xxx_messageInfo_SectionType_NameRef.DiscardUnknown(m)
}

var xxx_messageInfo_SectionType_NameRef proto.InternalMessageInfo

func (m *SectionType_NameRef) GetNamespaceRef() uint32 {
	if m != nil {
		return m.NamespaceRef
	}
	return 0
}

func (m *SectionType_NameRef) GetKindRef() uint32 {
	if m != nil {
		return m.KindRef
	}
	return 0
}

// SectionInfo describes a section within the data object. Each section is an
// independent unit of the data object.
type SectionInfo struct {
	// The physical layout of the section within the data object. Setting
	// layout is mutually exclusive with specifying the metadata_offset and
	// metadata_size fields.
	//
	// For backwards compatibility with older versions of data objects where
	// layout isn't provided, implementations must assume that:
	//
	//   - A section has data, but its offset and length are unknown.
	//
	//   - Range reads of section data are done relative to the start of the
	//     data object.
	//
	// If the SectionLayout is specified for a section, range reads are instead
	// relative to the start of the data region. If the data region is undefined,
	// then the section has no data.
	//
	// Setting the layout is mutually exclusive with specifying the
	// metadata_offset and metadata_size fields, and readers must reject data
	// objects that set both.
	Layout *SectionLayout `protobuf:"bytes,4,opt,name=layout,proto3" json:"layout,omitempty"`
	// An index into Metadata.types specifying the type of this section.
	TypeRef uint32 `protobuf:"varint,5,opt,name=type_ref,json=typeRef,proto3" json:"type_ref,omitempty"`
	// Optional additional information about the section that sections can
	// provide.
	//
	// Because extension_data increases the size of the file metadata, sections
	// should only use this field for required information that must be stored
	// without loading the section.
	//
	// Sections implementations are recommended to use the version field of
	// [SectionType] to determine how to interpret the payload.
	ExtensionData []byte `protobuf:"bytes,6,opt,name=extension_data,json=extensionData,proto3" json:"extension_data,omitempty"`
	// An index into Metadata.dictionary specifying the owning tenant of this
	// section.
	//
	// Sections containing data wholly owned by a single tenant must specify the
	// owning tenant. If tenant_ref is 0, the section holds data owned by multiple
	// tenants, usually with some other mechanism to determine ownership (e.g., if
	// the section does not contain cross-tenant aggregated data).
	TenantRef uint32 `protobuf:"varint,7,opt,name=tenant_ref,json=tenantRef,proto3" json:"tenant_ref,omitempty"`
}

func (m *SectionInfo) Reset()      { *m = SectionInfo{} }
func (*SectionInfo) ProtoMessage() {}
func (*SectionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_be80f52d1e05bad9, []int{2}
}
func (m *SectionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SectionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SectionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SectionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SectionInfo.Merge(m, src)
}
func (m *SectionInfo) XXX_Size() int {
	return m.Size()
}
func (m *SectionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SectionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SectionInfo proto.InternalMessageInfo

func (m *SectionInfo) GetLayout() *SectionLayout {
	if m != nil {
		return m.Layout
	}
	return nil
}

func (m *SectionInfo) GetTypeRef() uint32 {
	if m != nil {
		return m.TypeRef
	}
	return 0
}

func (m *SectionInfo) GetExtensionData() []byte {
	if m != nil {
		return m.ExtensionData
	}
	return nil
}

func (m *SectionInfo) GetTenantRef() uint32 {
	if m != nil {
		return m.TenantRef
	}
	return 0
}

// SectionLayout describes the physical placement of the regions that form a
// complete section: its data and its metadata.
//
// The metadata of a section is intended to be lightweight and is typically
// used to aid reading the section's data in smaller chunks.
//
// There are no guarantees about the placement or ordering of a section's
// regions; they may be contiguous, disjoint, or interleaved with regions from
// other sections.
//
// Implementations can use region information to ensure that a section does not
// access bytes outside of its layout.
type SectionLayout struct {
	// The region covering the data of a section. If the data region is
	// undefined, implementations must assume that the section has no data.
	Data *Region `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// The region covering the metadata of a section. If the metadata region is
	// undefined, implementations must assume that the section has no metadata.
	Metadata *Region `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *SectionLayout) Reset()      { *m = SectionLayout{} }
func (*SectionLayout) ProtoMessage() {}
func (*SectionLayout) Descriptor() ([]byte, []int) {
	return fileDescriptor_be80f52d1e05bad9, []int{3}
}
func (m *SectionLayout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SectionLayout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SectionLayout.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SectionLayout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SectionLayout.Merge(m, src)
}
func (m *SectionLayout) XXX_Size() int {
	return m.Size()
}
func (m *SectionLayout) XXX_DiscardUnknown() {
	xxx_messageInfo_SectionLayout.DiscardUnknown(m)
}

var xxx_messageInfo_SectionLayout proto.InternalMessageInfo

func (m *SectionLayout) GetData() *Region {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SectionLayout) GetMetadata() *Region {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// Region describes a contiguous range of bytes within a data object.
type Region struct {
	// Byte offset of the region from the start of the data object.
	Offset uint64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// Length of the region in bytes.
	Length uint64 `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
}

func (m *Region) Reset()      { *m = Region{} }
func (*Region) ProtoMessage() {}
func (*Region) Descriptor() ([]byte, []int) {
	return fileDescriptor_be80f52d1e05bad9, []int{4}
}
func (m *Region) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Region) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Region.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Region) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Region.Merge(m, src)
}
func (m *Region) XXX_Size() int {
	return m.Size()
}
func (m *Region) XXX_DiscardUnknown() {
	xxx_messageInfo_Region.DiscardUnknown(m)
}

var xxx_messageInfo_Region proto.InternalMessageInfo

func (m *Region) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *Region) GetLength() uint64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func init() {
	proto.RegisterType((*Metadata)(nil), "dataobj.metadata.file.v1.Metadata")
	proto.RegisterType((*SectionType)(nil), "dataobj.metadata.file.v1.SectionType")
	proto.RegisterType((*SectionType_NameRef)(nil), "dataobj.metadata.file.v1.SectionType.NameRef")
	proto.RegisterType((*SectionInfo)(nil), "dataobj.metadata.file.v1.SectionInfo")
	proto.RegisterType((*SectionLayout)(nil), "dataobj.metadata.file.v1.SectionLayout")
	proto.RegisterType((*Region)(nil), "dataobj.metadata.file.v1.Region")
}

func init() {
	proto.RegisterFile("pkg/dataobj/internal/metadata/filemd/filemd.proto", fileDescriptor_be80f52d1e05bad9)
}

var fileDescriptor_be80f52d1e05bad9 = []byte{
	// 504 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x3f, 0x6f, 0xd3, 0x4c,
	0x18, 0xf7, 0x35, 0x6e, 0xe2, 0x3e, 0x69, 0x5e, 0xbd, 0xba, 0x01, 0x19, 0x24, 0x4e, 0x96, 0x51,
	0x85, 0x17, 0x6c, 0xb5, 0x65, 0x40, 0x02, 0xa9, 0x02, 0x31, 0x50, 0x04, 0x0c, 0x07, 0x13, 0x4b,
	0x75, 0x49, 0xce, 0xae, 0x89, 0x7d, 0x67, 0xd9, 0x97, 0x88, 0x6c, 0x48, 0x7c, 0x01, 0x3e, 0x06,
	0x62, 0x67, 0xe3, 0x03, 0x30, 0x66, 0xec, 0x48, 0x9c, 0x85, 0xb1, 0x1f, 0x01, 0xdd, 0xd9, 0x49,
	0xcb, 0x50, 0x91, 0x29, 0xf7, 0xfc, 0xee, 0xf7, 0x2f, 0x8f, 0x75, 0x70, 0x58, 0x4c, 0x92, 0x68,
	0xcc, 0x14, 0x93, 0xc3, 0x0f, 0x51, 0x2a, 0x14, 0x2f, 0x05, 0xcb, 0xa2, 0x9c, 0x2b, 0xa6, 0xc1,
	0x28, 0x4e, 0x33, 0x9e, 0x8f, 0xdb, 0x9f, 0xb0, 0x28, 0xa5, 0x92, 0xd8, 0x6d, 0xe9, 0xe1, 0x9a,
	0x15, 0xea, 0xeb, 0x70, 0x76, 0xe8, 0x7f, 0x43, 0xe0, 0xbc, 0x6e, 0x41, 0xfc, 0x14, 0x9c, 0x8a,
	0x8f, 0x54, 0x2a, 0x45, 0xe5, 0x22, 0xaf, 0x13, 0xf4, 0x8f, 0x0e, 0xc2, 0x9b, 0x94, 0xe1, 0xdb,
	0x86, 0x79, 0x2a, 0x62, 0x49, 0x37, 0x32, 0x4c, 0x00, 0xc6, 0xa9, 0x39, 0xb3, 0x72, 0xee, 0xee,
	0x78, 0x9d, 0x60, 0x8f, 0x5e, 0x43, 0xf0, 0x63, 0xd8, 0x55, 0xf3, 0x82, 0x57, 0x6e, 0x67, 0x4b,
	0xff, 0x77, 0xf3, 0x82, 0xd3, 0x46, 0xe3, 0xff, 0x40, 0xd0, 0xbf, 0x06, 0xe3, 0x17, 0xe0, 0x08,
	0x96, 0xf3, 0xb3, 0x92, 0xc7, 0x2e, 0xf2, 0x50, 0xd0, 0x3f, 0x7a, 0xb0, 0x95, 0x5f, 0xf8, 0x86,
	0xe5, 0x9c, 0xf2, 0x98, 0xf6, 0x44, 0x73, 0xc0, 0x2e, 0xf4, 0x66, 0xbc, 0xac, 0x52, 0x29, 0xdc,
	0x1d, 0x0f, 0x05, 0x03, 0xba, 0x1e, 0xef, 0x9c, 0x42, 0xaf, 0x65, 0xe3, 0x7b, 0x30, 0xd0, 0xfc,
	0xaa, 0x60, 0xa3, 0xab, 0xcc, 0x01, 0xdd, 0xdf, 0x80, 0x9a, 0x74, 0x1b, 0x9c, 0x49, 0x2a, 0xc6,
	0xe6, 0xbe, 0xb5, 0xd2, 0x33, 0xe5, 0xb1, 0xff, 0xfd, 0xaa, 0xbe, 0xde, 0x1a, 0x3e, 0x81, 0x6e,
	0xc6, 0xe6, 0x72, 0xaa, 0x5c, 0xdb, 0x94, 0xbf, 0xff, 0xcf, 0xf2, 0xaf, 0x0c, 0x9d, 0xb6, 0x32,
	0x9d, 0xa5, 0x17, 0x63, 0xb2, 0x76, 0x9b, 0x2c, 0x3d, 0xeb, 0x1a, 0x07, 0xf0, 0x1f, 0xff, 0xa8,
	0xb8, 0xd0, 0xff, 0xe1, 0x4c, 0x5b, 0xb9, 0x5d, 0x0f, 0x05, 0xfb, 0x74, 0xb0, 0x41, 0x9f, 0xeb,
	0x2f, 0x7e, 0x17, 0x40, 0x71, 0xc1, 0x84, 0x32, 0x1e, 0x3d, 0xe3, 0xb1, 0xd7, 0x20, 0x94, 0xc7,
	0x2f, 0x6d, 0x07, 0xfd, 0x6f, 0xfb, 0x9f, 0x11, 0x0c, 0xfe, 0x2a, 0x80, 0x1f, 0x82, 0x6d, 0x3c,
	0x9b, 0xa5, 0x7b, 0x37, 0xf7, 0xa6, 0x3c, 0x49, 0xa5, 0xa0, 0x86, 0x8d, 0x9f, 0x80, 0xb3, 0x26,
	0x98, 0xd5, 0x6c, 0xa3, 0xdc, 0x28, 0xfc, 0x47, 0xd0, 0x6d, 0x30, 0x7c, 0x0b, 0xba, 0x32, 0x8e,
	0x2b, 0xae, 0x4c, 0xbe, 0x4d, 0xdb, 0x49, 0xe3, 0x19, 0x17, 0x89, 0x3a, 0x37, 0xee, 0x36, 0x6d,
	0xa7, 0x67, 0xd3, 0xc5, 0x92, 0x58, 0x17, 0x4b, 0x62, 0x5d, 0x2e, 0x09, 0xfa, 0x54, 0x13, 0xf4,
	0xb5, 0x26, 0xe8, 0x67, 0x4d, 0xd0, 0xa2, 0x26, 0xe8, 0x57, 0x4d, 0xd0, 0xef, 0x9a, 0x58, 0x97,
	0x35, 0x41, 0x5f, 0x56, 0xc4, 0x5a, 0xac, 0x88, 0x75, 0xb1, 0x22, 0xd6, 0xfb, 0x93, 0x24, 0x55,
	0xe7, 0xd3, 0x61, 0x38, 0x92, 0x79, 0x94, 0x94, 0x2c, 0x66, 0x82, 0x45, 0x99, 0x9c, 0xa4, 0xd1,
	0xec, 0x38, 0xda, 0xe6, 0x05, 0x0e, 0xbb, 0xe6, 0xed, 0x1d, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff,
	0x7b, 0xfa, 0xb3, 0x7e, 0xb0, 0x03, 0x00, 0x00,
}

func (this *Metadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Metadata)
	if !ok {
		that2, ok := that.(Metadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Sections) != len(that1.Sections) {
		return false
	}
	for i := range this.Sections {
		if !this.Sections[i].Equal(that1.Sections[i]) {
			return false
		}
	}
	if len(this.Dictionary) != len(that1.Dictionary) {
		return false
	}
	for i := range this.Dictionary {
		if this.Dictionary[i] != that1.Dictionary[i] {
			return false
		}
	}
	if len(this.Types) != len(that1.Types) {
		return false
	}
	for i := range this.Types {
		if !this.Types[i].Equal(that1.Types[i]) {
			return false
		}
	}
	return true
}
func (this *SectionType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SectionType)
	if !ok {
		that2, ok := that.(SectionType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NameRef.Equal(that1.NameRef) {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *SectionType_NameRef) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SectionType_NameRef)
	if !ok {
		that2, ok := that.(SectionType_NameRef)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NamespaceRef != that1.NamespaceRef {
		return false
	}
	if this.KindRef != that1.KindRef {
		return false
	}
	return true
}
func (this *SectionInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SectionInfo)
	if !ok {
		that2, ok := that.(SectionInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Layout.Equal(that1.Layout) {
		return false
	}
	if this.TypeRef != that1.TypeRef {
		return false
	}
	if !bytes.Equal(this.ExtensionData, that1.ExtensionData) {
		return false
	}
	if this.TenantRef != that1.TenantRef {
		return false
	}
	return true
}
func (this *SectionLayout) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SectionLayout)
	if !ok {
		that2, ok := that.(SectionLayout)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	return true
}
func (this *Region) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Region)
	if !ok {
		that2, ok := that.(Region)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	if this.Length != that1.Length {
		return false
	}
	return true
}
func (this *Metadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&filemd.Metadata{")
	if this.Sections != nil {
		s = append(s, "Sections: "+fmt.Sprintf("%#v", this.Sections)+",\n")
	}
	s = append(s, "Dictionary: "+fmt.Sprintf("%#v", this.Dictionary)+",\n")
	if this.Types != nil {
		s = append(s, "Types: "+fmt.Sprintf("%#v", this.Types)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SectionType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&filemd.SectionType{")
	if this.NameRef != nil {
		s = append(s, "NameRef: "+fmt.Sprintf("%#v", this.NameRef)+",\n")
	}
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SectionType_NameRef) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&filemd.SectionType_NameRef{")
	s = append(s, "NamespaceRef: "+fmt.Sprintf("%#v", this.NamespaceRef)+",\n")
	s = append(s, "KindRef: "+fmt.Sprintf("%#v", this.KindRef)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SectionInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&filemd.SectionInfo{")
	if this.Layout != nil {
		s = append(s, "Layout: "+fmt.Sprintf("%#v", this.Layout)+",\n")
	}
	s = append(s, "TypeRef: "+fmt.Sprintf("%#v", this.TypeRef)+",\n")
	s = append(s, "ExtensionData: "+fmt.Sprintf("%#v", this.ExtensionData)+",\n")
	s = append(s, "TenantRef: "+fmt.Sprintf("%#v", this.TenantRef)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SectionLayout) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&filemd.SectionLayout{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Region) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&filemd.Region{")
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	s = append(s, "Length: "+fmt.Sprintf("%#v", this.Length)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringFilemd(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Metadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Types) > 0 {
		for iNdEx := len(m.Types) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Types[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFilemd(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Dictionary) > 0 {
		for iNdEx := len(m.Dictionary) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Dictionary[iNdEx])
			copy(dAtA[i:], m.Dictionary[iNdEx])
			i = encodeVarintFilemd(dAtA, i, uint64(len(m.Dictionary[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Sections) > 0 {
		for iNdEx := len(m.Sections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFilemd(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SectionType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SectionType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SectionType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintFilemd(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if m.NameRef != nil {
		{
			size, err := m.NameRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFilemd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SectionType_NameRef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SectionType_NameRef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SectionType_NameRef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.KindRef != 0 {
		i = encodeVarintFilemd(dAtA, i, uint64(m.KindRef))
		i--
		dAtA[i] = 0x10
	}
	if m.NamespaceRef != 0 {
		i = encodeVarintFilemd(dAtA, i, uint64(m.NamespaceRef))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SectionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SectionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SectionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TenantRef != 0 {
		i = encodeVarintFilemd(dAtA, i, uint64(m.TenantRef))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ExtensionData) > 0 {
		i -= len(m.ExtensionData)
		copy(dAtA[i:], m.ExtensionData)
		i = encodeVarintFilemd(dAtA, i, uint64(len(m.ExtensionData)))
		i--
		dAtA[i] = 0x32
	}
	if m.TypeRef != 0 {
		i = encodeVarintFilemd(dAtA, i, uint64(m.TypeRef))
		i--
		dAtA[i] = 0x28
	}
	if m.Layout != nil {
		{
			size, err := m.Layout.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFilemd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}

func (m *SectionLayout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SectionLayout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SectionLayout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFilemd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFilemd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Region) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Region) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Region) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Length != 0 {
		i = encodeVarintFilemd(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x10
	}
	if m.Offset != 0 {
		i = encodeVarintFilemd(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintFilemd(dAtA []byte, offset int, v uint64) int {
	offset -= sovFilemd(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Metadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sections) > 0 {
		for _, e := range m.Sections {
			l = e.Size()
			n += 1 + l + sovFilemd(uint64(l))
		}
	}
	if len(m.Dictionary) > 0 {
		for _, s := range m.Dictionary {
			l = len(s)
			n += 1 + l + sovFilemd(uint64(l))
		}
	}
	if len(m.Types) > 0 {
		for _, e := range m.Types {
			l = e.Size()
			n += 1 + l + sovFilemd(uint64(l))
		}
	}
	return n
}

func (m *SectionType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NameRef != nil {
		l = m.NameRef.Size()
		n += 1 + l + sovFilemd(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovFilemd(uint64(m.Version))
	}
	return n
}

func (m *SectionType_NameRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NamespaceRef != 0 {
		n += 1 + sovFilemd(uint64(m.NamespaceRef))
	}
	if m.KindRef != 0 {
		n += 1 + sovFilemd(uint64(m.KindRef))
	}
	return n
}

func (m *SectionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Layout != nil {
		l = m.Layout.Size()
		n += 1 + l + sovFilemd(uint64(l))
	}
	if m.TypeRef != 0 {
		n += 1 + sovFilemd(uint64(m.TypeRef))
	}
	l = len(m.ExtensionData)
	if l > 0 {
		n += 1 + l + sovFilemd(uint64(l))
	}
	if m.TenantRef != 0 {
		n += 1 + sovFilemd(uint64(m.TenantRef))
	}
	return n
}

func (m *SectionLayout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovFilemd(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovFilemd(uint64(l))
	}
	return n
}

func (m *Region) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovFilemd(uint64(m.Offset))
	}
	if m.Length != 0 {
		n += 1 + sovFilemd(uint64(m.Length))
	}
	return n
}

func sovFilemd(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFilemd(x uint64) (n int) {
	return sovFilemd(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Metadata) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSections := "[]*SectionInfo{"
	for _, f := range this.Sections {
		repeatedStringForSections += strings.Replace(f.String(), "SectionInfo", "SectionInfo", 1) + ","
	}
	repeatedStringForSections += "}"
	repeatedStringForTypes := "[]*SectionType{"
	for _, f := range this.Types {
		repeatedStringForTypes += strings.Replace(f.String(), "SectionType", "SectionType", 1) + ","
	}
	repeatedStringForTypes += "}"
	s := strings.Join([]string{`&Metadata{`,
		`Sections:` + repeatedStringForSections + `,`,
		`Dictionary:` + fmt.Sprintf("%v", this.Dictionary) + `,`,
		`Types:` + repeatedStringForTypes + `,`,
		`}`,
	}, "")
	return s
}
func (this *SectionType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SectionType{`,
		`NameRef:` + strings.Replace(fmt.Sprintf("%v", this.NameRef), "SectionType_NameRef", "SectionType_NameRef", 1) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SectionType_NameRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SectionType_NameRef{`,
		`NamespaceRef:` + fmt.Sprintf("%v", this.NamespaceRef) + `,`,
		`KindRef:` + fmt.Sprintf("%v", this.KindRef) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SectionInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SectionInfo{`,
		`Layout:` + strings.Replace(this.Layout.String(), "SectionLayout", "SectionLayout", 1) + `,`,
		`TypeRef:` + fmt.Sprintf("%v", this.TypeRef) + `,`,
		`ExtensionData:` + fmt.Sprintf("%v", this.ExtensionData) + `,`,
		`TenantRef:` + fmt.Sprintf("%v", this.TenantRef) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SectionLayout) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SectionLayout{`,
		`Data:` + strings.Replace(this.Data.String(), "Region", "Region", 1) + `,`,
		`Metadata:` + strings.Replace(this.Metadata.String(), "Region", "Region", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Region) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Region{`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`Length:` + fmt.Sprintf("%v", this.Length) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFilemd(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilemd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilemd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilemd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFilemd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sections = append(m.Sections, &SectionInfo{})
			if err := m.Sections[len(m.Sections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dictionary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilemd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFilemd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFilemd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dictionary = append(m.Dictionary, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilemd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilemd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFilemd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Types = append(m.Types, &SectionType{})
			if err := m.Types[len(m.Types)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFilemd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFilemd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFilemd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SectionType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilemd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SectionType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SectionType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilemd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilemd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFilemd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NameRef == nil {
				m.NameRef = &SectionType_NameRef{}
			}
			if err := m.NameRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilemd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFilemd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFilemd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFilemd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SectionType_NameRef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilemd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NameRef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NameRef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceRef", wireType)
			}
			m.NamespaceRef = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilemd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NamespaceRef |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KindRef", wireType)
			}
			m.KindRef = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilemd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KindRef |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFilemd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFilemd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFilemd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SectionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilemd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SectionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SectionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Layout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilemd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilemd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFilemd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Layout == nil {
				m.Layout = &SectionLayout{}
			}
			if err := m.Layout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeRef", wireType)
			}
			m.TypeRef = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilemd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeRef |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilemd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFilemd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFilemd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtensionData = append(m.ExtensionData[:0], dAtA[iNdEx:postIndex]...)
			if m.ExtensionData == nil {
				m.ExtensionData = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantRef", wireType)
			}
			m.TenantRef = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilemd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TenantRef |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFilemd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFilemd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFilemd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SectionLayout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilemd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SectionLayout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SectionLayout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilemd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilemd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFilemd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Region{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilemd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilemd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFilemd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &Region{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFilemd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFilemd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFilemd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Region) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilemd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Region: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Region: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilemd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilemd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFilemd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFilemd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFilemd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFilemd(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFilemd
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFilemd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFilemd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFilemd
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthFilemd
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFilemd
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFilemd(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthFilemd
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFilemd = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFilemd   = fmt.Errorf("proto: integer overflow")
)
