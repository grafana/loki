// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/dataobj/internal/metadata/datasetmd/datasetmd.proto

package datasetmd

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
	strconv "strconv"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ValueType represents the valid types that values within a column can have.
type ValueType int32

const (
	// Invalid value type.
	VALUE_TYPE_UNSPECIFIED ValueType = 0
	// VALUE_TYPE_INT64 is a column containing 64-bit integer values.
	VALUE_TYPE_INT64 ValueType = 1
	// VALUE_TYPE_UINT64 is a column containing 64-bit unsigned integer values.
	VALUE_TYPE_UINT64 ValueType = 2
	// VALUE_TYPE_STRING is a column containing string values.
	VALUE_TYPE_STRING ValueType = 3
)

var ValueType_name = map[int32]string{
	0: "VALUE_TYPE_UNSPECIFIED",
	1: "VALUE_TYPE_INT64",
	2: "VALUE_TYPE_UINT64",
	3: "VALUE_TYPE_STRING",
}

var ValueType_value = map[string]int32{
	"VALUE_TYPE_UNSPECIFIED": 0,
	"VALUE_TYPE_INT64":       1,
	"VALUE_TYPE_UINT64":      2,
	"VALUE_TYPE_STRING":      3,
}

func (ValueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7ab9d5b21b743868, []int{0}
}

// EncodingType represents the valid types that a sequence of values which a
// column can be encoded with.
type EncodingType int32

const (
	// Invalid encoding type.
	ENCODING_TYPE_UNSPECIFIED EncodingType = 0
	// Plain encoding; data is stored as-is.
	ENCODING_TYPE_PLAIN EncodingType = 1
	// Delta encoding. The first value within the page is stored as-is, and
	// subsequent values are stored as the delta from the previous value.
	ENCODING_TYPE_DELTA EncodingType = 2
	// Bitmap encoding. Bitmaps effiently store repeating sequences of unsigned
	// integers using a combination of run-length encoding and bitpacking.
	ENCODING_TYPE_BITMAP EncodingType = 3
)

var EncodingType_name = map[int32]string{
	0: "ENCODING_TYPE_UNSPECIFIED",
	1: "ENCODING_TYPE_PLAIN",
	2: "ENCODING_TYPE_DELTA",
	3: "ENCODING_TYPE_BITMAP",
}

var EncodingType_value = map[string]int32{
	"ENCODING_TYPE_UNSPECIFIED": 0,
	"ENCODING_TYPE_PLAIN":       1,
	"ENCODING_TYPE_DELTA":       2,
	"ENCODING_TYPE_BITMAP":      3,
}

func (EncodingType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7ab9d5b21b743868, []int{1}
}

func init() {
	proto.RegisterEnum("dataobj.metadata.dataset.v1.ValueType", ValueType_name, ValueType_value)
	proto.RegisterEnum("dataobj.metadata.dataset.v1.EncodingType", EncodingType_name, EncodingType_value)
}

func init() {
	proto.RegisterFile("pkg/dataobj/internal/metadata/datasetmd/datasetmd.proto", fileDescriptor_7ab9d5b21b743868)
}

var fileDescriptor_7ab9d5b21b743868 = []byte{
	// 310 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x2f, 0xc8, 0x4e, 0xd7,
	0x4f, 0x49, 0x2c, 0x49, 0xcc, 0x4f, 0xca, 0xd2, 0xcf, 0xcc, 0x2b, 0x49, 0x2d, 0xca, 0x4b, 0xcc,
	0xd1, 0xcf, 0x4d, 0x2d, 0x49, 0x04, 0x09, 0x82, 0x65, 0x8a, 0x53, 0x4b, 0x72, 0x53, 0x10, 0x2c,
	0xbd, 0x82, 0xa2, 0xfc, 0x92, 0x7c, 0x21, 0x69, 0xa8, 0x26, 0x3d, 0x98, 0x5a, 0x3d, 0xa8, 0x0a,
	0xbd, 0x32, 0x43, 0xad, 0x6c, 0x2e, 0xce, 0xb0, 0xc4, 0x9c, 0xd2, 0xd4, 0x90, 0xca, 0x82, 0x54,
	0x21, 0x29, 0x2e, 0xb1, 0x30, 0x47, 0x9f, 0x50, 0xd7, 0xf8, 0x90, 0xc8, 0x00, 0xd7, 0xf8, 0x50,
	0xbf, 0xe0, 0x00, 0x57, 0x67, 0x4f, 0x37, 0x4f, 0x57, 0x17, 0x01, 0x06, 0x21, 0x11, 0x2e, 0x01,
	0x24, 0x39, 0x4f, 0xbf, 0x10, 0x33, 0x13, 0x01, 0x46, 0x21, 0x51, 0x2e, 0x41, 0x64, 0x1d, 0x10,
	0x61, 0x26, 0x34, 0xe1, 0xe0, 0x90, 0x20, 0x4f, 0x3f, 0x77, 0x01, 0x66, 0xad, 0x4a, 0x2e, 0x1e,
	0xd7, 0xbc, 0xe4, 0xfc, 0x94, 0xcc, 0xbc, 0x74, 0xb0, 0x7d, 0xb2, 0x5c, 0x92, 0xae, 0x7e, 0xce,
	0xfe, 0x2e, 0x9e, 0x7e, 0xee, 0xd8, 0xac, 0x14, 0xe7, 0x12, 0x46, 0x95, 0x0e, 0xf0, 0x71, 0xf4,
	0xf4, 0x13, 0x60, 0xc4, 0x94, 0x70, 0x71, 0xf5, 0x09, 0x71, 0x14, 0x60, 0x12, 0x92, 0xe0, 0x12,
	0x41, 0x95, 0x70, 0xf2, 0x0c, 0xf1, 0x75, 0x0c, 0x10, 0x60, 0x76, 0xaa, 0xb8, 0xf0, 0x50, 0x8e,
	0xe1, 0xc6, 0x43, 0x39, 0x86, 0x0f, 0x0f, 0xe5, 0x18, 0x1b, 0x1e, 0xc9, 0x31, 0xae, 0x78, 0x24,
	0xc7, 0x78, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0xbe, 0x78,
	0x24, 0xc7, 0xf0, 0xe1, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc,
	0x78, 0x2c, 0xc7, 0x10, 0xe5, 0x94, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab,
	0x9f, 0x5e, 0x94, 0x98, 0x96, 0x98, 0x97, 0xa8, 0x9f, 0x93, 0x9f, 0x9d, 0xa9, 0x5f, 0x66, 0xac,
	0x4f, 0x64, 0x74, 0x24, 0xb1, 0x81, 0x63, 0xc1, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xee, 0xfd,
	0x13, 0xfe, 0xc0, 0x01, 0x00, 0x00,
}

func (x ValueType) String() string {
	s, ok := ValueType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x EncodingType) String() string {
	s, ok := EncodingType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
