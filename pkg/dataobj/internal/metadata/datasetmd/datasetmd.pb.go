// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/dataobj/internal/metadata/datasetmd/datasetmd.proto

package datasetmd

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ValueType represents the valid types that values within a column can have.
type ValueType int32

const (
	// Invalid value type.
	VALUE_TYPE_UNSPECIFIED ValueType = 0
	// VALUE_TYPE_INT64 is a column containing 64-bit integer values.
	VALUE_TYPE_INT64 ValueType = 1
	// VALUE_TYPE_UINT64 is a column containing 64-bit unsigned integer values.
	VALUE_TYPE_UINT64 ValueType = 2
	// VALUE_TYPE_STRING is a column containing string values.
	VALUE_TYPE_STRING ValueType = 3
)

var ValueType_name = map[int32]string{
	0: "VALUE_TYPE_UNSPECIFIED",
	1: "VALUE_TYPE_INT64",
	2: "VALUE_TYPE_UINT64",
	3: "VALUE_TYPE_STRING",
}

var ValueType_value = map[string]int32{
	"VALUE_TYPE_UNSPECIFIED": 0,
	"VALUE_TYPE_INT64":       1,
	"VALUE_TYPE_UINT64":      2,
	"VALUE_TYPE_STRING":      3,
}

func (ValueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7ab9d5b21b743868, []int{0}
}

// CompressionType represents the valid compression types that can be used for
// compressing values in a page.
type CompressionType int32

const (
	// Invalid compression type.
	COMPRESSION_TYPE_UNSPECIFIED CompressionType = 0
	// No compression.
	COMPRESSION_TYPE_NONE CompressionType = 1
	// Snappy compression.
	COMPRESSION_TYPE_SNAPPY CompressionType = 2
	// Zstd compression.
	COMPRESSION_TYPE_ZSTD CompressionType = 3
)

var CompressionType_name = map[int32]string{
	0: "COMPRESSION_TYPE_UNSPECIFIED",
	1: "COMPRESSION_TYPE_NONE",
	2: "COMPRESSION_TYPE_SNAPPY",
	3: "COMPRESSION_TYPE_ZSTD",
}

var CompressionType_value = map[string]int32{
	"COMPRESSION_TYPE_UNSPECIFIED": 0,
	"COMPRESSION_TYPE_NONE":        1,
	"COMPRESSION_TYPE_SNAPPY":      2,
	"COMPRESSION_TYPE_ZSTD":        3,
}

func (CompressionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7ab9d5b21b743868, []int{1}
}

// EncodingType represents the valid types that a sequence of values which a
// column can be encoded with.
type EncodingType int32

const (
	// Invalid encoding type.
	ENCODING_TYPE_UNSPECIFIED EncodingType = 0
	// Plain encoding; data is stored as-is.
	ENCODING_TYPE_PLAIN EncodingType = 1
	// Delta encoding. The first value within the page is stored as-is, and
	// subsequent values are stored as the delta from the previous value.
	ENCODING_TYPE_DELTA EncodingType = 2
	// Bitmap encoding. Bitmaps effiently store repeating sequences of unsigned
	// integers using a combination of run-length encoding and bitpacking.
	ENCODING_TYPE_BITMAP EncodingType = 3
)

var EncodingType_name = map[int32]string{
	0: "ENCODING_TYPE_UNSPECIFIED",
	1: "ENCODING_TYPE_PLAIN",
	2: "ENCODING_TYPE_DELTA",
	3: "ENCODING_TYPE_BITMAP",
}

var EncodingType_value = map[string]int32{
	"ENCODING_TYPE_UNSPECIFIED": 0,
	"ENCODING_TYPE_PLAIN":       1,
	"ENCODING_TYPE_DELTA":       2,
	"ENCODING_TYPE_BITMAP":      3,
}

func (EncodingType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7ab9d5b21b743868, []int{2}
}

// ColumnInfo describes an individual column within a data set.
type ColumnInfo struct {
	// Optional name of the column.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Type of values stored within the column.
	ValueType ValueType `protobuf:"varint,2,opt,name=value_type,json=valueType,proto3,enum=dataobj.metadata.dataset.v1.ValueType" json:"value_type,omitempty"`
	// Total number of rows in the entire column.
	RowsCount uint32 `protobuf:"varint,3,opt,name=rows_count,json=rowsCount,proto3" json:"rows_count,omitempty"`
	// Compression type used for all pages.
	Compression CompressionType `protobuf:"varint,4,opt,name=compression,proto3,enum=dataobj.metadata.dataset.v1.CompressionType" json:"compression,omitempty"`
	// Total uncompressed size of all pages in the column.
	UncompressedSize uint32 `protobuf:"varint,5,opt,name=uncompressed_size,json=uncompressedSize,proto3" json:"uncompressed_size,omitempty"`
	// Total compressed size of all pages in the column. Compressed size may
	// match uncompressed size if no compression is used.
	CompressedSize uint32 `protobuf:"varint,6,opt,name=compressed_size,json=compressedSize,proto3" json:"compressed_size,omitempty"`
	// Byte offset from the start of the data object to the column's metadata.
	MetadataOffset uint32 `protobuf:"varint,7,opt,name=metadata_offset,json=metadataOffset,proto3" json:"metadata_offset,omitempty"`
	// Size of the column's metadata in bytes.
	MetadataSize uint32 `protobuf:"varint,8,opt,name=metadata_size,json=metadataSize,proto3" json:"metadata_size,omitempty"`
	// Statistics for the column.
	Statistics *Statistics `protobuf:"bytes,9,opt,name=statistics,proto3" json:"statistics,omitempty"`
}

func (m *ColumnInfo) Reset()      { *m = ColumnInfo{} }
func (*ColumnInfo) ProtoMessage() {}
func (*ColumnInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ab9d5b21b743868, []int{0}
}
func (m *ColumnInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ColumnInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ColumnInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ColumnInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColumnInfo.Merge(m, src)
}
func (m *ColumnInfo) XXX_Size() int {
	return m.Size()
}
func (m *ColumnInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ColumnInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ColumnInfo proto.InternalMessageInfo

func (m *ColumnInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ColumnInfo) GetValueType() ValueType {
	if m != nil {
		return m.ValueType
	}
	return VALUE_TYPE_UNSPECIFIED
}

func (m *ColumnInfo) GetRowsCount() uint32 {
	if m != nil {
		return m.RowsCount
	}
	return 0
}

func (m *ColumnInfo) GetCompression() CompressionType {
	if m != nil {
		return m.Compression
	}
	return COMPRESSION_TYPE_UNSPECIFIED
}

func (m *ColumnInfo) GetUncompressedSize() uint32 {
	if m != nil {
		return m.UncompressedSize
	}
	return 0
}

func (m *ColumnInfo) GetCompressedSize() uint32 {
	if m != nil {
		return m.CompressedSize
	}
	return 0
}

func (m *ColumnInfo) GetMetadataOffset() uint32 {
	if m != nil {
		return m.MetadataOffset
	}
	return 0
}

func (m *ColumnInfo) GetMetadataSize() uint32 {
	if m != nil {
		return m.MetadataSize
	}
	return 0
}

func (m *ColumnInfo) GetStatistics() *Statistics {
	if m != nil {
		return m.Statistics
	}
	return nil
}

// Statistics about a column or a page. All statistics are optional and are
// conditionally set depending on the column type.
type Statistics struct {
	// Minimum value.
	MinValue []byte `protobuf:"bytes,1,opt,name=min_value,json=minValue,proto3" json:"min_value,omitempty"`
	// Maximum value.
	MaxValue []byte `protobuf:"bytes,2,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
}

func (m *Statistics) Reset()      { *m = Statistics{} }
func (*Statistics) ProtoMessage() {}
func (*Statistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ab9d5b21b743868, []int{1}
}
func (m *Statistics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Statistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Statistics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Statistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Statistics.Merge(m, src)
}
func (m *Statistics) XXX_Size() int {
	return m.Size()
}
func (m *Statistics) XXX_DiscardUnknown() {
	xxx_messageInfo_Statistics.DiscardUnknown(m)
}

var xxx_messageInfo_Statistics proto.InternalMessageInfo

func (m *Statistics) GetMinValue() []byte {
	if m != nil {
		return m.MinValue
	}
	return nil
}

func (m *Statistics) GetMaxValue() []byte {
	if m != nil {
		return m.MaxValue
	}
	return nil
}

// Page describes an individual page within a column.
type PageInfo struct {
	// Uncompressed size of the page within the data object.
	UncompressedSize uint32 `protobuf:"varint,1,opt,name=uncompressed_size,json=uncompressedSize,proto3" json:"uncompressed_size,omitempty"`
	// Compressed size of the page within the data object. Compression size
	// will match uncompressed size if no compression is used.
	CompressedSize uint32 `protobuf:"varint,2,opt,name=compressed_size,json=compressedSize,proto3" json:"compressed_size,omitempty"`
	// CRC32 checksum of the page data.
	Crc32 uint32 `protobuf:"varint,3,opt,name=crc32,proto3" json:"crc32,omitempty"`
	// Number of rows in the page.
	RowsCount uint32 `protobuf:"varint,4,opt,name=rows_count,json=rowsCount,proto3" json:"rows_count,omitempty"`
	// Encoding type used for the page.
	Encoding EncodingType `protobuf:"varint,5,opt,name=encoding,proto3,enum=dataobj.metadata.dataset.v1.EncodingType" json:"encoding,omitempty"`
	// Byte offset from the start of the data object to the page's data.
	DataOffset uint32 `protobuf:"varint,6,opt,name=data_offset,json=dataOffset,proto3" json:"data_offset,omitempty"`
	// Size of the page's data in bytes.
	DataSize uint32 `protobuf:"varint,7,opt,name=data_size,json=dataSize,proto3" json:"data_size,omitempty"`
	// Optional statistics for the page.
	Statistics *Statistics `protobuf:"bytes,8,opt,name=statistics,proto3" json:"statistics,omitempty"`
}

func (m *PageInfo) Reset()      { *m = PageInfo{} }
func (*PageInfo) ProtoMessage() {}
func (*PageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ab9d5b21b743868, []int{2}
}
func (m *PageInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageInfo.Merge(m, src)
}
func (m *PageInfo) XXX_Size() int {
	return m.Size()
}
func (m *PageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PageInfo proto.InternalMessageInfo

func (m *PageInfo) GetUncompressedSize() uint32 {
	if m != nil {
		return m.UncompressedSize
	}
	return 0
}

func (m *PageInfo) GetCompressedSize() uint32 {
	if m != nil {
		return m.CompressedSize
	}
	return 0
}

func (m *PageInfo) GetCrc32() uint32 {
	if m != nil {
		return m.Crc32
	}
	return 0
}

func (m *PageInfo) GetRowsCount() uint32 {
	if m != nil {
		return m.RowsCount
	}
	return 0
}

func (m *PageInfo) GetEncoding() EncodingType {
	if m != nil {
		return m.Encoding
	}
	return ENCODING_TYPE_UNSPECIFIED
}

func (m *PageInfo) GetDataOffset() uint32 {
	if m != nil {
		return m.DataOffset
	}
	return 0
}

func (m *PageInfo) GetDataSize() uint32 {
	if m != nil {
		return m.DataSize
	}
	return 0
}

func (m *PageInfo) GetStatistics() *Statistics {
	if m != nil {
		return m.Statistics
	}
	return nil
}

func init() {
	proto.RegisterEnum("dataobj.metadata.dataset.v1.ValueType", ValueType_name, ValueType_value)
	proto.RegisterEnum("dataobj.metadata.dataset.v1.CompressionType", CompressionType_name, CompressionType_value)
	proto.RegisterEnum("dataobj.metadata.dataset.v1.EncodingType", EncodingType_name, EncodingType_value)
	proto.RegisterType((*ColumnInfo)(nil), "dataobj.metadata.dataset.v1.ColumnInfo")
	proto.RegisterType((*Statistics)(nil), "dataobj.metadata.dataset.v1.Statistics")
	proto.RegisterType((*PageInfo)(nil), "dataobj.metadata.dataset.v1.PageInfo")
}

func init() {
	proto.RegisterFile("pkg/dataobj/internal/metadata/datasetmd/datasetmd.proto", fileDescriptor_7ab9d5b21b743868)
}

var fileDescriptor_7ab9d5b21b743868 = []byte{
	// 679 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x4f, 0x4f, 0xdb, 0x4e,
	0x10, 0xcd, 0x26, 0xc0, 0x2f, 0x19, 0xfe, 0x99, 0xfd, 0x41, 0x31, 0x4d, 0x71, 0x23, 0x2a, 0x95,
	0x94, 0x56, 0xb6, 0x1a, 0xaa, 0xf6, 0x1c, 0x12, 0x83, 0x2c, 0x81, 0x63, 0xd9, 0x06, 0x09, 0x2e,
	0x96, 0x71, 0x36, 0xa9, 0x4b, 0x6c, 0x47, 0xb1, 0x93, 0x02, 0xa7, 0x9e, 0x7a, 0xee, 0xc7, 0xe8,
	0xf7, 0xe8, 0xa5, 0x47, 0x8e, 0x1c, 0x8b, 0x73, 0xe9, 0x91, 0x8f, 0x50, 0x65, 0xf3, 0xcf, 0x24,
	0x69, 0x84, 0x7a, 0x1b, 0xbf, 0xf7, 0x66, 0x66, 0x3d, 0x6f, 0x76, 0xe1, 0x43, 0xfd, 0xa2, 0x2a,
	0x94, 0xcd, 0xc0, 0xf4, 0xce, 0x3f, 0x09, 0xb6, 0x1b, 0x90, 0x86, 0x6b, 0xd6, 0x04, 0x87, 0x04,
	0x66, 0x07, 0xa4, 0x8c, 0x4f, 0x02, 0xa7, 0x3c, 0x8c, 0xf8, 0x7a, 0xc3, 0x0b, 0x3c, 0x9c, 0xee,
	0x25, 0xf1, 0x7d, 0x2d, 0xdf, 0x53, 0xf0, 0xad, 0xb7, 0x5b, 0x3f, 0x12, 0x00, 0x05, 0xaf, 0xd6,
	0x74, 0x5c, 0xc9, 0xad, 0x78, 0x18, 0xc3, 0x8c, 0x6b, 0x3a, 0x84, 0x45, 0x19, 0x94, 0x4d, 0xa9,
	0x34, 0xc6, 0x22, 0x40, 0xcb, 0xac, 0x35, 0x89, 0x11, 0x5c, 0xd5, 0x09, 0x1b, 0xcf, 0xa0, 0xec,
	0x52, 0xee, 0x25, 0x3f, 0xa5, 0x28, 0x7f, 0xd2, 0x91, 0xeb, 0x57, 0x75, 0xa2, 0xa6, 0x5a, 0xfd,
	0x10, 0x6f, 0x02, 0x34, 0xbc, 0xcf, 0xbe, 0x61, 0x79, 0x4d, 0x37, 0x60, 0x13, 0x19, 0x94, 0x5d,
	0x54, 0x53, 0x1d, 0xa4, 0xd0, 0x01, 0xb0, 0x0c, 0xf3, 0x96, 0xe7, 0xd4, 0x1b, 0xc4, 0xf7, 0x6d,
	0xcf, 0x65, 0x67, 0x68, 0x9b, 0x37, 0x53, 0xdb, 0x14, 0x86, 0x7a, 0xda, 0x2c, 0x5a, 0x00, 0xbf,
	0x86, 0x95, 0xa6, 0xdb, 0x07, 0x48, 0xd9, 0xf0, 0xed, 0x6b, 0xc2, 0xce, 0xd2, 0xae, 0x4c, 0x94,
	0xd0, 0xec, 0x6b, 0x82, 0xb7, 0x61, 0x79, 0x54, 0x3a, 0x47, 0xa5, 0x4b, 0xe3, 0xc2, 0xfe, 0x49,
	0x0c, 0xaf, 0x52, 0xf1, 0x49, 0xc0, 0xfe, 0xd7, 0x15, 0xf6, 0xe1, 0x12, 0x45, 0xf1, 0x0b, 0x58,
	0x1c, 0x08, 0x69, 0xbd, 0x24, 0x95, 0x2d, 0xf4, 0x41, 0x5a, 0xed, 0x00, 0xc0, 0x0f, 0xcc, 0xc0,
	0xf6, 0x03, 0xdb, 0xf2, 0xd9, 0x54, 0x06, 0x65, 0xe7, 0x73, 0xdb, 0x53, 0x7f, 0x59, 0x1b, 0xc8,
	0xd5, 0x48, 0xea, 0xd6, 0x3e, 0xc0, 0x90, 0xc1, 0x69, 0x48, 0x39, 0xb6, 0x6b, 0xd0, 0xd1, 0x53,
	0x27, 0x17, 0xd4, 0xa4, 0x63, 0xbb, 0xd4, 0x15, 0x4a, 0x9a, 0x97, 0x3d, 0x32, 0xde, 0x23, 0xcd,
	0x4b, 0x4a, 0x6e, 0xb5, 0xe3, 0x90, 0x54, 0xcc, 0x2a, 0xa1, 0xbb, 0x30, 0x71, 0x82, 0xe8, 0xf1,
	0x13, 0x8c, 0x4f, 0x9c, 0xe0, 0x2a, 0xcc, 0x5a, 0x0d, 0x6b, 0x37, 0xd7, 0xdb, 0x80, 0xee, 0xc7,
	0xc8, 0x72, 0xcc, 0x8c, 0x2e, 0x87, 0x08, 0x49, 0xe2, 0x5a, 0x5e, 0xd9, 0x76, 0xab, 0xd4, 0xc3,
	0xa5, 0xdc, 0xab, 0xa9, 0x63, 0x12, 0x7b, 0x62, 0xba, 0x16, 0x83, 0x54, 0xfc, 0x1c, 0xe6, 0xa3,
	0xce, 0x75, 0x2d, 0x86, 0x88, 0x6b, 0x69, 0x48, 0x0d, 0x1d, 0xeb, 0x1a, 0x9b, 0xfc, 0x8b, 0x5b,
	0xc9, 0x7f, 0x76, 0x6b, 0xe7, 0x02, 0x52, 0x83, 0x1b, 0x82, 0x9f, 0xc2, 0x93, 0x93, 0xfc, 0xe1,
	0xb1, 0x68, 0xe8, 0xa7, 0x8a, 0x68, 0x1c, 0xcb, 0x9a, 0x22, 0x16, 0xa4, 0x7d, 0x49, 0x2c, 0x32,
	0x31, 0xbc, 0x0a, 0x4c, 0x84, 0x93, 0x64, 0xfd, 0xfd, 0x3b, 0x06, 0xe1, 0x35, 0x58, 0x89, 0x66,
	0x74, 0xe1, 0xf8, 0x08, 0xac, 0xe9, 0xaa, 0x24, 0x1f, 0x30, 0x89, 0x9d, 0xaf, 0x08, 0x96, 0x47,
	0x2e, 0x0a, 0xce, 0xc0, 0xb3, 0x42, 0xe9, 0x48, 0x51, 0x45, 0x4d, 0x93, 0x4a, 0xf2, 0xa4, 0xce,
	0x1b, 0xb0, 0x36, 0xa6, 0x90, 0x4b, 0xb2, 0xc8, 0x20, 0x9c, 0x86, 0xf5, 0x31, 0x4a, 0x93, 0xf3,
	0x8a, 0x72, 0xca, 0xc4, 0x27, 0xe6, 0x9d, 0x69, 0x7a, 0x91, 0x49, 0xec, 0x5c, 0xc1, 0x42, 0xd4,
	0x16, 0xbc, 0x09, 0x1b, 0xa2, 0x5c, 0x28, 0x15, 0x25, 0xf9, 0x60, 0xd2, 0x09, 0xd6, 0xe1, 0xff,
	0x87, 0xb4, 0x72, 0x98, 0x97, 0x64, 0x06, 0x8d, 0x13, 0x45, 0xf1, 0x50, 0xcf, 0x33, 0x71, 0xcc,
	0xc2, 0xea, 0x43, 0x62, 0x4f, 0xd2, 0x8f, 0xf2, 0x0a, 0x93, 0xd8, 0xbb, 0xbc, 0xb9, 0xe3, 0x62,
	0xb7, 0x77, 0x5c, 0xec, 0xfe, 0x8e, 0x43, 0x5f, 0x42, 0x0e, 0x7d, 0x0f, 0x39, 0xf4, 0x33, 0xe4,
	0xd0, 0x4d, 0xc8, 0xa1, 0x5f, 0x21, 0x87, 0x7e, 0x87, 0x5c, 0xec, 0x3e, 0xe4, 0xd0, 0xb7, 0x36,
	0x17, 0xbb, 0x69, 0x73, 0xb1, 0xdb, 0x36, 0x17, 0x3b, 0xdb, 0xab, 0xda, 0xc1, 0xc7, 0xe6, 0x39,
	0x6f, 0x79, 0x8e, 0x50, 0x6d, 0x98, 0x15, 0xd3, 0x35, 0x85, 0x9a, 0x77, 0x61, 0x0b, 0xad, 0x5d,
	0xe1, 0x91, 0x6f, 0xf1, 0xf9, 0x1c, 0x7d, 0x82, 0x77, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x5f,
	0xec, 0x7c, 0x9f, 0xbd, 0x05, 0x00, 0x00,
}

func (x ValueType) String() string {
	s, ok := ValueType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x CompressionType) String() string {
	s, ok := CompressionType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x EncodingType) String() string {
	s, ok := EncodingType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ColumnInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ColumnInfo)
	if !ok {
		that2, ok := that.(ColumnInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.ValueType != that1.ValueType {
		return false
	}
	if this.RowsCount != that1.RowsCount {
		return false
	}
	if this.Compression != that1.Compression {
		return false
	}
	if this.UncompressedSize != that1.UncompressedSize {
		return false
	}
	if this.CompressedSize != that1.CompressedSize {
		return false
	}
	if this.MetadataOffset != that1.MetadataOffset {
		return false
	}
	if this.MetadataSize != that1.MetadataSize {
		return false
	}
	if !this.Statistics.Equal(that1.Statistics) {
		return false
	}
	return true
}
func (this *Statistics) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Statistics)
	if !ok {
		that2, ok := that.(Statistics)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.MinValue, that1.MinValue) {
		return false
	}
	if !bytes.Equal(this.MaxValue, that1.MaxValue) {
		return false
	}
	return true
}
func (this *PageInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PageInfo)
	if !ok {
		that2, ok := that.(PageInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UncompressedSize != that1.UncompressedSize {
		return false
	}
	if this.CompressedSize != that1.CompressedSize {
		return false
	}
	if this.Crc32 != that1.Crc32 {
		return false
	}
	if this.RowsCount != that1.RowsCount {
		return false
	}
	if this.Encoding != that1.Encoding {
		return false
	}
	if this.DataOffset != that1.DataOffset {
		return false
	}
	if this.DataSize != that1.DataSize {
		return false
	}
	if !this.Statistics.Equal(that1.Statistics) {
		return false
	}
	return true
}
func (this *ColumnInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&datasetmd.ColumnInfo{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "ValueType: "+fmt.Sprintf("%#v", this.ValueType)+",\n")
	s = append(s, "RowsCount: "+fmt.Sprintf("%#v", this.RowsCount)+",\n")
	s = append(s, "Compression: "+fmt.Sprintf("%#v", this.Compression)+",\n")
	s = append(s, "UncompressedSize: "+fmt.Sprintf("%#v", this.UncompressedSize)+",\n")
	s = append(s, "CompressedSize: "+fmt.Sprintf("%#v", this.CompressedSize)+",\n")
	s = append(s, "MetadataOffset: "+fmt.Sprintf("%#v", this.MetadataOffset)+",\n")
	s = append(s, "MetadataSize: "+fmt.Sprintf("%#v", this.MetadataSize)+",\n")
	if this.Statistics != nil {
		s = append(s, "Statistics: "+fmt.Sprintf("%#v", this.Statistics)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Statistics) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&datasetmd.Statistics{")
	s = append(s, "MinValue: "+fmt.Sprintf("%#v", this.MinValue)+",\n")
	s = append(s, "MaxValue: "+fmt.Sprintf("%#v", this.MaxValue)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PageInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&datasetmd.PageInfo{")
	s = append(s, "UncompressedSize: "+fmt.Sprintf("%#v", this.UncompressedSize)+",\n")
	s = append(s, "CompressedSize: "+fmt.Sprintf("%#v", this.CompressedSize)+",\n")
	s = append(s, "Crc32: "+fmt.Sprintf("%#v", this.Crc32)+",\n")
	s = append(s, "RowsCount: "+fmt.Sprintf("%#v", this.RowsCount)+",\n")
	s = append(s, "Encoding: "+fmt.Sprintf("%#v", this.Encoding)+",\n")
	s = append(s, "DataOffset: "+fmt.Sprintf("%#v", this.DataOffset)+",\n")
	s = append(s, "DataSize: "+fmt.Sprintf("%#v", this.DataSize)+",\n")
	if this.Statistics != nil {
		s = append(s, "Statistics: "+fmt.Sprintf("%#v", this.Statistics)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringDatasetmd(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ColumnInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ColumnInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ColumnInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Statistics != nil {
		{
			size, err := m.Statistics.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDatasetmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.MetadataSize != 0 {
		i = encodeVarintDatasetmd(dAtA, i, uint64(m.MetadataSize))
		i--
		dAtA[i] = 0x40
	}
	if m.MetadataOffset != 0 {
		i = encodeVarintDatasetmd(dAtA, i, uint64(m.MetadataOffset))
		i--
		dAtA[i] = 0x38
	}
	if m.CompressedSize != 0 {
		i = encodeVarintDatasetmd(dAtA, i, uint64(m.CompressedSize))
		i--
		dAtA[i] = 0x30
	}
	if m.UncompressedSize != 0 {
		i = encodeVarintDatasetmd(dAtA, i, uint64(m.UncompressedSize))
		i--
		dAtA[i] = 0x28
	}
	if m.Compression != 0 {
		i = encodeVarintDatasetmd(dAtA, i, uint64(m.Compression))
		i--
		dAtA[i] = 0x20
	}
	if m.RowsCount != 0 {
		i = encodeVarintDatasetmd(dAtA, i, uint64(m.RowsCount))
		i--
		dAtA[i] = 0x18
	}
	if m.ValueType != 0 {
		i = encodeVarintDatasetmd(dAtA, i, uint64(m.ValueType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDatasetmd(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Statistics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Statistics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Statistics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MaxValue) > 0 {
		i -= len(m.MaxValue)
		copy(dAtA[i:], m.MaxValue)
		i = encodeVarintDatasetmd(dAtA, i, uint64(len(m.MaxValue)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MinValue) > 0 {
		i -= len(m.MinValue)
		copy(dAtA[i:], m.MinValue)
		i = encodeVarintDatasetmd(dAtA, i, uint64(len(m.MinValue)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PageInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PageInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Statistics != nil {
		{
			size, err := m.Statistics.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDatasetmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.DataSize != 0 {
		i = encodeVarintDatasetmd(dAtA, i, uint64(m.DataSize))
		i--
		dAtA[i] = 0x38
	}
	if m.DataOffset != 0 {
		i = encodeVarintDatasetmd(dAtA, i, uint64(m.DataOffset))
		i--
		dAtA[i] = 0x30
	}
	if m.Encoding != 0 {
		i = encodeVarintDatasetmd(dAtA, i, uint64(m.Encoding))
		i--
		dAtA[i] = 0x28
	}
	if m.RowsCount != 0 {
		i = encodeVarintDatasetmd(dAtA, i, uint64(m.RowsCount))
		i--
		dAtA[i] = 0x20
	}
	if m.Crc32 != 0 {
		i = encodeVarintDatasetmd(dAtA, i, uint64(m.Crc32))
		i--
		dAtA[i] = 0x18
	}
	if m.CompressedSize != 0 {
		i = encodeVarintDatasetmd(dAtA, i, uint64(m.CompressedSize))
		i--
		dAtA[i] = 0x10
	}
	if m.UncompressedSize != 0 {
		i = encodeVarintDatasetmd(dAtA, i, uint64(m.UncompressedSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDatasetmd(dAtA []byte, offset int, v uint64) int {
	offset -= sovDatasetmd(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ColumnInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDatasetmd(uint64(l))
	}
	if m.ValueType != 0 {
		n += 1 + sovDatasetmd(uint64(m.ValueType))
	}
	if m.RowsCount != 0 {
		n += 1 + sovDatasetmd(uint64(m.RowsCount))
	}
	if m.Compression != 0 {
		n += 1 + sovDatasetmd(uint64(m.Compression))
	}
	if m.UncompressedSize != 0 {
		n += 1 + sovDatasetmd(uint64(m.UncompressedSize))
	}
	if m.CompressedSize != 0 {
		n += 1 + sovDatasetmd(uint64(m.CompressedSize))
	}
	if m.MetadataOffset != 0 {
		n += 1 + sovDatasetmd(uint64(m.MetadataOffset))
	}
	if m.MetadataSize != 0 {
		n += 1 + sovDatasetmd(uint64(m.MetadataSize))
	}
	if m.Statistics != nil {
		l = m.Statistics.Size()
		n += 1 + l + sovDatasetmd(uint64(l))
	}
	return n
}

func (m *Statistics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MinValue)
	if l > 0 {
		n += 1 + l + sovDatasetmd(uint64(l))
	}
	l = len(m.MaxValue)
	if l > 0 {
		n += 1 + l + sovDatasetmd(uint64(l))
	}
	return n
}

func (m *PageInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UncompressedSize != 0 {
		n += 1 + sovDatasetmd(uint64(m.UncompressedSize))
	}
	if m.CompressedSize != 0 {
		n += 1 + sovDatasetmd(uint64(m.CompressedSize))
	}
	if m.Crc32 != 0 {
		n += 1 + sovDatasetmd(uint64(m.Crc32))
	}
	if m.RowsCount != 0 {
		n += 1 + sovDatasetmd(uint64(m.RowsCount))
	}
	if m.Encoding != 0 {
		n += 1 + sovDatasetmd(uint64(m.Encoding))
	}
	if m.DataOffset != 0 {
		n += 1 + sovDatasetmd(uint64(m.DataOffset))
	}
	if m.DataSize != 0 {
		n += 1 + sovDatasetmd(uint64(m.DataSize))
	}
	if m.Statistics != nil {
		l = m.Statistics.Size()
		n += 1 + l + sovDatasetmd(uint64(l))
	}
	return n
}

func sovDatasetmd(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDatasetmd(x uint64) (n int) {
	return sovDatasetmd(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ColumnInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ColumnInfo{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ValueType:` + fmt.Sprintf("%v", this.ValueType) + `,`,
		`RowsCount:` + fmt.Sprintf("%v", this.RowsCount) + `,`,
		`Compression:` + fmt.Sprintf("%v", this.Compression) + `,`,
		`UncompressedSize:` + fmt.Sprintf("%v", this.UncompressedSize) + `,`,
		`CompressedSize:` + fmt.Sprintf("%v", this.CompressedSize) + `,`,
		`MetadataOffset:` + fmt.Sprintf("%v", this.MetadataOffset) + `,`,
		`MetadataSize:` + fmt.Sprintf("%v", this.MetadataSize) + `,`,
		`Statistics:` + strings.Replace(this.Statistics.String(), "Statistics", "Statistics", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Statistics) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Statistics{`,
		`MinValue:` + fmt.Sprintf("%v", this.MinValue) + `,`,
		`MaxValue:` + fmt.Sprintf("%v", this.MaxValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PageInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PageInfo{`,
		`UncompressedSize:` + fmt.Sprintf("%v", this.UncompressedSize) + `,`,
		`CompressedSize:` + fmt.Sprintf("%v", this.CompressedSize) + `,`,
		`Crc32:` + fmt.Sprintf("%v", this.Crc32) + `,`,
		`RowsCount:` + fmt.Sprintf("%v", this.RowsCount) + `,`,
		`Encoding:` + fmt.Sprintf("%v", this.Encoding) + `,`,
		`DataOffset:` + fmt.Sprintf("%v", this.DataOffset) + `,`,
		`DataSize:` + fmt.Sprintf("%v", this.DataSize) + `,`,
		`Statistics:` + strings.Replace(this.Statistics.String(), "Statistics", "Statistics", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDatasetmd(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ColumnInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatasetmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ColumnInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ColumnInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDatasetmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDatasetmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueType", wireType)
			}
			m.ValueType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValueType |= ValueType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowsCount", wireType)
			}
			m.RowsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowsCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compression", wireType)
			}
			m.Compression = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Compression |= CompressionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UncompressedSize", wireType)
			}
			m.UncompressedSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UncompressedSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompressedSize", wireType)
			}
			m.CompressedSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompressedSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataOffset", wireType)
			}
			m.MetadataOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MetadataOffset |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataSize", wireType)
			}
			m.MetadataSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MetadataSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statistics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatasetmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDatasetmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Statistics == nil {
				m.Statistics = &Statistics{}
			}
			if err := m.Statistics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDatasetmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDatasetmd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDatasetmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Statistics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatasetmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Statistics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Statistics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDatasetmd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDatasetmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinValue = append(m.MinValue[:0], dAtA[iNdEx:postIndex]...)
			if m.MinValue == nil {
				m.MinValue = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDatasetmd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDatasetmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxValue = append(m.MaxValue[:0], dAtA[iNdEx:postIndex]...)
			if m.MaxValue == nil {
				m.MaxValue = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDatasetmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDatasetmd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDatasetmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatasetmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UncompressedSize", wireType)
			}
			m.UncompressedSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UncompressedSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompressedSize", wireType)
			}
			m.CompressedSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompressedSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crc32", wireType)
			}
			m.Crc32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Crc32 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowsCount", wireType)
			}
			m.RowsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowsCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encoding", wireType)
			}
			m.Encoding = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encoding |= EncodingType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataOffset", wireType)
			}
			m.DataOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataOffset |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSize", wireType)
			}
			m.DataSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statistics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatasetmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDatasetmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Statistics == nil {
				m.Statistics = &Statistics{}
			}
			if err := m.Statistics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDatasetmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDatasetmd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDatasetmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDatasetmd(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDatasetmd
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDatasetmd
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthDatasetmd
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDatasetmd
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDatasetmd(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthDatasetmd
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDatasetmd = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDatasetmd   = fmt.Errorf("proto: integer overflow")
)
