// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/dataobj/internal/metadata/datasetmd/datasetmd.proto

package datasetmd

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PhysicalType represents the type that the column is encoded as.
type PhysicalType int32

const (
	// Invalid PhysicalType.
	PHYSICAL_TYPE_UNSPECIFIED PhysicalType = 0
	// PHYSICAL_TYPE_INT64 holds 64-bit integer values.
	PHYSICAL_TYPE_INT64 PhysicalType = 1
	// PHYSICAL_TYPE_UINT64 holds 64-bit unsigned integer values.
	PHYSICAL_TYPE_UINT64 PhysicalType = 2
	// PHYSICAL_TYPE_BINARY holds binary data of variable length.
	PHYSICAL_TYPE_BINARY PhysicalType = 3
)

var PhysicalType_name = map[int32]string{
	0: "PHYSICAL_TYPE_UNSPECIFIED",
	1: "PHYSICAL_TYPE_INT64",
	2: "PHYSICAL_TYPE_UINT64",
	3: "PHYSICAL_TYPE_BINARY",
}

var PhysicalType_value = map[string]int32{
	"PHYSICAL_TYPE_UNSPECIFIED": 0,
	"PHYSICAL_TYPE_INT64":       1,
	"PHYSICAL_TYPE_UINT64":      2,
	"PHYSICAL_TYPE_BINARY":      3,
}

func (PhysicalType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7ab9d5b21b743868, []int{0}
}

// CompressionType represents valid compression types that can be used for
// compressing content within pages.
type CompressionType int32

const (
	// Invalid compression type.
	COMPRESSION_TYPE_UNSPECIFIED CompressionType = 0
	// No compression.
	COMPRESSION_TYPE_NONE CompressionType = 1
	// Snappy compression.
	COMPRESSION_TYPE_SNAPPY CompressionType = 2
	// Zstd compression.
	COMPRESSION_TYPE_ZSTD CompressionType = 3
)

var CompressionType_name = map[int32]string{
	0: "COMPRESSION_TYPE_UNSPECIFIED",
	1: "COMPRESSION_TYPE_NONE",
	2: "COMPRESSION_TYPE_SNAPPY",
	3: "COMPRESSION_TYPE_ZSTD",
}

var CompressionType_value = map[string]int32{
	"COMPRESSION_TYPE_UNSPECIFIED": 0,
	"COMPRESSION_TYPE_NONE":        1,
	"COMPRESSION_TYPE_SNAPPY":      2,
	"COMPRESSION_TYPE_ZSTD":        3,
}

func (CompressionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7ab9d5b21b743868, []int{1}
}

// EncodingType represents the valid types that a sequence of values which a
// column can be encoded with.
type EncodingType int32

const (
	// Invalid encoding type.
	ENCODING_TYPE_UNSPECIFIED EncodingType = 0
	// Plain encoding; data is stored as-is.
	ENCODING_TYPE_PLAIN EncodingType = 1
	// Delta encoding. The first value within the page is stored as-is, and
	// subsequent values are stored as the delta from the previous value.
	ENCODING_TYPE_DELTA EncodingType = 2
	// Bitmap encoding. Bitmaps efficiently store repeating sequences of unsigned
	// integers using a combination of run-length encoding and bitpacking.
	ENCODING_TYPE_BITMAP EncodingType = 3
)

var EncodingType_name = map[int32]string{
	0: "ENCODING_TYPE_UNSPECIFIED",
	1: "ENCODING_TYPE_PLAIN",
	2: "ENCODING_TYPE_DELTA",
	3: "ENCODING_TYPE_BITMAP",
}

var EncodingType_value = map[string]int32{
	"ENCODING_TYPE_UNSPECIFIED": 0,
	"ENCODING_TYPE_PLAIN":       1,
	"ENCODING_TYPE_DELTA":       2,
	"ENCODING_TYPE_BITMAP":      3,
}

func (EncodingType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7ab9d5b21b743868, []int{2}
}

// SortDirection represents sort direction of a column.
type SortDirection int32

const (
	// Sort direction is unspecified.
	SORT_DIRECTION_UNSPECIFIED SortDirection = 0
	// SORT_DIRECTION_ASCENDING represents ascending sort order (smallest values first).
	SORT_DIRECTION_ASCENDING SortDirection = 1
	// SORT_DIRECTION_DESCENDING represents descending sort order (largest values first).
	SORT_DIRECTION_DESCENDING SortDirection = 2
)

var SortDirection_name = map[int32]string{
	0: "SORT_DIRECTION_UNSPECIFIED",
	1: "SORT_DIRECTION_ASCENDING",
	2: "SORT_DIRECTION_DESCENDING",
}

var SortDirection_value = map[string]int32{
	"SORT_DIRECTION_UNSPECIFIED": 0,
	"SORT_DIRECTION_ASCENDING":   1,
	"SORT_DIRECTION_DESCENDING":  2,
}

func (SortDirection) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7ab9d5b21b743868, []int{3}
}

// SectionInfoExtension holds basic information about how to read this section.
// It is encoded into the extension data field of
// [github.com/grafana/loki/v3/pkg/dataobj/internal/metadata/filemd.FileMetadata].
type SectionInfoExtension struct {
	// Byte offset relative to the start of the section's metadata region where
	// SectionMetadata for this section is stored.
	SectionMetadataOffset uint64 `protobuf:"varint,1,opt,name=section_metadata_offset,json=sectionMetadataOffset,proto3" json:"section_metadata_offset,omitempty"`
	// Length of the SectionMetadata for this column in bytes.
	SectionMetadataLength uint64 `protobuf:"varint,2,opt,name=section_metadata_length,json=sectionMetadataLength,proto3" json:"section_metadata_length,omitempty"`
}

func (m *SectionInfoExtension) Reset()      { *m = SectionInfoExtension{} }
func (*SectionInfoExtension) ProtoMessage() {}
func (*SectionInfoExtension) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ab9d5b21b743868, []int{0}
}
func (m *SectionInfoExtension) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SectionInfoExtension) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SectionInfoExtension.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SectionInfoExtension) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SectionInfoExtension.Merge(m, src)
}
func (m *SectionInfoExtension) XXX_Size() int {
	return m.Size()
}
func (m *SectionInfoExtension) XXX_DiscardUnknown() {
	xxx_messageInfo_SectionInfoExtension.DiscardUnknown(m)
}

var xxx_messageInfo_SectionInfoExtension proto.InternalMessageInfo

func (m *SectionInfoExtension) GetSectionMetadataOffset() uint64 {
	if m != nil {
		return m.SectionMetadataOffset
	}
	return 0
}

func (m *SectionInfoExtension) GetSectionMetadataLength() uint64 {
	if m != nil {
		return m.SectionMetadataLength
	}
	return 0
}

// SectionMetadata holds the entrypoint metadata for the overall section.
// SectionMetadata points to the offset of per-column ColumnMetadata which can
// be retrieved on demand.
type SectionMetadata struct {
	// The list of columns in the dataset.
	Columns []*ColumnDesc `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`
	// Dictionary for deduplicating logical types and column tags. The first
	// element (index zero) is reserved for invalid strings ("").
	Dictionary []string `protobuf:"bytes,2,rep,name=dictionary,proto3" json:"dictionary,omitempty"`
	// Sort information about the columns.
	SortInfo *SortInfo `protobuf:"bytes,3,opt,name=sort_info,json=sortInfo,proto3" json:"sort_info,omitempty"`
}

func (m *SectionMetadata) Reset()      { *m = SectionMetadata{} }
func (*SectionMetadata) ProtoMessage() {}
func (*SectionMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ab9d5b21b743868, []int{1}
}
func (m *SectionMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SectionMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SectionMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SectionMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SectionMetadata.Merge(m, src)
}
func (m *SectionMetadata) XXX_Size() int {
	return m.Size()
}
func (m *SectionMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_SectionMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_SectionMetadata proto.InternalMessageInfo

func (m *SectionMetadata) GetColumns() []*ColumnDesc {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *SectionMetadata) GetDictionary() []string {
	if m != nil {
		return m.Dictionary
	}
	return nil
}

func (m *SectionMetadata) GetSortInfo() *SortInfo {
	if m != nil {
		return m.SortInfo
	}
	return nil
}

// ColumnDesc describes an individual column within a data set.
type ColumnDesc struct {
	// Type holds the type of data in the column.
	Type *ColumnType `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Tag is an optional string that can be used to distinguish between
	// different columns with the same type.
	//
	// For example, there may be two columns with the type (uint64.timestamp)
	// but with different tags ("start_time" and "end_time").
	//
	// Columns are uniquely named based on the combination of their type and
	// optional tag, separated by a "/" when a tag is present:
	//
	//   - uint64.timestamp/start_time
	//   - uint64.timestamp/end_time
	//   - uint64.stream_id (no tag)
	//
	// The tag string can be retrieved from the dictionary field in
	// SectionMetadata, using the tag_ref value as the index.
	TagRef uint32 `protobuf:"varint,2,opt,name=tag_ref,json=tagRef,proto3" json:"tag_ref,omitempty"`
	// Total number of pages in the column.
	PagesCount uint64 `protobuf:"varint,3,opt,name=pages_count,json=pagesCount,proto3" json:"pages_count,omitempty"`
	// Total number of rows (values + nulls) in the column across all pages.
	RowsCount uint64 `protobuf:"varint,4,opt,name=rows_count,json=rowsCount,proto3" json:"rows_count,omitempty"`
	// Total number of non-NULL values in this column across all pages. The
	// number of NULL values is rows_count - values_count.
	ValuesCount uint64 `protobuf:"varint,5,opt,name=values_count,json=valuesCount,proto3" json:"values_count,omitempty"`
	// Compression type used for all pages.
	Compression CompressionType `protobuf:"varint,6,opt,name=compression,proto3,enum=dataobj.metadata.dataset.v2.CompressionType" json:"compression,omitempty"`
	// Total uncompressed size of all pages in the column in bytes.
	UncompressedSize uint64 `protobuf:"varint,7,opt,name=uncompressed_size,json=uncompressedSize,proto3" json:"uncompressed_size,omitempty"`
	// Total compressed size of all pages in the column. If no compression is
	// used, compressed_size matches uncompressed_size.
	CompressedSize uint64 `protobuf:"varint,8,opt,name=compressed_size,json=compressedSize,proto3" json:"compressed_size,omitempty"`
	// Byte offset relative to the start of the section's metadata region where
	// ColumnMetadata for this column is stored.
	ColumnMetadataOffset uint64 `protobuf:"varint,9,opt,name=column_metadata_offset,json=columnMetadataOffset,proto3" json:"column_metadata_offset,omitempty"`
	// Length of the ColumnMetadata for this column in bytes.
	ColumnMetadataLength uint64 `protobuf:"varint,10,opt,name=column_metadata_length,json=columnMetadataLength,proto3" json:"column_metadata_length,omitempty"`
	// Statistics for this column.
	Statistics *Statistics `protobuf:"bytes,11,opt,name=statistics,proto3" json:"statistics,omitempty"`
}

func (m *ColumnDesc) Reset()      { *m = ColumnDesc{} }
func (*ColumnDesc) ProtoMessage() {}
func (*ColumnDesc) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ab9d5b21b743868, []int{2}
}
func (m *ColumnDesc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ColumnDesc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ColumnDesc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ColumnDesc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColumnDesc.Merge(m, src)
}
func (m *ColumnDesc) XXX_Size() int {
	return m.Size()
}
func (m *ColumnDesc) XXX_DiscardUnknown() {
	xxx_messageInfo_ColumnDesc.DiscardUnknown(m)
}

var xxx_messageInfo_ColumnDesc proto.InternalMessageInfo

func (m *ColumnDesc) GetType() *ColumnType {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *ColumnDesc) GetTagRef() uint32 {
	if m != nil {
		return m.TagRef
	}
	return 0
}

func (m *ColumnDesc) GetPagesCount() uint64 {
	if m != nil {
		return m.PagesCount
	}
	return 0
}

func (m *ColumnDesc) GetRowsCount() uint64 {
	if m != nil {
		return m.RowsCount
	}
	return 0
}

func (m *ColumnDesc) GetValuesCount() uint64 {
	if m != nil {
		return m.ValuesCount
	}
	return 0
}

func (m *ColumnDesc) GetCompression() CompressionType {
	if m != nil {
		return m.Compression
	}
	return COMPRESSION_TYPE_UNSPECIFIED
}

func (m *ColumnDesc) GetUncompressedSize() uint64 {
	if m != nil {
		return m.UncompressedSize
	}
	return 0
}

func (m *ColumnDesc) GetCompressedSize() uint64 {
	if m != nil {
		return m.CompressedSize
	}
	return 0
}

func (m *ColumnDesc) GetColumnMetadataOffset() uint64 {
	if m != nil {
		return m.ColumnMetadataOffset
	}
	return 0
}

func (m *ColumnDesc) GetColumnMetadataLength() uint64 {
	if m != nil {
		return m.ColumnMetadataLength
	}
	return 0
}

func (m *ColumnDesc) GetStatistics() *Statistics {
	if m != nil {
		return m.Statistics
	}
	return nil
}

// ColumnType represents the type of data in a column, combined from its
// physical layout and logical interpretation.
//
// A ColumnType is usually described by concatenating its physical and logical
// type with a ".", such as "uint64.timestamp" or "binary.label".
type ColumnType struct {
	// Physical is the physical type of the column.
	Physical PhysicalType `protobuf:"varint,1,opt,name=physical,proto3,enum=dataobj.metadata.dataset.v2.PhysicalType" json:"physical,omitempty"`
	// Logical is a section-specified string indicating how to interpret the
	// physical type. Section implementations are responsible for interpreting
	// this value.
	//
	// The string can be retrieved from the dictionary field in SectionMetadata,
	// using the logical_ref value as the index.
	LogicalRef uint32 `protobuf:"varint,3,opt,name=logical_ref,json=logicalRef,proto3" json:"logical_ref,omitempty"`
}

func (m *ColumnType) Reset()      { *m = ColumnType{} }
func (*ColumnType) ProtoMessage() {}
func (*ColumnType) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ab9d5b21b743868, []int{3}
}
func (m *ColumnType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ColumnType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ColumnType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ColumnType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColumnType.Merge(m, src)
}
func (m *ColumnType) XXX_Size() int {
	return m.Size()
}
func (m *ColumnType) XXX_DiscardUnknown() {
	xxx_messageInfo_ColumnType.DiscardUnknown(m)
}

var xxx_messageInfo_ColumnType proto.InternalMessageInfo

func (m *ColumnType) GetPhysical() PhysicalType {
	if m != nil {
		return m.Physical
	}
	return PHYSICAL_TYPE_UNSPECIFIED
}

func (m *ColumnType) GetLogicalRef() uint32 {
	if m != nil {
		return m.LogicalRef
	}
	return 0
}

// ColumnMetadata holds additional metadata for an individual column.
// ColumnMetadata is stored within the metadata region of a section, and its
// offset and size is retrieved from within [ColumnDesc].
type ColumnMetadata struct {
	// Pages within the column.
	Pages []*PageDesc `protobuf:"bytes,1,rep,name=pages,proto3" json:"pages,omitempty"`
}

func (m *ColumnMetadata) Reset()      { *m = ColumnMetadata{} }
func (*ColumnMetadata) ProtoMessage() {}
func (*ColumnMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ab9d5b21b743868, []int{4}
}
func (m *ColumnMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ColumnMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ColumnMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ColumnMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColumnMetadata.Merge(m, src)
}
func (m *ColumnMetadata) XXX_Size() int {
	return m.Size()
}
func (m *ColumnMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_ColumnMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_ColumnMetadata proto.InternalMessageInfo

func (m *ColumnMetadata) GetPages() []*PageDesc {
	if m != nil {
		return m.Pages
	}
	return nil
}

// PageDesc describes an individual page within a column.
type PageDesc struct {
	// Uncompressed size of the page in bytes.
	UncompressedSize uint64 `protobuf:"varint,1,opt,name=uncompressed_size,json=uncompressedSize,proto3" json:"uncompressed_size,omitempty"`
	// Compressed size of the page in bytes.
	CompressedSize uint64 `protobuf:"varint,2,opt,name=compressed_size,json=compressedSize,proto3" json:"compressed_size,omitempty"`
	// CRC32 checksum of the page data.
	Crc32 uint32 `protobuf:"varint,3,opt,name=crc32,proto3" json:"crc32,omitempty"`
	// Total number of rows (values + nulls) in the page.
	RowsCount uint64 `protobuf:"varint,4,opt,name=rows_count,json=rowsCount,proto3" json:"rows_count,omitempty"`
	// Total number of non-NULL values in the page. The number of NULL values is
	// rows_count - values_count.
	ValuesCount uint64 `protobuf:"varint,5,opt,name=values_count,json=valuesCount,proto3" json:"values_count,omitempty"`
	// Encoding used for values in the page.
	Encoding EncodingType `protobuf:"varint,6,opt,name=encoding,proto3,enum=dataobj.metadata.dataset.v2.EncodingType" json:"encoding,omitempty"`
	// Byte offset relative to the start of the section's data region where the
	// page is stored.
	DataOffset uint64 `protobuf:"varint,7,opt,name=data_offset,json=dataOffset,proto3" json:"data_offset,omitempty"`
	// Size of the page's data in bytes.
	DataSize uint64 `protobuf:"varint,8,opt,name=data_size,json=dataSize,proto3" json:"data_size,omitempty"`
	// Optional statistics for the page.
	Statistics *Statistics `protobuf:"bytes,9,opt,name=statistics,proto3" json:"statistics,omitempty"`
}

func (m *PageDesc) Reset()      { *m = PageDesc{} }
func (*PageDesc) ProtoMessage() {}
func (*PageDesc) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ab9d5b21b743868, []int{5}
}
func (m *PageDesc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageDesc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageDesc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageDesc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageDesc.Merge(m, src)
}
func (m *PageDesc) XXX_Size() int {
	return m.Size()
}
func (m *PageDesc) XXX_DiscardUnknown() {
	xxx_messageInfo_PageDesc.DiscardUnknown(m)
}

var xxx_messageInfo_PageDesc proto.InternalMessageInfo

func (m *PageDesc) GetUncompressedSize() uint64 {
	if m != nil {
		return m.UncompressedSize
	}
	return 0
}

func (m *PageDesc) GetCompressedSize() uint64 {
	if m != nil {
		return m.CompressedSize
	}
	return 0
}

func (m *PageDesc) GetCrc32() uint32 {
	if m != nil {
		return m.Crc32
	}
	return 0
}

func (m *PageDesc) GetRowsCount() uint64 {
	if m != nil {
		return m.RowsCount
	}
	return 0
}

func (m *PageDesc) GetValuesCount() uint64 {
	if m != nil {
		return m.ValuesCount
	}
	return 0
}

func (m *PageDesc) GetEncoding() EncodingType {
	if m != nil {
		return m.Encoding
	}
	return ENCODING_TYPE_UNSPECIFIED
}

func (m *PageDesc) GetDataOffset() uint64 {
	if m != nil {
		return m.DataOffset
	}
	return 0
}

func (m *PageDesc) GetDataSize() uint64 {
	if m != nil {
		return m.DataSize
	}
	return 0
}

func (m *PageDesc) GetStatistics() *Statistics {
	if m != nil {
		return m.Statistics
	}
	return nil
}

// Statistics about a column or a page. All statistics are optional and are
// conditionally set depending on the column type.
type Statistics struct {
	// Minimum value. Applications should only set min_value to an encoding of a
	// non-NULL value. If there is no non-NULL value, min_value should be unset.
	//
	// Applications must not assume that an unset min_value means that the column
	// is empty; check for values_count == 0 instead.
	MinValue []byte `protobuf:"bytes,1,opt,name=min_value,json=minValue,proto3" json:"min_value,omitempty"`
	// Maximum value. Applications should only set max_value to an encoding of a
	// non-NULL value. If there is no non-NULL value, max_value should be unset.
	//
	// Applications must not assume that an unset max_value means that the column
	// is empty; check for values_count == 0 instead.
	MaxValue []byte `protobuf:"bytes,2,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
	// Estimated number of distinct values in the column.
	//
	// Applications must not assume that an unset cardinality_count means that
	// the column has no distinct values; check for values_count == 0 instead.
	CardinalityCount uint64 `protobuf:"varint,3,opt,name=cardinality_count,json=cardinalityCount,proto3" json:"cardinality_count,omitempty"`
}

func (m *Statistics) Reset()      { *m = Statistics{} }
func (*Statistics) ProtoMessage() {}
func (*Statistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ab9d5b21b743868, []int{6}
}
func (m *Statistics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Statistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Statistics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Statistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Statistics.Merge(m, src)
}
func (m *Statistics) XXX_Size() int {
	return m.Size()
}
func (m *Statistics) XXX_DiscardUnknown() {
	xxx_messageInfo_Statistics.DiscardUnknown(m)
}

var xxx_messageInfo_Statistics proto.InternalMessageInfo

func (m *Statistics) GetMinValue() []byte {
	if m != nil {
		return m.MinValue
	}
	return nil
}

func (m *Statistics) GetMaxValue() []byte {
	if m != nil {
		return m.MaxValue
	}
	return nil
}

func (m *Statistics) GetCardinalityCount() uint64 {
	if m != nil {
		return m.CardinalityCount
	}
	return 0
}

// SortInfo holds sort order information for rows in the section.
type SortInfo struct {
	// The list of column sorts. The length of this depends on how many columns
	// are used for sorting.
	//
	// If the section has no sorting at all, this field will be empty. If the
	// section is sorted based on the value of a single column, this field will
	// contain a single element. Otherwise, this field will contain multiple
	// elements when compound sorting is used.
	ColumnSorts []*SortInfo_ColumnSort `protobuf:"bytes,1,rep,name=column_sorts,json=columnSorts,proto3" json:"column_sorts,omitempty"`
}

func (m *SortInfo) Reset()      { *m = SortInfo{} }
func (*SortInfo) ProtoMessage() {}
func (*SortInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ab9d5b21b743868, []int{7}
}
func (m *SortInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SortInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SortInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SortInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SortInfo.Merge(m, src)
}
func (m *SortInfo) XXX_Size() int {
	return m.Size()
}
func (m *SortInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SortInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SortInfo proto.InternalMessageInfo

func (m *SortInfo) GetColumnSorts() []*SortInfo_ColumnSort {
	if m != nil {
		return m.ColumnSorts
	}
	return nil
}

type SortInfo_ColumnSort struct {
	// Index of the column in the columns list.
	ColumnIndex uint32 `protobuf:"varint,1,opt,name=column_index,json=columnIndex,proto3" json:"column_index,omitempty"`
	// Sort direction of the column.
	Direction SortDirection `protobuf:"varint,2,opt,name=direction,proto3,enum=dataobj.metadata.dataset.v2.SortDirection" json:"direction,omitempty"`
}

func (m *SortInfo_ColumnSort) Reset()      { *m = SortInfo_ColumnSort{} }
func (*SortInfo_ColumnSort) ProtoMessage() {}
func (*SortInfo_ColumnSort) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ab9d5b21b743868, []int{7, 0}
}
func (m *SortInfo_ColumnSort) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SortInfo_ColumnSort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SortInfo_ColumnSort.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SortInfo_ColumnSort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SortInfo_ColumnSort.Merge(m, src)
}
func (m *SortInfo_ColumnSort) XXX_Size() int {
	return m.Size()
}
func (m *SortInfo_ColumnSort) XXX_DiscardUnknown() {
	xxx_messageInfo_SortInfo_ColumnSort.DiscardUnknown(m)
}

var xxx_messageInfo_SortInfo_ColumnSort proto.InternalMessageInfo

func (m *SortInfo_ColumnSort) GetColumnIndex() uint32 {
	if m != nil {
		return m.ColumnIndex
	}
	return 0
}

func (m *SortInfo_ColumnSort) GetDirection() SortDirection {
	if m != nil {
		return m.Direction
	}
	return SORT_DIRECTION_UNSPECIFIED
}

func init() {
	proto.RegisterEnum("dataobj.metadata.dataset.v2.PhysicalType", PhysicalType_name, PhysicalType_value)
	proto.RegisterEnum("dataobj.metadata.dataset.v2.CompressionType", CompressionType_name, CompressionType_value)
	proto.RegisterEnum("dataobj.metadata.dataset.v2.EncodingType", EncodingType_name, EncodingType_value)
	proto.RegisterEnum("dataobj.metadata.dataset.v2.SortDirection", SortDirection_name, SortDirection_value)
	proto.RegisterType((*SectionInfoExtension)(nil), "dataobj.metadata.dataset.v2.SectionInfoExtension")
	proto.RegisterType((*SectionMetadata)(nil), "dataobj.metadata.dataset.v2.SectionMetadata")
	proto.RegisterType((*ColumnDesc)(nil), "dataobj.metadata.dataset.v2.ColumnDesc")
	proto.RegisterType((*ColumnType)(nil), "dataobj.metadata.dataset.v2.ColumnType")
	proto.RegisterType((*ColumnMetadata)(nil), "dataobj.metadata.dataset.v2.ColumnMetadata")
	proto.RegisterType((*PageDesc)(nil), "dataobj.metadata.dataset.v2.PageDesc")
	proto.RegisterType((*Statistics)(nil), "dataobj.metadata.dataset.v2.Statistics")
	proto.RegisterType((*SortInfo)(nil), "dataobj.metadata.dataset.v2.SortInfo")
	proto.RegisterType((*SortInfo_ColumnSort)(nil), "dataobj.metadata.dataset.v2.SortInfo.ColumnSort")
}

func init() {
	proto.RegisterFile("pkg/dataobj/internal/metadata/datasetmd/datasetmd.proto", fileDescriptor_7ab9d5b21b743868)
}

var fileDescriptor_7ab9d5b21b743868 = []byte{
	// 1018 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcb, 0x6e, 0xdb, 0x46,
	0x14, 0xd5, 0x48, 0x7e, 0x48, 0x57, 0x7e, 0x30, 0x53, 0xa7, 0x66, 0xe2, 0x84, 0x55, 0x05, 0x14,
	0x71, 0x9d, 0x42, 0x2a, 0xe4, 0x20, 0x5d, 0x64, 0x25, 0x4b, 0x6c, 0x42, 0xc0, 0xa6, 0x08, 0x52,
	0x2d, 0xe0, 0x6c, 0x08, 0x9a, 0x1a, 0xd1, 0x6c, 0x24, 0x52, 0x20, 0xc7, 0xae, 0xe5, 0x55, 0x57,
	0x5e, 0xf7, 0x13, 0xba, 0xec, 0x27, 0xf4, 0x13, 0xba, 0xf4, 0x32, 0xe8, 0xaa, 0x96, 0x37, 0x5d,
	0xe6, 0x13, 0x8a, 0x19, 0x92, 0x36, 0xf5, 0xa8, 0x22, 0x14, 0xd9, 0x71, 0xee, 0x39, 0x67, 0x66,
	0xee, 0xbd, 0x67, 0xae, 0x04, 0xdf, 0x0d, 0xde, 0x39, 0xd5, 0x8e, 0x45, 0x2d, 0xff, 0xe4, 0xa7,
	0xaa, 0xeb, 0x51, 0x12, 0x78, 0x56, 0xaf, 0xda, 0x27, 0xd4, 0x62, 0x41, 0x8e, 0x84, 0x84, 0xf6,
	0x3b, 0xf7, 0x5f, 0x95, 0x41, 0xe0, 0x53, 0x1f, 0xef, 0xc4, 0xa2, 0x4a, 0xc2, 0xad, 0xc4, 0x8c,
	0xca, 0x79, 0xad, 0x7c, 0x85, 0x60, 0xcb, 0x20, 0x36, 0x75, 0x7d, 0x4f, 0xf1, 0xba, 0xbe, 0x7c,
	0x41, 0x89, 0x17, 0xba, 0xbe, 0x87, 0x5f, 0xc2, 0x76, 0x18, 0xc5, 0xcd, 0x44, 0x67, 0xfa, 0xdd,
	0x6e, 0x48, 0xa8, 0x88, 0x4a, 0x68, 0x77, 0x49, 0x7f, 0x18, 0xc3, 0x47, 0x31, 0xda, 0xe2, 0xe0,
	0x4c, 0x5d, 0x8f, 0x78, 0x0e, 0x3d, 0x15, 0xb3, 0x33, 0x75, 0x87, 0x1c, 0x2c, 0xff, 0x81, 0x60,
	0xd3, 0x18, 0x47, 0x70, 0x1d, 0x56, 0x6d, 0xbf, 0x77, 0xd6, 0xf7, 0x42, 0x11, 0x95, 0x72, 0xbb,
	0xc5, 0xda, 0xb3, 0xca, 0x9c, 0x5c, 0x2a, 0x0d, 0xce, 0x6d, 0x92, 0xd0, 0xd6, 0x13, 0x1d, 0x96,
	0x00, 0x3a, 0x2e, 0xdf, 0xd5, 0x0a, 0x86, 0x62, 0xb6, 0x94, 0xdb, 0x2d, 0xe8, 0xa9, 0x08, 0x3e,
	0x80, 0x42, 0xe8, 0x07, 0xd4, 0x74, 0xbd, 0xae, 0x2f, 0xe6, 0x4a, 0x68, 0xb7, 0x58, 0xfb, 0x6a,
	0xee, 0x21, 0x86, 0x1f, 0x50, 0x56, 0x29, 0x3d, 0x1f, 0xc6, 0x5f, 0xe5, 0xdf, 0x96, 0x00, 0xee,
	0xcf, 0xc6, 0xaf, 0x60, 0x89, 0x0e, 0x07, 0x84, 0x97, 0x69, 0xb1, 0x2b, 0xb7, 0x87, 0x03, 0xa2,
	0x73, 0x11, 0xde, 0x86, 0x55, 0x6a, 0x39, 0x66, 0x40, 0xba, 0xbc, 0x5c, 0xeb, 0xfa, 0x0a, 0xb5,
	0x1c, 0x9d, 0x74, 0xf1, 0x17, 0x50, 0x1c, 0x58, 0x0e, 0x09, 0x4d, 0xdb, 0x3f, 0xf3, 0x28, 0xbf,
	0xea, 0x92, 0x0e, 0x3c, 0xd4, 0x60, 0x11, 0xfc, 0x14, 0x20, 0xf0, 0x7f, 0x4e, 0xf0, 0x25, 0x8e,
	0x17, 0x58, 0x24, 0x82, 0xbf, 0x84, 0xb5, 0x73, 0xab, 0x77, 0x76, 0xb7, 0xc1, 0x32, 0x27, 0x14,
	0xa3, 0x58, 0x44, 0x51, 0xa1, 0x68, 0xfb, 0xfd, 0x41, 0x40, 0x42, 0xe6, 0x00, 0x71, 0xa5, 0x84,
	0x76, 0x37, 0x6a, 0xdf, 0x7c, 0xe4, 0xfe, 0x77, 0x7c, 0x9e, 0x44, 0x7a, 0x03, 0xfc, 0x1c, 0x1e,
	0x9c, 0x79, 0x49, 0x80, 0x74, 0xcc, 0xd0, 0xbd, 0x24, 0xe2, 0x2a, 0x3f, 0x57, 0x48, 0x03, 0x86,
	0x7b, 0x49, 0xf0, 0x33, 0xd8, 0x9c, 0xa4, 0xe6, 0x39, 0x75, 0x63, 0x82, 0xf8, 0x02, 0x3e, 0x8f,
	0x9a, 0x3b, 0xe5, 0xcb, 0x02, 0xe7, 0x6f, 0x45, 0xe8, 0x84, 0x2d, 0x67, 0xa8, 0x62, 0x57, 0xc2,
	0x2c, 0x55, 0x64, 0x4a, 0xfc, 0x1a, 0x20, 0xa4, 0x16, 0x75, 0x43, 0xea, 0xda, 0xa1, 0x58, 0x5c,
	0xa0, 0xa1, 0xc6, 0x1d, 0x5d, 0x4f, 0x49, 0xcb, 0x34, 0x71, 0x08, 0xab, 0x12, 0x96, 0x21, 0x3f,
	0x38, 0x1d, 0x86, 0xae, 0x6d, 0xf5, 0xb8, 0x4b, 0x36, 0x6a, 0x5f, 0xcf, 0xdd, 0x54, 0x8b, 0xc9,
	0xbc, 0xc4, 0x77, 0x52, 0x66, 0x89, 0x9e, 0xef, 0xb0, 0x4f, 0xee, 0x97, 0x1c, 0xf7, 0x0b, 0xc4,
	0x21, 0x9d, 0x74, 0xcb, 0x47, 0xb0, 0xd1, 0x18, 0x4b, 0x0b, 0xbf, 0x82, 0x65, 0x6e, 0x99, 0xf8,
	0x3d, 0xcd, 0xb7, 0xba, 0x66, 0x39, 0x84, 0xbf, 0xa6, 0x48, 0x53, 0xbe, 0xca, 0x41, 0x3e, 0x89,
	0xcd, 0x6e, 0x2e, 0x5a, 0xbc, 0xb9, 0xd9, 0x99, 0xcd, 0xdd, 0x82, 0x65, 0x3b, 0xb0, 0xf7, 0x6b,
	0x71, 0x32, 0xd1, 0xe2, 0x13, 0x58, 0x5b, 0x86, 0x3c, 0xf1, 0x6c, 0xbf, 0xe3, 0x7a, 0x4e, 0xec,
	0xeb, 0xf9, 0x15, 0x97, 0x63, 0x72, 0x54, 0xf1, 0x44, 0xca, 0x2a, 0x9e, 0x36, 0x5c, 0xe4, 0x65,
	0x48, 0xd9, 0x6c, 0x07, 0x0a, 0x9c, 0x90, 0xf2, 0x6f, 0x9e, 0x05, 0x78, 0x72, 0xe3, 0x6e, 0x2a,
	0xfc, 0x7f, 0x37, 0x85, 0x00, 0xf7, 0x08, 0x3b, 0xb3, 0xef, 0x7a, 0x26, 0x4f, 0x97, 0x77, 0x60,
	0x4d, 0xcf, 0xf7, 0x5d, 0xef, 0x47, 0xb6, 0xe6, 0xa0, 0x75, 0x11, 0x83, 0xd9, 0x18, 0xb4, 0x2e,
	0x22, 0xf0, 0x39, 0x3c, 0xb0, 0xad, 0xa0, 0xe3, 0x7a, 0x56, 0xcf, 0xa5, 0xc3, 0xb1, 0xc9, 0x22,
	0xa4, 0x00, 0x5e, 0xc2, 0xf2, 0x5f, 0x08, 0xf2, 0xc9, 0xf0, 0xc3, 0x06, 0xac, 0xc5, 0xcf, 0x89,
	0x4d, 0xc1, 0xc4, 0x4e, 0xdf, 0x2e, 0x34, 0x39, 0xe3, 0xa1, 0xc7, 0x96, 0x6c, 0x5e, 0x24, 0xdf,
	0xe1, 0xe3, 0x61, 0xf2, 0x48, 0xd8, 0x92, 0x75, 0x35, 0x3e, 0xc2, 0xf5, 0x3a, 0xe4, 0x82, 0x67,
	0xb6, 0x9e, 0x08, 0x14, 0x16, 0xc2, 0x6f, 0xa0, 0xd0, 0x71, 0x83, 0xe8, 0x47, 0x83, 0x27, 0xb7,
	0x51, 0xdb, 0xfb, 0xe8, 0x15, 0x9a, 0x89, 0x42, 0xbf, 0x17, 0xef, 0x5d, 0xc2, 0x5a, 0xfa, 0x91,
	0xe1, 0xa7, 0xf0, 0x48, 0x7b, 0x73, 0x6c, 0x28, 0x8d, 0xfa, 0xa1, 0xd9, 0x3e, 0xd6, 0x64, 0xf3,
	0x07, 0xd5, 0xd0, 0xe4, 0x86, 0xf2, 0xbd, 0x22, 0x37, 0x85, 0x0c, 0xde, 0x86, 0xcf, 0xc6, 0x61,
	0x45, 0x6d, 0xbf, 0x7c, 0x21, 0x20, 0x2c, 0xc2, 0xd6, 0x84, 0x2e, 0x42, 0xb2, 0xd3, 0xc8, 0x81,
	0xa2, 0xd6, 0xf5, 0x63, 0x21, 0xb7, 0x77, 0x85, 0x60, 0x73, 0x62, 0x8e, 0xe2, 0x12, 0x3c, 0x69,
	0xb4, 0x8e, 0x34, 0x5d, 0x36, 0x0c, 0xa5, 0xa5, 0xce, 0xba, 0xc2, 0x23, 0x78, 0x38, 0xc5, 0x50,
	0x5b, 0xaa, 0x2c, 0x20, 0xbc, 0x03, 0xdb, 0x53, 0x90, 0xa1, 0xd6, 0x35, 0xed, 0x58, 0xc8, 0xce,
	0xd4, 0xbd, 0x35, 0xda, 0x4d, 0x21, 0xb7, 0x37, 0x84, 0xb5, 0xb4, 0xef, 0x59, 0x11, 0x64, 0xb5,
	0xd1, 0x6a, 0x2a, 0xea, 0xeb, 0xff, 0x28, 0xc2, 0x38, 0xac, 0x1d, 0xd6, 0x15, 0x55, 0x40, 0xd3,
	0x40, 0x53, 0x3e, 0x6c, 0xd7, 0xa3, 0x1a, 0x8c, 0x03, 0x07, 0x4a, 0xfb, 0xa8, 0xae, 0x09, 0xb9,
	0xbd, 0x1e, 0xac, 0x8f, 0xf5, 0x06, 0x4b, 0xf0, 0xd8, 0x68, 0xe9, 0x6d, 0xb3, 0xa9, 0xe8, 0x72,
	0xa3, 0xcd, 0x6e, 0x3a, 0x7e, 0xf8, 0x13, 0x10, 0x27, 0xf0, 0xba, 0xd1, 0x90, 0x55, 0xb6, 0xb5,
	0x80, 0xd8, 0xcd, 0x27, 0xd0, 0xa6, 0x7c, 0x07, 0x67, 0x0f, 0x2e, 0xae, 0x6f, 0xa4, 0xcc, 0xfb,
	0x1b, 0x29, 0xf3, 0xe1, 0x46, 0x42, 0xbf, 0x8c, 0x24, 0xf4, 0xfb, 0x48, 0x42, 0x7f, 0x8e, 0x24,
	0x74, 0x3d, 0x92, 0xd0, 0xdf, 0x23, 0x09, 0xfd, 0x33, 0x92, 0x32, 0x1f, 0x46, 0x12, 0xfa, 0xf5,
	0x56, 0xca, 0x5c, 0xdf, 0x4a, 0x99, 0xf7, 0xb7, 0x52, 0xe6, 0xed, 0x81, 0xe3, 0xd2, 0xd3, 0xb3,
	0x93, 0x8a, 0xed, 0xf7, 0xab, 0x4e, 0x60, 0x75, 0x2d, 0xcf, 0xaa, 0xf6, 0xfc, 0x77, 0x6e, 0xf5,
	0x7c, 0xbf, 0xba, 0xe0, 0x7f, 0xb3, 0x93, 0x15, 0xfe, 0x97, 0x6c, 0xff, 0xdf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xbf, 0x00, 0xfb, 0x52, 0xcd, 0x09, 0x00, 0x00,
}

func (x PhysicalType) String() string {
	s, ok := PhysicalType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x CompressionType) String() string {
	s, ok := CompressionType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x EncodingType) String() string {
	s, ok := EncodingType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x SortDirection) String() string {
	s, ok := SortDirection_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *SectionInfoExtension) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SectionInfoExtension)
	if !ok {
		that2, ok := that.(SectionInfoExtension)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SectionMetadataOffset != that1.SectionMetadataOffset {
		return false
	}
	if this.SectionMetadataLength != that1.SectionMetadataLength {
		return false
	}
	return true
}
func (this *SectionMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SectionMetadata)
	if !ok {
		that2, ok := that.(SectionMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Columns) != len(that1.Columns) {
		return false
	}
	for i := range this.Columns {
		if !this.Columns[i].Equal(that1.Columns[i]) {
			return false
		}
	}
	if len(this.Dictionary) != len(that1.Dictionary) {
		return false
	}
	for i := range this.Dictionary {
		if this.Dictionary[i] != that1.Dictionary[i] {
			return false
		}
	}
	if !this.SortInfo.Equal(that1.SortInfo) {
		return false
	}
	return true
}
func (this *ColumnDesc) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ColumnDesc)
	if !ok {
		that2, ok := that.(ColumnDesc)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Type.Equal(that1.Type) {
		return false
	}
	if this.TagRef != that1.TagRef {
		return false
	}
	if this.PagesCount != that1.PagesCount {
		return false
	}
	if this.RowsCount != that1.RowsCount {
		return false
	}
	if this.ValuesCount != that1.ValuesCount {
		return false
	}
	if this.Compression != that1.Compression {
		return false
	}
	if this.UncompressedSize != that1.UncompressedSize {
		return false
	}
	if this.CompressedSize != that1.CompressedSize {
		return false
	}
	if this.ColumnMetadataOffset != that1.ColumnMetadataOffset {
		return false
	}
	if this.ColumnMetadataLength != that1.ColumnMetadataLength {
		return false
	}
	if !this.Statistics.Equal(that1.Statistics) {
		return false
	}
	return true
}
func (this *ColumnType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ColumnType)
	if !ok {
		that2, ok := that.(ColumnType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Physical != that1.Physical {
		return false
	}
	if this.LogicalRef != that1.LogicalRef {
		return false
	}
	return true
}
func (this *ColumnMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ColumnMetadata)
	if !ok {
		that2, ok := that.(ColumnMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Pages) != len(that1.Pages) {
		return false
	}
	for i := range this.Pages {
		if !this.Pages[i].Equal(that1.Pages[i]) {
			return false
		}
	}
	return true
}
func (this *PageDesc) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PageDesc)
	if !ok {
		that2, ok := that.(PageDesc)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UncompressedSize != that1.UncompressedSize {
		return false
	}
	if this.CompressedSize != that1.CompressedSize {
		return false
	}
	if this.Crc32 != that1.Crc32 {
		return false
	}
	if this.RowsCount != that1.RowsCount {
		return false
	}
	if this.ValuesCount != that1.ValuesCount {
		return false
	}
	if this.Encoding != that1.Encoding {
		return false
	}
	if this.DataOffset != that1.DataOffset {
		return false
	}
	if this.DataSize != that1.DataSize {
		return false
	}
	if !this.Statistics.Equal(that1.Statistics) {
		return false
	}
	return true
}
func (this *Statistics) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Statistics)
	if !ok {
		that2, ok := that.(Statistics)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.MinValue, that1.MinValue) {
		return false
	}
	if !bytes.Equal(this.MaxValue, that1.MaxValue) {
		return false
	}
	if this.CardinalityCount != that1.CardinalityCount {
		return false
	}
	return true
}
func (this *SortInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SortInfo)
	if !ok {
		that2, ok := that.(SortInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ColumnSorts) != len(that1.ColumnSorts) {
		return false
	}
	for i := range this.ColumnSorts {
		if !this.ColumnSorts[i].Equal(that1.ColumnSorts[i]) {
			return false
		}
	}
	return true
}
func (this *SortInfo_ColumnSort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SortInfo_ColumnSort)
	if !ok {
		that2, ok := that.(SortInfo_ColumnSort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ColumnIndex != that1.ColumnIndex {
		return false
	}
	if this.Direction != that1.Direction {
		return false
	}
	return true
}
func (this *SectionInfoExtension) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&datasetmd.SectionInfoExtension{")
	s = append(s, "SectionMetadataOffset: "+fmt.Sprintf("%#v", this.SectionMetadataOffset)+",\n")
	s = append(s, "SectionMetadataLength: "+fmt.Sprintf("%#v", this.SectionMetadataLength)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SectionMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&datasetmd.SectionMetadata{")
	if this.Columns != nil {
		s = append(s, "Columns: "+fmt.Sprintf("%#v", this.Columns)+",\n")
	}
	s = append(s, "Dictionary: "+fmt.Sprintf("%#v", this.Dictionary)+",\n")
	if this.SortInfo != nil {
		s = append(s, "SortInfo: "+fmt.Sprintf("%#v", this.SortInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ColumnDesc) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&datasetmd.ColumnDesc{")
	if this.Type != nil {
		s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	}
	s = append(s, "TagRef: "+fmt.Sprintf("%#v", this.TagRef)+",\n")
	s = append(s, "PagesCount: "+fmt.Sprintf("%#v", this.PagesCount)+",\n")
	s = append(s, "RowsCount: "+fmt.Sprintf("%#v", this.RowsCount)+",\n")
	s = append(s, "ValuesCount: "+fmt.Sprintf("%#v", this.ValuesCount)+",\n")
	s = append(s, "Compression: "+fmt.Sprintf("%#v", this.Compression)+",\n")
	s = append(s, "UncompressedSize: "+fmt.Sprintf("%#v", this.UncompressedSize)+",\n")
	s = append(s, "CompressedSize: "+fmt.Sprintf("%#v", this.CompressedSize)+",\n")
	s = append(s, "ColumnMetadataOffset: "+fmt.Sprintf("%#v", this.ColumnMetadataOffset)+",\n")
	s = append(s, "ColumnMetadataLength: "+fmt.Sprintf("%#v", this.ColumnMetadataLength)+",\n")
	if this.Statistics != nil {
		s = append(s, "Statistics: "+fmt.Sprintf("%#v", this.Statistics)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ColumnType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&datasetmd.ColumnType{")
	s = append(s, "Physical: "+fmt.Sprintf("%#v", this.Physical)+",\n")
	s = append(s, "LogicalRef: "+fmt.Sprintf("%#v", this.LogicalRef)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ColumnMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&datasetmd.ColumnMetadata{")
	if this.Pages != nil {
		s = append(s, "Pages: "+fmt.Sprintf("%#v", this.Pages)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PageDesc) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&datasetmd.PageDesc{")
	s = append(s, "UncompressedSize: "+fmt.Sprintf("%#v", this.UncompressedSize)+",\n")
	s = append(s, "CompressedSize: "+fmt.Sprintf("%#v", this.CompressedSize)+",\n")
	s = append(s, "Crc32: "+fmt.Sprintf("%#v", this.Crc32)+",\n")
	s = append(s, "RowsCount: "+fmt.Sprintf("%#v", this.RowsCount)+",\n")
	s = append(s, "ValuesCount: "+fmt.Sprintf("%#v", this.ValuesCount)+",\n")
	s = append(s, "Encoding: "+fmt.Sprintf("%#v", this.Encoding)+",\n")
	s = append(s, "DataOffset: "+fmt.Sprintf("%#v", this.DataOffset)+",\n")
	s = append(s, "DataSize: "+fmt.Sprintf("%#v", this.DataSize)+",\n")
	if this.Statistics != nil {
		s = append(s, "Statistics: "+fmt.Sprintf("%#v", this.Statistics)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Statistics) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&datasetmd.Statistics{")
	s = append(s, "MinValue: "+fmt.Sprintf("%#v", this.MinValue)+",\n")
	s = append(s, "MaxValue: "+fmt.Sprintf("%#v", this.MaxValue)+",\n")
	s = append(s, "CardinalityCount: "+fmt.Sprintf("%#v", this.CardinalityCount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SortInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&datasetmd.SortInfo{")
	if this.ColumnSorts != nil {
		s = append(s, "ColumnSorts: "+fmt.Sprintf("%#v", this.ColumnSorts)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SortInfo_ColumnSort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&datasetmd.SortInfo_ColumnSort{")
	s = append(s, "ColumnIndex: "+fmt.Sprintf("%#v", this.ColumnIndex)+",\n")
	s = append(s, "Direction: "+fmt.Sprintf("%#v", this.Direction)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringDatasetmd(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SectionInfoExtension) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SectionInfoExtension) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SectionInfoExtension) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SectionMetadataLength != 0 {
		i = encodeVarintDatasetmd(dAtA, i, uint64(m.SectionMetadataLength))
		i--
		dAtA[i] = 0x10
	}
	if m.SectionMetadataOffset != 0 {
		i = encodeVarintDatasetmd(dAtA, i, uint64(m.SectionMetadataOffset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SectionMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SectionMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SectionMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SortInfo != nil {
		{
			size, err := m.SortInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDatasetmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Dictionary) > 0 {
		for iNdEx := len(m.Dictionary) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Dictionary[iNdEx])
			copy(dAtA[i:], m.Dictionary[iNdEx])
			i = encodeVarintDatasetmd(dAtA, i, uint64(len(m.Dictionary[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Columns) > 0 {
		for iNdEx := len(m.Columns) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Columns[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDatasetmd(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ColumnDesc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ColumnDesc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ColumnDesc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Statistics != nil {
		{
			size, err := m.Statistics.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDatasetmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.ColumnMetadataLength != 0 {
		i = encodeVarintDatasetmd(dAtA, i, uint64(m.ColumnMetadataLength))
		i--
		dAtA[i] = 0x50
	}
	if m.ColumnMetadataOffset != 0 {
		i = encodeVarintDatasetmd(dAtA, i, uint64(m.ColumnMetadataOffset))
		i--
		dAtA[i] = 0x48
	}
	if m.CompressedSize != 0 {
		i = encodeVarintDatasetmd(dAtA, i, uint64(m.CompressedSize))
		i--
		dAtA[i] = 0x40
	}
	if m.UncompressedSize != 0 {
		i = encodeVarintDatasetmd(dAtA, i, uint64(m.UncompressedSize))
		i--
		dAtA[i] = 0x38
	}
	if m.Compression != 0 {
		i = encodeVarintDatasetmd(dAtA, i, uint64(m.Compression))
		i--
		dAtA[i] = 0x30
	}
	if m.ValuesCount != 0 {
		i = encodeVarintDatasetmd(dAtA, i, uint64(m.ValuesCount))
		i--
		dAtA[i] = 0x28
	}
	if m.RowsCount != 0 {
		i = encodeVarintDatasetmd(dAtA, i, uint64(m.RowsCount))
		i--
		dAtA[i] = 0x20
	}
	if m.PagesCount != 0 {
		i = encodeVarintDatasetmd(dAtA, i, uint64(m.PagesCount))
		i--
		dAtA[i] = 0x18
	}
	if m.TagRef != 0 {
		i = encodeVarintDatasetmd(dAtA, i, uint64(m.TagRef))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != nil {
		{
			size, err := m.Type.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDatasetmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ColumnType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ColumnType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ColumnType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LogicalRef != 0 {
		i = encodeVarintDatasetmd(dAtA, i, uint64(m.LogicalRef))
		i--
		dAtA[i] = 0x18
	}
	if m.Physical != 0 {
		i = encodeVarintDatasetmd(dAtA, i, uint64(m.Physical))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ColumnMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ColumnMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ColumnMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pages) > 0 {
		for iNdEx := len(m.Pages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDatasetmd(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PageDesc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageDesc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PageDesc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Statistics != nil {
		{
			size, err := m.Statistics.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDatasetmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.DataSize != 0 {
		i = encodeVarintDatasetmd(dAtA, i, uint64(m.DataSize))
		i--
		dAtA[i] = 0x40
	}
	if m.DataOffset != 0 {
		i = encodeVarintDatasetmd(dAtA, i, uint64(m.DataOffset))
		i--
		dAtA[i] = 0x38
	}
	if m.Encoding != 0 {
		i = encodeVarintDatasetmd(dAtA, i, uint64(m.Encoding))
		i--
		dAtA[i] = 0x30
	}
	if m.ValuesCount != 0 {
		i = encodeVarintDatasetmd(dAtA, i, uint64(m.ValuesCount))
		i--
		dAtA[i] = 0x28
	}
	if m.RowsCount != 0 {
		i = encodeVarintDatasetmd(dAtA, i, uint64(m.RowsCount))
		i--
		dAtA[i] = 0x20
	}
	if m.Crc32 != 0 {
		i = encodeVarintDatasetmd(dAtA, i, uint64(m.Crc32))
		i--
		dAtA[i] = 0x18
	}
	if m.CompressedSize != 0 {
		i = encodeVarintDatasetmd(dAtA, i, uint64(m.CompressedSize))
		i--
		dAtA[i] = 0x10
	}
	if m.UncompressedSize != 0 {
		i = encodeVarintDatasetmd(dAtA, i, uint64(m.UncompressedSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Statistics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Statistics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Statistics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CardinalityCount != 0 {
		i = encodeVarintDatasetmd(dAtA, i, uint64(m.CardinalityCount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.MaxValue) > 0 {
		i -= len(m.MaxValue)
		copy(dAtA[i:], m.MaxValue)
		i = encodeVarintDatasetmd(dAtA, i, uint64(len(m.MaxValue)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MinValue) > 0 {
		i -= len(m.MinValue)
		copy(dAtA[i:], m.MinValue)
		i = encodeVarintDatasetmd(dAtA, i, uint64(len(m.MinValue)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SortInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SortInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SortInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ColumnSorts) > 0 {
		for iNdEx := len(m.ColumnSorts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ColumnSorts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDatasetmd(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SortInfo_ColumnSort) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SortInfo_ColumnSort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SortInfo_ColumnSort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Direction != 0 {
		i = encodeVarintDatasetmd(dAtA, i, uint64(m.Direction))
		i--
		dAtA[i] = 0x10
	}
	if m.ColumnIndex != 0 {
		i = encodeVarintDatasetmd(dAtA, i, uint64(m.ColumnIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDatasetmd(dAtA []byte, offset int, v uint64) int {
	offset -= sovDatasetmd(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SectionInfoExtension) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SectionMetadataOffset != 0 {
		n += 1 + sovDatasetmd(uint64(m.SectionMetadataOffset))
	}
	if m.SectionMetadataLength != 0 {
		n += 1 + sovDatasetmd(uint64(m.SectionMetadataLength))
	}
	return n
}

func (m *SectionMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Columns) > 0 {
		for _, e := range m.Columns {
			l = e.Size()
			n += 1 + l + sovDatasetmd(uint64(l))
		}
	}
	if len(m.Dictionary) > 0 {
		for _, s := range m.Dictionary {
			l = len(s)
			n += 1 + l + sovDatasetmd(uint64(l))
		}
	}
	if m.SortInfo != nil {
		l = m.SortInfo.Size()
		n += 1 + l + sovDatasetmd(uint64(l))
	}
	return n
}

func (m *ColumnDesc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		l = m.Type.Size()
		n += 1 + l + sovDatasetmd(uint64(l))
	}
	if m.TagRef != 0 {
		n += 1 + sovDatasetmd(uint64(m.TagRef))
	}
	if m.PagesCount != 0 {
		n += 1 + sovDatasetmd(uint64(m.PagesCount))
	}
	if m.RowsCount != 0 {
		n += 1 + sovDatasetmd(uint64(m.RowsCount))
	}
	if m.ValuesCount != 0 {
		n += 1 + sovDatasetmd(uint64(m.ValuesCount))
	}
	if m.Compression != 0 {
		n += 1 + sovDatasetmd(uint64(m.Compression))
	}
	if m.UncompressedSize != 0 {
		n += 1 + sovDatasetmd(uint64(m.UncompressedSize))
	}
	if m.CompressedSize != 0 {
		n += 1 + sovDatasetmd(uint64(m.CompressedSize))
	}
	if m.ColumnMetadataOffset != 0 {
		n += 1 + sovDatasetmd(uint64(m.ColumnMetadataOffset))
	}
	if m.ColumnMetadataLength != 0 {
		n += 1 + sovDatasetmd(uint64(m.ColumnMetadataLength))
	}
	if m.Statistics != nil {
		l = m.Statistics.Size()
		n += 1 + l + sovDatasetmd(uint64(l))
	}
	return n
}

func (m *ColumnType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Physical != 0 {
		n += 1 + sovDatasetmd(uint64(m.Physical))
	}
	if m.LogicalRef != 0 {
		n += 1 + sovDatasetmd(uint64(m.LogicalRef))
	}
	return n
}

func (m *ColumnMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pages) > 0 {
		for _, e := range m.Pages {
			l = e.Size()
			n += 1 + l + sovDatasetmd(uint64(l))
		}
	}
	return n
}

func (m *PageDesc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UncompressedSize != 0 {
		n += 1 + sovDatasetmd(uint64(m.UncompressedSize))
	}
	if m.CompressedSize != 0 {
		n += 1 + sovDatasetmd(uint64(m.CompressedSize))
	}
	if m.Crc32 != 0 {
		n += 1 + sovDatasetmd(uint64(m.Crc32))
	}
	if m.RowsCount != 0 {
		n += 1 + sovDatasetmd(uint64(m.RowsCount))
	}
	if m.ValuesCount != 0 {
		n += 1 + sovDatasetmd(uint64(m.ValuesCount))
	}
	if m.Encoding != 0 {
		n += 1 + sovDatasetmd(uint64(m.Encoding))
	}
	if m.DataOffset != 0 {
		n += 1 + sovDatasetmd(uint64(m.DataOffset))
	}
	if m.DataSize != 0 {
		n += 1 + sovDatasetmd(uint64(m.DataSize))
	}
	if m.Statistics != nil {
		l = m.Statistics.Size()
		n += 1 + l + sovDatasetmd(uint64(l))
	}
	return n
}

func (m *Statistics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MinValue)
	if l > 0 {
		n += 1 + l + sovDatasetmd(uint64(l))
	}
	l = len(m.MaxValue)
	if l > 0 {
		n += 1 + l + sovDatasetmd(uint64(l))
	}
	if m.CardinalityCount != 0 {
		n += 1 + sovDatasetmd(uint64(m.CardinalityCount))
	}
	return n
}

func (m *SortInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ColumnSorts) > 0 {
		for _, e := range m.ColumnSorts {
			l = e.Size()
			n += 1 + l + sovDatasetmd(uint64(l))
		}
	}
	return n
}

func (m *SortInfo_ColumnSort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ColumnIndex != 0 {
		n += 1 + sovDatasetmd(uint64(m.ColumnIndex))
	}
	if m.Direction != 0 {
		n += 1 + sovDatasetmd(uint64(m.Direction))
	}
	return n
}

func sovDatasetmd(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDatasetmd(x uint64) (n int) {
	return sovDatasetmd(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SectionInfoExtension) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SectionInfoExtension{`,
		`SectionMetadataOffset:` + fmt.Sprintf("%v", this.SectionMetadataOffset) + `,`,
		`SectionMetadataLength:` + fmt.Sprintf("%v", this.SectionMetadataLength) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SectionMetadata) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForColumns := "[]*ColumnDesc{"
	for _, f := range this.Columns {
		repeatedStringForColumns += strings.Replace(f.String(), "ColumnDesc", "ColumnDesc", 1) + ","
	}
	repeatedStringForColumns += "}"
	s := strings.Join([]string{`&SectionMetadata{`,
		`Columns:` + repeatedStringForColumns + `,`,
		`Dictionary:` + fmt.Sprintf("%v", this.Dictionary) + `,`,
		`SortInfo:` + strings.Replace(this.SortInfo.String(), "SortInfo", "SortInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ColumnDesc) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ColumnDesc{`,
		`Type:` + strings.Replace(this.Type.String(), "ColumnType", "ColumnType", 1) + `,`,
		`TagRef:` + fmt.Sprintf("%v", this.TagRef) + `,`,
		`PagesCount:` + fmt.Sprintf("%v", this.PagesCount) + `,`,
		`RowsCount:` + fmt.Sprintf("%v", this.RowsCount) + `,`,
		`ValuesCount:` + fmt.Sprintf("%v", this.ValuesCount) + `,`,
		`Compression:` + fmt.Sprintf("%v", this.Compression) + `,`,
		`UncompressedSize:` + fmt.Sprintf("%v", this.UncompressedSize) + `,`,
		`CompressedSize:` + fmt.Sprintf("%v", this.CompressedSize) + `,`,
		`ColumnMetadataOffset:` + fmt.Sprintf("%v", this.ColumnMetadataOffset) + `,`,
		`ColumnMetadataLength:` + fmt.Sprintf("%v", this.ColumnMetadataLength) + `,`,
		`Statistics:` + strings.Replace(this.Statistics.String(), "Statistics", "Statistics", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ColumnType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ColumnType{`,
		`Physical:` + fmt.Sprintf("%v", this.Physical) + `,`,
		`LogicalRef:` + fmt.Sprintf("%v", this.LogicalRef) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ColumnMetadata) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPages := "[]*PageDesc{"
	for _, f := range this.Pages {
		repeatedStringForPages += strings.Replace(f.String(), "PageDesc", "PageDesc", 1) + ","
	}
	repeatedStringForPages += "}"
	s := strings.Join([]string{`&ColumnMetadata{`,
		`Pages:` + repeatedStringForPages + `,`,
		`}`,
	}, "")
	return s
}
func (this *PageDesc) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PageDesc{`,
		`UncompressedSize:` + fmt.Sprintf("%v", this.UncompressedSize) + `,`,
		`CompressedSize:` + fmt.Sprintf("%v", this.CompressedSize) + `,`,
		`Crc32:` + fmt.Sprintf("%v", this.Crc32) + `,`,
		`RowsCount:` + fmt.Sprintf("%v", this.RowsCount) + `,`,
		`ValuesCount:` + fmt.Sprintf("%v", this.ValuesCount) + `,`,
		`Encoding:` + fmt.Sprintf("%v", this.Encoding) + `,`,
		`DataOffset:` + fmt.Sprintf("%v", this.DataOffset) + `,`,
		`DataSize:` + fmt.Sprintf("%v", this.DataSize) + `,`,
		`Statistics:` + strings.Replace(this.Statistics.String(), "Statistics", "Statistics", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Statistics) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Statistics{`,
		`MinValue:` + fmt.Sprintf("%v", this.MinValue) + `,`,
		`MaxValue:` + fmt.Sprintf("%v", this.MaxValue) + `,`,
		`CardinalityCount:` + fmt.Sprintf("%v", this.CardinalityCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SortInfo) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForColumnSorts := "[]*SortInfo_ColumnSort{"
	for _, f := range this.ColumnSorts {
		repeatedStringForColumnSorts += strings.Replace(fmt.Sprintf("%v", f), "SortInfo_ColumnSort", "SortInfo_ColumnSort", 1) + ","
	}
	repeatedStringForColumnSorts += "}"
	s := strings.Join([]string{`&SortInfo{`,
		`ColumnSorts:` + repeatedStringForColumnSorts + `,`,
		`}`,
	}, "")
	return s
}
func (this *SortInfo_ColumnSort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SortInfo_ColumnSort{`,
		`ColumnIndex:` + fmt.Sprintf("%v", this.ColumnIndex) + `,`,
		`Direction:` + fmt.Sprintf("%v", this.Direction) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDatasetmd(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SectionInfoExtension) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatasetmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SectionInfoExtension: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SectionInfoExtension: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SectionMetadataOffset", wireType)
			}
			m.SectionMetadataOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SectionMetadataOffset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SectionMetadataLength", wireType)
			}
			m.SectionMetadataLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SectionMetadataLength |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDatasetmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDatasetmd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDatasetmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SectionMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatasetmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SectionMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SectionMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatasetmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDatasetmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Columns = append(m.Columns, &ColumnDesc{})
			if err := m.Columns[len(m.Columns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dictionary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDatasetmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDatasetmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dictionary = append(m.Dictionary, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatasetmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDatasetmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SortInfo == nil {
				m.SortInfo = &SortInfo{}
			}
			if err := m.SortInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDatasetmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDatasetmd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDatasetmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ColumnDesc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatasetmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ColumnDesc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ColumnDesc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatasetmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDatasetmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Type == nil {
				m.Type = &ColumnType{}
			}
			if err := m.Type.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagRef", wireType)
			}
			m.TagRef = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TagRef |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PagesCount", wireType)
			}
			m.PagesCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PagesCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowsCount", wireType)
			}
			m.RowsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowsCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValuesCount", wireType)
			}
			m.ValuesCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValuesCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compression", wireType)
			}
			m.Compression = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Compression |= CompressionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UncompressedSize", wireType)
			}
			m.UncompressedSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UncompressedSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompressedSize", wireType)
			}
			m.CompressedSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompressedSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnMetadataOffset", wireType)
			}
			m.ColumnMetadataOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColumnMetadataOffset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnMetadataLength", wireType)
			}
			m.ColumnMetadataLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColumnMetadataLength |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statistics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatasetmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDatasetmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Statistics == nil {
				m.Statistics = &Statistics{}
			}
			if err := m.Statistics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDatasetmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDatasetmd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDatasetmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ColumnType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatasetmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ColumnType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ColumnType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Physical", wireType)
			}
			m.Physical = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Physical |= PhysicalType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicalRef", wireType)
			}
			m.LogicalRef = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogicalRef |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDatasetmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDatasetmd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDatasetmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ColumnMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatasetmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ColumnMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ColumnMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatasetmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDatasetmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pages = append(m.Pages, &PageDesc{})
			if err := m.Pages[len(m.Pages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDatasetmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDatasetmd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDatasetmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageDesc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatasetmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageDesc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageDesc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UncompressedSize", wireType)
			}
			m.UncompressedSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UncompressedSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompressedSize", wireType)
			}
			m.CompressedSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompressedSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crc32", wireType)
			}
			m.Crc32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Crc32 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowsCount", wireType)
			}
			m.RowsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowsCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValuesCount", wireType)
			}
			m.ValuesCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValuesCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encoding", wireType)
			}
			m.Encoding = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encoding |= EncodingType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataOffset", wireType)
			}
			m.DataOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataOffset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSize", wireType)
			}
			m.DataSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statistics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatasetmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDatasetmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Statistics == nil {
				m.Statistics = &Statistics{}
			}
			if err := m.Statistics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDatasetmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDatasetmd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDatasetmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Statistics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatasetmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Statistics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Statistics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDatasetmd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDatasetmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinValue = append(m.MinValue[:0], dAtA[iNdEx:postIndex]...)
			if m.MinValue == nil {
				m.MinValue = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDatasetmd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDatasetmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxValue = append(m.MaxValue[:0], dAtA[iNdEx:postIndex]...)
			if m.MaxValue == nil {
				m.MaxValue = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardinalityCount", wireType)
			}
			m.CardinalityCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardinalityCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDatasetmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDatasetmd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDatasetmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SortInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatasetmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SortInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SortInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnSorts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatasetmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDatasetmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColumnSorts = append(m.ColumnSorts, &SortInfo_ColumnSort{})
			if err := m.ColumnSorts[len(m.ColumnSorts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDatasetmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDatasetmd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDatasetmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SortInfo_ColumnSort) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatasetmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ColumnSort: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ColumnSort: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnIndex", wireType)
			}
			m.ColumnIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColumnIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			m.Direction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Direction |= SortDirection(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDatasetmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDatasetmd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDatasetmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDatasetmd(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDatasetmd
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDatasetmd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDatasetmd
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthDatasetmd
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDatasetmd
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDatasetmd(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthDatasetmd
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDatasetmd = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDatasetmd   = fmt.Errorf("proto: integer overflow")
)
