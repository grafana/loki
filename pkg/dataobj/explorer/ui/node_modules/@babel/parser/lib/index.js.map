{"version":3,"file":"index.js","sources":["../src/util/location.ts","../src/parse-error/module-errors.ts","../src/parse-error/to-node-description.ts","../src/parse-error/standard-errors.ts","../src/parse-error/strict-mode-errors.ts","../src/parse-error/pipeline-operator-errors.ts","../src/parse-error.ts","../src/options.ts","../src/plugins/estree.ts","../src/tokenizer/context.ts","../src/tokenizer/types.ts","../../babel-helper-validator-identifier/src/identifier.ts","../../babel-helper-validator-identifier/src/keyword.ts","../src/util/identifier.ts","../src/util/scope.ts","../src/plugins/flow/scope.ts","../src/parser/base.ts","../src/parser/comments.ts","../src/util/whitespace.ts","../src/tokenizer/state.ts","../../babel-helper-string-parser/src/index.ts","../src/tokenizer/index.ts","../src/util/class-scope.ts","../src/util/expression-scope.ts","../src/util/production-parameter.ts","../src/parser/util.ts","../src/parser/node.ts","../src/plugins/flow/index.ts","../src/plugins/jsx/xhtml.ts","../src/plugins/jsx/index.ts","../src/plugins/typescript/scope.ts","../src/parser/lval.ts","../src/plugins/typescript/index.ts","../src/plugins/placeholders.ts","../src/plugins/v8intrinsic.ts","../src/plugin-utils.ts","../src/parser/expression.ts","../src/parser/statement.ts","../src/parser/index.ts","../src/index.ts"],"sourcesContent":["export type Pos = {\n  start: number;\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n  index: number;\n\n  constructor(line: number, col: number, index: number) {\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: string | undefined | null;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n/**\n * creates a new position with a non-zero column offset from the given position.\n * This function should be only be used when we create AST node out of the token\n * boundaries, such as TemplateElement ends before tt.templateNonTail. This\n * function does not skip whitespaces.\n */\nexport function createPositionWithColumnOffset(\n  position: Position,\n  columnOffset: number,\n) {\n  const { line, column, index } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n","import type { ParseErrorTemplates } from \"../parse-error.ts\";\n\nconst code = \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\";\n\nexport default {\n  ImportMetaOutsideModule: {\n    message: `import.meta may appear only with 'sourceType: \"module\"'`,\n    code,\n  },\n  ImportOutsideModule: {\n    message: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n    code,\n  },\n} satisfies ParseErrorTemplates;\n","const NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  CatchClause: \"catch clause\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ImportSpecifier: \"import specifier\",\n  ImportDefaultSpecifier: \"import default specifier\",\n  ImportNamespaceSpecifier: \"import namespace specifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\",\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\",\n};\n\ntype NodeTypesWithDescriptions = keyof Omit<\n  typeof NodeDescriptions,\n  \"UpdateExpression\"\n>;\n\ntype NodeWithDescription =\n  | {\n      type: \"UpdateExpression\";\n      prefix: boolean;\n    }\n  | {\n      type: NodeTypesWithDescriptions;\n    };\n\nconst toNodeDescription = (node: NodeWithDescription) =>\n  node.type === \"UpdateExpression\"\n    ? NodeDescriptions.UpdateExpression[`${node.prefix}`]\n    : NodeDescriptions[node.type];\n\nexport default toNodeDescription;\n","import type { ParseErrorTemplates } from \"../parse-error.ts\";\nimport toNodeDescription from \"./to-node-description.ts\";\n\nexport type LValAncestor =\n  | { type: \"UpdateExpression\"; prefix: boolean }\n  | {\n      type:\n        | \"ArrayPattern\"\n        | \"AssignmentExpression\"\n        | \"CatchClause\"\n        | \"ForOfStatement\"\n        | \"FormalParameters\"\n        | \"ForInStatement\"\n        | \"ForStatement\"\n        | \"ImportSpecifier\"\n        | \"ImportNamespaceSpecifier\"\n        | \"ImportDefaultSpecifier\"\n        | \"ParenthesizedExpression\"\n        | \"ObjectPattern\"\n        | \"RestElement\"\n        | \"VariableDeclarator\";\n    };\n\nexport default {\n  AccessorIsGenerator: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `A ${kind}ter cannot be a generator.`,\n  ArgumentsInClass:\n    \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext:\n    \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier:\n    \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock:\n    \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter:\n    \"'await' is not allowed in async function parameters.\",\n  AwaitUsingNotInAsyncContext:\n    \"'await using' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncContext:\n    \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accessor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accessor must have exactly one formal parameter.\",\n  BadSetterRestParameter:\n    \"A 'set' accessor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField:\n    \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: ({\n    kind,\n  }: {\n    kind: \"await using\" | \"const\" | \"destructuring\" | \"using\";\n  }) => `Missing initializer in ${kind} declaration.`,\n  DecoratorArgumentsOutsideParentheses:\n    \"Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.\",\n  DecoratorBeforeExport:\n    \"Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.\",\n  DecoratorsBeforeAfterExport:\n    \"Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.\",\n  DecoratorConstructor:\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass:\n    \"Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeferImportRequiresNamespace:\n    'Only `import defer * as x from \"./module\"` is valid.',\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport:\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: ({ exportName }: { exportName: string }) =>\n    `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`,\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  DynamicImportPhaseRequiresImportExpressions: ({ phase }: { phase: string }) =>\n    `'import.${phase}(...)' can only be parsed when using the 'createImportExpressions' option.`,\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: ({\n    localName,\n    exportName,\n  }: {\n    localName: string;\n    exportName: string;\n  }) =>\n    `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`,\n  ExportDefaultFromAsIdentifier:\n    \"'from' is not allowed as an identifier after 'export default'.\",\n\n  ForInOfLoopInitializer: ({\n    type,\n  }: {\n    type: \"ForInStatement\" | \"ForOfStatement\";\n  }) =>\n    `'${\n      type === \"ForInStatement\" ? \"for-in\" : \"for-of\"\n    }' loop variable declaration may not have an initializer.`,\n  ForInUsing: \"For-in loop may not start with 'using' declaration.\",\n\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext:\n    \"Generators can only be declared at the top level or inside a block.\",\n\n  IllegalBreakContinue: ({\n    type,\n  }: {\n    type: \"BreakStatement\" | \"ContinueStatement\";\n  }) => `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`,\n\n  IllegalLanguageModeDirective:\n    \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportAttributesUseAssert:\n    \"The `assert` keyword in import attributes is deprecated and it has been replaced by the `with` keyword. You can enable the `deprecatedImportAssert` parser plugin to suppress this error.\",\n  ImportBindingIsString: ({ importName }: { importName: string }) =>\n    `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`,\n  ImportCallArity: `\\`import()\\` requires exactly one or two arguments.`,\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  ImportJSONBindingNotDefault:\n    \"A JSON module can only be imported with `default`.\",\n  ImportReflectionHasAssertion: \"`import module x` cannot have assertions.\",\n  ImportReflectionNotBinding:\n    'Only `import module x from \"./module\"` is valid.',\n  IncompatibleRegExpUVFlags:\n    \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: ({ radix }: { radix: number }) =>\n    `Expected number in radix ${radix}.`,\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Escape sequence in keyword ${reservedWord}.`,\n  InvalidIdentifier: ({ identifierName }: { identifierName: string }) =>\n    `Invalid identifier ${identifierName}.`,\n  InvalidLhs: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsBinding: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsOptionalChaining: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Invalid optional chaining in the left-hand side of ${toNodeDescription(\n      ancestor,\n    )}.`,\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent:\n    \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: ({ unexpected }: { unexpected: string }) =>\n    `Unexpected character '${unexpected}'.`,\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: ({\n    identifierName,\n  }: {\n    identifierName: string;\n  }) => `Private name #${identifierName} is not defined.`,\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty:\n    \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: ({ labelName }: { labelName: string }) =>\n    `Label '${labelName}' is already declared.`,\n  LetInLexicalBinding: \"'let' is disallowed as a lexically bound name.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment:\n    \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingPlugin: ({ missingPlugin }: { missingPlugin: [string] }) =>\n    `This experimental syntax requires enabling the parser plugin: ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  // FIXME: Would be nice to make this \"missingPlugins\" instead.\n  // Also, seems like we can drop the \"(s)\" from the message and just make it \"s\".\n  MissingOneOfPlugins: ({ missingPlugin }: { missingPlugin: string[] }) =>\n    `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical:\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType:\n    \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue:\n    \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: ({ key }: { key: string }) =>\n    `Duplicate key \"${key}\" is not allowed in module attributes.`,\n  ModuleExportNameHasLoneSurrogate: ({\n    surrogateCharCode,\n  }: {\n    surrogateCharCode: number;\n  }) =>\n    `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(\n      16,\n    )}'.`,\n  ModuleExportUndefined: ({ localName }: { localName: string }) =>\n    `Export '${localName}' is not defined.`,\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence:\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar:\n    \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew:\n    \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate:\n    \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor:\n    \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PrivateInExpectedIn: ({ identifierName }: { identifierName: string }) =>\n    `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`,\n  PrivateNameRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Duplicate private name #${identifierName}.`,\n  RecordExpressionBarIncorrectEndSyntaxType:\n    \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType:\n    \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType:\n    \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction:\n    \"In non-strict mode code, functions can only be declared at top level or inside a block.\",\n  SloppyFunctionAnnexB:\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  SourcePhaseImportRequiresDefault:\n    'Only `import source x from \"./module\"` is valid.',\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  SuperNotAllowed:\n    \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType:\n    \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody:\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport:\n    \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: ({ keyword }: { keyword: string }) =>\n    `Unexpected keyword '${keyword}'.`,\n  UnexpectedLeadingDecorator:\n    \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration:\n    \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget:\n    \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator:\n    \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Unexpected private name.\",\n  UnexpectedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Unexpected reserved word '${reservedWord}'.`,\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: ({\n    expected,\n    unexpected,\n  }: {\n    expected?: string | null;\n    unexpected?: string | null;\n  }) =>\n    `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${\n      expected ? `, expected \"${expected}\"` : \"\"\n    }`,\n  UnexpectedTokenUnaryExponentiation:\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnexpectedUsingDeclaration:\n    \"Using declaration cannot appear in the top level when source type is `script`.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport:\n    \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport:\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport:\n    \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: ({\n    target,\n    onlyValidPropertyName,\n  }: {\n    target: string;\n    onlyValidPropertyName: string;\n  }) =>\n    `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,\n  UnsupportedParameterDecorator:\n    \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator:\n    \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper:\n    \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  UsingDeclarationExport: \"Using declaration cannot be exported.\",\n  UsingDeclarationHasBindingPattern:\n    \"Using declaration cannot have destructuring patterns.\",\n  VarRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Identifier '${identifierName}' has already been declared.`,\n  YieldBindingIdentifier:\n    \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator:\n    \"Numeric separator can not be used after leading 0.\",\n} satisfies ParseErrorTemplates;\n","import type { ParseErrorTemplates } from \"../parse-error\";\n\nexport default {\n  StrictDelete: \"Deleting local variable in strict mode.\",\n\n  // `referenceName` is the StringValue[1] of an IdentifierReference[2], which\n  // is represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-IdentifierReference\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArguments: ({ referenceName }: { referenceName: string }) =>\n    `Assigning to '${referenceName}' in strict mode.`,\n\n  // `bindingName` is the StringValue[1] of a BindingIdentifier[2], which is\n  // represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-BindingIdentifier\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArgumentsBinding: ({ bindingName }: { bindingName: string }) =>\n    `Binding '${bindingName}' in strict mode.`,\n\n  StrictFunction:\n    \"In strict mode code, functions can only be declared at top level or inside a block.\",\n\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n\n  StrictWith: \"'with' in strict mode.\",\n} satisfies ParseErrorTemplates;\n","import type { ParseErrorTemplates } from \"../parse-error.ts\";\nimport toNodeDescription from \"./to-node-description.ts\";\n\nexport const UnparenthesizedPipeBodyDescriptions = new Set([\n  \"ArrowFunctionExpression\",\n  \"AssignmentExpression\",\n  \"ConditionalExpression\",\n  \"YieldExpression\",\n] as const);\n\ntype GetSetMemberType<T extends Set<any>> =\n  T extends Set<infer M> ? M : unknown;\n\nexport type UnparenthesizedPipeBodyTypes = GetSetMemberType<\n  typeof UnparenthesizedPipeBodyDescriptions\n>;\n\nexport default {\n  // This error is only used by the smart-mix proposal\n  PipeBodyIsTighter:\n    \"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes:\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound:\n    \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: ({ token }: { token: string }) =>\n    `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`,\n  PipeTopicUnused:\n    \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: ({ type }: { type: UnparenthesizedPipeBodyTypes }) =>\n    `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n      type,\n    })}; please wrap it in parentheses.`,\n\n  // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n  // are retained for backwards compatibility\n  // with the deprecated smart-mix pipe operator proposal plugin.\n  // They are subject to removal in a future major version.\n  PipelineBodyNoArrow:\n    'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression:\n    \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression:\n    \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused:\n    \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed:\n    \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline:\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n} satisfies ParseErrorTemplates;\n","import { Position } from \"./util/location.ts\";\n\ntype SyntaxPlugin =\n  | \"flow\"\n  | \"typescript\"\n  | \"jsx\"\n  | \"pipelineOperator\"\n  | \"placeholders\";\n\ntype ParseErrorCode =\n  | \"BABEL_PARSER_SYNTAX_ERROR\"\n  | \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\";\n\n// Babel uses \"normal\" SyntaxErrors for it's errors, but adds some extra\n// functionality. This functionality is defined in the\n// `ParseErrorSpecification` interface below. We may choose to change to someday\n// give our errors their own full-blown class, but until then this allow us to\n// keep all the desirable properties of SyntaxErrors (like their name in stack\n// traces, etc.), and also allows us to punt on any publicly facing\n// class-hierarchy decisions until Babel 8.\ninterface ParseErrorSpecification<ErrorDetails> {\n  // Look, these *could* be readonly, but then Flow complains when we initially\n  // set them. We could do a whole dance and make a special interface that's not\n  // readonly for when we create the error, then cast it to the readonly\n  // interface for public use, but the previous implementation didn't have them\n  // as readonly, so let's just not worry about it for now.\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  missingPlugin?: string | string[];\n  loc: Position;\n  details: ErrorDetails;\n\n  // We should consider removing this as it now just contains the same\n  // information as `loc.index`.\n  pos: number;\n}\n\nexport type ParseError<ErrorDetails> = SyntaxError &\n  ParseErrorSpecification<ErrorDetails>;\n\n// By `ParseErrorConstructor`, we mean something like the new-less style\n// `ErrorConstructor`[1], since `ParseError`'s are not themselves actually\n// separate classes from `SyntaxError`'s.\n//\n// 1. https://github.com/microsoft/TypeScript/blob/v4.5.5/lib/lib.es5.d.ts#L1027\nexport type ParseErrorConstructor<ErrorDetails> = (\n  loc: Position,\n  details: ErrorDetails,\n) => ParseError<ErrorDetails>;\n\ntype ToMessage<ErrorDetails> = (self: ErrorDetails) => string;\n\ntype ParseErrorCredentials<ErrorDetails> = {\n  code: string;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  toMessage: ToMessage<ErrorDetails>;\n};\n\nfunction defineHidden(obj: object, key: string, value: unknown) {\n  Object.defineProperty(obj, key, {\n    enumerable: false,\n    configurable: true,\n    value,\n  });\n}\n\nfunction toParseErrorConstructor<ErrorDetails extends object>({\n  toMessage,\n  code,\n  reasonCode,\n  syntaxPlugin,\n}: ParseErrorCredentials<ErrorDetails>): ParseErrorConstructor<ErrorDetails> {\n  const hasMissingPlugin =\n    reasonCode === \"MissingPlugin\" || reasonCode === \"MissingOneOfPlugins\";\n\n  if (!process.env.BABEL_8_BREAKING) {\n    const oldReasonCodes: Record<string, string> = {\n      AccessorCannotDeclareThisParameter: \"AccesorCannotDeclareThisParameter\",\n      AccessorCannotHaveTypeParameters: \"AccesorCannotHaveTypeParameters\",\n      ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference:\n        \"ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference\",\n      SetAccessorCannotHaveOptionalParameter:\n        \"SetAccesorCannotHaveOptionalParameter\",\n      SetAccessorCannotHaveRestParameter: \"SetAccesorCannotHaveRestParameter\",\n      SetAccessorCannotHaveReturnType: \"SetAccesorCannotHaveReturnType\",\n    };\n    if (oldReasonCodes[reasonCode]) {\n      reasonCode = oldReasonCodes[reasonCode];\n    }\n  }\n\n  return function constructor(loc: Position, details: ErrorDetails) {\n    const error: ParseError<ErrorDetails> = new SyntaxError() as any;\n\n    error.code = code as ParseErrorCode;\n    error.reasonCode = reasonCode;\n    error.loc = loc;\n    error.pos = loc.index;\n\n    error.syntaxPlugin = syntaxPlugin;\n    if (hasMissingPlugin) {\n      error.missingPlugin = (details as any).missingPlugin;\n    }\n\n    type Overrides = {\n      loc?: Position;\n      details?: ErrorDetails;\n    };\n    defineHidden(error, \"clone\", function clone(overrides: Overrides = {}) {\n      const { line, column, index } = overrides.loc ?? loc;\n      return constructor(new Position(line, column, index), {\n        ...details,\n        ...overrides.details,\n      });\n    });\n\n    defineHidden(error, \"details\", details);\n\n    Object.defineProperty(error, \"message\", {\n      configurable: true,\n      get(this: ParseError<ErrorDetails>): string {\n        const message = `${toMessage(details)} (${loc.line}:${loc.column})`;\n        this.message = message;\n        return message;\n      },\n      set(value: string) {\n        Object.defineProperty(this, \"message\", { value, writable: true });\n      },\n    });\n\n    return error;\n  };\n}\n\ntype ParseErrorTemplate =\n  | string\n  | ToMessage<any>\n  | { message: string | ToMessage<any>; code?: ParseErrorCode };\n\nexport type ParseErrorTemplates = { [reasonCode: string]: ParseErrorTemplate };\n\n// This is the templated form of `ParseErrorEnum`.\n//\n// Note: We could factor out the return type calculation into something like\n// `ParseErrorConstructor<T extends ParseErrorTemplates>`, and then we could\n// reuse it in the non-templated form of `ParseErrorEnum`, but TypeScript\n// doesn't seem to drill down that far when showing you the computed type of\n// an object in an editor, so we'll leave it inlined for now.\nexport function ParseErrorEnum(a: TemplateStringsArray): <\n  T extends ParseErrorTemplates,\n>(\n  parseErrorTemplates: T,\n) => {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : object\n      : T[K] extends ToMessage<any>\n        ? Parameters<T[K]>[0]\n        : object\n  >;\n};\n\nexport function ParseErrorEnum<T extends ParseErrorTemplates>(\n  parseErrorTemplates: T,\n  syntaxPlugin?: SyntaxPlugin,\n): {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : object\n      : T[K] extends ToMessage<any>\n        ? Parameters<T[K]>[0]\n        : object\n  >;\n};\n\n// You call `ParseErrorEnum` with a mapping from `ReasonCode`'s to either:\n//\n// 1. a static error message,\n// 2. `toMessage` functions that define additional necessary `details` needed by\n//    the `ParseError`, or\n// 3. Objects that contain a `message` of one of the above and overridden `code`\n//    and/or `reasonCode`:\n//\n// ParseErrorEnum `optionalSyntaxPlugin` ({\n//   ErrorWithStaticMessage: \"message\",\n//   ErrorWithDynamicMessage: ({ type } : { type: string }) => `${type}`),\n//   ErrorWithOverriddenCodeAndOrReasonCode: {\n//     message: ({ type }: { type: string }) => `${type}`),\n//     code: \"AN_ERROR_CODE\",\n//     ...(BABEL_8_BREAKING ? { } : { reasonCode: \"CustomErrorReasonCode\" })\n//   }\n// });\n//\nexport function ParseErrorEnum(\n  argument: TemplateStringsArray | ParseErrorTemplates,\n  syntaxPlugin?: SyntaxPlugin,\n) {\n  // If the first parameter is an array, that means we were called with a tagged\n  // template literal. Extract the syntaxPlugin from this, and call again in\n  // the \"normalized\" form.\n  if (Array.isArray(argument)) {\n    return (parseErrorTemplates: ParseErrorTemplates) =>\n      ParseErrorEnum(parseErrorTemplates, argument[0]);\n  }\n\n  const ParseErrorConstructors = {} as Record<\n    string,\n    ParseErrorConstructor<unknown>\n  >;\n\n  for (const reasonCode of Object.keys(argument)) {\n    const template = (argument as ParseErrorTemplates)[reasonCode];\n    const { message, ...rest } =\n      typeof template === \"string\"\n        ? { message: () => template }\n        : typeof template === \"function\"\n          ? { message: template }\n          : template;\n    const toMessage = typeof message === \"string\" ? () => message : message;\n\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor({\n      code: \"BABEL_PARSER_SYNTAX_ERROR\",\n      reasonCode,\n      toMessage,\n      ...(syntaxPlugin ? { syntaxPlugin } : {}),\n      ...rest,\n    });\n  }\n\n  return ParseErrorConstructors;\n}\n\nimport ModuleErrors from \"./parse-error/module-errors.ts\";\nimport StandardErrors from \"./parse-error/standard-errors.ts\";\nimport StrictModeErrors from \"./parse-error/strict-mode-errors.ts\";\nimport PipelineOperatorErrors from \"./parse-error/pipeline-operator-errors.ts\";\n\nexport const Errors = {\n  ...ParseErrorEnum(ModuleErrors),\n  ...ParseErrorEnum(StandardErrors),\n  ...ParseErrorEnum(StrictModeErrors),\n  ...ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors),\n};\n\nexport type { LValAncestor } from \"./parse-error/standard-errors.ts\";\n","import type { PluginList } from \"./plugin-utils.ts\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport interface Options {\n  sourceType?: SourceType;\n  sourceFilename?: string;\n  startIndex?: number;\n  startColumn?: number;\n  startLine?: number;\n  allowAwaitOutsideFunction?: boolean;\n  allowReturnOutsideFunction?: boolean;\n  allowNewTargetOutsideFunction?: boolean;\n  allowImportExportEverywhere?: boolean;\n  allowSuperOutsideMethod?: boolean;\n  allowUndeclaredExports?: boolean;\n  plugins?: PluginList;\n  strictMode?: boolean | undefined | null;\n  ranges?: boolean;\n  tokens?: boolean;\n  createImportExpressions?: boolean;\n  createParenthesizedExpressions?: boolean;\n  errorRecovery?: boolean;\n  attachComment?: boolean;\n  annexB?: boolean;\n}\n\nexport const enum OptionFlags {\n  AllowAwaitOutsideFunction = 1 << 0,\n  AllowReturnOutsideFunction = 1 << 1,\n  AllowNewTargetOutsideFunction = 1 << 2,\n  AllowImportExportEverywhere = 1 << 3,\n  AllowSuperOutsideMethod = 1 << 4,\n  AllowUndeclaredExports = 1 << 5,\n  Ranges = 1 << 6,\n  Tokens = 1 << 7,\n  CreateImportExpressions = 1 << 8,\n  CreateParenthesizedExpressions = 1 << 9,\n  ErrorRecovery = 1 << 10,\n  AttachComment = 1 << 11,\n  AnnexB = 1 << 12,\n}\n\ntype OptionsWithDefaults = { [P in keyof Options]-?: Options[P] };\n\nfunction createDefaultOptions(): OptionsWithDefaults {\n  return {\n    // Source type (\"script\" or \"module\") for different semantics\n    sourceType: \"script\",\n    // Source filename.\n    sourceFilename: undefined,\n    // Index (0-based) from which to start counting source. Useful for\n    // integration with other tools.\n    startIndex: 0,\n    // Column (0-based) from which to start counting source. Useful for\n    // integration with other tools.\n    startColumn: 0,\n    // Line (1-based) from which to start counting source. Useful for\n    // integration with other tools.\n    startLine: 1,\n    // When enabled, await at the top level is not considered an\n    // error.\n    allowAwaitOutsideFunction: false,\n    // When enabled, a return at the top level is not considered an\n    // error.\n    allowReturnOutsideFunction: false,\n    // When enabled, new.target outside a function or class is not\n    // considered an error.\n    allowNewTargetOutsideFunction: false,\n    // When enabled, import/export statements are not constrained to\n    // appearing at the top of the program.\n    allowImportExportEverywhere: false,\n    // TODO\n    allowSuperOutsideMethod: false,\n    // When enabled, export statements can reference undeclared variables.\n    allowUndeclaredExports: false,\n    // An array of plugins to enable\n    plugins: [],\n    // TODO\n    strictMode: null,\n    // Nodes have their start and end characters offsets recorded in\n    // `start` and `end` properties (directly on the node, rather than\n    // the `loc` object, which holds line/column data. To also add a\n    // [semi-standardized][range] `range` property holding a `[start,\n    // end]` array with the same numbers, set the `ranges` option to\n    // `true`.\n    //\n    // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n    ranges: false,\n    // Adds all parsed tokens to a `tokens` property on the `File` node\n    tokens: false,\n    // Whether to create ImportExpression AST nodes (if false\n    // `import(foo)` will be parsed as CallExpression(Import, [Identifier(foo)])\n    createImportExpressions: process.env.BABEL_8_BREAKING ? true : false,\n    // Whether to create ParenthesizedExpression AST nodes (if false\n    // the parser sets extra.parenthesized on the expression nodes instead).\n    createParenthesizedExpressions: false,\n    // When enabled, errors are attached to the AST instead of being directly thrown.\n    // Some errors will still throw, because @babel/parser can't always recover.\n    errorRecovery: false,\n    // When enabled, comments will be attached to adjacent AST nodes as one of\n    // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n    // is vital to preserve comments after transform. If you don't print AST back,\n    // consider set this option to `false` for performance\n    attachComment: true,\n    // When enabled, the parser will support Annex B syntax.\n    // https://tc39.es/ecma262/#sec-additional-ecmascript-features-for-web-browsers\n    annexB: true,\n  };\n}\n\n// Interpret and default an options object\n\nexport function getOptions(opts?: Options | null): OptionsWithDefaults {\n  // https://github.com/babel/babel/pull/16918\n  // `options` is accessed frequently, please make sure it is a fast object.\n  // `%ToFastProperties` can make it a fast object, but the performance is the same as the slow object.\n  const options: any = createDefaultOptions();\n\n  if (opts == null) {\n    return options;\n  }\n  if (opts.annexB != null && opts.annexB !== false) {\n    throw new Error(\"The `annexB` option can only be set to `false`.\");\n  }\n\n  for (const key of Object.keys(options) as (keyof Options)[]) {\n    if (opts[key] != null) options[key] = opts[key];\n  }\n\n  if (options.startLine === 1) {\n    if (opts.startIndex == null && options.startColumn > 0) {\n      options.startIndex = options.startColumn;\n    } else if (opts.startColumn == null && options.startIndex > 0) {\n      options.startColumn = options.startIndex;\n    }\n  } else if (opts.startColumn == null || opts.startIndex == null) {\n    if (opts.startIndex != null || process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"With a `startLine > 1` you must also specify `startIndex` and `startColumn`.\",\n      );\n    }\n  }\n\n  return options;\n}\n","import type { TokenType } from \"../tokenizer/types.ts\";\nimport type Parser from \"../parser/index.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\nimport type * as N from \"../types.ts\";\nimport type { Node as NodeType, NodeBase, File } from \"../types.ts\";\nimport type { Position } from \"../util/location.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { BindingFlag } from \"../util/scopeflags.ts\";\nimport { OptionFlags } from \"../options.ts\";\n\nconst { defineProperty } = Object;\nconst toUnenumerable = (object: any, key: string) => {\n  if (object) {\n    defineProperty(object, key, { enumerable: false, value: object[key] });\n  }\n};\n\nfunction toESTreeLocation(node: any) {\n  toUnenumerable(node.loc.start, \"index\");\n  toUnenumerable(node.loc.end, \"index\");\n\n  return node;\n}\n\nexport default (superClass: typeof Parser) =>\n  class ESTreeParserMixin extends superClass implements Parser {\n    parse(): File {\n      const file = toESTreeLocation(super.parse());\n\n      if (this.optionFlags & OptionFlags.Tokens) {\n        file.tokens = file.tokens.map(toESTreeLocation);\n      }\n\n      return file;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseRegExpLiteral({ pattern, flags }): N.EstreeRegExpLiteral {\n      let regex: RegExp | null = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (_) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt: bigint | null;\n      try {\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal: null = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T extends N.EstreeLiteral>(value: any) {\n      // @ts-expect-error ESTree plugin changes node types\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      // @ts-expect-error ESTree plugin changes node types\n      return this.estreeParseLiteral(value);\n    }\n\n    // Cast a Directive to an ExpressionStatement. Mutates the input Directive.\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const expression = directive.value as any as N.EstreeLiteral;\n      delete directive.value;\n\n      expression.type = \"Literal\";\n      // @ts-expect-error N.EstreeLiteral.raw is not defined.\n      expression.raw = expression.extra.raw;\n      expression.value = expression.extra.expressionValue;\n\n      const stmt = directive as any as N.ExpressionStatement;\n      stmt.type = \"ExpressionStatement\";\n      stmt.expression = expression;\n      // @ts-expect-error N.ExpressionStatement.directive is not defined\n      stmt.directive = expression.extra.rawValue;\n\n      delete expression.extra;\n\n      return stmt;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        // @ts-expect-error plugin typings\n        this.checkDeclaration((node as unknown as N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return (method as unknown as N.EstreeMethodDefinition).value.params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      allowDirectives: boolean | undefined | null,\n      topLevel: boolean,\n      end: TokenType,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): void {\n      super.parseBlockBody(\n        node,\n        allowDirectives,\n        topLevel,\n        end,\n        afterBlockParse,\n      );\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      // @ts-expect-error estree plugin typings\n      node.body = directiveStatements.concat(node.body);\n      delete node.directives;\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = node as any;\n      delete node.id;\n      // @ts-expect-error mutate AST types\n      node.name = name;\n      // @ts-expect-error mutate AST types\n      node.type = \"PrivateIdentifier\";\n      return node as unknown as N.EstreePrivateIdentifier;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    isPrivateName(node: N.Node): node is N.EstreePrivateIdentifier {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    getPrivateNameSV(node: N.EstreePrivateIdentifier): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node as unknown as N.PrivateName);\n        }\n      }\n      return node.name;\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseLiteral<T extends N.Literal>(value: any, type: T[\"type\"]): T {\n      const node = super.parseLiteral<T>(value, type);\n      // @ts-expect-error mutating AST types\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseMethod<\n      T extends N.ClassPrivateMethod | N.ObjectMethod | N.ClassMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope: boolean = false,\n    ): N.EstreeMethodDefinition | N.EstreeTSAbstractMethodDefinition {\n      let funcNode = this.startNode<N.MethodLike>();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        // @ts-expect-error todo(flow->ts)\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error mutate AST types\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // @ts-expect-error mutate AST types\n      node.value = funcNode;\n      const { typeParameters } = node;\n      if (typeParameters) {\n        delete node.typeParameters;\n        funcNode.typeParameters = typeParameters;\n        funcNode.start = typeParameters.start;\n        funcNode.loc.start = typeParameters.loc.start;\n      }\n      if (type === \"ClassPrivateMethod\") {\n        node.computed = false;\n      }\n      if (\n        process.env.BABEL_8_BREAKING &&\n        // @ts-expect-error todo(flow->ts) property not defined for all types in union\n        node.abstract &&\n        this.hasPlugin(\"typescript\")\n      ) {\n        if (!funcNode.body) {\n          (funcNode as unknown as N.EstreeTSEmptyBodyFunctionExpression).type =\n            \"TSEmptyBodyFunctionExpression\";\n        }\n        return this.finishNode(\n          // @ts-expect-error cast methods to estree types\n          node as Undone<N.EstreeTSAbstractMethodDefinition>,\n          \"TSAbstractMethodDefinition\",\n        );\n      }\n      return this.finishNode(\n        // @ts-expect-error cast methods to estree types\n        node as Undone<N.EstreeMethodDefinition>,\n        \"MethodDefinition\",\n      );\n    }\n\n    nameIsConstructor(key: N.Expression | N.PrivateName): boolean {\n      if (key.type === \"Literal\") return key.value === \"constructor\";\n      return super.nameIsConstructor(key);\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = super.parseClassProperty(...args);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as unknown as N.EstreePropertyDefinition;\n        }\n      }\n      if (\n        process.env.BABEL_8_BREAKING &&\n        propertyNode.abstract &&\n        this.hasPlugin(\"typescript\")\n      ) {\n        (propertyNode as unknown as N.EstreeTSAbstractPropertyDefinition).type =\n          \"TSAbstractPropertyDefinition\";\n      } else {\n        (propertyNode as unknown as N.EstreePropertyDefinition).type =\n          \"PropertyDefinition\";\n      }\n      return propertyNode;\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = super.parseClassPrivateProperty(...args);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as unknown as N.EstreePropertyDefinition;\n        }\n      }\n      if (\n        process.env.BABEL_8_BREAKING &&\n        propertyNode.abstract &&\n        this.hasPlugin(\"typescript\")\n      ) {\n        (propertyNode as unknown as N.EstreeTSAbstractPropertyDefinition).type =\n          \"TSAbstractPropertyDefinition\";\n      } else {\n        (propertyNode as unknown as N.EstreePropertyDefinition).type =\n          \"PropertyDefinition\";\n      }\n      propertyNode.computed = false;\n      return propertyNode;\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): N.ObjectMethod | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) as any;\n\n      if (node) {\n        node.type = \"Property\";\n        if ((node as any as N.ClassMethod).kind === \"method\") {\n          node.kind = \"init\";\n        }\n        node.shorthand = false;\n      }\n\n      return node as any;\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startLoc: Position | undefined | null,\n      isPattern: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectProperty | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectProperty(\n        prop,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ) as any;\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return node as any;\n    }\n\n    isValidLVal(\n      type: string,\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingFlag,\n    ) {\n      return type === \"Property\"\n        ? \"value\"\n        : super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (node != null && this.isObjectProperty(node)) {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableObjectExpressionProp(\n      prop: N.Node,\n      isLast: boolean,\n      isLHS: boolean,\n    ) {\n      if (\n        prop.type === \"Property\" &&\n        (prop.kind === \"get\" || prop.kind === \"set\")\n      ) {\n        this.raise(Errors.PatternHasAccessor, prop.key);\n      } else if (prop.type === \"Property\" && prop.method) {\n        this.raise(Errors.PatternHasMethod, prop.key);\n      } else {\n        super.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n      }\n    }\n\n    finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n      unfinished: Undone<T>,\n      optional: boolean,\n    ): T {\n      const node = super.finishCallExpression(unfinished, optional);\n\n      if (node.callee.type === \"Import\") {\n        (node as N.Node as N.EstreeImportExpression).type = \"ImportExpression\";\n        (node as N.Node as N.EstreeImportExpression).source = node\n          .arguments[0] as N.Expression;\n        (node as N.Node as N.EstreeImportExpression).options =\n          (node.arguments[1] as N.Expression) ?? null;\n        // compatibility with previous ESTree AST\n        // TODO(Babel 8): Remove this\n        (node as N.Node as N.EstreeImportExpression).attributes =\n          (node.arguments[1] as N.Expression) ?? null;\n        // arguments isn't optional in the type definition\n        delete node.arguments;\n        // callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(\n      unfinished: Undone<N.AnyExport>,\n      decorators: N.Decorator[] | null,\n    ) {\n      const exportStartLoc = this.state.lastTokStartLoc;\n      const node = super.parseExport(unfinished, decorators);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          // @ts-expect-error mutating AST types\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            // @ts-expect-error mutating AST types\n            node.type = \"ExportAllDeclaration\";\n            // @ts-expect-error mutating AST types\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n        // fallthrough\n        case \"ExportDefaultDeclaration\":\n          {\n            const { declaration } = node;\n            if (\n              declaration?.type === \"ClassDeclaration\" &&\n              declaration.decorators?.length > 0 &&\n              // decorator comes before export\n              declaration.start === node.start\n            ) {\n              this.resetStartLocation(\n                node,\n                // For compatibility with ESLint's keyword-spacing rule, which assumes that an\n                // export declaration must start with export.\n                // https://github.com/babel/babel/issues/15085\n                // Here we reset export declaration's start to be the start of the export token\n                exportStartLoc,\n              );\n            }\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      const node = super.parseSubscript(base, startLoc, noCalls, state);\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          // strip Optional prefix\n          (node as unknown as N.CallExpression | N.MemberExpression).type =\n            node.type.substring(8) as \"CallExpression\" | \"MemberExpression\";\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode<N.EstreeChainExpression>(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        // @ts-expect-error not in the type definitions\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    isOptionalMemberExpression(node: N.Node) {\n      if (node.type === \"ChainExpression\") {\n        return node.expression.type === \"MemberExpression\";\n      }\n      return super.isOptionalMemberExpression(node);\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    isObjectProperty(node: N.Node): node is N.EstreeProperty {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    isObjectMethod(node: N.Node): node is N.EstreeProperty {\n      return (\n        node.type === \"Property\" &&\n        (node.method || node.kind === \"get\" || node.kind === \"set\")\n      );\n    }\n\n    finishNodeAt<T extends NodeType>(\n      node: Undone<T>,\n      type: T[\"type\"],\n      endLoc: Position,\n    ): T {\n      return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n    }\n\n    resetStartLocation(node: N.Node, startLoc: Position) {\n      super.resetStartLocation(node, startLoc);\n      toESTreeLocation(node);\n    }\n\n    resetEndLocation(\n      node: NodeBase,\n      endLoc: Position = this.state.lastTokEndLoc,\n    ): void {\n      super.resetEndLocation(node, endLoc);\n      toESTreeLocation(node);\n    }\n  };\n","// The token context is used in JSX plugin to track\n// jsx tag / jsx text / normal JavaScript expression\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nconst types: {\n  [key: string]: TokContext;\n} = {\n  brace: new TokContext(\"{\"), // normal JavaScript expression\n  j_oTag: new TokContext(\"<tag\"), // JSX opening tag\n  j_cTag: new TokContext(\"</tag\"), // JSX closing tag\n  j_expr: new TokContext(\"<tag>...</tag>\", true), // JSX expressions\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  types.template = new TokContext(\"`\", true);\n}\n\nexport { types };\n","import { types as tc, type TokContext } from \"./context.ts\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string;\n  beforeExpr?: boolean;\n  startsExpr?: boolean;\n  rightAssociative?: boolean;\n  isLoop?: boolean;\n  isAssign?: boolean;\n  prefix?: boolean;\n  postfix?: boolean;\n  binop?: number | null;\n};\n\n// Internally the tokenizer stores token as a number\nexport type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: string | undefined | null;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: number | undefined | null;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext:\n    | ((context: Array<TokContext>) => void)\n    | undefined\n    | null;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport type InternalTokenTypes = typeof tt;\n\nexport const tt = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\"),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  // start: isTemplate\n  templateTail: createToken(\"...`\", { startsExpr }),\n  templateNonTail: createToken(\"...${\", { beforeExpr, startsExpr }),\n  // end: isTemplate\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token.\n  // When the proposal settles on a token, the others can be merged with\n  // tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n\n  // More possible topic tokens.\n  // When the proposal settles on a token, at least one of these may be removed.\n  doubleCaret: createToken(\"^^\", { startsExpr }),\n  doubleAt: createToken(\"@@\", { startsExpr }),\n\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _defer: createKeywordLike(\"defer\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _source: createKeywordLike(\"source\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _using: createKeywordLike(\"using\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  _satisfies: createKeywordLike(\"satisfies\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  // TODO: Remove this in Babel 8\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n} as const;\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.placeholder;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.placeholder;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsBinaryOperator(token: TokenType): boolean {\n  return tokenBinops[token] !== -1;\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function tokenIsTemplate(token: TokenType): boolean {\n  return token >= tt.templateTail && token <= tt.templateNonTail;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n","// We inline this package\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.cjs`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c8a\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7cd\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7dc\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0897-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\u30fb\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\\uff65\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.cjs`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,4,51,13,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,39,27,10,22,251,41,7,1,17,2,60,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,20,1,64,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,31,9,2,0,3,0,2,37,2,0,26,0,2,0,45,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,200,32,32,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,16,0,2,12,2,33,125,0,80,921,103,110,18,195,2637,96,16,1071,18,5,26,3994,6,582,6842,29,1763,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,433,44,212,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,42,9,8936,3,2,6,2,1,2,290,16,0,30,2,3,0,15,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,7,5,262,61,147,44,11,6,17,0,322,29,19,43,485,27,229,29,3,0,496,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4153,7,221,3,5761,15,7472,16,621,2467,541,1507,4938,6,4191];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,7,9,32,4,318,1,80,3,71,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,3,0,158,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,68,8,2,0,3,0,2,3,2,4,2,0,15,1,83,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,7,19,58,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,343,9,54,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,10,1,2,0,49,6,4,4,14,10,5350,0,7,14,11465,27,2343,9,87,9,39,4,60,6,26,9,535,9,470,0,2,54,8,3,82,0,12,1,19628,1,4178,9,519,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,101,0,161,6,10,9,357,0,62,13,499,13,245,1,2,9,726,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","import * as charCodes from \"charcodes\";\nimport { isIdentifierStart } from \"@babel/helper-validator-identifier\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(\n  current: number,\n  next: number,\n  next2: number,\n): boolean {\n  return (\n    current === charCodes.atSign &&\n    next === charCodes.atSign &&\n    isIdentifierStart(next2)\n  );\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n","import { ScopeFlag, BindingFlag } from \"./scopeflags.ts\";\nimport type { Position } from \"./location.ts\";\nimport type * as N from \"../types.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\n\nexport const enum NameType {\n  // var-declared names in the current lexical scope\n  Var = 1 << 0,\n  // lexically-declared names in the current lexical scope\n  Lexical = 1 << 1,\n  // lexically-declared FunctionDeclaration names in the current lexical scope\n  Function = 1 << 2,\n}\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  flags: ScopeFlag = 0;\n  names: Map<string, NameType> = new Map();\n  firstLexicalName = \"\";\n\n  constructor(flags: ScopeFlag) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope extends Scope = Scope> {\n  parser: Tokenizer;\n  scopeStack: Array<IScope> = [];\n  inModule: boolean;\n  undefinedExports: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer, inModule: boolean) {\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n\n  get inTopLevel() {\n    return (this.currentScope().flags & ScopeFlag.PROGRAM) > 0;\n  }\n  get inFunction() {\n    return (this.currentVarScopeFlags() & ScopeFlag.FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & ScopeFlag.SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & ScopeFlag.DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & ScopeFlag.CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & ScopeFlag.CLASS) > 0 && (flags & ScopeFlag.FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & ScopeFlag.STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (ScopeFlag.VAR | ScopeFlag.CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & ScopeFlag.FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlag): Scope {\n    return new Scope(flags);\n  }\n\n  enter(flags: ScopeFlag) {\n    /*:: +createScope: (flags:ScopeFlag) => IScope; */\n    // @ts-expect-error This method will be overwritten by subclasses\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit(): ScopeFlag {\n    const scope = this.scopeStack.pop();\n    return scope.flags;\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & (ScopeFlag.FUNCTION | ScopeFlag.STATIC_BLOCK) ||\n      (!this.parser.inModule && scope.flags & ScopeFlag.PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    let scope = this.currentScope();\n    if (\n      bindingType & BindingFlag.SCOPE_LEXICAL ||\n      bindingType & BindingFlag.SCOPE_FUNCTION\n    ) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      let type = scope.names.get(name) || 0;\n\n      if (bindingType & BindingFlag.SCOPE_FUNCTION) {\n        type = type | NameType.Function;\n      } else {\n        if (!scope.firstLexicalName) {\n          scope.firstLexicalName = name;\n        }\n        type = type | NameType.Lexical;\n      }\n\n      scope.names.set(name, type);\n\n      if (bindingType & BindingFlag.SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BindingFlag.SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.names.set(name, (scope.names.get(name) || 0) | NameType.Var);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & ScopeFlag.VAR) break;\n      }\n    }\n    if (this.parser.inModule && scope.flags & ScopeFlag.PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.parser.inModule && scope.flags & ScopeFlag.PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingFlag,\n    loc: Position,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, loc, {\n        identifierName: name,\n      });\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    if (!(bindingType & BindingFlag.KIND_VALUE)) return false;\n\n    if (bindingType & BindingFlag.SCOPE_LEXICAL) {\n      return scope.names.has(name);\n    }\n\n    const type = scope.names.get(name);\n\n    if (bindingType & BindingFlag.SCOPE_FUNCTION) {\n      return (\n        (type & NameType.Lexical) > 0 ||\n        (!this.treatFunctionsAsVarInScope(scope) && (type & NameType.Var) > 0)\n      );\n    }\n\n    return (\n      ((type & NameType.Lexical) > 0 &&\n        // Annex B.3.4\n        // https://tc39.es/ecma262/#sec-variablestatements-in-catch-blocks\n        !(\n          scope.flags & ScopeFlag.SIMPLE_CATCH &&\n          scope.firstLexicalName === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) &&\n        (type & NameType.Function) > 0)\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (!topLevelScope.names.has(name)) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags(): ScopeFlag {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & ScopeFlag.VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  currentThisScopeFlags(): ScopeFlag {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (\n        flags & (ScopeFlag.VAR | ScopeFlag.CLASS) &&\n        !(flags & ScopeFlag.ARROW)\n      ) {\n        return flags;\n      }\n    }\n  }\n}\n","import type { Position } from \"../../util/location.ts\";\nimport ScopeHandler, { NameType, Scope } from \"../../util/scope.ts\";\nimport { BindingFlag, type ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type * as N from \"../../types.ts\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlag): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BindingFlag.FLAG_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    if (super.isRedeclaredInScope(scope, name, bindingType)) return true;\n\n    if (\n      bindingType & BindingFlag.FLAG_FLOW_DECLARE_FN &&\n      !scope.declareFunctions.has(name)\n    ) {\n      const type = scope.names.get(name);\n      return (type & NameType.Function) > 0 || (type & NameType.Lexical) > 0;\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","import type { OptionFlags, Options } from \"../options.ts\";\nimport type State from \"../tokenizer/state.ts\";\nimport type { PluginsMap } from \"./index.ts\";\nimport type ScopeHandler from \"../util/scope.ts\";\nimport type ExpressionScopeHandler from \"../util/expression-scope.ts\";\nimport type ClassScopeHandler from \"../util/class-scope.ts\";\nimport type ProductionParameterHandler from \"../util/production-parameter.ts\";\nimport type {\n  ParserPluginWithOptions,\n  PluginConfig,\n  PluginOptions,\n} from \"../typings.ts\";\nimport type * as N from \"../types.ts\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare optionFlags: OptionFlags;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<any>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: string | undefined | null;\n  declare startIndex: number;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n  // Comment store for Program.comments\n  declare comments: Array<N.Comment>;\n\n  sourceToOffsetPos(sourcePos: number) {\n    return sourcePos + this.startIndex;\n  }\n\n  offsetToSourcePos(offsetPos: number) {\n    return offsetPos - this.startIndex;\n  }\n\n  // This method accepts either a string (plugin name) or an array pair\n  // (plugin name and options object). If an options object is given,\n  // then each value is non-recursively checked for identity with that\n  // plugin’s actual option value.\n  hasPlugin(pluginConfig: PluginConfig): boolean {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(\n        pluginOptions,\n      ) as (keyof typeof pluginOptions)[]) {\n        if (actualOptions?.[key] !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  getPluginOption<\n    PluginName extends ParserPluginWithOptions[0],\n    OptionName extends keyof PluginOptions<PluginName>,\n  >(plugin: PluginName, name: OptionName) {\n    return (this.plugins.get(plugin) as null | PluginOptions<PluginName>)?.[\n      name\n    ];\n  }\n}\n","/*:: declare var invariant; */\n\nimport BaseParser from \"./base.ts\";\nimport type { Comment, Node, Identifier } from \"../types.ts\";\nimport * as charCodes from \"charcodes\";\nimport type { Undone } from \"./node.ts\";\n\n/**\n * A whitespace token containing comments\n */\nexport type CommentWhitespace = {\n  /**\n   * the start of the whitespace token.\n   */\n  start: number;\n  /**\n   * the end of the whitespace token.\n   */\n  end: number;\n  /**\n   * the containing comments\n   */\n  comments: Array<Comment>;\n  /**\n   * the immediately preceding AST node of the whitespace token\n   */\n  leadingNode: Node | null;\n  /**\n   * the immediately following AST node of the whitespace token\n   */\n  trailingNode: Node | null;\n  /**\n   * the innermost AST node containing the whitespace with minimal size (|end - start|)\n   */\n  containingNode: Node | null;\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setTrailingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setLeadingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nexport function setInnerComments(\n  node: Undone<Node>,\n  comments?: Array<Comment>,\n) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n */\nfunction adjustInnerComments(\n  node: Undone<Node>,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    const { commentsLen } = this.state;\n    if (this.comments.length !== commentsLen) {\n      this.comments.length = commentsLen;\n    }\n    this.comments.push(comment);\n    this.state.commentsLen++;\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (\n        this.input.charCodeAt(this.offsetToSourcePos(commentStart) - 1) ===\n        charCodes.comma\n      ) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          case \"TSEnumDeclaration\":\n            if (!process.env.BABEL_8_BREAKING) {\n              adjustInnerComments(node, node.members, commentWS);\n            } else {\n              setInnerComments(node, comments);\n            }\n            break;\n          case \"TSEnumBody\":\n            adjustInnerComments(node, node.members, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaining commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /* eslint-disable no-irregular-whitespace */\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterpret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing\n   * ```\n   * async /* 1 *​/ function f() {}\n   * ```\n   * the comment whitespace `/* 1 *​/` has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark `/* 1 *​/` as\n   * inner comments. So `/* 1 *​/` should be detached from the Identifier node.\n   *\n   * @param node the last finished AST node _before_ current token\n   */\n  /* eslint-enable no-irregular-whitespace */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /* eslint-disable no-irregular-whitespace */\n  /**\n   * Reset previous node leading comments, assuming that `node` is a\n   * single-token node. Used in import phase modifiers parsing. We parse\n   * `module` in `import module foo from ...` as an identifier but may\n   * reinterpret it into a phase modifier later. In this case the identifier is\n   * not part of the AST and we should sync the knowledge to commentStacks\n   *\n   * For example, when parsing\n   * ```\n   * import /* 1 *​/ module a from \"a\";\n   * ```\n   * the comment whitespace `/* 1 *​/` has trailing node Identifier(module). When\n   * we see that `module` is not a default import binding, we mark `/* 1 *​/` as\n   * inner comments of the ImportDeclaration. So `/* 1 *​/` should be detached from\n   * the Identifier node.\n   *\n   * @param node the last finished AST node _before_ current token\n   */\n  /* eslint-enable no-irregular-whitespace */\n  resetPreviousIdentifierLeadingComments(node: Identifier) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n\n    if (commentStack[length - 1].trailingNode === node) {\n      commentStack[length - 1].trailingNode = null;\n    } else if (length >= 2 && commentStack[length - 2].trailingNode === node) {\n      commentStack[length - 2].trailingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n","import * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n|[\\r\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport function hasNewLine(input: string, start: number, end: number): boolean {\n  for (let i = start; i < end; i++) {\n    if (isNewLine(input.charCodeAt(i))) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/g;\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","import type { Options } from \"../options.ts\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location.ts\";\n\nimport { types as ct, type TokContext } from \"./context.ts\";\nimport { tt, type TokenType } from \"./types.ts\";\nimport type { Errors } from \"../parse-error.ts\";\nimport type { ParseError } from \"../parse-error.ts\";\n\nexport type DeferredStrictError =\n  | typeof Errors.StrictNumericEscape\n  | typeof Errors.StrictOctalLiteral;\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number;\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0;\n};\n\nexport const enum LoopLabelKind {\n  Loop = 1,\n  Switch = 2,\n}\n\ndeclare const bit: import(\"../../../../scripts/babel-plugin-bit-decorator/types.d.ts\").BitDecorator<State>;\n\nexport default class State {\n  @bit.storage flags: number;\n\n  @bit accessor strict = false;\n\n  startIndex: number;\n  curLine: number;\n  lineStart: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init({\n    strictMode,\n    sourceType,\n    startIndex,\n    startLine,\n    startColumn,\n  }: Options): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n          ? true\n          : sourceType === \"module\";\n\n    this.startIndex = startIndex;\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(\n      startLine,\n      startColumn,\n      startIndex,\n    );\n  }\n\n  errors: ParseError<any>[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  @bit accessor maybeInArrowParameters = false;\n  @bit accessor inType = false;\n  @bit accessor noAnonFunctionType = false;\n  @bit accessor hasFlowComment = false;\n  @bit accessor isAmbientContext = false;\n  @bit accessor inAbstractClass = false;\n  @bit accessor inDisallowConditionalTypesContext = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  @bit accessor soloAwait = false;\n  @bit accessor inFSharpPipelineDirectBody = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: LoopLabelKind;\n    name?: string | null;\n    statementStart?: number;\n  }> = [];\n\n  commentsLen = 0;\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n\n  // Used to track whether a JSX element is allowed to form\n  @bit accessor canStartJSXElement = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  @bit accessor containsEsc = false;\n\n  // Used to track invalid escape sequences in template literals,\n  // that must be reported if the template is not tagged.\n  firstInvalidTemplateEscapePos: null | Position = null;\n\n  @bit accessor hasTopLevelAwait = false;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, [DeferredStrictError, Position]> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  /**\n   * When we add a new property, we must manually update the `clone` method\n   * @see State#clone\n   */\n\n  curPosition(): Position {\n    return new Position(\n      this.curLine,\n      this.pos - this.lineStart,\n      this.pos + this.startIndex,\n    );\n  }\n\n  clone(): State {\n    const state = new State();\n    state.flags = this.flags;\n    state.startIndex = this.startIndex;\n    state.curLine = this.curLine;\n    state.lineStart = this.lineStart;\n    state.startLoc = this.startLoc;\n    state.endLoc = this.endLoc;\n    state.errors = this.errors.slice();\n    state.potentialArrowAt = this.potentialArrowAt;\n    state.noArrowAt = this.noArrowAt.slice();\n    state.noArrowParamsConversionAt = this.noArrowParamsConversionAt.slice();\n    state.topicContext = this.topicContext;\n    state.labels = this.labels.slice();\n    state.commentsLen = this.commentsLen;\n    state.commentStack = this.commentStack.slice();\n    state.pos = this.pos;\n    state.type = this.type;\n    state.value = this.value;\n    state.start = this.start;\n    state.end = this.end;\n    state.lastTokEndLoc = this.lastTokEndLoc;\n    state.lastTokStartLoc = this.lastTokStartLoc;\n    state.context = this.context.slice();\n    state.firstInvalidTemplateEscapePos = this.firstInvalidTemplateEscapePos;\n    state.strictErrors = this.strictErrors;\n    state.tokensLength = this.tokensLength;\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number;\n  value: any;\n  type: TokenType;\n  start: number;\n  end: number;\n  context: TokContext[];\n  startLoc: Position;\n  lastTokEndLoc: Position;\n  curLine: number;\n  lineStart: number;\n  curPosition: State[\"curPosition\"];\n  /* Used only in readToken_mult_modulo */\n  inType: boolean;\n  // These boolean properties are not initialized in createLookaheadState()\n  // instead they will only be set by the tokenizer\n  containsEsc?: boolean;\n};\n","// We inline this package\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as charCodes from \"charcodes\";\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ]),\n  hex: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ]),\n};\n\nconst isAllowedNumericSeparatorSibling = {\n  // 0 - 1\n  bin: (ch: number) => ch === charCodes.digit0 || ch === charCodes.digit1,\n\n  // 0 - 7\n  oct: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit7,\n\n  // 0 - 9\n  dec: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit9,\n\n  // 0 - 9, A - F, a - f,\n  hex: (ch: number) =>\n    (ch >= charCodes.digit0 && ch <= charCodes.digit9) ||\n    (ch >= charCodes.uppercaseA && ch <= charCodes.uppercaseF) ||\n    (ch >= charCodes.lowercaseA && ch <= charCodes.lowercaseF),\n};\n\nexport type StringContentsErrorHandlers = EscapedCharErrorHandlers & {\n  unterminated(\n    initialPos: number,\n    initialLineStart: number,\n    initialCurLine: number,\n  ): void;\n};\n\nexport function readStringContents(\n  type: \"single\" | \"double\" | \"template\",\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  errors: StringContentsErrorHandlers,\n) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n\n  let out = \"\";\n  let firstInvalidLoc = null;\n  let chunkStart = pos;\n  const { length } = input;\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    const ch = input.charCodeAt(pos);\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    if (ch === charCodes.backslash) {\n      out += input.slice(chunkStart, pos);\n      const res = readEscapedChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        type === \"template\",\n        errors,\n      );\n      if (res.ch === null && !firstInvalidLoc) {\n        firstInvalidLoc = { pos, lineStart, curLine };\n      } else {\n        out += res.ch;\n      }\n      ({ pos, lineStart, curLine } = res);\n      chunkStart = pos;\n    } else if (\n      ch === charCodes.lineSeparator ||\n      ch === charCodes.paragraphSeparator\n    ) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === charCodes.lineFeed || ch === charCodes.carriageReturn) {\n      if (type === \"template\") {\n        out += input.slice(chunkStart, pos) + \"\\n\";\n        ++pos;\n        if (\n          ch === charCodes.carriageReturn &&\n          input.charCodeAt(pos) === charCodes.lineFeed\n        ) {\n          ++pos;\n        }\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n  return process.env.BABEL_8_BREAKING\n    ? { pos, str: out, firstInvalidLoc, lineStart, curLine }\n    : {\n        pos,\n        str: out,\n        firstInvalidLoc,\n        lineStart,\n        curLine,\n        containsInvalid: !!firstInvalidLoc,\n      };\n}\n\nfunction isStringEnd(\n  type: \"single\" | \"double\" | \"template\",\n  ch: number,\n  input: string,\n  pos: number,\n) {\n  if (type === \"template\") {\n    return (\n      ch === charCodes.graveAccent ||\n      (ch === charCodes.dollarSign &&\n        input.charCodeAt(pos + 1) === charCodes.leftCurlyBrace)\n    );\n  }\n  return (\n    ch === (type === \"double\" ? charCodes.quotationMark : charCodes.apostrophe)\n  );\n}\n\ntype EscapedCharErrorHandlers = HexCharErrorHandlers &\n  CodePointErrorHandlers & {\n    strictNumericEscape(pos: number, lineStart: number, curLine: number): void;\n  };\n\nfunction readEscapedChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  inTemplate: boolean,\n  errors: EscapedCharErrorHandlers,\n) {\n  const throwOnInvalid = !inTemplate;\n  pos++; // skip '\\'\n\n  const res = (ch: string | null) => ({ pos, ch, lineStart, curLine });\n\n  const ch = input.charCodeAt(pos++);\n  switch (ch) {\n    case charCodes.lowercaseN:\n      return res(\"\\n\");\n    case charCodes.lowercaseR:\n      return res(\"\\r\");\n    case charCodes.lowercaseX: {\n      let code;\n      ({ code, pos } = readHexChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        2,\n        false,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCharCode(code));\n    }\n    case charCodes.lowercaseU: {\n      let code;\n      ({ code, pos } = readCodePoint(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCodePoint(code));\n    }\n    case charCodes.lowercaseT:\n      return res(\"\\t\");\n    case charCodes.lowercaseB:\n      return res(\"\\b\");\n    case charCodes.lowercaseV:\n      return res(\"\\u000b\");\n    case charCodes.lowercaseF:\n      return res(\"\\f\");\n    case charCodes.carriageReturn:\n      if (input.charCodeAt(pos) === charCodes.lineFeed) {\n        ++pos;\n      }\n    // fall through\n    case charCodes.lineFeed:\n      lineStart = pos;\n      ++curLine;\n    // fall through\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return res(\"\");\n    case charCodes.digit8:\n    case charCodes.digit9:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n    // fall through\n    default:\n      if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n        const startPos = pos - 1;\n        const match = /^[0-7]+/.exec(input.slice(startPos, pos + 2));\n\n        let octalStr = match[0];\n\n        let octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n        if (\n          octalStr !== \"0\" ||\n          next === charCodes.digit8 ||\n          next === charCodes.digit9\n        ) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n\n        return res(String.fromCharCode(octal));\n      }\n\n      return res(String.fromCharCode(ch));\n  }\n}\n\ntype HexCharErrorHandlers = IntErrorHandlers & {\n  invalidEscapeSequence(pos: number, lineStart: number, curLine: number): void;\n};\n\n// Used to read character escape sequences ('\\x', '\\u').\nfunction readHexChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  len: number,\n  forceLen: boolean,\n  throwOnInvalid: boolean,\n  errors: HexCharErrorHandlers,\n) {\n  const initialPos = pos;\n  let n;\n  ({ n, pos } = readInt(\n    input,\n    pos,\n    lineStart,\n    curLine,\n    16,\n    len,\n    forceLen,\n    false,\n    errors,\n    /* bailOnError */ !throwOnInvalid,\n  ));\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n  return { code: n, pos };\n}\n\nexport type IntErrorHandlers = {\n  numericSeparatorInEscapeSequence(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  unexpectedNumericSeparator(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  // It can return \"true\" to indicate that the error was handled\n  // and the int parsing should continue.\n  invalidDigit(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n    radix: number,\n  ): boolean;\n};\n\nexport function readInt(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  radix: number,\n  len: number | undefined,\n  forceLen: boolean,\n  allowNumSeparator: boolean | \"bail\",\n  errors: IntErrorHandlers,\n  bailOnError: boolean,\n) {\n  const start = pos;\n  const forbiddenSiblings =\n    radix === 16\n      ? forbiddenNumericSeparatorSiblings.hex\n      : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling =\n    radix === 16\n      ? isAllowedNumericSeparatorSibling.hex\n      : radix === 10\n        ? isAllowedNumericSeparatorSibling.dec\n        : radix === 8\n          ? isAllowedNumericSeparatorSibling.oct\n          : isAllowedNumericSeparatorSibling.bin;\n\n  let invalid = false;\n  let total = 0;\n\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n\n    if (code === charCodes.underscore && allowNumSeparator !== \"bail\") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n\n      if (!allowNumSeparator) {\n        if (bailOnError) return { n: null, pos };\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (\n        Number.isNaN(next) ||\n        !isAllowedSibling(next) ||\n        forbiddenSiblings.has(prev) ||\n        forbiddenSiblings.has(next)\n      ) {\n        if (bailOnError) return { n: null, pos };\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n\n      // Ignore this _ character\n      ++pos;\n      continue;\n    }\n\n    if (code >= charCodes.lowercaseA) {\n      val = code - charCodes.lowercaseA + charCodes.lineFeed;\n    } else if (code >= charCodes.uppercaseA) {\n      val = code - charCodes.uppercaseA + charCodes.lineFeed;\n    } else if (charCodes.isDigit(code)) {\n      val = code - charCodes.digit0; // 0-9\n    } else {\n      val = Infinity;\n    }\n    if (val >= radix) {\n      // If we found a digit which is too big, errors.invalidDigit can return true to avoid\n      // breaking the loop (this is used for error recovery).\n      if (val <= 9 && bailOnError) {\n        return { n: null, pos };\n      } else if (\n        val <= 9 &&\n        errors.invalidDigit(pos, lineStart, curLine, radix)\n      ) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n    ++pos;\n    total = total * radix + val;\n  }\n  if (pos === start || (len != null && pos - start !== len) || invalid) {\n    return { n: null, pos };\n  }\n\n  return { n: total, pos };\n}\n\nexport type CodePointErrorHandlers = HexCharErrorHandlers & {\n  invalidCodePoint(pos: number, lineStart: number, curLine: number): void;\n};\n\nexport function readCodePoint(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  throwOnInvalid: boolean,\n  errors: CodePointErrorHandlers,\n) {\n  const ch = input.charCodeAt(pos);\n  let code;\n\n  if (ch === charCodes.leftCurlyBrace) {\n    ++pos;\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      input.indexOf(\"}\", pos) - pos,\n      true,\n      throwOnInvalid,\n      errors,\n    ));\n    ++pos;\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return { code: null, pos };\n      }\n    }\n  } else {\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      4,\n      false,\n      throwOnInvalid,\n      errors,\n    ));\n  }\n  return { code, pos };\n}\n","/*:: declare var invariant; */\n\nimport { OptionFlags, type Options } from \"../options.ts\";\nimport {\n  Position,\n  SourceLocation,\n  createPositionWithColumnOffset,\n} from \"../util/location.ts\";\nimport CommentsParser, { type CommentWhitespace } from \"../parser/comments.ts\";\nimport type * as N from \"../types.ts\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier.ts\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types.ts\";\nimport type { TokContext } from \"./context.ts\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error.ts\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n  skipWhiteSpaceInLine,\n} from \"../util/whitespace.ts\";\nimport State from \"./state.ts\";\nimport type { LookaheadState, DeferredStrictError } from \"./state.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { Node } from \"../types.ts\";\n\nimport {\n  readInt,\n  readCodePoint,\n  readStringContents,\n  type IntErrorHandlers,\n  type CodePointErrorHandlers,\n  type StringContentsErrorHandlers,\n} from \"@babel/helper-string-parser\";\n\nimport type { Plugin } from \"../typings.ts\";\n\nfunction buildPosition(pos: number, lineStart: number, curLine: number) {\n  return new Position(curLine, pos - lineStart, pos);\n}\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n  charCodes.lowercaseV,\n]);\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    const startIndex = state.startIndex || 0;\n    this.type = state.type;\n    this.value = state.value;\n    this.start = startIndex + state.start;\n    this.end = startIndex + state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default abstract class Tokenizer extends CommentsParser {\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.comments = [];\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.optionFlags & OptionFlags.Tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // @ts-expect-error For performance we use a simplified tokenizer state structure\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  /**\n   * Similar to nextToken, but it will stop at line break when it is seen before the next token\n   *\n   * @returns {number} position of the next token start or line break, whichever is seen first.\n   * @memberof Tokenizer\n   */\n  nextTokenInLineStart(): number {\n    return this.nextTokenInLineStartSince(this.state.pos);\n  }\n\n  nextTokenInLineStartSince(pos: number): number {\n    skipWhiteSpaceInLine.lastIndex = pos;\n    return skipWhiteSpaceInLine.test(this.input)\n      ? skipWhiteSpaceInLine.lastIndex\n      : pos;\n  }\n\n  /**\n   * Similar to lookaheadCharCode, but it will return the char code of line break if it is\n   * seen before the next token\n   *\n   * @returns {number} char code of the next token start or line break, whichever is seen first.\n   * @memberof Tokenizer\n   */\n  lookaheadInLineCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenInLineStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach(([toParseError, at]) =>\n        this.raise(toParseError, at),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related properties.\n  nextToken(): void {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  // Skips a block comment, whose end is marked by commentEnd.\n  // *-/ is used by the Flow plugin, when parsing block comments nested\n  // inside Flow comments.\n  skipBlockComment(commentEnd: \"*/\" | \"*-/\"): N.CommentBlock | undefined {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(commentEnd, start + 2);\n    if (end === -1) {\n      // We have to call this again here because startLoc may not be set...\n      // This seems to be for performance reasons:\n      // https://github.com/babel/babel/commit/acf2a10899f696a8aaf34df78bf9725b5ea7f2da\n      throw this.raise(Errors.UnterminatedComment, this.state.curPosition());\n    }\n\n    this.state.pos = end + commentEnd.length;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment: N.CommentBlock = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start: this.sourceToOffsetPos(start),\n      end: this.sourceToOffsetPos(end + commentEnd.length),\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.optionFlags & OptionFlags.Tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | undefined {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment: N.CommentLine = {\n      type: \"CommentLine\",\n      value,\n      start: this.sourceToOffsetPos(start),\n      end: this.sourceToOffsetPos(end),\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.optionFlags & OptionFlags.Tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments: N.Comment[] =\n      this.optionFlags & OptionFlags.AttachComment ? [] : null;\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment(\"*/\");\n              if (comment !== undefined) {\n                this.addComment(comment);\n                comments?.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                comments?.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (\n            ch === charCodes.dash &&\n            !this.inModule &&\n            this.optionFlags & OptionFlags.AnnexB\n          ) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                comments?.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (\n            ch === charCodes.lessThan &&\n            !this.inModule &&\n            this.optionFlags & OptionFlags.AnnexB\n          ) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                comments?.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments?.length > 0) {\n      const end = this.state.pos;\n      const commentWhitespace: CommentWhitespace = {\n        start: this.sourceToOffsetPos(spaceStart),\n        end: this.sourceToOffsetPos(end),\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(commentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val?: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // @ts-expect-error the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(\n        Errors.UnexpectedDigitAfterHash,\n        this.state.curPosition(),\n      );\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (\n        !process.env.BABEL_8_BREAKING &&\n        this.getPluginOption(\"recordAndTuple\", \"syntaxType\") === \"bar\"\n      ) {\n        throw this.raise(\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n          this.state.curPosition(),\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        !process.env.BABEL_8_BREAKING &&\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            Errors.RecordExpressionBarIncorrectEndSyntaxType,\n            this.state.curPosition(),\n          );\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        !process.env.BABEL_8_BREAKING &&\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            Errors.TupleExpressionBarIncorrectEndSyntaxType,\n            this.state.curPosition(),\n          );\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^^'\n    else if (\n      next === charCodes.caret &&\n      // If the ^^ token is not enabled, we don't throw but parse two single ^s\n      // because it could be a ^ hack token followed by a ^ binary operator.\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"^^\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleCaret, 2);\n\n      // `^^^` is forbidden and must be separated by a space.\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === charCodes.caret) {\n        this.unexpected();\n      }\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_atSign(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '@@'\n    if (\n      next === charCodes.atSign &&\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"@@\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleAt, 2);\n    }\n    // '@'\n    else {\n      this.finishOp(tt.at, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShiftL, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShiftR, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          !process.env.BABEL_8_BREAKING &&\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n              this.state.curPosition(),\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          !process.env.BABEL_8_BREAKING &&\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n              this.state.curPosition(),\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        this.readTemplateToken();\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        this.readToken_atSign();\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(\n      Errors.InvalidOrUnexpectedToken,\n      this.state.curPosition(),\n      {\n        unexpected: String.fromCodePoint(code),\n      },\n    );\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(\n          Errors.UnterminatedRegExp,\n          createPositionWithColumnOffset(startLoc, 1),\n        );\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(\n          Errors.UnterminatedRegExp,\n          createPositionWithColumnOffset(startLoc, 1),\n        );\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    const nextPos = () =>\n      // (pos + 1) + 1 - start\n      createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      // @ts-expect-error VALID_REGEX_FLAGS.has should accept expanded type: number\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === charCodes.lowercaseV) {\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());\n          }\n        } else if (cp === charCodes.lowercaseU) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, nextPos());\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(Errors.MalformedRegExpFlags, nextPos());\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen: boolean = false,\n    allowNumSeparator: boolean | \"bail\" = true,\n  ): number | null {\n    const { n, pos } = readInt(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      radix,\n      len,\n      forceLen,\n      allowNumSeparator,\n      this.errorHandlers_readInt,\n      /* bailOnError */ false,\n    );\n    this.state.pos = pos;\n    return n;\n  }\n\n  readRadixNumber(radix: number): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(\n        Errors.InvalidDigit,\n        // Numeric literals can't have newlines, so this is safe to do.\n        createPositionWithColumnOffset(startLoc, 2),\n        {\n          radix,\n        },\n      );\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(Errors.InvalidDecimal, startLoc);\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, this.state.curPosition());\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, this.state.curPosition());\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, startLoc);\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          // Numeric literals can't have newlines, so this is safe to do.\n          this.raise(\n            Errors.ZeroDigitNumericSeparator,\n            createPositionWithColumnOffset(startLoc, underscorePos),\n          );\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, startLoc);\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, startLoc);\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (!process.env.BABEL_8_BREAKING && next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, startLoc);\n      }\n      ++this.state.pos;\n      // eslint-disable-next-line no-var\n      var isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, this.state.curPosition());\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (!process.env.BABEL_8_BREAKING && isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const { code, pos } = readCodePoint(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      throwOnInvalid,\n      this.errorHandlers_readCodePoint,\n    );\n    this.state.pos = pos;\n    return code;\n  }\n\n  readString(quote: number): void {\n    const { str, pos, curLine, lineStart } = readStringContents(\n      quote === charCodes.quotationMark ? \"double\" : \"single\",\n      this.input,\n      this.state.pos + 1, // skip the quote\n      this.state.lineStart,\n      this.state.curLine,\n      this.errorHandlers_readStringContents_string,\n    );\n    this.state.pos = pos + 1; // skip the quote\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n    this.finishToken(tt.string, str);\n  }\n\n  // Reads template continuation `}...`\n  readTemplateContinuation(): void {\n    if (!this.match(tt.braceR)) {\n      this.unexpected(null, tt.braceR);\n    }\n    // rewind pos to `}`\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  // Reads template string tokens.\n  readTemplateToken(): void {\n    const opening = this.input[this.state.pos];\n    const { str, firstInvalidLoc, pos, curLine, lineStart } =\n      readStringContents(\n        \"template\",\n        this.input,\n        this.state.pos + 1, // skip '`' or `}`\n        this.state.lineStart,\n        this.state.curLine,\n        this.errorHandlers_readStringContents_template,\n      );\n    this.state.pos = pos + 1; // skip '`' or `$`\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n\n    if (firstInvalidLoc) {\n      this.state.firstInvalidTemplateEscapePos = new Position(\n        firstInvalidLoc.curLine,\n        firstInvalidLoc.pos - firstInvalidLoc.lineStart,\n        this.sourceToOffsetPos(firstInvalidLoc.pos),\n      );\n    }\n\n    if (this.input.codePointAt(pos) === charCodes.graveAccent) {\n      this.finishToken(\n        tt.templateTail,\n        firstInvalidLoc ? null : opening + str + \"`\",\n      );\n    } else {\n      this.state.pos++; // skip '{'\n      this.finishToken(\n        tt.templateNonTail,\n        firstInvalidLoc ? null : opening + str + \"${\",\n      );\n    }\n  }\n\n  recordStrictModeErrors(toParseError: DeferredStrictError, at: Position) {\n    const index = at.index;\n\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, at);\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode?: number): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(Errors.MissingUnicodeEscape, this.state.curPosition());\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, escStart);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode?: number): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, this.state.startLoc, {\n        reservedWord: tokenLabelName(type),\n      });\n    }\n  }\n\n  /**\n   * Raise a `ParseError` given the appropriate properties. If passed a\n   * `Position` for the `at` property, raises the `ParseError` at that location.\n   * Otherwise, if passed a `Node`, raises the `ParseError` at the start\n   * location of that `Node`.\n   *\n   * If `errorRecovery` is `true`, the error is pushed to the errors array and\n   * returned. If `errorRecovery` is `false`, the error is instead thrown.\n   *\n   * The return type is marked as `never` for simplicity, as error recovery\n   * will create types in an invalid AST shape.\n   */\n  raise<ErrorDetails = object>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    at: Position | Undone<Node>,\n    details: ErrorDetails = {} as ErrorDetails,\n  ): ParseError<ErrorDetails> {\n    const loc = at instanceof Position ? at : at.loc.start;\n    const error = toParseError(loc, details);\n\n    if (!(this.optionFlags & OptionFlags.ErrorRecovery)) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n\n    return error;\n  }\n\n  /**\n   * If `errorRecovery` is `false`, this method behaves identically to `raise`.\n   * If `errorRecovery` is `true`, this method will first see if there is\n   * already an error stored at the same `Position`, and replaces it with the\n   * one generated here.\n   */\n  raiseOverwrite<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    at: Position | Undone<Node>,\n    details: ErrorDetails = {} as ErrorDetails,\n  ): ParseError<ErrorDetails> | never {\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n      if (error.loc.index === pos) {\n        return (errors[i] = toParseError(loc, details));\n      }\n      if (error.loc.index < pos) break;\n    }\n\n    return this.raise(toParseError, at, details);\n  }\n\n  // updateContext is used by the jsx plugin\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateContext(prevType: TokenType): void {}\n\n  // Raise an unexpected token error. Can take the expected token type.\n  unexpected(loc?: Position | null, type?: TokenType): void {\n    throw this.raise(\n      Errors.UnexpectedToken,\n      loc != null ? loc : this.state.startLoc,\n      {\n        expected: type ? tokenLabelName(type) : null,\n      },\n    );\n  }\n\n  expectPlugin(pluginName: Plugin, loc?: Position): true {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n\n    throw this.raise(\n      Errors.MissingPlugin,\n      loc != null ? loc : this.state.startLoc,\n      {\n        missingPlugin: [pluginName],\n      },\n    );\n  }\n\n  expectOnePlugin(pluginNames: Plugin[]): void {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, this.state.startLoc, {\n        missingPlugin: pluginNames,\n      });\n    }\n  }\n\n  errorBuilder(error: ParseErrorConstructor<object>) {\n    return (pos: number, lineStart: number, curLine: number) => {\n      this.raise(error, buildPosition(pos, lineStart, curLine));\n    };\n  }\n\n  errorHandlers_readInt: IntErrorHandlers = {\n    invalidDigit: (pos, lineStart, curLine, radix) => {\n      if (!(this.optionFlags & OptionFlags.ErrorRecovery)) return false;\n\n      this.raise(Errors.InvalidDigit, buildPosition(pos, lineStart, curLine), {\n        radix,\n      });\n      // Continue parsing the number as if there was no invalid digit.\n      return true;\n    },\n    numericSeparatorInEscapeSequence: this.errorBuilder(\n      Errors.NumericSeparatorInEscapeSequence,\n    ),\n    unexpectedNumericSeparator: this.errorBuilder(\n      Errors.UnexpectedNumericSeparator,\n    ),\n  };\n\n  errorHandlers_readCodePoint: CodePointErrorHandlers = {\n    ...this.errorHandlers_readInt,\n    invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),\n    invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint),\n  };\n\n  errorHandlers_readStringContents_string: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: (pos, lineStart, curLine) => {\n      this.recordStrictModeErrors(\n        Errors.StrictNumericEscape,\n        buildPosition(pos, lineStart, curLine),\n      );\n    },\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(\n        Errors.UnterminatedString, // Report the error at the string quote\n        buildPosition(pos - 1, lineStart, curLine),\n      );\n    },\n  };\n\n  errorHandlers_readStringContents_template: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(\n        Errors.UnterminatedTemplate,\n        buildPosition(pos, lineStart, curLine),\n      );\n    },\n  };\n}\n","import { ClassElementType } from \"./scopeflags.ts\";\nimport type { Position } from \"./location.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementType> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, Position> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ClassScope> = [];\n  undefinedPrivateNames: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {\n          identifierName: name,\n        });\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementType,\n    loc: Position,\n  ) {\n    const { privateNames, loneAccessors, undefinedPrivateNames } =\n      this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & ClassElementType.KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & ClassElementType.FLAG_STATIC;\n        const newStatic = elementType & ClassElementType.FLAG_STATIC;\n\n        const oldKind = accessor & ClassElementType.KIND_ACCESSOR;\n        const newKind = elementType & ClassElementType.KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, loc, {\n        identifierName: name,\n      });\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, loc: Position) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      // top-level\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {\n        identifierName: name,\n      });\n    }\n  }\n}\n","import { Errors, type ParseErrorConstructor } from \"../parse-error.ts\";\nimport type { Position } from \"./location.ts\";\nimport type { Node } from \"../types.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\n\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n  e.g. we don't know if `async({ x })` is a call expression or an async arrow\n  function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser-errors/standard) will be recorded in\nsome expression scopes and thrown later when we know what the ambiguous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst enum ExpressionScopeType {\n  kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3,\n}\n\nclass ExpressionScope {\n  declare type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = ExpressionScopeType.kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration(): this is ArrowHeadParsingScope {\n    return (\n      this.type === ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration ||\n      this.type === ExpressionScopeType.kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === ExpressionScopeType.kParameterDeclaration;\n  }\n}\n\ntype ArrowHeadParsingParameterInitializerError =\n  | typeof Errors.AwaitExpressionFormalParameter\n  | typeof Errors.YieldInParameter;\ntype ArrowHeadParsingDeclarationError =\n  | ArrowHeadParsingParameterInitializerError\n  | typeof Errors.InvalidParenthesizedAssignment\n  | typeof Errors.AwaitBindingIdentifier;\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  declarationErrors: Map<number, [ParseErrorConstructor<object>, Position]> =\n    new Map();\n  constructor(\n    type:\n      | ExpressionScopeType.kMaybeArrowParameterDeclaration\n      | ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration,\n  ) {\n    super(type);\n  }\n  recordDeclarationError(\n    ParsingErrorClass: ParseErrorConstructor<object>,\n    at: Position,\n  ) {\n    const index = at.index;\n\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n  clearDeclarationError(index: number) {\n    this.declarationErrors.delete(index);\n  }\n  iterateErrors(\n    iterator: (a: [ArrowHeadParsingDeclarationError, Position]) => void,\n  ) {\n    this.declarationErrors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   */\n  recordParameterInitializerError(\n    toParseError: ArrowHeadParsingParameterInitializerError,\n    node: Node,\n  ): void {\n    const origin = node.loc.start;\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        /*:: invariant(scope.type == ExpressionScopeType.kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    this.parser.raise(toParseError, origin);\n  }\n\n  /**\n   * Record errors that must be thrown if the current pattern ends up being an arrow\n   * function parameter. This is used to record parenthesized identifiers, and to record\n   * \"a as T\" and \"<T> a\" type assertions when parsing typescript.\n   *\n   * A parenthesized identifier (or type assertion) in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   */\n  recordArrowParameterBindingError(\n    error: ParseErrorConstructor<object>,\n    node: Node,\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    const origin = node.loc.start;\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(error, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(error, origin);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   */\n  recordAsyncArrowParametersError(at: Position): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (\n        scope.type === ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration\n      ) {\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, at);\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors(([toParseError, loc]) => {\n      this.parser.raise(toParseError, loc);\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(ExpressionScopeType.kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(\n    ExpressionScopeType.kMaybeArrowParameterDeclaration,\n  );\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(\n    ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration,\n  );\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n","// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport const enum ParamKind {\n  // Initial Parameter flags\n  PARAM = 0b0000,\n  // track [Yield] production parameter\n  PARAM_YIELD = 0b0001,\n  // track [Await] production parameter\n  PARAM_AWAIT = 0b0010,\n  // track [Return] production parameter\n  PARAM_RETURN = 0b0100,\n  // track [In] production parameter\n  PARAM_IN = 0b1000,\n}\n\n// todo(flow->ts) - check if more granular type can be used,\n//  type below is not good because things like PARAM_AWAIT|PARAM_YIELD are not included\n// export type ParamKind =\n//   | typeof PARAM\n//   | typeof PARAM_AWAIT\n//   | typeof PARAM_IN\n//   | typeof PARAM_RETURN\n//   | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (\n    (isAsync ? ParamKind.PARAM_AWAIT : 0) |\n    (isGenerator ? ParamKind.PARAM_YIELD : 0)\n  );\n}\n","import type { Position } from \"../util/location.ts\";\nimport {\n  tokenIsLiteralPropertyName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types.ts\";\nimport Tokenizer from \"../tokenizer/index.ts\";\nimport type State from \"../tokenizer/state.ts\";\nimport type {\n  EstreePropertyDefinition,\n  Node,\n  ObjectMethod,\n  ObjectProperty,\n  PrivateName,\n} from \"../types.d.ts\";\nimport { hasNewLine } from \"../util/whitespace.ts\";\nimport { isIdentifierChar } from \"../util/identifier.ts\";\nimport ClassScopeHandler from \"../util/class-scope.ts\";\nimport ExpressionScopeHandler from \"../util/expression-scope.ts\";\nimport { ScopeFlag } from \"../util/scopeflags.ts\";\nimport ProductionParameterHandler, {\n  ParamKind,\n} from \"../util/production-parameter.ts\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error.ts\";\nimport type Parser from \"./index.ts\";\n\nimport type ScopeHandler from \"../util/scope.ts\";\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node;\n  error: Error;\n  thrown: Thrown;\n  aborted: Aborted;\n  failState: FailState;\n};\n\n// ## Parser utilities\n\nexport default abstract class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  abstract getScopeHandler(): new (...args: any) => ScopeHandler;\n\n  addExtra(\n    node: Partial<Node>,\n    key: string,\n    value: any,\n    enumerable: boolean = true,\n  ): void {\n    if (!node) return;\n\n    let { extra } = node;\n    if (extra == null) {\n      extra = {};\n      node.extra = extra;\n    }\n\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, { enumerable, value });\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(\n    token: TokenType,\n    toParseError?: ParseErrorConstructor<any>,\n  ): void {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, this.state.startLoc);\n      }\n      this.unexpected(null, token);\n    }\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return hasNewLine(\n      this.input,\n      this.offsetToSourcePos(this.state.lastTokEndLoc.index),\n      this.state.start,\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    return hasNewLine(this.input, this.state.end, this.nextTokenStart());\n  }\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(Errors.MissingSemicolon, this.state.lastTokEndLoc);\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, loc?: Position | null): void {\n    if (!this.eat(type)) {\n      this.unexpected(loc, type);\n    }\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T extends Node | ReadonlyArray<Node>>(\n    fn: (abort: (node?: T) => never) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParseError<any>, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: {\n      node: T | null;\n    } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        // eslint-disable-next-line @typescript-eslint/only-throw-error\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        // @ts-expect-error casting general syntax error to parse error\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ExpressionErrors | undefined | null,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc,\n    } = refExpressionErrors;\n\n    const hasErrors =\n      !!shorthandAssignLoc ||\n      !!doubleProtoLoc ||\n      !!optionalParametersLoc ||\n      !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, doubleProtoLoc);\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /**\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): node is PrivateName {\n    return node.type === \"PrivateName\";\n  }\n\n  /**\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: PrivateName): string {\n    return node.id.name;\n  }\n\n  /**\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isObjectProperty(\n    node: Node,\n  ): node is ObjectProperty | EstreePropertyDefinition {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): node is ObjectMethod {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    this: Parser,\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = ParamKind.PARAM;\n    if (this.inModule) {\n      paramFlags |= ParamKind.PARAM_AWAIT;\n    }\n    this.scope.enter(ScopeFlag.PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors: ExpressionErrors) {\n    const { privateKeyLoc } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to -1\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssignLoc**: track initializer `=` position\n * - **doubleProtoLoc**: track the duplicate `__proto__` key position\n * - **privateKey**: track private key `#p` position\n * - **optionalParametersLoc**: track the optional parameter (`?`).\n * It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssignLoc: Position | undefined | null = null;\n  doubleProtoLoc: Position | undefined | null = null;\n  privateKeyLoc: Position | undefined | null = null;\n  optionalParametersLoc: Position | undefined | null = null;\n}\n","import UtilParser from \"./util.ts\";\nimport { SourceLocation, type Position } from \"../util/location.ts\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types.ts\";\nimport { OptionFlags } from \"../options.ts\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: UtilParser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.optionFlags & OptionFlags.Ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: {\n    [key: string]: any;\n  };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // @ts-expect-error __clone is not defined in Node prototype\n  NodePrototype.__clone = function (): Node {\n    const newNode = new Node(undefined, this.start, this.loc.start);\n    const keys = Object.keys(this) as (keyof Node)[];\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        // @ts-expect-error cloning this to newNode\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node: any): any {\n  return cloneIdentifier(node);\n}\n\nexport function cloneIdentifier(node: any): any {\n  // We don't need to clone `typeAnnotations` and `optional`: because\n  // cloneIdentifier is only used in object shorthand and named import/export.\n  // Neither of them allow type annotations after the identifier or optional identifier\n  const { type, start, end, loc, range, extra, name } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\n\nexport function cloneStringLiteral(node: any): any {\n  const { type, start, end, loc, range, extra } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    // estree set node.raw instead of node.extra\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\n\nexport type Undone<T extends NodeType> = Omit<T, \"type\">;\n\nexport abstract class NodeUtils extends UtilParser {\n  startNode<T extends NodeType = never>(): Undone<T> {\n    const loc = this.state.startLoc;\n    return new Node(this, loc.index, loc) as unknown as Undone<T>;\n  }\n\n  startNodeAt<T extends NodeType = never>(loc: Position): Undone<T> {\n    return new Node(this, loc.index, loc) as unknown as Undone<T>;\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T extends NodeType = never>(\n    type: Undone<NodeType>,\n  ): Undone<T> {\n    return this.startNodeAt(type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T extends NodeType>(node: Undone<T>, type: T[\"type\"]): T {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T extends NodeType>(\n    node: Omit<T, \"type\">,\n    type: T[\"type\"],\n    endLoc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    (node as T).type = type;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.optionFlags & OptionFlags.Ranges) node.range[1] = endLoc.index;\n    if (this.optionFlags & OptionFlags.AttachComment) {\n      this.processComment(node as T);\n    }\n    return node as T;\n  }\n\n  resetStartLocation(node: NodeBase, startLoc: Position): void {\n    node.start = startLoc.index;\n    node.loc.start = startLoc;\n    if (this.optionFlags & OptionFlags.Ranges) node.range[0] = startLoc.index;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    endLoc: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.optionFlags & OptionFlags.Ranges) node.range[1] = endLoc.index;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.loc.start);\n  }\n}\n","/*:: declare var invariant; */\n\nimport type Parser from \"../../parser/index.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types.ts\";\nimport type * as N from \"../../types.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier.ts\";\nimport FlowScopeHandler from \"./scope.ts\";\nimport { BindingFlag, ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport type { ParseStatementFlag } from \"../../parser/statement.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node.ts\";\nimport type { ClassWithMixin, IJSXParserMixin } from \"../jsx/index.ts\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = ParseErrorEnum`flow`({\n  AmbiguousConditionalArrow:\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind:\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  // TODO: When we get proper string enums in typescript make this ReservedType.\n  // Not really worth it to do the whole $Values dance with reservedTypes set.\n  AssignReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Cannot overwrite reserved type ${reservedType}.`,\n  DeclareClassElement:\n    \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer:\n    \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports:\n    \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`,\n  EnumDuplicateMemberName: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`,\n  EnumInconsistentMemberValues: ({ enumName }: { enumName: string }) =>\n    `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,\n  EnumInvalidExplicitType: ({\n    invalidEnumType,\n    enumName,\n  }: {\n    invalidEnumType: string;\n    enumName: string;\n  }) =>\n    `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidExplicitTypeUnknownSupplied: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n\n  // TODO: When moving to typescript, we should either have each of the\n  // following errors only accept the specific strings they want:\n  //\n  // ...PrimaryType: explicitType: \"string\" | \"number\" | \"boolean\"\n  // ...SymbolType: explicitType: \"symbol\"\n  // ...UnknownType: explicitType: null\n  //\n  // Or, alternatively, merge these three errors together into one\n  // `EnumInvalidMemberInitializer` error that can accept `EnumExplicitType`\n  // without alteration, and then just have its message change based on the\n  // explicitType.\n  EnumInvalidMemberInitializerPrimaryType: ({\n    enumName,\n    memberName,\n    explicitType,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`,\n  EnumInvalidMemberInitializerSymbolType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberInitializerUnknownType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberName: ({\n    enumName,\n    memberName,\n    suggestion,\n  }: {\n    enumName: string;\n    memberName: string;\n    suggestion: string;\n  }) =>\n    `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`,\n  EnumNumberMemberNotInitialized: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n  }) =>\n    `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`,\n  EnumStringMemberInconsistentlyInitialized: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`,\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` or `typeof` keyword.\",\n  ImportTypeShorthandOnlyInPureImport:\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact:\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject:\n    \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule:\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault:\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule:\n    \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: {\n    message:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    // For consistency in TypeScript and Flow error codes\n    ...(!process.env.BABEL_8_BREAKING\n      ? { reasonCode: \"OptionalBindingPattern\" }\n      : {}),\n  },\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired:\n    \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor:\n    \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst:\n    \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern:\n    \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject:\n    \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Unexpected reserved type ${reservedType}.`,\n  UnexpectedReservedUnderscore:\n    \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks:\n    \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType:\n    \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand:\n    'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter:\n    \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction:\n    \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: ({\n    unsupportedExportKind,\n    suggestion,\n  }: {\n    unsupportedExportKind: string;\n    suggestion: string;\n  }) =>\n    `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`,\n  UnsupportedStatementInDeclareModule:\n    \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\",\n});\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(\n  node: Undone<N.ImportSpecifier | N.ImportDeclaration>,\n): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (c: T, b: number, a: T[]) => boolean | undefined | null,\n): [T[], T[]] {\n  const list1: T[] = [];\n  const list2: T[] = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\n\ntype EnumContext = {\n  enumName: string;\n  explicitType: EnumExplicitType;\n  memberName: string;\n};\n\ntype EnumMemberInit =\n  | {\n      type: \"number\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"string\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"boolean\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"invalid\";\n      loc: Position;\n    }\n  | {\n      type: \"none\";\n      loc: Position;\n    };\n\nexport default (superClass: ClassWithMixin<typeof Parser, IJSXParserMixin>) =>\n  class FlowParserMixin extends superClass implements Parser {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): new (...args: any) => FlowScopeHandler {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowPredicate {\n      const node = this.startNode<N.FlowPredicate>();\n      const moduloLoc = this.state.startLoc;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStartLoc.index > moduloLoc.index + 1) {\n        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, moduloLoc);\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = super.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [\n      N.FlowType | undefined | null,\n      N.FlowPredicate | undefined | null,\n    ] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(\n      node: Undone<N.FlowDeclareClass>,\n    ): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: Undone<N.FlowDeclareFunction>,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode<N.FlowFunctionTypeAnnotation>();\n      const typeContainer = this.startNode<N.TypeAnnotation>();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [typeNode.returnType, node.predicate] =\n        this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_FLOW_DECLARE_FN,\n        node.id.loc.start,\n      );\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: Undone<N.FlowDeclare>,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(\n              FlowErrors.NestedDeclareModule,\n              this.state.lastTokStartLoc,\n            );\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: Undone<N.FlowDeclareVariable>,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_VAR,\n        node.id.loc.start,\n      );\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(\n      node: Undone<N.FlowDeclareModule>,\n    ): N.FlowDeclareModule {\n      this.scope.enter(ScopeFlag.OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = super.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode<N.BlockStatement>());\n      // @ts-expect-error refine typings\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode<N.ImportDeclaration>();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(\n              FlowErrors.InvalidNonTypeImportInDeclareModule,\n              this.state.lastTokStartLoc,\n            );\n          }\n          super.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n          // @ts-expect-error refine typings\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind: \"CommonJS\" | \"ES\" | null = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(FlowErrors.DuplicateDeclareModuleExports, bodyElement);\n          }\n          if (kind === \"ES\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: Undone<N.FlowDeclareExportDeclaration>,\n      insideModule?: boolean | null,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value as\n            | \"const\"\n            | \"let\"\n            | \"type\"\n            | \"interface\";\n          throw this.raise(\n            FlowErrors.UnsupportedDeclareExportKind,\n            this.state.startLoc,\n            {\n              unsupportedExportKind: label,\n              suggestion: exportSuggestions[label],\n            },\n          );\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(\n            node as Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n            /* decorators */ null,\n          );\n          if (node.type === \"ExportNamedDeclaration\") {\n            node.type = \"ExportDeclaration\";\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          node.type = \"Declare\" + node.type;\n\n          return node as N.FlowDeclareExportDeclaration;\n        }\n      }\n\n      this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: Undone<N.FlowDeclareModuleExports>,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: Undone<N.FlowDeclareTypeAlias>,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      const finished = this.flowParseTypeAlias(\n        node,\n      ) as unknown as N.FlowDeclareTypeAlias;\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareTypeAlias\";\n      return finished;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: Undone<N.FlowDeclareOpaqueType>,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      const finished = this.flowParseOpaqueType(\n        node,\n        true,\n      ) as unknown as N.FlowDeclareOpaqueType;\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareOpaqueType\";\n      return finished;\n    }\n\n    flowParseDeclareInterface(\n      node: Undone<N.FlowDeclareInterface>,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node, /* isClass */ false);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(node: Undone<N.FlowDeclare>, isClass: boolean): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BindingFlag.TYPE_FUNCTION : BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (isClass) {\n        node.implements = [];\n        node.mixins = [];\n\n        if (this.eatContextual(tt._mixins)) {\n          do {\n            node.mixins.push(this.flowParseInterfaceExtends());\n          } while (this.eat(tt.comma));\n        }\n\n        if (this.eatContextual(tt._implements)) {\n          do {\n            node.implements.push(this.flowParseInterfaceExtends());\n          } while (this.eat(tt.comma));\n        }\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode<N.FlowInterfaceExtends>();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: Undone<N.FlowInterface>): N.FlowInterface {\n      this.flowParseInterfaceish(node, /* isClass */ false);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(\n          FlowErrors.UnexpectedReservedUnderscore,\n          this.state.startLoc,\n        );\n      }\n    }\n\n    checkReservedType(word: string, startLoc: Position, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        startLoc,\n        {\n          reservedType: word,\n        },\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(\n        this.state.value,\n        this.state.startLoc,\n        declaration,\n      );\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: Undone<N.FlowTypeAlias>): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: Undone<N.FlowOpaqueType>,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault: boolean = false): N.TypeParameter {\n      const nodeStartLoc = this.state.startLoc;\n\n      const node = this.startNode<N.TypeParameter>();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      // @ts-expect-error migrate to Babel types\n      node.variance = variance;\n      // @ts-expect-error migrate to Babel types\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        // @ts-expect-error migrate to Babel types\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(FlowErrors.MissingTypeParamDefault, nodeStartLoc);\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode<N.TypeParameterDeclaration>();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    // Parse in top level normal context if we are in a JSX context\n    flowInTopLevelContext<T>(cb: () => T): T {\n      if (this.curContext() !== tc.brace) {\n        const oldContext = this.state.context;\n        this.state.context = [oldContext[0]];\n        try {\n          return cb();\n        } finally {\n          this.state.context = oldContext;\n        }\n      } else {\n        return cb();\n      }\n    }\n\n    // Used when parsing type arguments from ES or JSX productions, where the first token\n    // has been created without state.inType. Thus we need to re-scan the lt token.\n    flowParseTypeParameterInstantiationInExpression():\n      | N.TypeParameterInstantiation\n      | undefined {\n      if (this.reScan_lt() !== tt.lt) return;\n      return this.flowParseTypeParameterInstantiation();\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n\n      this.state.inType = true;\n      node.params = [];\n      this.flowInTopLevelContext(() => {\n        this.expect(tt.lt);\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = false;\n        while (!this.match(tt.gt)) {\n          node.params.push(this.flowParseType());\n          if (!this.match(tt.gt)) {\n            this.expect(tt.comma);\n          }\n        }\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      });\n\n      this.state.inType = oldInType;\n      if (!this.state.inType && this.curContext() === tc.brace) {\n        // rescan `>` when we are no longer in type context and JSX parsing context\n        // since it was tokenized when `inType` is `true`.\n        this.reScan_lt_gt();\n      }\n      this.expect(tt.gt);\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      if (this.reScan_lt() !== tt.lt) return;\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode<N.FlowInterfaceType>();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? super.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: Undone<N.FlowObjectTypeIndexer>,\n      isStatic: boolean,\n      variance?: N.FlowVariance | null,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: Undone<N.FlowObjectTypeInternalSlot>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: Undone<N.FlowFunctionTypeAnnotation>,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: Undone<N.FlowObjectTypeCallProperty>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean;\n      allowExact: boolean;\n      allowSpread: boolean;\n      allowProto: boolean;\n      allowInexact: boolean;\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode<N.FlowObjectTypeAnnotation>();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStartLoc: Position | undefined | null = null;\n        let inexactStartLoc: Position | undefined | null = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStartLoc = this.state.startLoc;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStartLoc,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStartLoc = this.state.lastTokStartLoc;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStartLoc &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(\n            FlowErrors.UnexpectedExplicitInexactInObject,\n            inexactStartLoc,\n          );\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: Undone<N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty>,\n      isStatic: boolean,\n      protoStartLoc: Position | undefined | null,\n      variance: N.FlowVariance | undefined | null,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(\n              FlowErrors.InexactInsideNonObject,\n              this.state.lastTokStartLoc,\n            );\n          } else if (!allowInexact) {\n            this.raise(\n              FlowErrors.InexactInsideExact,\n              this.state.lastTokStartLoc,\n            );\n          }\n          if (variance) {\n            this.raise(FlowErrors.InexactVariance, variance);\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(\n            FlowErrors.UnexpectedSpreadType,\n            this.state.lastTokStartLoc,\n          );\n        }\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.SpreadVariance, variance);\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStartLoc != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(\n              FlowErrors.ThisParamBannedInConstructor,\n              node.value.this,\n            );\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: Undone<\n        N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty\n      >,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n          property.value.this,\n        );\n      }\n\n      if (length !== paramCount) {\n        this.raise(\n          property.kind === \"get\"\n            ? Errors.BadGetterArity\n            : Errors.BadSetterArity,\n          property,\n        );\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(Errors.BadSetterRestParameter, property);\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier | N.Identifier {\n      startLoc ??= this.state.startLoc;\n      let node: N.Identifier | N.FlowQualifiedTypeIdentifier =\n        id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt<N.FlowQualifiedTypeIdentifier>(startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt<N.FlowGenericTypeAnnotation>(startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode<N.FlowTypeofTypeAnnotation>();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode<N.FlowTupleTypeAnnotation>();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode<N.FlowFunctionTypeParam>();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, node);\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, node);\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt<N.FlowFunctionTypeParam>(type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[];\n      rest: N.FlowFunctionTypeParam | undefined | null;\n      _this: N.FlowFunctionTypeParam | undefined | null;\n    } {\n      let rest: N.FlowFunctionTypeParam | undefined | null = null;\n      let _this: N.FlowFunctionTypeParam | undefined | null = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startLoc: Position,\n      node: Undone<N.FlowType>,\n      id: N.Identifier,\n    ): N.FlowType {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowType {\n      const startLoc = this.state.startLoc;\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt: {\n          const node = this.startNode<N.FlowFunctionTypeAnnotation>();\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        case tt.parenL: {\n          const node = this.startNode<N.FlowFunctionTypeAnnotation>();\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode(\n            node as Undone<N.BooleanLiteralTypeAnnotation>,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(\n              FlowErrors.UnexpectedSubtractionOperand,\n              this.state.startLoc,\n            );\n          }\n          this.unexpected();\n          return;\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node as Undone<N.Identifier>, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowType {\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt<N.FlowOtherTypeAnnotation>(startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowType {\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowType {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt<N.FlowFunctionTypeAnnotation>(\n          param.loc.start,\n        );\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowType {\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowType {\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowType {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.TypeAnnotation {\n      const node = this.startNode<N.TypeAnnotation>();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.TypeCastExpression): N.Expression {\n      (node.expression as N.Identifier).typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    flowParseVariance(): N.FlowVariance | undefined | null {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode<N.FlowVariance>();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        return this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n        return;\n      }\n\n      super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode<N.TypeAnnotation>();\n\n        [\n          typeNode.typeAnnotation,\n          // @ts-expect-error predicate may not exist\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatementLike(flags: ParseStatementFlag): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode<N.FlowInterface>();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatementLike(flags);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            // @ts-expect-error: refine typings\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (type === tt._enum || tokenIsFlowInterfaceOrTypeOrOpaque(type)) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (type === tt._enum || tokenIsFlowInterfaceOrTypeOrOpaque(type)) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression() {\n      if (this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt<N.ConditionalExpression>(startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(FlowErrors.AmbiguousConditionalArrow, state.startLoc);\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression;\n      failed: boolean;\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (\n          node.type === \"ArrowFunctionExpression\" &&\n          node.body.type !== \"BlockStatement\"\n        ) {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        node.params as any as N.Expression[],\n        node.extra?.trailingCommaLoc,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(ScopeFlag.FUNCTION | ScopeFlag.ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(\n      node: Undone<N.Node>,\n      parse: () => T,\n    ): T {\n      let result: T;\n      if (\n        this.state.noArrowParamsConversionAt.includes(\n          this.offsetToSourcePos(node.start),\n        )\n      ) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem<T extends N.Expression | N.RestElement | N.SpreadElement>(\n      node: T,\n      startLoc: Position,\n    ): T | N.TypeCastExpression | N.TsTypeCastExpression {\n      const newNode = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        (newNode as N.Identifier).optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt<N.TypeCastExpression>(startLoc);\n        typeCastNode.expression = newNode as N.Expression;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return newNode;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          super.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          // @ts-expect-error: refine typings\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        // @ts-expect-error: refine typings\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseInterface(declarationNode);\n      } else if (this.isContextual(tt._enum)) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(\n      node: Undone<N.Node>,\n    ): node is Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration> {\n      if (super.eatExportStar(node)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        (\n          node as Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>\n        ).exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(\n      node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n    ): node is Undone<N.ExportNamedDeclaration> {\n      const { startLoc } = this.state;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(startLoc);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n    ) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const { startLoc } = this.state;\n      if (this.isContextual(tt._declare)) {\n        if (super.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(FlowErrors.DeclareClassElement, startLoc);\n        } else if (member.value) {\n          this.raise(FlowErrors.DeclareClassFieldInitializer, member.value);\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(Errors.InvalidIdentifier, this.state.curPosition(), {\n          identifierName: fullWord,\n        });\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          this.finishOp(tt.questionDot, 2);\n        } else {\n          // allow double nullable types in Flow: ??string\n          this.finishOp(tt.question, 1);\n        }\n      } else if (\n        isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))\n      ) {\n        this.state.pos += 2; // eat \"@@\"\n        this.readIterator();\n      } else {\n        super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (\n        !isLHS &&\n        node.type === \"AssignmentExpression\" &&\n        node.left.type === \"TypeCastExpression\"\n      ) {\n        node.left = this.typeCastToParameter(node.left) as N.Assignable;\n      }\n      super.toAssignable(node, isLHS);\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList:\n        | ReadonlyArray<N.Expression | N.SpreadElement>\n        | ReadonlyArray<N.Expression | N.RestElement>,\n      isParenthesizedExpr?: boolean,\n    ):\n      | ReadonlyArray<N.Expression | N.SpreadElement>\n      | ReadonlyArray<N.Expression | N.RestElement> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(FlowErrors.TypeCastInPattern, expr.typeAnnotation);\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingFlag) {\n      return (\n        type === \"TypeCastExpression\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, method);\n        }\n        // estree support\n      } else if (\n        // @ts-expect-error TS does not know about the fact that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        // @ts-expect-error estree\n        method.value.params\n      ) {\n        // @ts-expect-error estree\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, method);\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (\n        node.superClass &&\n        (this.match(tt.lt) ||\n          // handles `class extends C<<T>`\n          this.match(tt.bitShiftL))\n      ) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.superTypeArguments =\n            this.flowParseTypeParameterInstantiationInExpression();\n        } else {\n          node.superTypeParameters =\n            this.flowParseTypeParameterInstantiationInExpression();\n        }\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode<N.FlowClassImplements>();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(FlowErrors.GetterMayNotHaveThisParam, param);\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.SetterMayNotHaveThisParam, param);\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue<T extends N.ObjectMember>(\n      prop: Undone<T>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): T {\n      if ((prop as any).variance) {\n        this.unexpected((prop as any).variance.loc.start);\n      }\n      delete (prop as any).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      const result = super.parseObjPropValue(\n        prop,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        // @ts-expect-error: refine typings\n        (result.value || result).typeParameters = typeParameters;\n      }\n      return result;\n    }\n\n    parseFunctionParamType(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(FlowErrors.PatternIsOptional, param);\n        }\n        if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, param);\n        }\n\n        (param as any as N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamAnnotationRequired, param);\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamNoDefault, param);\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: N.Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(FlowErrors.TypeBeforeInitializer, node.typeAnnotation);\n      }\n\n      return node;\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(\n          FlowErrors.ImportReflectionHasImportType,\n          node.specifiers[0].loc.start,\n        );\n      }\n    }\n\n    parseImportSpecifierLocal<\n      T extends\n        | N.ImportSpecifier\n        | N.ImportDefaultSpecifier\n        | N.ImportNamespaceSpecifier,\n    >(node: N.ImportDeclaration, specifier: Undone<T>, type: T[\"type\"]): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      node.specifiers.push(this.finishImportSpecifier(specifier, type));\n    }\n\n    isPotentialImportPhase(isExport: boolean): boolean {\n      if (super.isPotentialImportPhase(isExport)) return true;\n      if (this.isContextual(tt._type)) {\n        if (!isExport) return true;\n        const ch = this.lookaheadCharCode();\n        return ch === charCodes.leftCurlyBrace || ch === charCodes.asterisk;\n      }\n      return !isExport && this.isContextual(tt._typeof);\n    }\n\n    applyImportPhase(\n      node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n      isExport: boolean,\n      phase: string | null,\n      loc?: Position,\n    ): void {\n      super.applyImportPhase(node, isExport, phase, loc);\n      if (isExport) {\n        if (!phase && this.match(tt._default)) {\n          // TODO: Align with our TS AST and always add .exportKind\n          return;\n        }\n        (node as N.ExportNamedDeclaration).exportKind =\n          phase === \"type\" ? phase : \"value\";\n      } else {\n        if (phase === \"type\" && this.match(tt.star)) this.unexpected();\n        (node as N.ImportDeclaration).importKind =\n          phase === \"type\" || phase === \"typeof\" ? phase : \"value\";\n      }\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingFlag | undefined,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(Errors.ImportBindingIsString, specifier, {\n              importName: firstIdent.value,\n            });\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, specifier);\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.loc.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.loc.start,\n          true,\n          true,\n        );\n      }\n\n      return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(\n      node: Undone<N.Function>,\n      isConstructor: boolean,\n    ): void {\n      // @ts-expect-error kind may not index node\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, isConstructor);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters: N.TypeParameterDeclaration;\n\n        const arrow = this.tryParse((abort: () => never) => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression:\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n          | undefined\n          | null = null;\n\n        if (\n          arrow.node &&\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            // @ts-expect-error: refine tryParse typings\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n                typeParameters,\n              );\n            }\n            return arrow.node;\n          }\n\n          // @ts-expect-error: refine typings\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(\n          FlowErrors.UnexpectedTokenAfterTypeParameter,\n          typeParameters,\n        );\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error todo(flow->ts)\n        const result = this.tryParse<N.TypeAnnotation>(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode<N.TypeAnnotation>();\n\n          [\n            typeNode.typeAnnotation,\n            // @ts-expect-error (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        // @ts-expect-error todo(flow->ts)\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: Undone<N.ArrowFunctionExpression>,\n      params:\n        | Array<N.Expression | N.SpreadElement>\n        | Array<N.Expression | N.RestElement>,\n    ): void {\n      if (\n        this.state.noArrowParamsConversionAt.includes(\n          this.offsetToSourcePos(node.start),\n        )\n      ) {\n        node.params = params as N.ArrowFunctionExpression[\"params\"];\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction?: boolean | null,\n      strictModeChanged: boolean = true,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.includes(\n          this.offsetToSourcePos(node.start),\n        )\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, node.params[i]);\n        }\n      }\n\n      super.checkParams(\n        node,\n        allowDuplicates,\n        isArrowFunction,\n        strictModeChanged,\n      );\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow &&\n          !this.state.noArrowAt.includes(\n            this.sourceToOffsetPos(this.state.start),\n          ),\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startLoc: Position,\n      noCalls?: boolean | null,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.includes(startLoc.index)\n      ) {\n        this.next();\n\n        const node = this.startNodeAt<N.CallExpression>(startLoc);\n        node.callee = base;\n        node.arguments = super.parseCallExpressionArguments(tt.parenR);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        // @ts-expect-error: refine tryParse typings\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          // @ts-expect-error: refine tryParse typings\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node = this.startNodeAt<N.OptionalCallExpression>(startLoc);\n        node.callee = base;\n        node.typeArguments =\n          this.flowParseTypeParameterInstantiationInExpression();\n        this.expect(tt.parenL);\n        node.arguments = this.parseCallExpressionArguments(tt.parenR);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (\n        !noCalls &&\n        this.shouldParseTypes() &&\n        (this.match(tt.lt) ||\n          // also handles `new C<<T>`\n          this.match(tt.bitShiftL))\n      ) {\n        const node = this.startNodeAt<\n          N.OptionalCallExpression | N.CallExpression\n        >(startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = super.parseCallExpressionArguments(tt.parenR);\n          if (subscriptState.optionalChainMember) {\n            (node as Undone<N.OptionalCallExpression>).optional = false;\n          }\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined | null {\n      const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n      this.parseFunctionParams(node, false);\n      if (!this.parseArrow(node)) return;\n      return super.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(\n          FlowErrors.UnterminatedFlowComment,\n          this.state.curPosition(),\n        );\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | undefined {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          throw this.raise(FlowErrors.NestedFlowComment, this.state.startLoc);\n        }\n        this.hasFlowCommentCompletion();\n        const commentSkip = this.skipFlowComment();\n        if (commentSkip) {\n          this.state.pos += commentSkip;\n          this.state.hasFlowComment = true;\n        }\n        return;\n      }\n\n      return super.skipBlockComment(this.state.hasFlowComment ? \"*-/\" : \"*/\");\n    }\n\n    skipFlowComment(): number | false {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          // @ts-expect-error testing whether a number is included\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, this.state.curPosition());\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      loc: Position,\n      {\n        enumName,\n        memberName,\n      }: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumBooleanMemberNotInitialized, loc, {\n        memberName,\n        enumName,\n      });\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      loc: Position,\n      enumContext: EnumContext,\n    ) {\n      return this.raise(\n        !enumContext.explicitType\n          ? FlowErrors.EnumInvalidMemberInitializerUnknownType\n          : enumContext.explicitType === \"symbol\"\n            ? FlowErrors.EnumInvalidMemberInitializerSymbolType\n            : FlowErrors.EnumInvalidMemberInitializerPrimaryType,\n        loc,\n        enumContext,\n      );\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      loc: Position,\n      details: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumNumberMemberNotInitialized, loc, details);\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitialized(\n      node: N.Node,\n      details: {\n        enumName: string;\n      },\n    ): void {\n      this.raise(\n        FlowErrors.EnumStringMemberInconsistentlyInitialized,\n        node,\n        details,\n      );\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startLoc = this.state.startLoc;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        default:\n          return { type: \"invalid\", loc: startLoc };\n      }\n    }\n\n    flowEnumMemberRaw(): {\n      id: N.Identifier;\n      init: EnumMemberInit;\n    } {\n      const loc = this.state.startLoc;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\" as const, loc };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      loc: Position,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(loc, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string;\n      explicitType: EnumExplicitType;\n    }): {\n      members: {\n        booleanMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumBooleanMember\" }\n        >[];\n        numberMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumNumberMember\" }\n        >[];\n        stringMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumStringMember\" }\n        >[];\n        defaultedMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumDefaultedMember\" }\n        >[];\n      };\n      hasUnknownMembers: boolean;\n    } {\n      const seenNames = new Set();\n      const members = {\n        // @ts-expect-error: migrate to Babel types\n        booleanMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        numberMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        stringMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode<N.FlowEnumMember>();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.raise(FlowErrors.EnumInvalidMemberName, id, {\n            memberName,\n            suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n            enumName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.raise(FlowErrors.EnumDuplicateMemberName, id, {\n            memberName,\n            enumName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.loc,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.loc,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      {\n        enumName,\n      }: {\n        enumName: string;\n      },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {\n            enumName,\n          });\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {\n            enumName,\n          });\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string;\n    }): EnumExplicitType {\n      if (!this.eatContextual(tt._of)) return null;\n\n      if (!tokenIsIdentifier(this.state.type)) {\n        throw this.raise(\n          FlowErrors.EnumInvalidExplicitTypeUnknownSupplied,\n          this.state.startLoc,\n          {\n            enumName,\n          },\n        );\n      }\n\n      const { value } = this.state;\n      this.next();\n\n      if (\n        value !== \"boolean\" &&\n        value !== \"number\" &&\n        value !== \"string\" &&\n        value !== \"symbol\"\n      ) {\n        this.raise(FlowErrors.EnumInvalidExplicitType, this.state.startLoc, {\n          enumName,\n          invalidEnumType: value,\n        });\n      }\n\n      return value;\n    }\n\n    flowEnumBody(node: Undone<N.FlowEnumBody>, id: N.Identifier): N.Node {\n      const enumName = id.name;\n      const nameLoc = id.loc.start;\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, nameLoc, {\n              enumName,\n            });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(\n      node: Undone<N.FlowEnumDeclaration>,\n    ): N.FlowEnumDeclaration {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), id);\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      if (this.shouldParseTypes()) {\n        if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationInExpression();\n        }\n      }\n\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n","const entities: {\n  __proto__: null;\n  [name: string]: string;\n} = {\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n} as const;\nexport default entities;\n","import * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml.ts\";\nimport type Parser from \"../../parser/index.ts\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types.ts\";\nimport type { TokContext } from \"../../tokenizer/context.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport type * as N from \"../../types.ts\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { isNewLine } from \"../../util/whitespace.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport type { Undone } from \"../../parser/node.ts\";\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = ParseErrorEnum`jsx`({\n  AttributeIsEmpty:\n    \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: ({ openingTagName }: { openingTagName: string }) =>\n    `Expected corresponding JSX closing tag for <${openingTagName}>.`,\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression:\n    \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  // FIXME: Unify with Errors.UnexpectedToken\n  UnexpectedToken: ({\n    unexpected,\n    HTMLEntity,\n  }: {\n    unexpected: string;\n    HTMLEntity: string;\n  }) =>\n    `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`,\n  UnsupportedJsxValue:\n    \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements:\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n});\n\n/* eslint-disable sort-keys */\n\nfunction isFragment(object?: N.JSXTag | null): object is N.JSXFragmentTag {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  // @ts-expect-error - object is 'never'\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport interface IJSXParserMixin {\n  jsxParseOpeningElementAfterName(\n    node: N.JSXOpeningElement,\n  ): N.JSXOpeningElement;\n}\n\nexport type ClassWithMixin<\n  T extends new (...args: any) => any,\n  M extends object,\n> = T extends new (...args: infer P) => infer I\n  ? new (...args: P) => I & M\n  : never;\n\nexport default (superClass: typeof Parser) =>\n  class JSXParserMixin extends superClass implements Parser, IJSXParserMixin {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(\n            JsxErrors.UnterminatedJsxContent,\n            this.state.startLoc,\n          );\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                this.finishToken(tt.jsxTagStart);\n              } else {\n                super.getTokenFromCode(ch);\n              }\n              return;\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            this.finishToken(tt.jsxText, out);\n            return;\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              this.raise(JsxErrors.UnexpectedToken, this.state.curPosition(), {\n                unexpected: this.input[this.state.pos],\n                HTMLEntity:\n                  ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\",\n              });\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedString, this.state.startLoc);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      const startPos = ++this.state.pos;\n      if (this.codePointAtPos(this.state.pos) === charCodes.numberSign) {\n        ++this.state.pos;\n\n        let radix = 10;\n        if (this.codePointAtPos(this.state.pos) === charCodes.lowercaseX) {\n          radix = 16;\n          ++this.state.pos;\n        }\n\n        const codePoint = this.readInt(\n          radix,\n          /* len */ undefined,\n          /* forceLen */ false,\n          /* allowNumSeparator */ \"bail\",\n        );\n        if (\n          codePoint !== null &&\n          this.codePointAtPos(this.state.pos) === charCodes.semicolon\n        ) {\n          ++this.state.pos;\n          return String.fromCodePoint(codePoint);\n        }\n      } else {\n        let count = 0;\n        let semi = false;\n        while (\n          count++ < 10 &&\n          this.state.pos < this.length &&\n          !(semi = this.codePointAtPos(this.state.pos) === charCodes.semicolon)\n        ) {\n          ++this.state.pos;\n        }\n\n        if (semi) {\n          const desc = this.input.slice(startPos, this.state.pos);\n          const entity = XHTMLEntities[desc];\n          ++this.state.pos;\n\n          if (entity) {\n            return entity;\n          }\n        }\n      }\n\n      // Not a valid entity\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      this.finishToken(tt.jsxName, this.input.slice(start, this.state.pos));\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode<N.JSXIdentifier>();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName | N.JSXIdentifier {\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt<N.JSXNamespacedName>(startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startLoc = this.state.startLoc;\n      let node: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression =\n        this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt<N.JSXMemberExpression>(startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue():\n      | N.JSXExpressionContainer\n      | N.JSXElement\n      | N.StringLiteral {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.setContext(tc.brace);\n          this.next();\n          node = this.jsxParseExpressionContainer(node, tc.j_oTag);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(JsxErrors.AttributeIsEmpty, node);\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom() as N.JSXElement | N.StringLiteral;\n\n        default:\n          throw this.raise(JsxErrors.UnsupportedJsxValue, this.state.startLoc);\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(this.state.lastTokEndLoc);\n      return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: Undone<N.JSXSpreadChild>): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.setContext(tc.j_expr);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: Undone<N.JSXExpressionContainer>,\n      previousContext: TokContext,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(\n              JsxErrors.UnexpectedSequenceExpression,\n              expression.expressions[1],\n            );\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.setContext(previousContext);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute | N.JSXSpreadAttribute {\n      const node = this.startNode<N.JSXAttribute | N.JSXSpreadAttribute>();\n      if (this.match(tt.braceL)) {\n        this.setContext(tc.brace);\n        this.next();\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.setContext(tc.j_oTag);\n        this.state.canStartJSXElement = true;\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startLoc: Position,\n    ): N.JSXOpeningElement | N.JSXOpeningFragment {\n      const node = this.startNodeAt<N.JSXOpeningElement | N.JSXOpeningFragment>(\n        startLoc,\n      );\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(\n        node as Undone<N.JSXOpeningElement>,\n      );\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: Undone<N.JSXOpeningElement>,\n    ): N.JSXOpeningElement {\n      const attributes: (N.JSXAttribute | N.JSXSpreadAttribute)[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startLoc: Position,\n    ): N.JSXClosingElement | N.JSXClosingFragment {\n      const node = this.startNodeAt<N.JSXClosingFragment | N.JSXClosingElement>(\n        startLoc,\n      );\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startLoc: Position): N.JSXElement | N.JSXFragment {\n      const node = this.startNodeAt<N.JSXElement | N.JSXFragment>(startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(startLoc);\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseLiteral(this.state.value, \"JSXText\"));\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode<\n                N.JSXSpreadChild | N.JSXExpressionContainer\n              >();\n              this.setContext(tc.brace);\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(\n                  this.jsxParseExpressionContainer(node, tc.j_expr),\n                );\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              this.unexpected();\n          }\n        }\n\n        if (\n          isFragment(openingElement) &&\n          !isFragment(closingElement) &&\n          closingElement !== null\n        ) {\n          this.raise(JsxErrors.MissingClosingTagFragment, closingElement);\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(JsxErrors.MissingClosingTagElement, closingElement, {\n            openingTagName: getQualifiedJSXName(openingElement.name),\n          });\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(JsxErrors.MissingClosingTagElement, closingElement, {\n              openingTagName: getQualifiedJSXName(openingElement.name),\n            });\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(\n          JsxErrors.UnwrappedAdjacentJSXElements,\n          this.state.startLoc,\n        );\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement | N.JSXFragment {\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startLoc);\n    }\n\n    setContext(newContext: TokContext) {\n      const { context } = this.state;\n      context[context.length - 1] = newContext;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    skipSpace() {\n      const curContext = this.curContext();\n      if (!curContext.preserveSpace) super.skipSpace();\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        this.jsxReadToken();\n        return;\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          this.jsxReadWord();\n          return;\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          this.finishToken(tt.jsxTagEnd);\n          return;\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          this.jsxReadString(code);\n          return;\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        this.finishToken(tt.jsxTagStart);\n        return;\n      }\n\n      super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        // start opening tag context\n        context.push(tc.j_oTag);\n      } else if (type === tt.jsxTagEnd) {\n        const out = context[context.length - 1];\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.setContext(tc.j_expr);\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n","import type { Position } from \"../../util/location.ts\";\nimport ScopeHandler, { NameType, Scope } from \"../../util/scope.ts\";\nimport { BindingFlag, ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type * as N from \"../../types.ts\";\nimport { Errors } from \"../../parse-error.ts\";\n\nconst enum TsNameType {\n  Types = 1 << 0,\n  // enums (which are also in .types)\n  Enums = 1 << 1,\n  // const enums (which are also in .enums and .types)\n  ConstEnums = 1 << 2,\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  Classes = 1 << 3,\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  ExportOnlyBindings = 1 << 4,\n}\n\nclass TypeScriptScope extends Scope {\n  tsNames: Map<string, TsNameType> = new Map();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  importsStack: Set<string>[] = [];\n\n  createScope(flags: ScopeFlag): TypeScriptScope {\n    this.importsStack.push(new Set()); // Always keep the top-level scope for export checks.\n\n    return new TypeScriptScope(flags);\n  }\n\n  enter(flags: ScopeFlag): void {\n    if (flags === ScopeFlag.TS_MODULE) {\n      this.importsStack.push(new Set());\n    }\n\n    super.enter(flags);\n  }\n\n  exit() {\n    const flags = super.exit();\n\n    if (flags === ScopeFlag.TS_MODULE) {\n      this.importsStack.pop();\n    }\n\n    return flags;\n  }\n\n  hasImport(name: string, allowShadow?: boolean) {\n    const len = this.importsStack.length;\n    if (this.importsStack[len - 1].has(name)) {\n      return true;\n    }\n    if (!allowShadow && len > 1) {\n      for (let i = 0; i < len - 1; i++) {\n        if (this.importsStack[i].has(name)) return true;\n      }\n    }\n    return false;\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    if (bindingType & BindingFlag.FLAG_TS_IMPORT) {\n      if (this.hasImport(name, true)) {\n        this.parser.raise(Errors.VarRedeclaration, loc, {\n          identifierName: name,\n        });\n      }\n      this.importsStack[this.importsStack.length - 1].add(name);\n      return;\n    }\n\n    const scope = this.currentScope();\n    let type = scope.tsNames.get(name) || 0;\n\n    if (bindingType & BindingFlag.FLAG_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.tsNames.set(name, type | TsNameType.ExportOnlyBindings);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n\n    if (bindingType & BindingFlag.KIND_TYPE) {\n      if (!(bindingType & BindingFlag.KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      type = type | TsNameType.Types;\n    }\n    if (bindingType & BindingFlag.FLAG_TS_ENUM) {\n      type = type | TsNameType.Enums;\n    }\n    if (bindingType & BindingFlag.FLAG_TS_CONST_ENUM) {\n      type = type | TsNameType.ConstEnums;\n    }\n    if (bindingType & BindingFlag.FLAG_CLASS) {\n      type = type | TsNameType.Classes;\n    }\n    if (type) scope.tsNames.set(name, type);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    const type = scope.tsNames.get(name);\n    if ((type & TsNameType.Enums) > 0) {\n      if (bindingType & BindingFlag.FLAG_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BindingFlag.FLAG_TS_CONST_ENUM);\n        const wasConst = (type & TsNameType.ConstEnums) > 0;\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (\n      bindingType & BindingFlag.FLAG_CLASS &&\n      (type & TsNameType.Classes) > 0\n    ) {\n      if (scope.names.get(name) & NameType.Lexical) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BindingFlag.KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BindingFlag.KIND_TYPE && (type & TsNameType.Types) > 0) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(scope, name, bindingType);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n\n    if (this.hasImport(name)) return;\n\n    const len = this.scopeStack.length;\n    for (let i = len - 1; i >= 0; i--) {\n      const scope = this.scopeStack[i];\n      const type = scope.tsNames.get(name);\n      if (\n        (type & TsNameType.Types) > 0 ||\n        (type & TsNameType.ExportOnlyBindings) > 0\n      ) {\n        return;\n      }\n    }\n\n    super.checkLocalExport(id);\n  }\n}\n","import * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types.ts\";\nimport type {\n  AssignmentPattern,\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Identifier,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  ObjectOrClassMember,\n  ClassMember,\n  ObjectMember,\n  TsNamedTypeElementBase,\n  PrivateName,\n  ObjectExpression,\n  ObjectPattern,\n  ArrayPattern,\n  AssignmentProperty,\n  Assignable,\n} from \"../types.ts\";\nimport type { Pos, Position } from \"../util/location.ts\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier.ts\";\nimport { NodeUtils, type Undone } from \"./node.ts\";\nimport { BindingFlag } from \"../util/scopeflags.ts\";\nimport type { ExpressionErrors } from \"./util.ts\";\nimport { Errors, type LValAncestor } from \"../parse-error.ts\";\nimport type Parser from \"./index.ts\";\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport const enum ParseBindingListFlags {\n  ALLOW_EMPTY = 1 << 0,\n  IS_FUNCTION_PARAMS = 1 << 1,\n  IS_CONSTRUCTOR_PARAMS = 1 << 2,\n}\n\nexport default abstract class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  abstract parseIdentifier(liberal?: boolean): Identifier;\n  abstract parseMaybeAssign(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: Pos | null,\n  ): Expression;\n\n  abstract parseMaybeAssignAllowIn(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: Pos | null,\n  ): Expression;\n\n  abstract parseObjectLike<T extends ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): T;\n  abstract parseObjPropValue(\n    prop: any,\n    startLoc: Position | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void;\n  abstract parsePropertyName(\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ): void;\n  abstract parsePrivateName(): PrivateName;\n  // Forward-declaration: defined in statement.js\n  abstract parseDecorator(): Decorator;\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n   *\n   * - Parenthesized Destructuring patterns\n   * - RestElement is not the last element\n   * - Missing `=` in assignment pattern\n   *\n   * NOTE: There is a corresponding \"isAssignable\" method.\n   * When this one is updated, please check if also that one needs to be updated.\n   *\n   * @param node The expression atom\n   * @param isLHS Whether we are parsing a LeftHandSideExpression.\n   *              If isLHS is `true`, the following cases are allowed: `[(a)] = [0]`, `[(a.b)] = [0]`\n   *              If isLHS is `false`, we are in an arrow function parameters list.\n   */\n  toAssignable(node: Node, isLHS: boolean = false): asserts node is Assignable {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordArrowParameterBindingError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordArrowParameterBindingError(\n            Errors.InvalidParenthesizedAssignment,\n            node,\n          );\n        } else if (\n          parenthesized.type !== \"MemberExpression\" &&\n          !this.isOptionalMemberExpression(parenthesized)\n        ) {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(Errors.InvalidParenthesizedAssignment, node);\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, node);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        (node as Node).type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            (prop as Node).type === \"RestElement\" &&\n            node.extra?.trailingCommaLoc\n          ) {\n            this.raise(Errors.RestTrailingComma, node.extra.trailingCommaLoc);\n          }\n        }\n        break;\n\n      case \"ObjectProperty\": {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        break;\n      }\n\n      case \"SpreadElement\": {\n        throw new Error(\n          \"Internal @babel/parser error (this is a bug, please report it).\" +\n            \" SpreadElement should be converted by .toAssignable's caller.\",\n        );\n      }\n\n      case \"ArrayExpression\":\n        (node as Node).type = \"ArrayPattern\";\n        this.toAssignableList(\n          node.elements,\n          node.extra?.trailingCommaLoc,\n          isLHS,\n        );\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, node.left.loc.end);\n        }\n\n        (node as Node).type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod,\n        prop.key,\n      );\n    } else if (prop.type === \"SpreadElement\") {\n      (prop as Node).type = \"RestElement\";\n      const arg = prop.argument;\n      this.checkToRestConversion(arg, /* allowPattern */ false);\n      this.toAssignable(arg, isLHS);\n\n      if (!isLast) {\n        this.raise(Errors.RestTrailingComma, prop);\n      }\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: (Expression | SpreadElement | RestElement)[],\n    trailingCommaLoc: Position | undefined | null,\n    isLHS: boolean,\n  ): void {\n    const end = exprList.length - 1;\n\n    for (let i = 0; i <= end; i++) {\n      const elt = exprList[i];\n      if (!elt) continue;\n\n      if (elt.type === \"SpreadElement\") {\n        (elt as unknown as RestElement).type = \"RestElement\";\n        const arg = elt.argument;\n        this.checkToRestConversion(arg, /* allowPattern */ true);\n        this.toAssignable(arg, isLHS);\n      } else {\n        this.toAssignable(elt, isLHS);\n      }\n\n      if (elt.type === \"RestElement\") {\n        if (i < end) {\n          this.raise(Errors.RestTrailingComma, elt);\n        } else if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, trailingCommaLoc);\n        }\n      }\n    }\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return node.properties.every((prop, i) => {\n          return (\n            prop.type !== \"ObjectMethod\" &&\n            (i === last || prop.type !== \"SpreadElement\") &&\n            this.isAssignable(prop)\n          );\n        });\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList:\n      | ReadonlyArray<Expression | SpreadElement>\n      | ReadonlyArray<Expression | RestElement>,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isParenthesizedExpr?: boolean,\n  ):\n    | ReadonlyArray<Expression | SpreadElement>\n    | ReadonlyArray<Expression | RestElement> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList:\n      | ReadonlyArray<Expression | SpreadElement>\n      | ReadonlyArray<Expression | RestElement>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): SpreadElement {\n    const node = this.startNode<SpreadElement>();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(this: Parser): RestElement {\n    const node = this.startNode<RestElement>();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(this: Parser): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode<ArrayPattern>();\n        this.next();\n        // @ts-expect-error: Fixme: TSParameterProperty can not be assigned to node.elements\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          ParseBindingListFlags.ALLOW_EMPTY,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    this: Parser,\n    close: TokenType,\n    closeCharCode: (typeof charCodes)[keyof typeof charCodes],\n    flags: ParseBindingListFlags,\n  ): Array<Pattern | TSParameterProperty> {\n    const allowEmpty = flags & ParseBindingListFlags.ALLOW_EMPTY;\n\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        let rest: Pattern = this.parseRestBinding();\n        if (\n          (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"flow\")) ||\n          flags & ParseBindingListFlags.IS_FUNCTION_PARAMS\n        ) {\n          rest = this.parseFunctionParamType(rest);\n        }\n        elts.push(rest);\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedParameterDecorator, this.state.startLoc);\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(flags, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(\n    this: Parser,\n    prop: Undone<RestElement>,\n  ): RestElement {\n    this.next(); // eat '...'\n    // Don't use parseRestBinding() as we only allow Identifier here.\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(this: Parser): AssignmentProperty | RestElement {\n    const { type, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(this.startNode());\n    }\n\n    const prop = this.startNode<AssignmentProperty>();\n    if (type === tt.privateName) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      prop.key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop);\n    }\n    prop.method = false;\n    return this.parseObjPropValue(\n      prop,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n  }\n\n  parseAssignableListItem(\n    this: Parser,\n    flags: ParseBindingListFlags,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    if (\n      (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"flow\")) ||\n      flags & ParseBindingListFlags.IS_FUNCTION_PARAMS\n    ) {\n      this.parseFunctionParamType(left);\n    }\n    const elt = this.parseMaybeDefault(left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseFunctionParamType(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    this: Parser,\n    startLoc?: Position | null,\n    left?: Pattern | null,\n  ): Pattern {\n    startLoc ??= this.state.startLoc;\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt<AssignmentPattern>(startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n  /**\n   * Return information use in determining whether a Node of a given type is an LVal,\n   * possibly given certain additional context information.\n   *\n   * Subclasser notes: This method has kind of a lot of mixed, but related,\n   * responsibilities. If we can definitively determine with the information\n   * provided that this either *is* or *isn't* a valid `LVal`, then the return\n   * value is easy: just return `true` or `false`. However, if it is a valid\n   * LVal *ancestor*, and thus its descendants must be subsequently visited to\n   * continue the \"investigation\", then this method should return the relevant\n   * child key as a `string`. In some special cases, you additionally want to\n   * convey that this node should be treated as if it were parenthesized. In\n   * that case, a tuple of [key: string, parenthesized: boolean] is returned.\n   * The `string`-only return option is actually just a shorthand for:\n   * `[key: string, parenthesized: false]`.\n   *\n   * @param type A Node `type` string\n   * @param isUnparenthesizedInAssign\n   *        Whether the node in question is unparenthesized and its parent\n   *        is either an assignment pattern or an assignment expression.\n   * @param binding\n   *        The binding operation that is being considered for this potential\n   *        LVal.\n   * @returns `true` or `false` if we can immediately determine whether the node\n   *          type in question can be treated as an `LVal`.\n   *          A `string` key to traverse if we must check this child.\n   *          A `[string, boolean]` tuple if we need to check this child and\n   *          treat is as parenthesized.\n   */\n  isValidLVal(\n    type: string,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isUnparenthesizedInAssign: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    binding: BindingFlag,\n  ): string | boolean | [string, boolean] {\n    switch (type) {\n      case \"AssignmentPattern\":\n        return \"left\";\n      case \"RestElement\":\n        return \"argument\";\n      case \"ObjectProperty\":\n        return \"value\";\n      case \"ParenthesizedExpression\":\n        return \"expression\";\n      case \"ArrayPattern\":\n        return \"elements\";\n      case \"ObjectPattern\":\n        return \"properties\";\n    }\n    return false;\n  }\n\n  // Overridden by the estree plugin\n  isOptionalMemberExpression(expression: Node): boolean {\n    return expression.type === \"OptionalMemberExpression\";\n  }\n\n  /**\n   * Verify that a target expression is an lval (something that can be assigned to).\n   *\n   * @param expression The expression in question to check.\n   * @param ancestor\n   *        The relevant ancestor to provide context information for the error\n   *        if the check fails.\n   * @param binding\n   *        The desired binding type. If the given expression is an identifier\n   *        and `binding` is not `BindingFlag.TYPE_NONE`, `checkLVal` will register binding\n   *        to the parser scope See also `src/util/scopeflags.js`\n   * @param checkClashes\n   *        An optional string set to check if an identifier name is included.\n   *        `checkLVal` will add checked identifier name to `checkClashes` It is\n   *        used in tracking duplicates in function parameter lists. If it is\n   *        false, `checkLVal` will skip duplicate checks\n   * @param strictModeChanged\n   *        Whether an identifier has been parsed in a sloppy context but should\n   *        be reinterpreted as strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @param hasParenthesizedAncestor\n   *        This is only used internally during recursive calls, and you should\n   *        not have to set it yourself.\n   */\n\n  checkLVal(\n    expression:\n      | Expression\n      | ObjectMember\n      | RestElement\n      | Pattern\n      | TSParameterProperty,\n    ancestor: LValAncestor,\n    binding: BindingFlag = BindingFlag.TYPE_NONE,\n    checkClashes: Set<string> | false = false,\n    strictModeChanged: boolean = false,\n    hasParenthesizedAncestor: boolean = false,\n  ): void {\n    const type = expression.type;\n\n    // If we find here an ObjectMethod, it's because this was originally\n    // an ObjectExpression which has then been converted.\n    // toAssignable already reported this error with a nicer message.\n    if (this.isObjectMethod(expression)) return;\n\n    const isOptionalMemberExpression =\n      this.isOptionalMemberExpression(expression);\n\n    if (isOptionalMemberExpression || type === \"MemberExpression\") {\n      if (isOptionalMemberExpression) {\n        this.expectPlugin(\"optionalChainingAssign\", expression.loc.start);\n        if (ancestor.type !== \"AssignmentExpression\") {\n          this.raise(Errors.InvalidLhsOptionalChaining, expression, {\n            ancestor,\n          });\n        }\n      }\n\n      if (binding !== BindingFlag.TYPE_NONE) {\n        this.raise(Errors.InvalidPropertyBindingPattern, expression);\n      }\n      return;\n    }\n\n    if (type === \"Identifier\") {\n      this.checkIdentifier(expression, binding, strictModeChanged);\n\n      const { name } = expression;\n\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, expression);\n        } else {\n          checkClashes.add(name);\n        }\n      }\n\n      return;\n    }\n\n    const validity = this.isValidLVal(\n      type,\n      !(hasParenthesizedAncestor || expression.extra?.parenthesized) &&\n        ancestor.type === \"AssignmentExpression\",\n      binding,\n    );\n\n    if (validity === true) return;\n    if (validity === false) {\n      const ParseErrorClass =\n        binding === BindingFlag.TYPE_NONE\n          ? Errors.InvalidLhs\n          : Errors.InvalidLhsBinding;\n\n      this.raise(ParseErrorClass, expression, { ancestor });\n      return;\n    }\n\n    let key: string, isParenthesizedExpression: boolean;\n    if (typeof validity === \"string\") {\n      key = validity;\n      isParenthesizedExpression = type === \"ParenthesizedExpression\";\n    } else {\n      [key, isParenthesizedExpression] = validity;\n    }\n\n    const nextAncestor =\n      type === \"ArrayPattern\" || type === \"ObjectPattern\"\n        ? ({ type } as const)\n        : ancestor;\n\n    // @ts-expect-error key may not index expression.\n    const val = expression[key];\n    if (Array.isArray(val)) {\n      for (const child of val) {\n        if (child) {\n          this.checkLVal(\n            child,\n            nextAncestor,\n            binding,\n            checkClashes,\n            strictModeChanged,\n            isParenthesizedExpression,\n          );\n        }\n      }\n    } else if (val) {\n      this.checkLVal(\n        val,\n        nextAncestor,\n        binding,\n        checkClashes,\n        strictModeChanged,\n        isParenthesizedExpression,\n      );\n    }\n  }\n\n  checkIdentifier(\n    at: Identifier,\n    bindingType: BindingFlag,\n    strictModeChanged: boolean = false,\n  ) {\n    if (\n      this.state.strict &&\n      (strictModeChanged\n        ? isStrictBindReservedWord(at.name, this.inModule)\n        : isStrictBindOnlyReservedWord(at.name))\n    ) {\n      if (bindingType === BindingFlag.TYPE_NONE) {\n        this.raise(Errors.StrictEvalArguments, at, { referenceName: at.name });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, at, {\n          bindingName: at.name,\n        });\n      }\n    }\n\n    if (bindingType & BindingFlag.FLAG_NO_LET_IN_LEXICAL && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, at);\n    }\n\n    if (!(bindingType & BindingFlag.TYPE_NONE)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n\n  declareNameFromIdentifier(identifier: Identifier, binding: BindingFlag) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n\n  checkToRestConversion(node: Node, allowPattern: boolean): void {\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.checkToRestConversion(node.expression, allowPattern);\n        break;\n      case \"Identifier\":\n      case \"MemberExpression\":\n        break;\n      case \"ArrayExpression\":\n      case \"ObjectExpression\":\n        if (allowPattern) break;\n      /* falls through */\n      default:\n        this.raise(Errors.InvalidRestAssignmentPattern, node);\n    }\n  }\n\n  checkCommaAfterRest(\n    close: (typeof charCodes)[keyof typeof charCodes],\n  ): boolean {\n    if (!this.match(tt.comma)) {\n      return false;\n    }\n\n    this.raise(\n      this.lookaheadCharCode() === close\n        ? Errors.RestTrailingComma\n        : Errors.ElementAfterRest,\n      this.state.startLoc,\n    );\n\n    return true;\n  }\n}\n","import type State from \"../../tokenizer/state.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n  tokenIsTemplate,\n  tokenCanStartExpression,\n} from \"../../tokenizer/types.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport type * as N from \"../../types.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { createPositionWithColumnOffset } from \"../../util/location.ts\";\nimport type Parser from \"../../parser/index.ts\";\nimport { ScopeFlag, BindingFlag } from \"../../util/scopeflags.ts\";\nimport TypeScriptScopeHandler from \"./scope.ts\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport type { ParseStatementFlag } from \"../../parser/statement.ts\";\nimport { ParamKind } from \"../../util/production-parameter.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node.ts\";\nimport type { Pattern } from \"../../types.ts\";\nimport type { Expression } from \"../../types.ts\";\nimport type { ClassWithMixin, IJSXParserMixin } from \"../jsx/index.ts\";\nimport { ParseBindingListFlags } from \"../../parser/lval.ts\";\nimport { OptionFlags } from \"../../options.ts\";\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | \"const\"\n  | N.Accessibility\n  | N.VarianceAnnotations;\n\nfunction nonNull<T>(x?: T | null): T {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\ntype ModifierBase = {\n  accessibility?: N.Accessibility;\n} & {\n  [key in TsModifier]?: boolean | undefined | null;\n};\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = ParseErrorEnum`typescript`({\n  AbstractMethodHasImplementation: ({ methodName }: { methodName: string }) =>\n    `Method '${methodName}' cannot have an implementation because it is marked abstract.`,\n  AbstractPropertyHasInitializer: ({\n    propertyName,\n  }: {\n    propertyName: string;\n  }) =>\n    `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,\n  AccessorCannotBeOptional:\n    \"An 'accessor' property cannot be declared optional.\",\n  AccessorCannotDeclareThisParameter:\n    \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccessorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference:\n    \"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",\n  ConstructorHasTypeParameters:\n    \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `'declare' is not allowed in ${kind}ters.`,\n  DeclareClassFieldHasInitializer:\n    \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation:\n    \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier:\n    // `Accessibility modifier already seen: ${modifier}` would be more helpful.\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ({ modifier }: { modifier: N.Accessibility }) =>\n      `Accessibility modifier already seen.`,\n  DuplicateModifier: ({ modifier }: { modifier: TsModifier }) =>\n    `Duplicate modifier: '${modifier}'.`,\n  // `token` matches the terminology used by typescript:\n  // https://github.com/microsoft/TypeScript/blob/main/src/compiler/types.ts#L2915\n  EmptyHeritageClauseType: ({ token }: { token: \"extends\" | \"implements\" }) =>\n    `'${token}' list cannot be empty.`,\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare:\n    \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` modifier\",\n  IncompatibleModifiers: ({\n    modifiers,\n  }: {\n    modifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,\n  IndexSignatureHasAbstract:\n    \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Index signatures cannot have an accessibility modifier ('${modifier}').`,\n  IndexSignatureHasDeclare:\n    \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride:\n    \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic:\n    \"Index signatures cannot have the 'static' modifier.\",\n  InitializerNotAllowedInAmbientContext:\n    \"Initializers are not allowed in ambient contexts.\",\n  InvalidModifierOnTypeMember: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type member.`,\n  InvalidModifierOnTypeParameter: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type parameter.`,\n  InvalidModifierOnTypeParameterPositions: ({\n    modifier,\n  }: {\n    modifier: TsModifier;\n  }) =>\n    `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,\n  InvalidModifiersOrder: ({\n    orderedModifiers,\n  }: {\n    orderedModifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,\n  InvalidPropertyAccessAfterInstantiationExpression:\n    \"Invalid property access after an instantiation expression. \" +\n    \"You can either wrap the instantiation expression in parentheses, or delete the type arguments.\",\n  InvalidTupleMemberLabel:\n    \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName:\n    \"'interface' declarations must be followed by an identifier.\",\n  NonAbstractClassHasAbstractMethod:\n    \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer:\n    \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired:\n    \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass:\n    \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract:\n    \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Private elements cannot have an accessibility modifier ('${modifier}').`,\n  ReadonlyForMethodSignature:\n    \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ReservedArrowTypeParam:\n    \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ReservedTypeAssertion:\n    \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  SetAccessorCannotHaveOptionalParameter:\n    \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccessorCannotHaveRestParameter:\n    \"A 'set' accessor cannot have rest parameter.\",\n  SetAccessorCannotHaveReturnType:\n    \"A 'set' accessor cannot have a return type annotation.\",\n  SingleTypeParameterWithoutTrailingComma: ({\n    typeParameterName,\n  }: {\n    typeParameterName: string;\n  }) =>\n    `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,\n  StaticBlockCannotHaveModifier:\n    \"Static class blocks cannot have any modifier.\",\n  TupleOptionalAfterType:\n    \"A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).\",\n  TypeAnnotationAfterAssign:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed:\n    \"A type-only import can specify a default import or named bindings, but not both.\",\n  TypeModifierIsUsedInTypeExports:\n    \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  TypeModifierIsUsedInTypeImports:\n    \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  UnexpectedParameterModifier:\n    \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly:\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument:\n    \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind:\n    \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: ({ type }: { type: string }) =>\n    `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`,\n});\n\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(value: string): N.TsKeywordTypeType | undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): modifier is N.Accessibility {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nfunction tsIsVarianceAnnotations(\n  modifier: string,\n): modifier is N.VarianceAnnotations {\n  return modifier === \"in\" || modifier === \"out\";\n}\n\nexport default (superClass: ClassWithMixin<typeof Parser, IJSXParserMixin>) =>\n  class TypeScriptParserMixin extends superClass implements Parser {\n    getScopeHandler(): new (...args: any) => TypeScriptScopeHandler {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        this.match(tt.bracketL) ||\n        this.match(tt.braceL) ||\n        this.match(tt.star) ||\n        this.match(tt.ellipsis) ||\n        this.match(tt.privateName) ||\n        this.isLiteralPropertyName()\n      );\n    }\n\n    tsNextTokenOnSameLineAndCanFollowModifier() {\n      this.next();\n      if (this.hasPrecedingLineBreak()) {\n        return false;\n      }\n      return this.tsTokenCanFollowModifier();\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      if (this.match(tt._static)) {\n        this.next();\n        return this.tsTokenCanFollowModifier();\n      }\n      return this.tsNextTokenOnSameLineAndCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T extends TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): T | undefined | null {\n      if (\n        !tokenIsIdentifier(this.state.type) &&\n        this.state.type !== tt._in &&\n        this.state.type !== tt._const\n      ) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.includes(modifier)) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"public\"] });\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"abstract\", \"readonly\"] });\n     */\n    tsParseModifiers<N extends ModifierBase>(\n      {\n        allowedModifiers,\n        disallowedModifiers,\n        stopOnStartOfClassStaticBlock,\n        errorTemplate = TSErrors.InvalidModifierOnTypeMember,\n      }: {\n        allowedModifiers: readonly TsModifier[];\n        disallowedModifiers?: TsModifier[];\n        stopOnStartOfClassStaticBlock?: boolean;\n        errorTemplate?: typeof TSErrors.InvalidModifierOnTypeMember;\n      },\n      modified: N,\n    ): void {\n      const enforceOrder = (\n        loc: Position,\n        modifier: TsModifier,\n        before: TsModifier,\n        after: TsModifier,\n      ) => {\n        if (modifier === before && modified[after]) {\n          this.raise(TSErrors.InvalidModifiersOrder, loc, {\n            orderedModifiers: [before, after],\n          });\n        }\n      };\n      const incompatible = (\n        loc: Position,\n        modifier: TsModifier,\n        mod1: TsModifier,\n        mod2: TsModifier,\n      ) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(TSErrors.IncompatibleModifiers, loc, {\n            modifiers: [mod1, mod2],\n          });\n        }\n      };\n\n      for (;;) {\n        const { startLoc } = this.state;\n        const modifier: TsModifier | undefined | null = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(TSErrors.DuplicateAccessibilityModifier, startLoc, {\n              modifier,\n            });\n          } else {\n            enforceOrder(startLoc, modifier, modifier, \"override\");\n            enforceOrder(startLoc, modifier, modifier, \"static\");\n            enforceOrder(startLoc, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else if (tsIsVarianceAnnotations(modifier)) {\n          if (modified[modifier]) {\n            this.raise(TSErrors.DuplicateModifier, startLoc, { modifier });\n          }\n          modified[modifier] = true;\n\n          enforceOrder(startLoc, modifier, \"in\", \"out\");\n        } else {\n          if (Object.hasOwn(modified, modifier)) {\n            this.raise(TSErrors.DuplicateModifier, startLoc, { modifier });\n          } else {\n            enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"static\", \"override\");\n            enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n\n            incompatible(startLoc, modifier, \"declare\", \"override\");\n            incompatible(startLoc, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(errorTemplate, startLoc, {\n            modifier,\n          });\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n    }\n\n    tsParseList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T | undefined,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] | undefined {\n      const result: T[] = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStartLoc.index;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node = this.startNode<N.TsImportType>();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(TSErrors.UnsupportedImportTypeArgument, this.state.startLoc);\n        if (process.env.BABEL_8_BREAKING) {\n          // Consume as an non-conditional type so that we can recover from this error\n          node.argument = this.tsParseNonConditionalType() as any;\n        } else {\n          node.argument = super.parseExprAtom() as any;\n        }\n      } else {\n        if (process.env.BABEL_8_BREAKING) {\n          node.argument = this.tsParseLiteralTypeNode();\n        } else {\n          // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n          node.argument = this.parseStringLiteral(this.state.value);\n        }\n      }\n      if (this.eat(tt.comma) && !this.match(tt.parenR)) {\n        node.options = super.parseMaybeAssignAllowIn();\n        this.eat(tt.comma);\n      } else {\n        node.options = null;\n      }\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        // In this instance, the entity name will actually itself be a\n        // qualifier, so allow it to be a reserved word as well.\n        node.qualifier = this.tsParseEntityName();\n      }\n      if (this.match(tt.lt)) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.typeArguments = this.tsParseTypeArguments();\n        } else {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean = true): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier(allowReservedWords);\n      while (this.eat(tt.dot)) {\n        const node: Undone<N.TsQualifiedName> =\n          this.startNodeAtNode<N.TsQualifiedName>(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node = this.startNode<N.TsTypeReference>();\n      node.typeName = this.tsParseEntityName();\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.typeArguments = this.tsParseTypeArguments();\n        } else {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node = this.startNodeAtNode<N.TsTypePredicate>(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node = this.startNode<N.TsThisType>();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node = this.startNode<N.TsTypeQuery>();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName();\n      }\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.typeArguments = this.tsParseTypeArguments();\n        } else {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseInOutModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\"],\n      disallowedModifiers: [\n        \"const\",\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"readonly\",\n        \"declare\",\n        \"abstract\",\n        \"override\",\n      ],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n    });\n\n    tsParseConstModifier = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"const\"],\n      // for better error recovery\n      disallowedModifiers: [\"in\", \"out\"],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n    });\n\n    tsParseInOutConstModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\", \"const\"],\n      disallowedModifiers: [\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"readonly\",\n        \"declare\",\n        \"abstract\",\n        \"override\",\n      ],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n    });\n\n    tsParseTypeParameter(\n      parseModifiers: (node: Undone<N.TsTypeParameter>) => void,\n    ): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n\n      parseModifiers(node);\n\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(\n      parseModifiers: (node: N.TsTypeParameter) => void,\n    ): N.TsTypeParameterDeclaration | undefined | null {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters(parseModifiers);\n      }\n    }\n\n    tsParseTypeParameters(parseModifiers: (node: N.TsTypeParameter) => void) {\n      const node = this.startNode<N.TsTypeParameterDeclaration>();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this, parseModifiers),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeParameters, node);\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: Undone<N.TsSignatureDeclaration>,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n\n      // https://github.com/babel/babel/issues/9231\n      const paramsKey = process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\";\n      const returnTypeKey = process.env.BABEL_8_BREAKING\n        ? \"returnType\"\n        : \"typeAnnotation\";\n\n      signature.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      this.expect(tt.parenL);\n      signature[paramsKey] = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): Array<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern\n    > {\n      const list = super.parseBindingList(\n        tt.parenR,\n        charCodes.rightParenthesis,\n        ParseBindingListFlags.IS_FUNCTION_PARAMS,\n      );\n      for (const pattern of list) {\n        const { type } = pattern;\n        if (type === \"AssignmentPattern\" || type === \"TSParameterProperty\") {\n          this.raise(TSErrors.UnsupportedSignatureParameterKind, pattern, {\n            type,\n          });\n        }\n      }\n      return list as Exclude<\n        (typeof list)[0],\n        N.AssignmentPattern | N.TSParameterProperty\n      >[];\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: Undone<\n        N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration\n      >,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(\n      node: Undone<N.TsIndexSignature>,\n    ): N.TsIndexSignature | undefined {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(TSErrors.ReadonlyForMethodSignature, node);\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(\n            TSErrors.AccessorCannotHaveTypeParameters,\n            this.state.curPosition(),\n          );\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        const paramsKey = process.env.BABEL_8_BREAKING\n          ? \"params\"\n          : \"parameters\";\n        const returnTypeKey = process.env.BABEL_8_BREAKING\n          ? \"returnType\"\n          : \"typeAnnotation\";\n        if (method.kind === \"get\") {\n          if (method[paramsKey].length > 0) {\n            this.raise(Errors.BadGetterArity, this.state.curPosition());\n            if (this.isThisParam(method[paramsKey][0])) {\n              this.raise(\n                TSErrors.AccessorCannotDeclareThisParameter,\n                this.state.curPosition(),\n              );\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method[paramsKey].length !== 1) {\n            this.raise(Errors.BadSetterArity, this.state.curPosition());\n          } else {\n            const firstParameter = method[paramsKey][0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(\n                TSErrors.AccessorCannotDeclareThisParameter,\n                this.state.curPosition(),\n              );\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(\n                TSErrors.SetAccessorCannotHaveOptionalParameter,\n                this.state.curPosition(),\n              );\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(\n                TSErrors.SetAccessorCannotHaveRestParameter,\n                this.state.curPosition(),\n              );\n            }\n          }\n          if (method[returnTypeKey]) {\n            this.raise(\n              TSErrors.SetAccessorCannotHaveReturnType,\n              method[returnTypeKey],\n            );\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id = this.startNode<N.Identifier>();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers(\n        {\n          allowedModifiers: [\"readonly\"],\n          disallowedModifiers: [\n            \"declare\",\n            \"abstract\",\n            \"private\",\n            \"protected\",\n            \"public\",\n            \"static\",\n            \"override\",\n          ],\n        },\n        node,\n      );\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      super.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        super.parsePropertyName(node);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node = this.startNode<N.TsTypeLiteral>();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): Array<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node = this.startNode<N.TsMappedType>();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      if (process.env.BABEL_8_BREAKING) {\n        node.key = this.tsParseTypeParameterName() as N.Identifier;\n        node.constraint = this.tsExpectThenParseType(tt._in);\n      } else {\n        const typeParameter = this.startNode<N.TsTypeParameter>();\n        typeParameter.name = this.tsParseTypeParameterName();\n        typeParameter.constraint = this.tsExpectThenParseType(tt._in);\n        // @ts-expect-error for Babel 7\n        node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      }\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node = this.startNode<N.TsTupleType>();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      node.elementTypes.forEach(elementNode => {\n        const { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(TSErrors.OptionalTypeBeforeRequired, elementNode);\n        }\n\n        seenOptionalElement ||=\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsNamedTupleMember | N.TsType {\n      // parses `...TsType[]`\n\n      const { startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n\n      let labeled: boolean;\n      let label: N.Identifier;\n      let optional: boolean;\n      let type: N.TsNamedTupleMember | N.TsType;\n\n      const isWord = tokenIsKeywordOrIdentifier(this.state.type);\n      const chAfterWord = isWord ? this.lookaheadCharCode() : null;\n      if (chAfterWord === charCodes.colon) {\n        labeled = true;\n        optional = false;\n        label = this.parseIdentifier(true);\n        this.expect(tt.colon);\n        type = this.tsParseType();\n      } else if (chAfterWord === charCodes.questionMark) {\n        optional = true;\n        const startLoc = this.state.startLoc;\n        const wordName = this.state.value;\n        const typeOrLabel = this.tsParseNonArrayType();\n\n        if (this.lookaheadCharCode() === charCodes.colon) {\n          labeled = true;\n          label = this.createIdentifier(\n            this.startNodeAt<N.Identifier>(startLoc),\n            wordName,\n          );\n          this.expect(tt.question);\n          this.expect(tt.colon);\n          type = this.tsParseType();\n        } else {\n          labeled = false;\n          type = typeOrLabel;\n          this.expect(tt.question);\n        }\n      } else {\n        type = this.tsParseType();\n        optional = this.eat(tt.question);\n        // In this case (labeled === true) could be only in invalid label.\n        // E.g. [x.y:type]\n        // An error is raised while processing node.\n        labeled = this.eat(tt.colon);\n      }\n\n      if (labeled) {\n        let labeledNode: Undone<N.TsNamedTupleMember>;\n        if (label) {\n          labeledNode = this.startNodeAtNode<N.TsNamedTupleMember>(label);\n          labeledNode.optional = optional;\n          labeledNode.label = label;\n          labeledNode.elementType = type;\n\n          if (this.eat(tt.question)) {\n            labeledNode.optional = true;\n            this.raise(\n              TSErrors.TupleOptionalAfterType,\n              this.state.lastTokStartLoc,\n            );\n          }\n        } else {\n          labeledNode = this.startNodeAtNode<N.TsNamedTupleMember>(type);\n          labeledNode.optional = optional;\n          this.raise(TSErrors.InvalidTupleMemberLabel, type);\n          // @ts-expect-error This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          labeledNode.label = type;\n          labeledNode.elementType = this.tsParseType();\n        }\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode = this.startNodeAtNode<N.TsOptionalType>(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode = this.startNodeAt<N.TsRestType>(startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode<N.TsParenthesizedType>();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node = this.startNode<\n        N.TsFunctionOrConstructorType | N.TsConstructorType\n      >();\n      if (type === \"TSConstructorType\") {\n        (node as Undone<N.TsConstructorType>).abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsInAllowConditionalTypesContext(() =>\n        this.tsFillSignature(tt.arrow, node),\n      );\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node = this.startNode<N.TsLiteralType>();\n      switch (this.state.type) {\n        case tt.num:\n        case tt.bigint:\n        case tt.string:\n        case tt._true:\n        case tt._false:\n          // For compatibility to estree we cannot call parseLiteral directly here\n          // @ts-expect-error refine typings\n          node.literal = super.parseExprAtom();\n          break;\n        default:\n          this.unexpected();\n      }\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsLiteralType {\n      const node = this.startNode<N.TsLiteralType>();\n      node.literal = super.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType | N.Expression {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node = this.startNode<N.TsLiteralType>();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              this.unexpected();\n            }\n            // @ts-expect-error: parseMaybeUnary must returns unary expression\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (\n              !(this.optionFlags & OptionFlags.CreateParenthesizedExpressions)\n            ) {\n              const startLoc = this.state.startLoc;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startLoc.index);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.templateNonTail:\n        case tt.templateTail:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                  ? \"TSNullKeyword\"\n                  : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node = this.startNode<N.TsKeywordType>();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node = this.startNodeAtNode<N.TsArrayType>(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node = this.startNodeAtNode<N.TsIndexedAccessType>(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node = this.startNode<N.TsTypeOperator>();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: Undone<N.TsTypeOperator>) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(TSErrors.UnexpectedReadonly, node);\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode<N.TsInferType>();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode<N.TsTypeParameter>();\n      typeParameter.name = this.tsParseTypeParameterName();\n      typeParameter.constraint = this.tsTryParse(() =>\n        this.tsParseConstraintForInferType(),\n      );\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseConstraintForInferType() {\n      if (this.eat(tt._extends)) {\n        const constraint = this.tsInDisallowConditionalTypesContext(() =>\n          this.tsParseType(),\n        );\n        if (\n          this.state.inDisallowConditionalTypesContext ||\n          !this.match(tt.question)\n        ) {\n          return constraint;\n        }\n      }\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n          ? this.tsParseInferType()\n          : this.tsInAllowConditionalTypesContext(() =>\n              this.tsParseArrayTypeOrHigher(),\n            );\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node = this.startNode<N.TsUnionType | N.TsIntersectionType>();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        // Return true if we can parse an object pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          this.parseObjectLike(tt.braceR, true);\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      if (this.match(tt.bracketL)) {\n        this.next();\n        // Return true if we can parse an array pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          super.parseBindingList(\n            tt.bracketR,\n            charCodes.rightSquareBracket,\n            ParseBindingListFlags.ALLOW_EMPTY,\n          );\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t = this.startNode<N.TsTypeAnnotation>();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = thisTypePredicate;\n            node.asserts = true;\n            (node as N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            thisTypePredicate.asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node as N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): N.TsTypeAnnotation | undefined {\n      if (this.match(tt.colon)) {\n        return this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n    }\n\n    tsTryParseTypeAnnotation(): N.TsTypeAnnotation | undefined {\n      if (this.match(tt.colon)) {\n        return this.tsParseTypeAnnotation();\n      }\n    }\n\n    tsTryParseType(): N.TsType | undefined {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): N.Identifier | undefined {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(\n          Errors.InvalidEscapedReservedWord,\n          this.state.lastTokStartLoc,\n          {\n            reservedWord: \"asserts\",\n          },\n        );\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: Undone<N.TsTypeAnnotation> = this.startNode<N.TsTypeAnnotation>(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n\n      if (\n        this.state.inDisallowConditionalTypesContext ||\n        this.hasPrecedingLineBreak() ||\n        !this.eat(tt._extends)\n      ) {\n        return type;\n      }\n      const node = this.startNodeAtNode<N.TsConditionalType>(type);\n      node.checkType = type;\n\n      node.extendsType = this.tsInDisallowConditionalTypesContext(() =>\n        this.tsParseNonConditionalType(),\n      );\n\n      this.expect(tt.question);\n      node.trueType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      this.expect(tt.colon);\n      node.falseType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._new\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(TSErrors.ReservedTypeAssertion, this.state.startLoc);\n      }\n\n      const node = this.startNode<N.TsTypeAssertion>();\n      node.typeAnnotation = this.tsInType(() => {\n        this.next(); // \"<\"\n        return this.match(tt._const)\n          ? this.tsParseTypeReference()\n          : this.tsParseType();\n      });\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(token: \"extends\"): Array<N.TSInterfaceHeritage>;\n    tsParseHeritageClause(token: \"implements\"): Array<N.TSClassImplements>;\n    tsParseHeritageClause(\n      token: \"extends\" | \"implements\",\n    ): Array<N.TSClassImplements> | Array<N.TSInterfaceHeritage> {\n      const originalStartLoc = this.state.startLoc;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        () => {\n          const node = this.startNode<\n            N.TSClassImplements | N.TSInterfaceHeritage\n          >();\n          node.expression = this.tsParseEntityName();\n          if (process.env.BABEL_8_BREAKING) {\n            if (this.match(tt.lt)) {\n              node.typeArguments = this.tsParseTypeArguments();\n            }\n            return this.finishNode(\n              node,\n              token === \"extends\" ? \"TSInterfaceHeritage\" : \"TSClassImplements\",\n            );\n          } else {\n            if (this.match(tt.lt)) {\n              // @ts-expect-error Babel 7 vs Babel 8\n              node.typeParameters = this.tsParseTypeArguments();\n            }\n\n            return this.finishNode(\n              node,\n              // @ts-expect-error Babel 7 vs Babel 8\n              \"TSExpressionWithTypeArguments\",\n            );\n          }\n        },\n      );\n\n      if (!delimitedList.length) {\n        this.raise(TSErrors.EmptyHeritageClauseType, originalStartLoc, {\n          token,\n        });\n      }\n\n      return delimitedList as\n        | Array<N.TSClassImplements>\n        | Array<N.TSInterfaceHeritage>;\n    }\n\n    tsParseInterfaceDeclaration(\n      node: Undone<N.TsInterfaceDeclaration>,\n      properties: {\n        declare?: true;\n      } = {},\n    ): N.TsInterfaceDeclaration | null {\n      if (this.hasFollowingLineBreak()) return null;\n      this.expectContextual(tt._interface);\n      if (properties.declare) node.declare = true;\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_INTERFACE);\n      } else {\n        node.id = null;\n        this.raise(TSErrors.MissingInterfaceName, this.state.startLoc);\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutConstModifiers,\n      );\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body = this.startNode<N.TSInterfaceBody>();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BindingFlag.TYPE_TS_TYPE);\n\n      node.typeAnnotation = this.tsInType(() => {\n        node.typeParameters = this.tsTryParseTypeParameters(\n          this.tsParseInOutModifiers,\n        );\n\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node = this.startNode<N.TsKeywordType>();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    // Parse in top level normal context if we are in a JSX context\n    tsInTopLevelContext<T>(cb: () => T): T {\n      if (this.curContext() !== tc.brace) {\n        const oldContext = this.state.context;\n        this.state.context = [oldContext[0]];\n        try {\n          return cb();\n        } finally {\n          this.state.context = oldContext;\n        }\n      } else {\n        return cb();\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsInDisallowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsInAllowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = false;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | undefined {\n      if (this.match(token)) {\n        return this.tsNextThenParseType();\n      }\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsInType(() => {\n        this.expect(token);\n        return this.tsParseType();\n      });\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsInType(() => {\n        this.next();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node = this.startNode<N.TsEnumMember>();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? super.parseStringLiteral(this.state.value)\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = super.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: Undone<N.TsEnumDeclaration>,\n      properties: {\n        const?: true;\n        declare?: true;\n      } = {},\n    ): N.TsEnumDeclaration {\n      if (properties.const) node.const = true;\n      if (properties.declare) node.declare = true;\n      this.expectContextual(tt._enum);\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(\n        node.id,\n        node.const ? BindingFlag.TYPE_TS_CONST_ENUM : BindingFlag.TYPE_TS_ENUM,\n      );\n\n      if (process.env.BABEL_8_BREAKING) {\n        node.body = this.tsParseEnumBody();\n      } else {\n        this.expect(tt.braceL);\n        node.members = this.tsParseDelimitedList(\n          \"EnumMembers\",\n          this.tsParseEnumMember.bind(this),\n        );\n        this.expect(tt.braceR);\n      }\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseEnumBody(): N.TsEnumBody {\n      const node = this.startNode<N.TsEnumBody>();\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumBody\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node = this.startNode<N.TsModuleBlock>();\n      this.scope.enter(ScopeFlag.OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      super.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: Undone<N.TsModuleDeclaration>,\n      nested: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = process.env.BABEL_8_BREAKING\n        ? this.tsParseEntityName()\n        : this.parseIdentifier();\n\n      if (\n        process.env.BABEL_8_BREAKING ? node.id.type === \"Identifier\" : !nested\n      ) {\n        // @ts-expect-error checked above\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_NAMESPACE);\n      }\n\n      if (!process.env.BABEL_8_BREAKING && this.eat(tt.dot)) {\n        const inner = this.startNode<N.TsModuleDeclaration>();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        // @ts-expect-error Fixme: refine typings\n        node.body = inner;\n      } else {\n        this.scope.enter(ScopeFlag.TS_MODULE);\n        this.prodParam.enter(ParamKind.PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.kind = \"global\";\n        if (!process.env.BABEL_8_BREAKING) {\n          node.global = true;\n        }\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.kind = \"module\";\n        node.id = super.parseStringLiteral(this.state.value);\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(ScopeFlag.TS_MODULE);\n        this.prodParam.enter(ParamKind.PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: Undone<N.TsImportEqualsDeclaration>,\n      maybeDefaultIdentifier?: N.Identifier | null,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = maybeDefaultIdentifier || this.parseIdentifier();\n      this.checkIdentifier(node.id, BindingFlag.TYPE_TS_VALUE_IMPORT);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(TSErrors.ImportAliasHasImportType, moduleReference);\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node = this.startNode<N.TsExternalModuleReference>();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = super.parseExprAtom() as N.StringLiteral;\n      this.expect(tt.parenR);\n      this.sawUnambiguousESM = true;\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T extends N.NodeBase | undefined | null>(\n      f: () => T,\n    ): T | undefined | null {\n      const result = this.tryParse(\n        abort =>\n          // @ts-expect-error todo(flow->ts)\n          f() || abort(),\n      );\n\n      if (result.aborted || !result.node) return;\n      if (result.error) this.state = result.failState;\n      // @ts-expect-error refine typings\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => T | undefined | false): T | undefined {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      }\n      this.state = state;\n    }\n\n    tsTryParseDeclare(nany: any): N.Declaration | undefined {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let startType = this.state.type;\n      let kind: \"let\" | null;\n\n      if (this.isContextual(tt._let)) {\n        startType = tt._var;\n        kind = \"let\";\n      }\n\n      // @ts-expect-error refine typings\n      return this.tsInAmbientContext(() => {\n        switch (startType) {\n          case tt._function:\n            nany.declare = true;\n            return super.parseFunctionStatement(\n              nany,\n              /* async */ false,\n              /* isHangingDeclaration */ false,\n            );\n          case tt._class:\n            // While this is also set by tsParseExpressionStatement, we need to set it\n            // before parsing the class declaration to know how to register it in the scope.\n            nany.declare = true;\n            return this.parseClass(\n              nany,\n              /* isStatement */ true,\n              /* optionalId */ false,\n            );\n          case tt._enum:\n            return this.tsParseEnumDeclaration(nany, { declare: true });\n          case tt._global:\n            return this.tsParseAmbientExternalModuleDeclaration(nany);\n          case tt._const:\n          case tt._var:\n            if (!this.match(tt._const) || !this.isLookaheadContextual(\"enum\")) {\n              nany.declare = true;\n              return this.parseVarStatement(\n                nany,\n                kind || this.state.value,\n                true,\n              );\n            }\n\n            // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n            this.expect(tt._const);\n            return this.tsParseEnumDeclaration(nany, {\n              const: true,\n              declare: true,\n            });\n          case tt._interface: {\n            const result = this.tsParseInterfaceDeclaration(nany, {\n              declare: true,\n            });\n            if (result) return result;\n          }\n          // fallthrough\n          default:\n            if (tokenIsIdentifier(startType)) {\n              return this.tsParseDeclaration(\n                nany,\n                this.state.value,\n                /* next */ true,\n                /* decorators */ null,\n              );\n            }\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): N.Declaration | undefined {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n        /* decorators */ null,\n      );\n    }\n\n    tsParseExpressionStatement(\n      node: Undone<N.TsModuleDeclaration>,\n      expr: N.Identifier,\n      decorators: N.Decorator[] | null,\n    ): N.Declaration | undefined {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n          }\n          return declaration;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(ScopeFlag.TS_MODULE);\n            this.prodParam.enter(ParamKind.PARAM);\n            const mod = node;\n            mod.kind = \"global\";\n            if (!process.env.BABEL_8_BREAKING) {\n              node.global = true;\n            }\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(\n            node,\n            expr.name,\n            /* next */ false,\n            decorators,\n          );\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n      decorators: N.Decorator[] | null,\n    ): N.Declaration | undefined | null {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node, decorators);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              node.kind = \"module\";\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            node.kind = \"namespace\";\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined {\n      if (!this.match(tt.lt)) return;\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: Undone<N.ArrowFunctionExpression> | undefined =\n        this.tsTryParseAndCatch(() => {\n          const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n          node.typeParameters = this.tsParseTypeParameters(\n            this.tsParseConstModifier,\n          );\n          // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n          super.parseFunctionParams(node);\n          node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n          this.expect(tt.arrow);\n          return node;\n        });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) return;\n\n      return super.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    // Used when parsing type arguments from ES or JSX productions, where the first token\n    // has been created without state.inType. Thus we need to re-scan the lt token.\n    tsParseTypeArgumentsInExpression():\n      | N.TsTypeParameterInstantiation\n      | undefined {\n      if (this.reScan_lt() !== tt.lt) return;\n      return this.tsParseTypeArguments();\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode<N.TsTypeParameterInstantiation>();\n      node.params = this.tsInType(() =>\n        this.tsInTopLevelContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeArguments, node);\n      } else if (!this.state.inType && this.curContext() === tc.brace) {\n        // rescan `>` when we are no longer in type context and JSX parsing context\n        // since it was tokenized when `inType` is `true`.\n        this.reScan_lt_gt();\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      flags: ParseBindingListFlags,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location to include modifiers in range\n      const startLoc = this.state.startLoc;\n\n      const modified: ModifierBase = {};\n      this.tsParseModifiers(\n        {\n          allowedModifiers: [\n            \"public\",\n            \"private\",\n            \"protected\",\n            \"override\",\n            \"readonly\",\n          ],\n        },\n        modified,\n      );\n      const accessibility = modified.accessibility;\n      const override = modified.override;\n      const readonly = modified.readonly;\n      if (\n        !(flags & ParseBindingListFlags.IS_CONSTRUCTOR_PARAMS) &&\n        (accessibility || readonly || override)\n      ) {\n        this.raise(TSErrors.UnexpectedParameterModifier, startLoc);\n      }\n\n      const left = this.parseMaybeDefault();\n      if (flags & ParseBindingListFlags.IS_FUNCTION_PARAMS) {\n        this.parseFunctionParamType(left);\n      }\n      const elt = this.parseMaybeDefault(left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp = this.startNodeAt<N.TSParameterProperty>(startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(TSErrors.UnsupportedParameterPropertyKind, pp);\n        }\n        pp.parameter = elt as any as N.Identifier | N.AssignmentPattern;\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    isSimpleParameter(node: N.Pattern | N.TSParameterProperty): boolean {\n      return (\n        (node.type === \"TSParameterProperty\" &&\n          super.isSimpleParameter(node.parameter)) ||\n        super.isSimpleParameter(node)\n      );\n    }\n\n    tsDisallowOptionalPattern(node: Undone<N.Function>) {\n      for (const param of node.params) {\n        if (\n          param.type !== \"Identifier\" &&\n          (param as any).optional &&\n          !this.state.isAmbientContext\n        ) {\n          this.raise(TSErrors.PatternIsOptional, param);\n        }\n      }\n    }\n\n    setArrowFunctionParameters(\n      node: Undone<N.ArrowFunctionExpression>,\n      params: N.Expression[],\n      trailingCommaLoc?: Position | null,\n    ): void {\n      super.setArrowFunctionParameters(node, params, trailingCommaLoc);\n      this.tsDisallowOptionalPattern(node);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n            ? \"TSDeclareMethod\"\n            : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        return this.finishNode(node, bodilessType);\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(TSErrors.DeclareFunctionHasImplementation, node);\n        if ((node as Undone<N.FunctionDeclaration>).declare) {\n          return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        }\n      }\n      this.tsDisallowOptionalPattern(node);\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodiless function, we need to do it here.\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(node);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: Array<N.Expression | N.SpreadElement>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(TSErrors.UnexpectedTypeAnnotation, node.typeAnnotation);\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: Array<N.Expression | undefined | null>,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isInParens?: boolean,\n    ): Array<N.Expression | undefined | null> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression =\n          this.startNodeAt<N.TsNonNullExpression>(startLoc);\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      // handles 'f<<T>'\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        let missingParenErrorLoc;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn =\n              this.tsTryParseGenericAsyncArrowFunction(startLoc);\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const typeArguments = this.tsParseTypeArgumentsInExpression();\n          if (!typeArguments) return;\n\n          if (isOptionalCall && !this.match(tt.parenL)) {\n            missingParenErrorLoc = this.state.curPosition();\n            return;\n          }\n\n          if (tokenIsTemplate(this.state.type)) {\n            const result = super.parseTaggedTemplateExpression(\n              base,\n              startLoc,\n              state,\n            );\n            if (process.env.BABEL_8_BREAKING) {\n              result.typeArguments = typeArguments;\n            } else {\n              result.typeParameters = typeArguments;\n            }\n            return result;\n          }\n\n          if (!noCalls && this.eat(tt.parenL)) {\n            const node = this.startNodeAt<\n              N.CallExpression | N.OptionalCallExpression\n            >(startLoc);\n            node.callee = base;\n            // @ts-expect-error (won't be any undefined arguments)\n            node.arguments = this.parseCallExpressionArguments(tt.parenR);\n\n            // Handles invalid case: `f<T>(a:b)`\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n\n            if (process.env.BABEL_8_BREAKING) {\n              node.typeArguments = typeArguments;\n            } else {\n              node.typeParameters = typeArguments;\n            }\n\n            if (state.optionalChainMember) {\n              (node as Undone<N.OptionalCallExpression>).optional =\n                isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          }\n\n          const tokenType = this.state.type;\n          if (\n            // a<b>>c is not (a<b>)>c, but a<(b>>c)\n            tokenType === tt.gt ||\n            // a<b>>>c is not (a<b>)>>c, but a<(b>>>c)\n            tokenType === tt.bitShiftR ||\n            // a<b>c is (a<b)>c\n            (tokenType !== tt.parenL &&\n              tokenCanStartExpression(tokenType) &&\n              !this.hasPrecedingLineBreak())\n          ) {\n            // Bail out.\n            return;\n          }\n\n          const node = this.startNodeAt<N.TsInstantiationExpression>(startLoc);\n          node.expression = base;\n          if (process.env.BABEL_8_BREAKING) {\n            node.typeArguments = typeArguments;\n          } else {\n            node.typeParameters = typeArguments;\n          }\n          return this.finishNode(node, \"TSInstantiationExpression\");\n        });\n\n        if (missingParenErrorLoc) {\n          this.unexpected(missingParenErrorLoc, tt.parenL);\n        }\n\n        if (result) {\n          if (\n            result.type === \"TSInstantiationExpression\" &&\n            (this.match(tt.dot) ||\n              (this.match(tt.questionDot) &&\n                this.lookaheadCharCode() !== charCodes.leftParenthesis))\n          ) {\n            this.raise(\n              TSErrors.InvalidPropertyAccessAfterInstantiationExpression,\n              this.state.startLoc,\n            );\n          }\n          return result;\n        }\n      }\n\n      return super.parseSubscript(base, startLoc, noCalls, state);\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      const { callee } = node;\n      if (\n        callee.type === \"TSInstantiationExpression\" &&\n        !callee.extra?.parenthesized\n      ) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.typeArguments = callee.typeArguments;\n        } else {\n          node.typeParameters = callee.typeParameters;\n        }\n        node.callee = callee.expression;\n      }\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartLoc: Position,\n      minPrec: number,\n    ): N.Expression {\n      let isSatisfies: boolean;\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        (this.isContextual(tt._as) ||\n          (isSatisfies = this.isContextual(tt._satisfies)))\n      ) {\n        const node = this.startNodeAt<\n          N.TsAsExpression | N.TsSatisfiesExpression\n        >(leftStartLoc);\n        node.expression = left;\n        node.typeAnnotation = this.tsInType(() => {\n          this.next(); // \"as\" or \"satisfies\"\n          if (this.match(tt._const)) {\n            if (isSatisfies) {\n              this.raise(Errors.UnexpectedKeyword, this.state.startLoc, {\n                keyword: \"const\",\n              });\n            }\n            return this.tsParseTypeReference();\n          }\n\n          return this.tsParseType();\n        });\n        this.finishNode(\n          node,\n          isSatisfies ? \"TSSatisfiesExpression\" : \"TSAsExpression\",\n        );\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(\n          // @ts-expect-error todo(flow->ts)\n          node,\n          leftStartLoc,\n          minPrec,\n        );\n      }\n\n      return super.parseExprOp(left, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ): void {\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n      if (!this.state.isAmbientContext) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(\n          TSErrors.ImportReflectionHasImportType,\n          node.specifiers[0].loc.start,\n        );\n      }\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    isPotentialImportPhase(isExport: boolean): boolean {\n      if (super.isPotentialImportPhase(isExport)) return true;\n      if (this.isContextual(tt._type)) {\n        const ch = this.lookaheadCharCode();\n        return isExport\n          ? ch === charCodes.leftCurlyBrace || ch === charCodes.asterisk\n          : ch !== charCodes.equalsTo;\n      }\n      return !isExport && this.isContextual(tt._typeof);\n    }\n\n    applyImportPhase(\n      node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n      isExport: boolean,\n      phase: string | null,\n      loc?: Position,\n    ): void {\n      super.applyImportPhase(node, isExport, phase, loc);\n      if (isExport) {\n        (node as N.ExportNamedDeclaration).exportKind =\n          phase === \"type\" ? \"type\" : \"value\";\n      } else {\n        (node as N.ImportDeclaration).importKind =\n          phase === \"type\" || phase === \"typeof\" ? phase : \"value\";\n      }\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    ): N.AnyImport {\n      if (this.match(tt.string)) {\n        node.importKind = \"value\";\n        return super.parseImport(node as Undone<N.ImportDeclaration>);\n      }\n\n      let importNode;\n      if (\n        tokenIsIdentifier(this.state.type) &&\n        this.lookaheadCharCode() === charCodes.equalsTo\n      ) {\n        node.importKind = \"value\";\n        return this.tsParseImportEqualsDeclaration(\n          node as Undone<N.TsImportEqualsDeclaration>,\n        );\n      } else if (this.isContextual(tt._type)) {\n        const maybeDefaultIdentifier = this.parseMaybeImportPhase(\n          node as Undone<N.ImportDeclaration>,\n          /* isExport */ false,\n        );\n        if (this.lookaheadCharCode() === charCodes.equalsTo) {\n          return this.tsParseImportEqualsDeclaration(\n            node as Undone<N.TsImportEqualsDeclaration>,\n            maybeDefaultIdentifier,\n          );\n        } else {\n          importNode = super.parseImportSpecifiersAndAfter(\n            node as Undone<N.ImportDeclaration>,\n            maybeDefaultIdentifier,\n          );\n        }\n      } else {\n        importNode = super.parseImport(node as Undone<N.ImportDeclaration>);\n      }\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        // @ts-expect-error refine typings\n        importNode.specifiers.length > 1 &&\n        // @ts-expect-error refine typings\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, importNode);\n      }\n\n      return importNode;\n    }\n\n    parseExport(\n      node: Undone<\n        | N.ExportDefaultDeclaration\n        | N.ExportAllDeclaration\n        | N.ExportNamedDeclaration\n      >,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.next(); // eat `tt._import`\n        const nodeImportEquals = node as Undone<N.TsImportEqualsDeclaration>;\n        let maybeDefaultIdentifier: N.Identifier | null = null;\n        if (\n          this.isContextual(tt._type) &&\n          // We pass false here, because we are parsing an `import ... =`\n          this.isPotentialImportPhase(/* isExport */ false)\n        ) {\n          maybeDefaultIdentifier = this.parseMaybeImportPhase(\n            nodeImportEquals,\n            /* isExport */ false,\n          );\n        } else {\n          nodeImportEquals.importKind = \"value\";\n        }\n        return this.tsParseImportEqualsDeclaration(\n          nodeImportEquals,\n          maybeDefaultIdentifier,\n          /* isExport */ true,\n        );\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign = node as Undone<N.TsExportAssignment>;\n        assign.expression = super.parseExpression();\n        this.semicolon();\n        this.sawUnambiguousESM = true;\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl = node as Undone<N.TsNamespaceExportDeclaration>;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        return super.parseExport(\n          node as Undone<N.ExportAllDeclaration | N.ExportDefaultDeclaration>,\n          decorators,\n        );\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.ExportDefaultDeclaration[\"declaration\"] {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode<N.Class>();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        return this.parseClass(cls, true, true);\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(\n          this.startNode<N.TsInterfaceDeclaration>(),\n        );\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseVarStatement(\n      node: N.VariableDeclaration,\n      kind: \"var\" | \"let\" | \"const\" | \"using\",\n      allowMissingInitializer: boolean = false,\n    ) {\n      const { isAmbientContext } = this.state;\n      const declaration = super.parseVarStatement(\n        node,\n        kind,\n        allowMissingInitializer || isAmbientContext,\n      );\n\n      if (!isAmbientContext) return declaration;\n\n      for (const { id, init } of declaration.declarations) {\n        // Empty initializer is the easy case that we want.\n        if (!init) continue;\n\n        // var and let aren't ever allowed initializers.\n        if (kind !== \"const\" || !!id.typeAnnotation) {\n          this.raise(TSErrors.InitializerNotAllowedInAmbientContext, init);\n        } else if (\n          !isValidAmbientConstInitializer(init, this.hasPlugin(\"estree\"))\n        ) {\n          this.raise(\n            TSErrors.ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference,\n            init,\n          );\n        }\n      }\n\n      return declaration;\n    }\n\n    parseStatementContent(\n      flags: ParseStatementFlag,\n      decorators?: N.Decorator[] | null,\n    ): N.Statement {\n      if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n        const node = this.startNode<N.TsEnumDeclaration>();\n        this.expect(tt._const); // eat 'const'\n        return this.tsParseEnumDeclaration(node, { const: true });\n      }\n\n      if (this.isContextual(tt._enum)) {\n        return this.tsParseEnumDeclaration(\n          this.startNode<N.TsEnumDeclaration>(),\n        );\n      }\n\n      if (this.isContextual(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(this.startNode());\n        if (result) return result;\n      }\n\n      return super.parseStatementContent(flags, decorators);\n    }\n\n    parseAccessModifier(): N.Accessibility | undefined | null {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: readonly TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ] as const;\n      this.tsParseModifiers(\n        {\n          allowedModifiers: modifiers,\n          disallowedModifiers: [\"in\", \"out\"],\n          stopOnStartOfClassStaticBlock: true,\n          errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n        },\n        member,\n      );\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(\n              TSErrors.StaticBlockCannotHaveModifier,\n              this.state.curPosition(),\n            );\n          }\n          super.parseClassStaticBlock(classBody, member as N.StaticBlock);\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: Undone<N.ClassMember | N.TsIndexSignature>,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(\n        member as Undone<N.TsIndexSignature>,\n      );\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member as any).abstract) {\n          this.raise(TSErrors.IndexSignatureHasAbstract, member);\n        }\n        if ((member as any).accessibility) {\n          this.raise(TSErrors.IndexSignatureHasAccessibility, member, {\n            modifier: (member as any).accessibility,\n          });\n        }\n        if ((member as any).declare) {\n          this.raise(TSErrors.IndexSignatureHasDeclare, member);\n        }\n        if ((member as any).override) {\n          this.raise(TSErrors.IndexSignatureHasOverride, member);\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member as any).abstract) {\n        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, member);\n      }\n\n      if ((member as any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(TSErrors.OverrideNotInSubClass, member);\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(\n        classBody,\n        member as Undone<N.ClassMember>,\n        state,\n        isStatic,\n      );\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp as any).readonly && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasReadonly, methodOrProp);\n      }\n\n      if ((methodOrProp as any).declare && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasDeclare, methodOrProp);\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    // @ts-expect-error plugin overrides interfaces\n    parseExpressionStatement(\n      node: Undone<N.ExpressionStatement>,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? // @ts-expect-error refine typings\n            this.tsParseExpressionStatement(node, expr, decorators)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!this.state.maybeInArrowParameters || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n\n          startLoc,\n          refExpressionErrors,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startLoc),\n      );\n\n      if (!result.node) {\n        if (result.error) {\n          /*:: invariant(refExpressionErrors != null) */\n          super.setOptionalParametersError(refExpressionErrors, result.error);\n        }\n\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem<T extends N.Expression | N.RestElement | N.SpreadElement>(\n      node: T,\n      startLoc: Position,\n    ): T | N.TsTypeCastExpression {\n      const newNode = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        (newNode as N.Identifier).optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt<N.TsTypeCastExpression>(startLoc);\n        typeCastNode.expression = node as N.Expression;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (!this.state.isAmbientContext && this.isContextual(tt._declare)) {\n        return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n      }\n\n      // Store original location\n      const startLoc = this.state.startLoc;\n\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(\n          TSErrors.ExpectedAmbientAfterExportDeclare,\n          this.state.startLoc,\n        );\n      }\n\n      const isIdentifier = tokenIsIdentifier(this.state.type);\n      const declaration: N.Declaration | undefined | null =\n        (isIdentifier && this.tsTryParseExportDeclaration()) ||\n        super.parseExportDeclaration(node);\n\n      if (!declaration) return null;\n\n      if (\n        declaration.type === \"TSInterfaceDeclaration\" ||\n        declaration.type === \"TSTypeAliasDeclaration\" ||\n        isDeclare\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType?: BindingFlag,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node as any).declare\n          ? BindingFlag.TYPE_TS_AMBIENT\n          : BindingFlag.TYPE_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutConstModifiers,\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty,\n    ): void {\n      if (!node.optional) {\n        if (this.eat(tt.bang)) {\n          node.definite = true;\n        } else if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (\n        this.state.isAmbientContext &&\n        !(node.readonly && !node.typeAnnotation) &&\n        this.match(tt.eq)\n      ) {\n        this.raise(\n          TSErrors.DeclareClassFieldHasInitializer,\n          this.state.startLoc,\n        );\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(\n          TSErrors.AbstractPropertyHasInitializer,\n          this.state.startLoc,\n          {\n            propertyName:\n              key.type === \"Identifier\" && !node.computed\n                ? key.name\n                : `[${this.input.slice(this.offsetToSourcePos(key.start), this.offsetToSourcePos(key.end))}]`,\n          },\n        );\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (node.abstract) {\n        this.raise(TSErrors.PrivateElementHasAbstract, node);\n      }\n\n      if (node.accessibility) {\n        this.raise(TSErrors.PrivateElementHasAccessibility, node, {\n          modifier: node.accessibility,\n        });\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    parseClassAccessorProperty(\n      node: N.ClassAccessorProperty,\n    ): N.ClassAccessorProperty {\n      this.parseClassPropertyAnnotation(node);\n      if (node.optional) {\n        this.raise(TSErrors.AccessorCannotBeOptional, node);\n      }\n      return super.parseClassAccessorProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters && isConstructor) {\n        this.raise(TSErrors.ConstructorHasTypeParameters, typeParameters);\n      }\n\n      // @ts-expect-error declare does not exist in ClassMethod\n      const { declare = false, kind } = method;\n\n      if (declare && (kind === \"get\" || kind === \"set\")) {\n        this.raise(TSErrors.DeclareAccessor, method, { kind });\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if (\n        (node as N.Node).type === \"MethodDefinition\" &&\n        !Object.hasOwn(\n          (node as unknown as N.EstreeMethodDefinition).value,\n          \"body\",\n        )\n      ) {\n        return;\n      }\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      // handle `extends f<<T>\n      if (node.superClass && (this.match(tt.lt) || this.match(tt.bitShiftL))) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.superTypeArguments = this.tsParseTypeArgumentsInExpression();\n        } else {\n          node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n        }\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue<T extends N.ObjectMember>(\n      prop: Undone<T>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): T {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      return super.parseObjPropValue(\n        prop,\n\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n    }\n\n    parseFunctionParams(node: N.Function, isConstructor: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, isConstructor);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\" | \"using\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (\n        decl.id.type === \"Identifier\" &&\n        !this.hasPrecedingLineBreak() &&\n        this.eat(tt.bang)\n      ) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: State | undefined | null;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` or `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      // If the state was cloned in the JSX parsing branch above but there\n      // have been any error in the tryParse call, this.state is set to state\n      // so we still need to clone it.\n      if (!state || state === this.state) state = this.state.clone();\n\n      let typeParameters: N.TsTypeParameterDeclaration | undefined | null;\n      // We need to explicitly annotate 'abort' for microsoft/TypeScript#58170\n      const arrow = this.tryParse((abort: () => never) => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);\n        const expr = super.parseMaybeAssign(\n          refExpressionErrors,\n          afterLeftParse,\n        );\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            this.hasPlugin(\"jsx\") &&\n            expr.typeParameters.params.length === 1 &&\n            !expr.typeParameters.extra?.trailingComma\n          ) {\n            // report error if single type parameter used without trailing comma.\n            const parameter = expr.typeParameters\n              .params[0] as N.TsTypeParameter;\n            if (!parameter.constraint) {\n              // A single type parameter must either have constraints\n              // or a trailing comma, otherwise it's ambiguous with JSX.\n              this.raise(\n                TSErrors.SingleTypeParameterWithoutTrailingComma,\n                createPositionWithColumnOffset(parameter.loc.end, 1),\n                {\n                  typeParameterName: process.env.BABEL_8_BREAKING\n                    ? (parameter.name as N.Identifier).name\n                    : (parameter.name as string),\n                },\n              );\n            }\n          }\n        }\n\n        return expr;\n      }, state);\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.params[0].constraint &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(TSErrors.ReservedArrowTypeParam, node);\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(\n      refExpressionErrors?: ExpressionErrors | null,\n      sawUnary?: boolean,\n    ): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      }\n      return super.parseMaybeUnary(refExpressionErrors, sawUnary);\n    }\n\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          // @ts-expect-error refine typings\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseFunctionParamType(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        (param as any as N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      switch (node.type) {\n        case \"ParenthesizedExpression\":\n          this.toAssignableParenthesizedExpression(node, isLHS);\n          break;\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          if (isLHS) {\n            this.expressionScope.recordArrowParameterBindingError(\n              TSErrors.UnexpectedTypeCastInParameter,\n              node,\n            );\n          } else {\n            this.raise(TSErrors.UnexpectedTypeCastInParameter, node);\n          }\n          this.toAssignable(node.expression, isLHS);\n          break;\n        case \"AssignmentExpression\":\n          if (!isLHS && node.left.type === \"TSTypeCastExpression\") {\n            node.left = this.typeCastToParameter(node.left) as N.Assignable;\n          }\n        /* fall through */\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(\n      node: N.ParenthesizedExpression,\n      isLHS: boolean,\n    ): void {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          this.toAssignable(node.expression, isLHS);\n          break;\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkToRestConversion(node: N.Node, allowPattern: boolean): void {\n      switch (node.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSTypeAssertion\":\n        case \"TSNonNullExpression\":\n          this.checkToRestConversion(node.expression, false);\n          break;\n        default:\n          super.checkToRestConversion(node, allowPattern);\n      }\n    }\n\n    isValidLVal(\n      type:\n        | \"TSTypeCastExpression\"\n        | \"TSParameterProperty\"\n        | \"TSNonNullExpression\"\n        | \"TSInstantiationExpression\"\n        | \"TSAsExpression\"\n        | \"TSSatisfiesExpression\"\n        | \"TSTypeAssertion\",\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingFlag,\n    ) {\n      switch (type) {\n        // Allow \"typecasts\" to appear on the left of assignment expressions,\n        // because it may be in an arrow function.\n        // e.g. `const f = (foo: number = 0) => foo;`\n        case \"TSTypeCastExpression\":\n          return true;\n        case \"TSParameterProperty\":\n          return \"parameter\";\n        case \"TSNonNullExpression\":\n        case \"TSInstantiationExpression\":\n          return \"expression\";\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSTypeAssertion\":\n          return (\n            (binding !== BindingFlag.TYPE_NONE || !isUnparenthesizedInAssign) &&\n            ([\"expression\", true] as [string, boolean])\n          );\n        default:\n          return super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n      }\n    }\n\n    parseBindingAtom(): N.Pattern {\n      if (this.state.type === tt._this) {\n        return this.parseIdentifier(/* liberal */ true);\n      }\n      return super.parseBindingAtom();\n    }\n\n    parseMaybeDecoratorArguments(\n      expr: N.Expression,\n      startLoc: Position,\n    ): N.Expression {\n      // handles `@f<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(\n            expr,\n            startLoc,\n          ) as N.CallExpression;\n          if (process.env.BABEL_8_BREAKING) {\n            call.typeArguments = typeArguments;\n          } else {\n            call.typeParameters = typeArguments;\n          }\n\n          return call;\n        }\n\n        this.unexpected(null, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr, startLoc);\n    }\n\n    checkCommaAfterRest(\n      close: (typeof charCodes)[keyof typeof charCodes],\n    ): boolean {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n        return false;\n      }\n      return super.checkCommaAfterRest(close);\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(TSErrors.TypeAnnotationAfterAssign, node.typeAnnotation);\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          this.finishOp(tt.gt, 1);\n          return;\n        }\n        if (code === charCodes.lessThan) {\n          this.finishOp(tt.lt, 1);\n          return;\n        }\n      }\n      super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    toAssignableList(\n      exprList: Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TSTypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Expression {\n      (node.expression as N.Identifier).typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      // handles `<Component<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArgumentsInExpression(),\n        );\n        if (typeArguments) {\n          if (process.env.BABEL_8_BREAKING) {\n            node.typeArguments = typeArguments;\n          } else {\n            node.typeParameters = typeArguments;\n          }\n        }\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const { isAmbientContext: oldIsAmbientContext, strict: oldStrict } =\n        this.state;\n      this.state.isAmbientContext = true;\n      this.state.strict = false;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n        this.state.strict = oldStrict;\n      }\n    }\n\n    parseClass<T extends N.Class>(\n      node: Undone<T>,\n      isStatement: boolean,\n      optionalId?: boolean,\n    ): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node as any).abstract;\n      try {\n        return super.parseClass(node, isStatement, optionalId);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n      decorators: N.Decorator[] | null,\n    ): N.ClassDeclaration | N.TsInterfaceDeclaration | undefined | null {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.maybeTakeDecorators(\n          decorators,\n          this.parseClass<N.ClassDeclaration>(\n            node as N.ClassDeclaration,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          ),\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, node);\n          return this.tsParseInterfaceDeclaration(\n            node as N.TsInterfaceDeclaration,\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod<\n      T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope?: boolean,\n    ) {\n      const method = super.parseMethod<T>(\n        node,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error todo(flow->ts) property not defined for all types in union\n      if (method.abstract) {\n        const hasEstreePlugin = this.hasPlugin(\"estree\");\n        const methodFn = hasEstreePlugin\n          ? // @ts-expect-error estree typings\n            method.value\n          : method;\n        if (methodFn.body) {\n          const { key } = method;\n          this.raise(TSErrors.AbstractMethodHasImplementation, method, {\n            methodName:\n              key.type === \"Identifier\" && !method.computed\n                ? key.name\n                : `[${this.input.slice(this.offsetToSourcePos(key.start), this.offsetToSourcePos(key.end))}]`,\n          });\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: Undone<N.ExportSpecifier>,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: Undone<N.ImportSpecifier>,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingFlag | undefined,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n        isInTypeOnlyImport\n          ? BindingFlag.TYPE_TS_TYPE_IMPORT\n          : BindingFlag.TYPE_TS_VALUE_IMPORT,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const loc = leftOfAs.loc.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = isImport\n              ? this.parseIdentifier()\n              : this.parseModuleExportName();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = isImport\n            ? this.parseIdentifier()\n            : this.parseModuleExportName();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        if (isImport) {\n          leftOfAs = this.parseIdentifier(true);\n          if (!this.isContextual(tt._as)) {\n            this.checkReservedWord(\n              leftOfAs.name,\n              leftOfAs.loc.start,\n              true,\n              true,\n            );\n          }\n        } else {\n          leftOfAs = this.parseModuleExportName();\n        }\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n          loc,\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkIdentifier(\n          node[rightOfAsKey],\n          hasTypeSpecifier\n            ? BindingFlag.TYPE_TS_TYPE_IMPORT\n            : BindingFlag.TYPE_TS_VALUE_IMPORT,\n        );\n      }\n    }\n  };\n\nfunction isPossiblyLiteralEnum(expression: N.Expression): boolean {\n  if (expression.type !== \"MemberExpression\") return false;\n\n  const { computed, property } = expression;\n\n  if (\n    computed &&\n    property.type !== \"StringLiteral\" &&\n    (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)\n  ) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\n// If a const declaration has no type annotation and is initialized to\n// a string literal, numeric literal, or enum reference, then it is\n// allowed. In an ideal world, we'd check whether init was *actually* an\n// enum reference, but we allow anything that \"could be\" a literal enum\n// in `isPossiblyLiteralEnum` since we don't have all the information\n// that the typescript compiler has.\nfunction isValidAmbientConstInitializer(\n  expression: N.Expression,\n  estree: boolean,\n): boolean {\n  const { type } = expression;\n  if (expression.extra?.parenthesized) {\n    return false;\n  }\n  if (estree) {\n    if (type === \"Literal\") {\n      const { value } = expression;\n      if (typeof value === \"string\" || typeof value === \"boolean\") {\n        return true;\n      }\n    }\n  } else {\n    if (type === \"StringLiteral\" || type === \"BooleanLiteral\") {\n      return true;\n    }\n  }\n  if (isNumber(expression, estree) || isNegativeNumber(expression, estree)) {\n    return true;\n  }\n  if (type === \"TemplateLiteral\" && expression.expressions.length === 0) {\n    return true;\n  }\n  if (isPossiblyLiteralEnum(expression)) {\n    return true;\n  }\n  return false;\n}\n\nfunction isNumber(expression: N.Expression, estree: boolean): boolean {\n  if (estree) {\n    return (\n      expression.type === \"Literal\" &&\n      (typeof expression.value === \"number\" || \"bigint\" in expression)\n    );\n  }\n  return (\n    expression.type === \"NumericLiteral\" || expression.type === \"BigIntLiteral\"\n  );\n}\n\nfunction isNegativeNumber(expression: N.Expression, estree: boolean): boolean {\n  if (expression.type === \"UnaryExpression\") {\n    const { operator, argument } = expression;\n    if (operator === \"-\" && isNumber(argument, estree)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isUncomputedMemberExpressionChain(expression: N.Expression): boolean {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\" || expression.computed) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n","import * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types.ts\";\nimport type Parser from \"../parser/index.ts\";\nimport type * as N from \"../types.ts\";\nimport { ParseErrorEnum } from \"../parse-error.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\nimport type { BindingFlag } from \"../util/scopeflags.ts\";\nimport type { Position } from \"../util/location.ts\";\n\ntype PossiblePlaceholders = {\n  Identifier: N.Identifier;\n  StringLiteral: N.StringLiteral;\n  Expression: N.Expression;\n  Statement: N.Statement;\n  Declaration: N.Declaration;\n  BlockStatement: N.BlockStatement;\n  ClassBody: N.ClassBody;\n  Pattern: N.Pattern;\n};\nexport type PlaceholderTypes = keyof PossiblePlaceholders;\n\ntype NodeOf<T extends keyof PossiblePlaceholders> = PossiblePlaceholders[T];\n// todo: when there  is proper union type for Node\n// type NodeOf<T extends PlaceholderTypes> = Extract<N.Node, { type: T }>;\n\n// todo: Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T extends PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\n/* eslint sort-keys: \"error\" */\nconst PlaceholderErrors = ParseErrorEnum`placeholders`({\n  ClassNameIsRequired: \"A class name is required.\",\n  UnexpectedSpace: \"Unexpected space in placeholder.\",\n});\n\nexport default (superClass: typeof Parser) =>\n  class PlaceholdersParserMixin extends superClass implements Parser {\n    parsePlaceholder<T extends PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ MaybePlaceholder<T> | undefined {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode<N.Placeholder<T>>();\n        this.next();\n        this.assertNoSpace();\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace();\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T extends PlaceholderTypes>(\n      node: Undone<N.Placeholder> | Undone<NodeOf<PlaceholderTypes>>,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      let placeholder = node as unknown as N.Placeholder<T>;\n\n      if (!placeholder.expectedNode || !placeholder.type) {\n        placeholder = this.finishNode(\n          placeholder,\n          \"Placeholder\",\n        ) as unknown as N.Placeholder<T>;\n      }\n\n      placeholder.expectedNode = expectedNode;\n      return placeholder as unknown as MaybePlaceholder<T>;\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        this.finishOp(tt.placeholder, 2);\n      } else {\n        super.getTokenFromCode(code);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(\n      refExpressionErrors?: ExpressionErrors | null,\n    ): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") ||\n        super.parseExprAtom(refExpressionErrors)\n      );\n    }\n\n    parseIdentifier(liberal?: boolean): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(liberal)\n      );\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ) {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom();\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingFlag) {\n      return (\n        type === \"Placeholder\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean): void {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    chStartsBindingIdentifier(ch: number, pos: number): boolean {\n      if (super.chStartsBindingIdentifier(ch, pos)) {\n        return true;\n      }\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(\n      node: N.BreakStatement | N.ContinueStatement,\n      isBreak: boolean,\n    ) {\n      // @ts-expect-error: node.label could be Placeholder\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(node, isBreak);\n    }\n\n    // @ts-expect-error Plugin will override parser interface\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: MaybePlaceholder<\"Expression\">,\n    ): MaybePlaceholder<\"Statement\"> {\n      // @ts-expect-error placeholder typings\n      if (expr.type !== \"Placeholder\" || expr.extra?.parenthesized) {\n        // @ts-expect-error placeholder typings\n        return super.parseExpressionStatement(node, expr);\n      }\n\n      if (this.match(tt.colon)) {\n        // @ts-expect-error placeholder typings\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = super.parseStatementOrSloppyAnnexBFunctionDeclaration();\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n      const stmtPlaceholder = node as unknown as N.Placeholder<\"Statement\">;\n      stmtPlaceholder.name = (expr as N.Placeholder).name;\n      return this.finishPlaceholder(stmtPlaceholder, \"Statement\");\n    }\n\n    parseBlock(\n      allowDirectives?: boolean,\n      createNewLexicalScope?: boolean,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(\n          allowDirectives,\n          createNewLexicalScope,\n          afterBlockParse,\n        )\n      );\n    }\n\n    parseFunctionId(\n      requireId?: boolean,\n    ): MaybePlaceholder<\"Identifier\"> | undefined | null {\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(requireId)\n      );\n    }\n    // @ts-expect-error Plugin will override parser interface\n    parseClass<T extends N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          throw this.raise(\n            PlaceholderErrors.ClassNameIsRequired,\n            this.state.startLoc,\n          );\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      super.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        super.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(\n      node: Undone<\n        | N.ExportDefaultDeclaration\n        | N.ExportAllDeclaration\n        | N.ExportNamedDeclaration\n      >,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(node, decorators);\n\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node2.specifiers = [];\n        node2.source = null;\n        node2.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node2, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode<N.ExportDefaultSpecifier>();\n      specifier.exported = placeholder;\n      node2.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node2, decorators);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(\n      node: Undone<\n        | N.ExportDefaultDeclaration\n        | N.ExportAllDeclaration\n        | N.ExportNamedDeclaration\n      >,\n      maybeDefaultIdentifier: N.Identifier | null,\n    ): node is Undone<N.ExportNamedDeclaration> {\n      if ((node as N.ExportNamedDeclaration).specifiers?.length) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(\n        node,\n        maybeDefaultIdentifier,\n      );\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          // @ts-expect-error placeholder typings\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration>,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(node);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier =\n        this.startNodeAtNode<N.ImportDefaultSpecifier>(placeholder);\n      specifier.local = placeholder;\n      node.specifiers.push(\n        this.finishNode(specifier, \"ImportDefaultSpecifier\"),\n      );\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource()\n      );\n    }\n\n    // Throws if the current token and the prev one are separated by a space.\n    assertNoSpace(): void {\n      if (\n        this.state.start >\n        this.offsetToSourcePos(this.state.lastTokEndLoc.index)\n      ) {\n        this.raise(PlaceholderErrors.UnexpectedSpace, this.state.lastTokEndLoc);\n      }\n    }\n  };\n","import type Parser from \"../parser/index.ts\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types.ts\";\nimport type * as N from \"../types.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\n\nexport default (superClass: typeof Parser) =>\n  class V8IntrinsicMixin extends superClass implements Parser {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStartLoc = this.state.startLoc;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode<N.Identifier>();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName();\n          const identifier = this.createIdentifier(node, name);\n          // @ts-expect-error: avoid mutating AST types\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStartLoc);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      return (\n        this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors)\n      );\n    }\n  };\n","import type Parser from \"./parser/index.ts\";\nimport type { PluginConfig } from \"./typings.ts\";\n\nexport type Plugin = PluginConfig;\n\nexport type PluginList = PluginConfig[];\n\nexport type MixinPlugin = (\n  superClass: new (...args: any) => Parser,\n) => new (...args: any) => Parser;\n\nconst PIPELINE_PROPOSALS = process.env.BABEL_8_BREAKING\n  ? [\"fsharp\", \"hack\"]\n  : [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\n\nexport function validatePlugins(pluginsMap: Map<string, any>) {\n  if (pluginsMap.has(\"decorators\")) {\n    if (pluginsMap.has(\"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport =\n      pluginsMap.get(\"decorators\").decoratorsBeforeExport;\n    if (\n      decoratorsBeforeExport != null &&\n      typeof decoratorsBeforeExport !== \"boolean\"\n    ) {\n      throw new Error(\n        \"'decoratorsBeforeExport' must be a boolean, if specified.\",\n      );\n    }\n\n    const allowCallParenthesized =\n      pluginsMap.get(\"decorators\").allowCallParenthesized;\n    if (\n      allowCallParenthesized != null &&\n      typeof allowCallParenthesized !== \"boolean\"\n    ) {\n      throw new Error(\"'allowCallParenthesized' must be a boolean.\");\n    }\n  }\n\n  if (pluginsMap.has(\"flow\") && pluginsMap.has(\"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (pluginsMap.has(\"placeholders\") && pluginsMap.has(\"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (pluginsMap.has(\"pipelineOperator\")) {\n    const proposal = pluginsMap.get(\"pipelineOperator\").proposal;\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    const tupleSyntaxIsHash = process.env.BABEL_8_BREAKING\n      ? pluginsMap.has(\"recordAndTuple\")\n      : pluginsMap.get(\"recordAndTuple\")?.syntaxType === \"hash\";\n\n    if (proposal === \"hack\") {\n      if (pluginsMap.has(\"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (pluginsMap.has(\"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = pluginsMap.get(\"pipelineOperator\").topicToken;\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error(\n          `Plugin conflict between \\`[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]\\` and \\`${JSON.stringify([\"recordAndTuple\", pluginsMap.get(\"recordAndTuple\")])}\\`.`,\n        );\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error(\n        `Plugin conflict between \\`[\"pipelineOperator\", { proposal: \"smart\" }]\\` and \\`${JSON.stringify([\"recordAndTuple\", pluginsMap.get(\"recordAndTuple\")])}\\`.`,\n      );\n    }\n  }\n\n  if (pluginsMap.has(\"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please migrate to import attributes instead.\",\n      );\n    } else {\n      if (\n        pluginsMap.has(\"deprecatedImportAssert\") ||\n        pluginsMap.has(\"importAssertions\")\n      ) {\n        throw new Error(\n          \"Cannot combine importAssertions, deprecatedImportAssert and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVersionPluginOption =\n        pluginsMap.get(\"moduleAttributes\").version;\n      if (moduleAttributesVersionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n  if (pluginsMap.has(\"importAssertions\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`importAssertions` has been removed in Babel 8, please use import attributes instead.\" +\n          \" To use the non-standard `assert` syntax you can enable the `deprecatedImportAssert` parser plugin.\",\n      );\n    } else if (pluginsMap.has(\"deprecatedImportAssert\")) {\n      throw new Error(\n        \"Cannot combine importAssertions and deprecatedImportAssert plugins.\",\n      );\n    }\n  }\n  if (\n    !pluginsMap.has(\"deprecatedImportAssert\") &&\n    pluginsMap.has(\"importAttributes\") &&\n    pluginsMap.get(\"importAttributes\").deprecatedAssertSyntax\n  ) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"The 'importAttributes' plugin has been removed in Babel 8. If you need to enable support \" +\n          \"for the deprecated `assert` syntax, you can enable the `deprecatedImportAssert` parser plugin.\",\n      );\n    } else {\n      pluginsMap.set(\"deprecatedImportAssert\", {});\n    }\n  }\n\n  if (pluginsMap.has(\"recordAndTuple\")) {\n    const syntaxType = pluginsMap.get(\"recordAndTuple\").syntaxType;\n    if (syntaxType != null) {\n      if (process.env.BABEL_8_BREAKING) {\n        if (syntaxType === \"hash\") {\n          throw new Error(\n            'The syntaxType option is no longer required in Babel 8. You can safely remove { syntaxType: \"hash\" } from the recordAndTuple config.',\n          );\n        } else {\n          throw new Error(\n            'The syntaxType option is no longer required in Babel 8. Please remove { syntaxType: \"bar\" } from the recordAndTuple config and migrate to the hash syntax #{} and #[].',\n          );\n        }\n      } else {\n        const RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n        if (!RECORD_AND_TUPLE_SYNTAX_TYPES.includes(syntaxType)) {\n          throw new Error(\n            \"The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: \" +\n              RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n          );\n        }\n      }\n    }\n  }\n\n  if (\n    pluginsMap.has(\"asyncDoExpressions\") &&\n    !pluginsMap.has(\"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // @ts-expect-error so @babel/core can provide better error message\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n\n  if (\n    pluginsMap.has(\"optionalChainingAssign\") &&\n    pluginsMap.get(\"optionalChainingAssign\").version !== \"2023-07\"\n  ) {\n    throw new Error(\n      \"The 'optionalChainingAssign' plugin requires a 'version' option,\" +\n        \" representing the last proposal update. Currently, the\" +\n        \" only supported value is '2023-07'.\",\n    );\n  }\n\n  if (process.env.BABEL_8_BREAKING) {\n    if (pluginsMap.has(\"decimal\")) {\n      throw new Error(\n        \"The 'decimal' plugin has been removed in Babel 8. Please remove it from your configuration.\",\n      );\n    }\n    if (pluginsMap.has(\"importReflection\")) {\n      throw new Error(\n        \"The 'importReflection' plugin has been removed in Babel 8. Use 'sourcePhaseImports' instead, and \" +\n          \"replace 'import module' with 'import source' in your code.\",\n      );\n    }\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree.ts\";\nimport flow from \"./plugins/flow/index.ts\";\nimport jsx from \"./plugins/jsx/index.ts\";\nimport typescript from \"./plugins/typescript/index.ts\";\nimport placeholders from \"./plugins/placeholders.ts\";\nimport v8intrinsic from \"./plugins/v8intrinsic.ts\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames = Object.keys(mixinPlugins) as ReadonlyArray<\n  \"estree\" | \"jsx\" | \"flow\" | \"typescript\" | \"v8intrinsic\" | \"placeholders\"\n>;\n","// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenIsTemplate,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types.ts\";\nimport type * as N from \"../types.ts\";\nimport LValParser from \"./lval.ts\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier.ts\";\nimport {\n  type Position,\n  createPositionWithColumnOffset,\n} from \"../util/location.ts\";\nimport * as charCodes from \"charcodes\";\nimport { ScopeFlag, BindingFlag } from \"../util/scopeflags.ts\";\nimport { ExpressionErrors } from \"./util.ts\";\nimport { ParamKind, functionFlags } from \"../util/production-parameter.ts\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope.ts\";\nimport { Errors, type ParseError } from \"../parse-error.ts\";\nimport {\n  UnparenthesizedPipeBodyDescriptions,\n  type UnparenthesizedPipeBodyTypes,\n} from \"../parse-error/pipeline-operator-errors.ts\";\nimport { setInnerComments } from \"./comments.ts\";\nimport { cloneIdentifier, type Undone } from \"./node.ts\";\nimport type Parser from \"./index.ts\";\n\nimport { OptionFlags, type SourceType } from \"../options.ts\";\n\nexport default abstract class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  abstract parseBlock(\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement;\n  abstract parseClass(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ): N.Class;\n  abstract parseDecorators(allowExport?: boolean): void;\n  abstract parseFunction<T extends N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ): T;\n  abstract parseFunctionParams(node: N.Function, isConstructor?: boolean): void;\n  abstract parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: N.Directive[] | null | undefined,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void;\n  abstract parseProgram(\n    program: N.Program,\n    end: TokenType,\n    sourceType?: SourceType,\n  ): N.Program;\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: boolean | undefined | null,\n    protoRef: {\n      used: boolean;\n    },\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key as\n      | N.Identifier\n      | N.StringLiteral\n      | N.NumericLiteral\n      | N.BigIntLiteral;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, key);\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, key);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(\n    expr: N.Expression | N.PrivateName,\n    potentialArrowAt: number,\n  ): expr is N.ArrowFunctionExpression {\n    return (\n      expr.type === \"ArrowFunctionExpression\" &&\n      this.offsetToSourcePos(expr.start) === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(this: Parser): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression() as N.Expression & N.ParserOutput;\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.comments;\n    expr.errors = this.state.errors;\n    if (this.optionFlags & OptionFlags.Tokens) {\n      expr.tokens = this.tokens;\n    }\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    this: Parser,\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt<N.SequenceExpression>(startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(\n    refExpressionErrors: ExpressionErrors,\n    resultError?: ParseError<any>,\n  ) {\n    refExpressionErrors.optionalParametersLoc =\n      resultError?.loc ?? this.state.startLoc;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(tt._yield)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt<N.AssignmentExpression>(startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        this.toAssignable(left, /* isLHS */ true);\n        node.left = left;\n\n        const startIndex = startLoc.index;\n        if (\n          refExpressionErrors.doubleProtoLoc != null &&\n          refExpressionErrors.doubleProtoLoc.index >= startIndex\n        ) {\n          refExpressionErrors.doubleProtoLoc = null; // reset because double __proto__ is valid in assignment expression\n        }\n        if (\n          refExpressionErrors.shorthandAssignLoc != null &&\n          refExpressionErrors.shorthandAssignLoc.index >= startIndex\n        ) {\n          refExpressionErrors.shorthandAssignLoc = null; // reset because shorthand default was used correctly\n        }\n        if (\n          refExpressionErrors.privateKeyLoc != null &&\n          refExpressionErrors.privateKeyLoc.index >= startIndex\n        ) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null; // reset because `({ #x: x })` is an assignable pattern\n        }\n      } else {\n        node.left = left as unknown as N.Assignable; // checked a few lines further down\n      }\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, this.finishNode(node, \"AssignmentExpression\"));\n      // @ts-expect-error todo(flow->ts) improve node types\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    this: Parser,\n    expr: N.Expression,\n    startLoc: Position,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt<N.ConditionalExpression>(startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    this: Parser,\n    left: N.Expression | N.PrivateName,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(Errors.PrivateInExpectedIn, left, {\n          identifierName: value,\n        });\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            // PrivateName must be followed by `in`, but we have `|>`\n            return left as N.Expression;\n          }\n          this.checkPipelineAtInfixOperator(left as N.Expression, leftStartLoc);\n        }\n        const node = this.startNodeAt<N.LogicalExpression | N.BinaryExpression>(\n          leftStartLoc,\n        );\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          // @ts-expect-error Remove this in Babel 8\n          this.hasPlugin([\"pipelineOperator\", { proposal: \"minimal\" }])\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(\n              Errors.UnexpectedAwaitAfterPipelineBody,\n              this.state.startLoc,\n            );\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        const finishedNode = this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(\n            Errors.MixingCoalesceWithLogical,\n            this.state.startLoc,\n          );\n        }\n\n        return this.parseExprOp(finishedNode, leftStartLoc, minPrec);\n      }\n    }\n    // PrivateName is followed by `in` and handled by the previous if statement\n    return left as N.Expression;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          // @ts-expect-error Remove this in Babel 8\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n                throw this.raise(Errors.PipeBodyIsTighter, this.state.startLoc);\n              }\n              return this.parseSmartPipelineBodyInStyle(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startLoc,\n              );\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(this: Parser): N.Expression {\n    const { startLoc } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(\n      // @ts-expect-error TS2345: Argument of type 'string' is not assignable to parameter of type '\"ArrowFunctionExpression\" | \"YieldExpression\" | \"AssignmentExpression\" | \"ConditionalExpression\"'.\n      body.type,\n    );\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (requiredParentheses && !body.extra?.parenthesized) {\n      this.raise(Errors.PipeUnparenthesizedBody, startLoc, {\n        type: body.type as UnparenthesizedPipeBodyTypes,\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(Errors.PipeTopicUnused, startLoc);\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(\n    node: N.AwaitExpression | Undone<N.UnaryExpression>,\n  ) {\n    if (this.match(tt.exponent)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, node.argument);\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.recordAwaitIfAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode<N.UnaryExpression | N.UpdateExpression>();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, node);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, node);\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) {\n          this.checkExponentialAfterUnary(node as Undone<N.UnaryExpression>);\n        }\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(\n      // @ts-expect-error using \"Undone\" node as \"done\"\n      node,\n      update,\n      refExpressionErrors,\n    );\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, startLoc);\n        return this.parseAwait(startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    this: Parser,\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (update) {\n      const updateExpressionNode = node as Undone<N.UpdateExpression>;\n      this.checkLVal(\n        updateExpressionNode.argument,\n        this.finishNode(updateExpressionNode, \"UpdateExpression\"),\n      );\n      return node;\n    }\n\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt<N.UpdateExpression>(startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, (expr = this.finishNode(node, \"UpdateExpression\")));\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startLoc);\n  }\n\n  parseSubscripts(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls?: boolean | null,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const { type } = this.state;\n    if (!noCalls && type === tt.doubleColon) {\n      return this.parseBind(base, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(base, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (type === tt.questionDot) {\n      if (noCalls) {\n        this.raise(Errors.OptionalChainingNoNew, this.state.startLoc);\n        if (this.lookaheadCharCode() === charCodes.leftParenthesis) {\n          // stop at `?.` when parsing `new a?.()`\n          state.stop = true;\n          return base;\n        }\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(base, startLoc, state, computed, optional);\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt<\n      N.OptionalMemberExpression | N.MemberExpression\n    >(startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(tt.bracketR);\n    } else if (this.match(tt.privateName)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, startLoc);\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      (node as N.OptionalMemberExpression).optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt<N.BindExpression>(startLoc);\n    node.object = base;\n    this.next(); // eat '::'\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors: ExpressionErrors | null = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    const node = this.startNodeAt<N.CallExpression | N.OptionalCallExpression>(\n      startLoc,\n    );\n    node.callee = base;\n    const { maybeAsyncArrow, optionalChainMember } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      // @ts-expect-error when optionalChainMember is true, node must be an optional call\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type !== \"Super\",\n        node,\n        refExpressionErrors,\n      );\n    }\n    let finishedNode:\n      | N.CallExpression\n      | N.OptionalCallExpression\n      | N.ArrowFunctionExpression = this.finishCallExpression(\n      node,\n      optionalChainMember,\n    );\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      /*:: invariant(refExpressionErrors != null) */\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      finishedNode = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt<N.ArrowFunctionExpression>(startLoc),\n        finishedNode as N.CallExpression,\n      );\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(finishedNode);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return finishedNode;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node = this.startNodeAt<N.TaggedTemplateExpression>(startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, startLoc);\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEndLoc.index === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      this.offsetToSourcePos(base.start) === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n    node: Undone<T>,\n    optional: boolean,\n  ): T {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, node);\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, arg);\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    this: Parser,\n    close: TokenType,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: Undone<N.Node> | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): Array<N.Expression> {\n    const elts: N.Expression[] = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingCommaLoc,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node as N.ArrowFunctionExpression;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(this: Parser): N.Expression {\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    let node;\n    let decorators: N.Decorator[] | null = null;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode<N.MetaProperty | N.Import | N.ImportExpression>();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node as Undone<N.MetaProperty>);\n        }\n\n        if (this.match(tt.parenL)) {\n          if (this.optionFlags & OptionFlags.CreateImportExpressions) {\n            return this.parseImportCall(node as Undone<N.ImportExpression>);\n          } else {\n            return this.finishNode(node, \"Import\");\n          }\n        } else {\n          this.raise(Errors.UnsupportedImport, this.state.lastTokStartLoc);\n          return this.finishNode(node, \"Import\");\n        }\n\n      case tt._this:\n        node = this.startNode<N.ThisExpression>();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        decorators = this.parseDecorators();\n      // fall through\n      case tt._class:\n        return this.parseClass(\n          this.maybeTakeDecorators(\n            decorators,\n            this.startNode<N.ClassExpression>(),\n          ),\n          false,\n        );\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.templateNonTail:\n      case tt.templateTail:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode<N.BindExpression>();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(Errors.UnsupportedBind, callee);\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(Errors.PrivateInExpectedIn, this.state.startLoc, {\n          identifierName: this.state.value,\n        });\n        return this.parsePrivateName() as unknown as N.Expression;\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.doubleCaret:\n      case tt.doubleAt: {\n        return this.parseTopicReference(\"hack\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        }\n        this.unexpected();\n        break;\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n        } else {\n          this.unexpected();\n        }\n        break;\n      }\n\n      default:\n        if (!process.env.BABEL_8_BREAKING && type === tt.decimal) {\n          return this.parseDecimalLiteral(this.state.value);\n        }\n\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadInLineCharCode() === charCodes.leftCurlyBrace\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseAsyncFunctionExpression(\n                this.startNodeAtNode(id),\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types), and if the\n  // Hack-pipes proposal is active with ^ or % as its topicToken, then the ^ or\n  // % could be the topic token (e.g., in x |> ^==y or x |> ^===y), and so we\n  // reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that “topic token”.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the “topic token”, so that the\n      // following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      // This is safe to do since the preceding character was either ^ or %, and\n      // thus not a newline.\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token’s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode<N.TopicReference>();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin’s configuration matches the current token’s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference<\n    T extends N.PipelinePrimaryTopicReference | N.TopicReference,\n  >(\n    node: Undone<T>,\n    startLoc: Position,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): T {\n    if (\n      this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)\n    ) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      // Determine the node type for the topic reference\n      // that is appropriate for the active pipe-operator proposal.\n      const nodeType =\n        pipeProposal === \"smart\"\n          ? \"PipelinePrimaryTopicReference\"\n          : // The proposal must otherwise be \"hack\",\n            // as enforced by testTopicReferenceConfiguration.\n            \"TopicReference\";\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(\n          // The topic reference is not allowed in the current context:\n          // it is outside of a pipe body.\n          // Raise recoverable errors.\n          pipeProposal === \"smart\"\n            ? Errors.PrimaryTopicNotAllowed\n            : // In this case, `pipeProposal === \"hack\"` is true.\n              Errors.PipeTopicUnbound,\n          startLoc,\n        );\n      }\n\n      // Register the topic reference so that its pipe body knows\n      // that its topic was used at least once.\n      this.registerTopicReference();\n\n      return this.finishNode(node, nodeType);\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, startLoc, {\n        token: tokenLabelName(tokenType),\n      });\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\" or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    startLoc: Position,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        return this.hasPlugin([\n          \"pipelineOperator\",\n          {\n            // @ts-expect-error token must have a label\n            topicToken: tokenLabelName(tokenType),\n          },\n        ]);\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, startLoc);\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n  ): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, this.state.curPosition());\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    return this.parseArrowExpression(node, params, true);\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(\n    this: Parser,\n    node: Undone<N.DoExpression>,\n    isAsync: boolean,\n  ): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(ParamKind.PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode<N.Super>();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !(this.optionFlags & OptionFlags.AllowSuperOutsideMethod)\n    ) {\n      this.raise(Errors.SuperNotAllowed, node);\n    } else if (\n      !this.scope.allowSuper &&\n      !(this.optionFlags & OptionFlags.AllowSuperOutsideMethod)\n    ) {\n      this.raise(Errors.UnexpectedSuper, node);\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(Errors.UnsupportedSuper, node);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode<N.PrivateName>();\n    const id = this.startNodeAt<N.Identifier>(\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      createPositionWithColumnOffset(this.state.startLoc, 1),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(\n    this: Parser,\n  ): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode<N.FunctionExpression | N.MetaProperty>();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"sent\",\n      );\n    }\n    return this.parseFunction(node as Undone<N.FunctionExpression>);\n  }\n\n  parseMetaProperty(\n    node: Undone<N.MetaProperty>,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, node.property, {\n        target: meta.name,\n        onlyValidPropertyName: propertyName,\n      });\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(\n    this: Parser,\n    node: Undone<N.MetaProperty | N.ImportExpression>,\n  ): N.MetaProperty | N.ImportExpression {\n    const id = this.createIdentifier(\n      this.startNodeAtNode<N.Identifier>(node),\n      \"import\",\n    );\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._meta)) {\n      if (!this.inModule) {\n        this.raise(Errors.ImportMetaOutsideModule, id);\n      }\n      this.sawUnambiguousESM = true;\n    } else if (this.isContextual(tt._source) || this.isContextual(tt._defer)) {\n      const isSource = this.isContextual(tt._source);\n\n      this.expectPlugin(\n        isSource ? \"sourcePhaseImports\" : \"deferredImportEvaluation\",\n      );\n      if (!(this.optionFlags & OptionFlags.CreateImportExpressions)) {\n        throw this.raise(\n          Errors.DynamicImportPhaseRequiresImportExpressions,\n          this.state.startLoc,\n          {\n            phase: this.state.value,\n          },\n        );\n      }\n      this.next();\n      (node as Undone<N.ImportExpression>).phase = isSource\n        ? \"source\"\n        : \"defer\";\n      return this.parseImportCall(node as Undone<N.ImportExpression>);\n    }\n\n    return this.parseMetaProperty(node as Undone<N.MetaProperty>, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T extends N.Node>(\n    value: any,\n    type: T[\"type\"],\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(\n      node,\n      \"raw\",\n      this.input.slice(this.offsetToSourcePos(node.start), this.state.end),\n    );\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T extends N.Node>(value: any, type: T[\"type\"]): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  // TODO: Remove this in Babel 8\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: {\n    value: any;\n    pattern: string;\n    flags: N.RegExpLiteral[\"flags\"];\n  }) {\n    const node = this.startNode<N.RegExpLiteral>();\n    this.addExtra(\n      node,\n      \"raw\",\n      this.input.slice(this.offsetToSourcePos(node.start), this.state.end),\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    this.next();\n    return this.finishNode(node, \"RegExpLiteral\");\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode<N.BooleanLiteral>();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode<N.NullLiteral>();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(\n    this: Parser,\n    canBeArrow: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartLoc = this.state.startLoc;\n    const exprList: (N.Expression | N.RestElement)[] = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParametersLoc === null\n            ? null\n            : refExpressionErrors.optionalParametersLoc,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(\n          this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc),\n        );\n\n        if (!this.checkCommaAfterRest(charCodes.rightParenthesis)) {\n          break;\n        }\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      // @ts-expect-error todo(flow->ts) improve node types\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt<N.SequenceExpression>(innerStartLoc);\n      val.expressions = exprList as N.Expression[];\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    return this.wrapParenthesis(\n      startLoc,\n      // @ts-expect-error todo(flow->ts)\n      val,\n    );\n  }\n\n  wrapParenthesis(startLoc: Position, expression: N.Expression): N.Expression {\n    if (!(this.optionFlags & OptionFlags.CreateParenthesizedExpressions)) {\n      this.addExtra(expression, \"parenthesized\", true);\n      this.addExtra(expression, \"parenStart\", startLoc.index);\n\n      this.takeSurroundingComments(\n        expression,\n        startLoc.index,\n        this.state.lastTokEndLoc.index,\n      );\n\n      return expression;\n    }\n\n    const parenExpression =\n      this.startNodeAt<N.ParenthesizedExpression>(startLoc);\n    parenExpression.expression = expression;\n    return this.finishNode(parenExpression, \"ParenthesizedExpression\");\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(\n    node: Undone<N.ArrowFunctionExpression>,\n  ): Undone<N.ArrowFunctionExpression> | undefined {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem<T extends N.Expression | N.RestElement | N.SpreadElement>(\n    node: T,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    startLoc: Position,\n  ): T | N.TypeCastExpression | N.TsTypeCastExpression {\n    return node;\n  }\n\n  parseNewOrNewTarget(this: Parser): N.NewExpression | N.MetaProperty {\n    const node = this.startNode<N.NewExpression | N.MetaProperty>();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"new\",\n      );\n      this.next();\n      const metaProp = this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"target\",\n      );\n\n      if (\n        !this.scope.inNonArrowFunction &&\n        !this.scope.inClass &&\n        !(this.optionFlags & OptionFlags.AllowNewTargetOutsideFunction)\n      ) {\n        this.raise(Errors.UnexpectedNewTarget, metaProp);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node as Undone<N.NewExpression>);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(this: Parser, node: Undone<N.NewExpression>): N.NewExpression {\n    this.parseNewCallee(node);\n\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewCallee(this: Parser, node: Undone<N.NewExpression>): void {\n    const isImport = this.match(tt._import);\n    const callee = this.parseNoCallExpr();\n    node.callee = callee;\n    if (\n      isImport &&\n      (callee.type === \"Import\" || callee.type === \"ImportExpression\")\n    ) {\n      this.raise(Errors.ImportCallNotNewExpression, callee);\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const { start, startLoc, end, value } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt<N.TemplateElement>(\n      createPositionWithColumnOffset(startLoc, 1),\n    );\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(\n          Errors.InvalidEscapeSequenceTemplate,\n          // FIXME: Adding 1 is probably wrong.\n          createPositionWithColumnOffset(\n            this.state.firstInvalidTemplateEscapePos,\n            1,\n          ),\n        );\n      }\n    }\n\n    const isTail = this.match(tt.templateTail);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset),\n    };\n    elem.tail = isTail;\n    this.next();\n    const finishedNode = this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(\n      finishedNode,\n      createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset),\n    );\n    return finishedNode;\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(this: Parser, isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode<N.TemplateLiteral>();\n    let curElt = this.parseTemplateElement(isTagged);\n    const quasis = [curElt];\n    const substitutions = [];\n    while (!curElt.tail) {\n      substitutions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    // Type cast from (N.Expression[] | N.TsType[]). parseTemplateSubstitution\n    // returns consistent results.\n    node.expressions = substitutions as N.Expression[] | N.TsType[];\n    node.quasis = quasis;\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(this: Parser): N.Expression | N.TsType {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike(\n    close: TokenType,\n    isPattern: true,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectPattern;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: false | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectExpression;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: true,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.RecordExpression;\n  parseObjectLike<T extends N.ObjectPattern | N.ObjectExpression>(\n    this: Parser,\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode<\n      N.ObjectExpression | N.ObjectPattern | N.RecordExpression\n    >();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(node);\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(Errors.InvalidRecordProperty, prop);\n      }\n\n      if (!process.env.BABEL_8_BREAKING) {\n        // @ts-expect-error shorthand may not index prop\n        if (prop.shorthand) {\n          this.addExtra(prop, \"shorthand\", true);\n        }\n      }\n\n      // @ts-expect-error Fixme: refine typings\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    // @ts-expect-error type is well defined\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node: Undone<N.Node>): void {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStartLoc.index);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(\n    prop: Undone<N.ObjectProperty>,\n  ): prop is typeof prop & { key: N.Identifier } {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, this.state.startLoc);\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode<N.ObjectProperty>();\n    let isAsync = false;\n    let isAccessor = false;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const { key } = prop;\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, this.state.curPosition(), {\n            kind: keyName,\n          });\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    return this.parseObjPropValue(\n      prop,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(\n        method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity,\n        method,\n      );\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(Errors.BadSetterRestParameter, method);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    this: Parser,\n    prop: Undone<N.ObjectMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): N.ObjectMethod | undefined | null {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      const finishedProp = this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(finishedProp);\n      return finishedProp;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    this: Parser,\n    prop: Undone<N.ObjectProperty>,\n    startLoc: Position | undefined | null,\n    isPattern: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectProperty | undefined | null {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoverInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);\n        }\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue<T extends N.ObjectMember>(\n    this: Parser,\n    prop: Undone<T>,\n    startLoc: Position | undefined | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): T {\n    const node = (this.parseObjectMethod(\n      prop as Undone<N.ObjectMethod>,\n      isGenerator,\n      isAsync,\n      isPattern,\n      isAccessor,\n    ) ||\n      this.parseObjectProperty(\n        prop as Undone<N.ObjectProperty>,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      )) as T;\n\n    if (!node) this.unexpected();\n\n    return node;\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyName\n  // when refExpressionErrors presents, it will parse private name\n  // and record the position of the first private name\n  parsePropertyName(\n    this: Parser,\n    prop:\n      | Undone<N.ObjectOrClassMember | N.ClassMember>\n      | N.TsNamedTypeElementBase,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void {\n    if (this.eat(tt.bracketL)) {\n      (prop as Undone<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            const privateKeyLoc = this.state.startLoc;\n            if (refExpressionErrors != null) {\n              if (refExpressionErrors.privateKeyLoc === null) {\n                refExpressionErrors.privateKeyLoc = privateKeyLoc;\n              }\n            } else {\n              this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);\n            }\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            if (!process.env.BABEL_8_BREAKING && type === tt.decimal) {\n              key = this.parseDecimalLiteral(value);\n              break;\n            }\n\n            this.unexpected();\n        }\n      }\n      (prop as any).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod>(\n    this: Parser,\n    node: Undone<T>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: T[\"type\"],\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = isGenerator;\n    this.scope.enter(\n      ScopeFlag.FUNCTION |\n        ScopeFlag.SUPER |\n        (inClassScope ? ScopeFlag.CLASS : 0) |\n        (allowDirectSuper ? ScopeFlag.DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, isConstructor);\n    const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return finishedNode;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    this: Parser,\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode<N.ArrayExpression | N.TupleExpression>();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    params:\n      | Array<N.Expression | N.SpreadElement>\n      | Array<N.Expression | N.RestElement>,\n    isAsync: boolean,\n    trailingCommaLoc?: Position | null,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(ScopeFlag.FUNCTION | ScopeFlag.ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody[In] :\n    //   [lookahead ≠ {] ExpressionBody[?In, ~Await]\n    //   { FunctionBody[~Yield, ~Await] }\n    if (!this.match(tt.braceL) && this.prodParam.hasIn) {\n      flags |= ParamKind.PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: Undone<N.ArrowFunctionExpression>,\n    params:\n      | Array<N.Expression | N.SpreadElement>\n      | Array<N.Expression | N.RestElement>,\n    trailingCommaLoc?: Position | null,\n  ): void {\n    this.toAssignableList(params, trailingCommaLoc, false);\n    node.params = params as (N.Pattern | N.TSParameterProperty)[];\n  }\n\n  parseFunctionBodyAndFinish<\n    T extends\n      | N.Function\n      | N.TSDeclareMethod\n      | N.TSDeclareFunction\n      | N.ClassPrivateMethod,\n  >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n    // @ts-expect-error (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    return this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    this: Parser,\n    node: Undone<N.Function>,\n    allowExpression?: boolean | null,\n    isMethod: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      (node as Undone<N.ArrowFunctionExpression>).body =\n        this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(\n        this.prodParam.currentFlags() | ParamKind.PARAM_RETURN,\n      );\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            this.raise(\n              Errors.IllegalLanguageModeDirective,\n              // @ts-expect-error kind may not index node\n              (node.kind === \"method\" || node.kind === \"constructor\") &&\n                // @ts-expect-error key may not index node\n                !!node.key\n                ? // @ts-expect-error node.key has been guarded\n                  node.key.loc.end\n                : node,\n            );\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkIdentifier(\n              node.id,\n              BindingFlag.TYPE_OUTSIDE,\n              strictModeChanged,\n            );\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParameter(node: N.Pattern | N.TSParameterProperty): boolean {\n    return node.type === \"Identifier\";\n  }\n\n  isSimpleParamList(\n    params: ReadonlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: Undone<N.Function>,\n    allowDuplicates: boolean,\n    isArrowFunction?: boolean | null,\n    strictModeChanged: boolean = true,\n  ): void {\n    const checkClashes = !allowDuplicates && new Set<string>();\n    // We create a fake node with the \"ephemeral\" type `FormalParameters`[1]\n    // since we just store an array of parameters. Perhaps someday we can have\n    // something like class FormalParameters extends Array { ... }, which would\n    // also be helpful when traversing this node.\n    //\n    // 1. https://tc39.es/ecma262/#prod-FormalParameters\n    const formalParameters = { type: \"FormalParameters\" } as const;\n    for (const param of node.params) {\n      this.checkLVal(\n        param,\n        formalParameters,\n        BindingFlag.TYPE_VAR,\n        checkClashes,\n        strictModeChanged,\n      );\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    this: Parser,\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    nodeForExtra?: N.Node | null,\n  ): (N.Expression | null)[] {\n    const elts: (N.Expression | null)[] = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: false,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | N.SpreadElement | N.ArgumentPlaceholder | null {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, this.state.curPosition(), {\n          unexpected: \",\",\n        });\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, this.state.startLoc);\n      }\n      const node = this.startNode<N.ArgumentPlaceholder>();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode<N.Identifier>();\n    const name = this.parseIdentifierName(liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(\n    node: Omit<N.Identifier, \"type\">,\n    name: string,\n  ): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(liberal?: boolean): string {\n    let name: string;\n\n    const { startLoc, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: Position,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, startLoc, {\n        keyword: word,\n      });\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n        ? isStrictBindReservedWord\n        : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, startLoc, {\n        reservedWord: word,\n      });\n      return;\n    } else if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, startLoc);\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, startLoc);\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, startLoc);\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError(startLoc);\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, startLoc);\n        return;\n      }\n    }\n  }\n\n  // Returns wether `await` is allowed or not in this context, and if it is\n  // keeps track of it to determine whether a module uses top-level await.\n  recordAwaitIfAllowed(): boolean {\n    const isAwaitAllowed =\n      this.prodParam.hasAwait ||\n      (this.optionFlags & OptionFlags.AllowAwaitOutsideFunction &&\n        !this.scope.inFunction);\n\n    if (isAwaitAllowed && !this.scope.inFunction) {\n      this.state.hasTopLevelAwait = true;\n    }\n\n    return isAwaitAllowed;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(this: Parser, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt<N.AwaitExpression>(startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.AwaitExpressionFormalParameter,\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(Errors.ObsoleteAwaitStar, node);\n    }\n\n    if (\n      !this.scope.inFunction &&\n      !(this.optionFlags & OptionFlags.AllowAwaitOutsideFunction)\n    ) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait(): boolean {\n    if (this.hasPrecedingLineBreak()) return true;\n    const { type } = this.state;\n    return (\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``, await of []\n      type === tt.plusMin ||\n      type === tt.parenL ||\n      type === tt.bracketL ||\n      tokenIsTemplate(type) ||\n      (type === tt._of && !this.state.containsEsc) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      type === tt.regexp ||\n      type === tt.slash ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && type === tt.modulo)\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(this: Parser): N.YieldExpression {\n    const node = this.startNode<N.YieldExpression>();\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.YieldInParameter,\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n\n    this.next();\n    let delegating = false;\n    let argument: N.Expression | null = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportCall\n  parseImportCall(\n    this: Parser,\n    node: Undone<N.ImportExpression>,\n  ): N.ImportExpression {\n    this.next(); // eat tt.parenL\n    node.source = this.parseMaybeAssignAllowIn();\n    node.options = null;\n    if (this.eat(tt.comma)) {\n      if (!this.match(tt.parenR)) {\n        node.options = this.parseMaybeAssignAllowIn();\n\n        if (this.eat(tt.comma) && !this.match(tt.parenR)) {\n          // keep consuming arguments, to then throw ImportCallArity\n          // instead of \"expected )\"\n          do {\n            this.parseMaybeAssignAllowIn();\n          } while (this.eat(tt.comma) && !this.match(tt.parenR));\n\n          this.raise(Errors.ImportCallArity, node);\n        }\n      }\n    }\n    this.expect(tt.parenR);\n    return this.finishNode(node, \"ImportExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartLoc: Position) {\n    // @ts-expect-error Remove this in Babel 8\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(Errors.PipelineHeadSequenceExpression, leftStartLoc);\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpr: N.Expression, startLoc: Position) {\n    if (this.isSimpleReference(childExpr)) {\n      const bodyNode = this.startNodeAt<N.PipelineBareFunction>(startLoc);\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      const bodyNode = this.startNodeAt<N.PipelineTopicExpression>(startLoc);\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startLoc` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc: Position): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, this.state.startLoc);\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, startLoc);\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    // @ts-expect-error Remove this in Babel 8\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\", \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = ParamKind.PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | ParamKind.PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = ParamKind.PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~ParamKind.PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(this: Parser, prec: number): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(this: Parser): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    if (!this.match(tt.braceL)) {\n      this.unexpected(null, tt.braceL);\n    }\n    // start program node immediately after `{`\n    const program = this.startNodeAt<N.Program>(this.state.endLoc);\n    this.next(); // eat `{`\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    prop: Undone<N.ObjectOrClassMember | N.ClassMember>,\n  ): void {}\n}\n","import type * as N from \"../types.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLoop,\n  tokenIsTemplate,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types.ts\";\nimport ExpressionParser from \"./expression.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier.ts\";\nimport * as charCodes from \"charcodes\";\nimport {\n  ScopeFlag,\n  ClassElementType,\n  BindingFlag,\n} from \"../util/scopeflags.ts\";\nimport { ExpressionErrors } from \"./util.ts\";\nimport { ParamKind, functionFlags } from \"../util/production-parameter.ts\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope.ts\";\nimport { OptionFlags, type SourceType } from \"../options.ts\";\nimport { Token } from \"../tokenizer/index.ts\";\nimport type { Position } from \"../util/location.ts\";\nimport { createPositionWithColumnOffset } from \"../util/location.ts\";\nimport { cloneStringLiteral, cloneIdentifier, type Undone } from \"./node.ts\";\nimport type Parser from \"./index.ts\";\nimport { ParseBindingListFlags } from \"./lval.ts\";\nimport { LoopLabelKind } from \"../tokenizer/state.ts\";\n\nconst loopLabel = { kind: LoopLabelKind.Loop } as const,\n  switchLabel = { kind: LoopLabelKind.Switch } as const;\n\nexport const enum ParseFunctionFlag {\n  Expression = 0b0000,\n  Declaration = 0b0001,\n  HangingDeclaration = 0b0010,\n  NullableId = 0b0100,\n  Async = 0b1000,\n}\n\nexport const enum ParseStatementFlag {\n  StatementOnly = 0b0000,\n  AllowImportExport = 0b0001,\n  AllowDeclaration = 0b0010,\n  AllowFunctionDeclaration = 0b0100,\n  AllowLabeledFunction = 0b1000,\n}\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tokens for backward Babel 7 compat.\n * tt.privateName => tt.hash + tt.name\n * tt.templateTail => tt.backquote/tt.braceR + tt.template + tt.backquote\n * tt.templateNonTail => tt.backquote/tt.braceR + tt.template + tt.dollarBraceL\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n */\nfunction babel7CompatTokens(\n  tokens: (Token | N.Comment)[],\n  input: string,\n  startIndex: number,\n) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (typeof type === \"number\") {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (type === tt.privateName) {\n          const { loc, start, value, end } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(\n            i,\n            1,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.hash),\n              value: \"#\",\n              start: start,\n              end: hashEndPos,\n              startLoc: loc.start,\n              endLoc: hashEndLoc,\n            }),\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.name),\n              value: value,\n              start: hashEndPos,\n              end: end,\n              startLoc: hashEndLoc,\n              endLoc: loc.end,\n            }),\n          );\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const { loc, start, value, end } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start - startIndex) === charCodes.graveAccent) {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          } else {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.braceR),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          }\n          let templateValue,\n            templateElementEnd,\n            templateElementEndLoc,\n            endToken;\n          if (type === tt.templateTail) {\n            // ends with '`'\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          } else {\n            // ends with `${`\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.dollarBraceL),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          }\n          tokens.splice(\n            i,\n            1,\n            startToken,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.template),\n              value: templateValue,\n              start: backquoteEnd,\n              end: templateElementEnd,\n              startLoc: backquoteEndLoc,\n              endLoc: templateElementEndLoc,\n            }),\n            endToken,\n          );\n          i += 2;\n          continue;\n        }\n      }\n      // @ts-expect-error: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default abstract class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(\n    this: Parser,\n    file: Undone<N.File>,\n    program: Undone<N.Program>,\n  ): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.comments;\n\n    if (this.optionFlags & OptionFlags.Tokens) {\n      file.tokens = babel7CompatTokens(\n        this.tokens,\n        this.input,\n        this.startIndex,\n      );\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    this: Parser,\n    program: Undone<N.Program>,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (this.inModule) {\n      if (\n        !(this.optionFlags & OptionFlags.AllowUndeclaredExports) &&\n        this.scope.undefinedExports.size > 0\n      ) {\n        for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n          this.raise(Errors.ModuleExportUndefined, at, { localName });\n        }\n      }\n      this.addExtra(program, \"topLevelAwait\", this.state.hasTopLevelAwait);\n    }\n    let finishedProgram: N.Program;\n    if (end === tt.eof) {\n      // finish at eof for top level program\n      finishedProgram = this.finishNode(program, \"Program\");\n    } else {\n      // finish immediately before the end token\n      finishedProgram = this.finishNodeAt(\n        program,\n        \"Program\",\n        createPositionWithColumnOffset(this.state.startLoc, -1),\n      );\n    }\n    return finishedProgram;\n  }\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   */\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const directive = stmt as any;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(\n      this.offsetToSourcePos(directiveLiteral.start),\n      this.offsetToSourcePos(directiveLiteral.end),\n    );\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directiveLiteral.type = \"DirectiveLiteral\";\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode<N.InterpreterDirective>();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.hasFollowingBindingAtom();\n  }\n\n  chStartsBindingIdentifier(ch: number, pos: number) {\n    if (isIdentifierStart(ch)) {\n      keywordRelationalOperator.lastIndex = pos;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identifier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    } else if (ch === charCodes.backslash) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  chStartsBindingPattern(ch: number) {\n    return (\n      ch === charCodes.leftSquareBracket || ch === charCodes.leftCurlyBrace\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `let` and declaration is allowed, check if it\n   * starts a variable declaration so that it should be interpreted as a keyword.\n   */\n  hasFollowingBindingAtom(): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    return (\n      this.chStartsBindingPattern(nextCh) ||\n      this.chStartsBindingIdentifier(nextCh, next)\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `using` and declaration is allowed, check if it\n   * starts a variable declaration in the same line so that it should be interpreted as\n   * a keyword.\n   */\n  hasInLineFollowingBindingIdentifierOrBrace(): boolean {\n    const next = this.nextTokenInLineStart();\n    const nextCh = this.codePointAtPos(next);\n    return (\n      nextCh === charCodes.leftCurlyBrace ||\n      this.chStartsBindingIdentifier(nextCh, next)\n    );\n  }\n\n  startsUsingForOf(): boolean {\n    const { type, containsEsc } = this.lookahead();\n    if (type === tt._of && !containsEsc) {\n      // `using of` must start a for-lhs-of statement\n      return false;\n    } else if (tokenIsIdentifier(type) && !this.hasFollowingLineBreak()) {\n      this.expectPlugin(\"explicitResourceManagement\");\n      return true;\n    }\n  }\n\n  startsAwaitUsing(): boolean {\n    let next = this.nextTokenInLineStart();\n    if (this.isUnparsedContextual(next, \"using\")) {\n      next = this.nextTokenInLineStartSince(next + 5);\n      const nextCh = this.codePointAtPos(next);\n      if (this.chStartsBindingIdentifier(nextCh, next)) {\n        this.expectPlugin(\"explicitResourceManagement\");\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleItem\n  parseModuleItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowImportExport |\n        ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        // This function is actually also used to parse StatementItems,\n        // which with Annex B enabled allows labeled functions.\n        ParseStatementFlag.AllowLabeledFunction,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-StatementListItem\n  parseStatementListItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        (!this.options.annexB || this.state.strict\n          ? 0\n          : ParseStatementFlag.AllowLabeledFunction),\n    );\n  }\n\n  parseStatementOrSloppyAnnexBFunctionDeclaration(\n    this: Parser,\n    allowLabeledFunction: boolean = false,\n  ) {\n    let flags: ParseStatementFlag = ParseStatementFlag.StatementOnly;\n    if (this.options.annexB && !this.state.strict) {\n      flags |= ParseStatementFlag.AllowFunctionDeclaration;\n      if (allowLabeledFunction) {\n        flags |= ParseStatementFlag.AllowLabeledFunction;\n      }\n    }\n    return this.parseStatementLike(flags);\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  parseStatement(this: Parser) {\n    return this.parseStatementLike(ParseStatementFlag.StatementOnly);\n  }\n\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatementLike(\n    this: Parser,\n    flags: ParseStatementFlag,\n  ):\n    | N.Statement\n    | N.Declaration\n    | N.ImportDeclaration\n    | N.ExportDefaultDeclaration\n    | N.ExportNamedDeclaration\n    | N.ExportAllDeclaration {\n    let decorators: N.Decorator[] | null = null;\n\n    if (this.match(tt.at)) {\n      decorators = this.parseDecorators(true);\n    }\n    return this.parseStatementContent(flags, decorators);\n  }\n\n  parseStatementContent(\n    this: Parser,\n    flags: ParseStatementFlag,\n    decorators?: N.Decorator[] | null,\n  ): N.Statement {\n    const startType = this.state.type;\n    const node = this.startNode();\n    const allowDeclaration = !!(flags & ParseStatementFlag.AllowDeclaration);\n    const allowFunctionDeclaration = !!(\n      flags & ParseStatementFlag.AllowFunctionDeclaration\n    );\n    const topLevel = flags & ParseStatementFlag.AllowImportExport;\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (startType) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node as Undone<N.DebuggerStatement>);\n      case tt._do:\n        return this.parseDoWhileStatement(node as Undone<N.DoWhileStatement>);\n      case tt._for:\n        return this.parseForStatement(node as Undone<N.ForStatement>);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (!allowFunctionDeclaration) {\n          this.raise(\n            this.state.strict\n              ? Errors.StrictFunction\n              : this.options.annexB\n                ? Errors.SloppyFunctionAnnexB\n                : Errors.SloppyFunction,\n            this.state.startLoc,\n          );\n        }\n        return this.parseFunctionStatement(\n          node as Undone<N.FunctionDeclaration>,\n          false,\n          !allowDeclaration && allowFunctionDeclaration,\n        );\n      case tt._class:\n        if (!allowDeclaration) this.unexpected();\n        return this.parseClass(\n          this.maybeTakeDecorators(\n            decorators,\n            node as Undone<N.ClassDeclaration>,\n          ),\n          true,\n        );\n\n      case tt._if:\n        return this.parseIfStatement(node as Undone<N.IfStatement>);\n      case tt._return:\n        return this.parseReturnStatement(node as Undone<N.ReturnStatement>);\n      case tt._switch:\n        return this.parseSwitchStatement(node as Undone<N.SwitchStatement>);\n      case tt._throw:\n        return this.parseThrowStatement(node as Undone<N.ThrowStatement>);\n      case tt._try:\n        return this.parseTryStatement(node as Undone<N.TryStatement>);\n\n      case tt._await:\n        // [+Await] await [no LineTerminator here] using [no LineTerminator here] BindingList[+Using]\n        if (!this.state.containsEsc && this.startsAwaitUsing()) {\n          if (!this.recordAwaitIfAllowed()) {\n            this.raise(Errors.AwaitUsingNotInAsyncContext, node);\n          } else if (!allowDeclaration) {\n            this.raise(Errors.UnexpectedLexicalDeclaration, node);\n          }\n          this.next(); // eat 'await'\n          return this.parseVarStatement(\n            node as Undone<N.VariableDeclaration>,\n            \"await using\",\n          );\n        }\n        break;\n      case tt._using:\n        // using [no LineTerminator here] BindingList[+Using]\n        if (\n          this.state.containsEsc ||\n          !this.hasInLineFollowingBindingIdentifierOrBrace()\n        ) {\n          break;\n        }\n        this.expectPlugin(\"explicitResourceManagement\");\n        if (!this.scope.inModule && this.scope.inTopLevel) {\n          this.raise(Errors.UnexpectedUsingDeclaration, this.state.startLoc);\n        } else if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);\n        }\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          \"using\",\n        );\n      case tt._let: {\n        if (this.state.containsEsc) {\n          break;\n        }\n        // `let [` is an explicit negative lookahead for\n        // ExpressionStatement, so special-case it first.\n        const next = this.nextTokenStart();\n        const nextCh = this.codePointAtPos(next);\n        if (nextCh !== charCodes.leftSquareBracket) {\n          if (!allowDeclaration && this.hasFollowingLineBreak()) break;\n          if (\n            !this.chStartsBindingIdentifier(nextCh, next) &&\n            nextCh !== charCodes.leftCurlyBrace\n          ) {\n            break;\n          }\n        }\n      }\n      // fall through\n      case tt._const: {\n        if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);\n        }\n      }\n      // fall through\n      case tt._var: {\n        const kind = this.state.value;\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          kind,\n        );\n      }\n      case tt._while:\n        return this.parseWhileStatement(node as Undone<N.WhileStatement>);\n      case tt._with:\n        return this.parseWithStatement(node as Undone<N.WithStatement>);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node as Undone<N.EmptyStatement>);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (\n          !(this.optionFlags & OptionFlags.AllowImportExportEverywhere) &&\n          !topLevel\n        ) {\n          this.raise(Errors.UnexpectedImportExport, this.state.startLoc);\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (startType === tt._import) {\n          result = this.parseImport(node as Undone<N.ImportDeclaration>);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(\n            node as Undone<\n              | N.ExportAllDeclaration\n              | N.ExportDefaultDeclaration\n              | N.ExportDefaultDeclaration\n            >,\n            decorators,\n          );\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(result);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (!allowDeclaration) {\n            this.raise(\n              Errors.AsyncFunctionInSingleStatementContext,\n              this.state.startLoc,\n            );\n          }\n          this.next(); // eat 'async'\n          return this.parseFunctionStatement(\n            node as Undone<N.FunctionDeclaration>,\n            true,\n            !allowDeclaration && allowFunctionDeclaration,\n          );\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(startType) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(\n        node as Undone<N.LabeledStatement>,\n        maybeName,\n        expr,\n        flags,\n      );\n    } else {\n      return this.parseExpressionStatement(\n        node as Undone<N.ExpressionStatement>,\n        expr,\n        decorators,\n      );\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (\n      !(this.optionFlags & OptionFlags.AllowImportExportEverywhere) &&\n      !this.inModule\n    ) {\n      this.raise(Errors.ImportOutsideModule, node);\n    }\n  }\n\n  decoratorsEnabledBeforeExport(): boolean {\n    if (this.hasPlugin(\"decorators-legacy\")) return true;\n    return (\n      this.hasPlugin(\"decorators\") &&\n      this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") !== false\n    );\n  }\n\n  // Attach the decorators to the given class.\n  // NOTE: This method changes the .start location of the class, and thus\n  // can affect comment attachment. Calling it before or after finalizing\n  // the class node (and thus finalizing its comments) changes how comments\n  // before the `class` keyword or before the final .start location of the\n  // class are attached.\n  maybeTakeDecorators<T extends Undone<N.Class>>(\n    maybeDecorators: N.Decorator[] | null,\n    classNode: T,\n    exportNode?: Undone<N.ExportDefaultDeclaration | N.ExportNamedDeclaration>,\n  ): T {\n    if (maybeDecorators) {\n      if (classNode.decorators?.length) {\n        // Note: decorators attachment is only attempred multiple times\n        // when the class is part of an export declaration.\n        if (\n          typeof this.getPluginOption(\n            \"decorators\",\n            \"decoratorsBeforeExport\",\n          ) !== \"boolean\"\n        ) {\n          // If `decoratorsBeforeExport` was set to `true` or `false`, we\n          // already threw an error about decorators not being in a valid\n          // position.\n          this.raise(\n            Errors.DecoratorsBeforeAfterExport,\n            classNode.decorators[0],\n          );\n        }\n        classNode.decorators.unshift(...maybeDecorators);\n      } else {\n        classNode.decorators = maybeDecorators;\n      }\n      this.resetStartLocationFromNode(classNode, maybeDecorators[0]);\n      if (exportNode) this.resetStartLocationFromNode(exportNode, classNode);\n    }\n    return classNode;\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(this: Parser, allowExport?: boolean): N.Decorator[] {\n    const decorators = [];\n    do {\n      decorators.push(this.parseDecorator());\n    } while (this.match(tt.at));\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (!this.decoratorsEnabledBeforeExport()) {\n        this.raise(Errors.DecoratorExportClass, this.state.startLoc);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, this.state.startLoc);\n    }\n\n    return decorators;\n  }\n\n  parseDecorator(this: Parser): N.Decorator {\n    this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n    const node = this.startNode<N.Decorator>();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.match(tt.parenL)) {\n        const startLoc = this.state.startLoc;\n        this.next(); // eat '('\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n        expr = this.wrapParenthesis(startLoc, expr);\n\n        const paramsStartLoc = this.state.startLoc;\n        node.expression = this.parseMaybeDecoratorArguments(expr, startLoc);\n        if (\n          this.getPluginOption(\"decorators\", \"allowCallParenthesized\") ===\n            false &&\n          node.expression !== expr\n        ) {\n          this.raise(\n            Errors.DecoratorArgumentsOutsideParentheses,\n            paramsStartLoc,\n          );\n        }\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt<N.MemberExpression>(startLoc);\n          node.object = expr;\n          if (this.match(tt.privateName)) {\n            this.classScope.usePrivateName(\n              this.state.value,\n              this.state.startLoc,\n            );\n            node.property = this.parsePrivateName();\n          } else {\n            node.property = this.parseIdentifier(true);\n          }\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n\n        node.expression = this.parseMaybeDecoratorArguments(expr, startLoc);\n      }\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(\n    this: Parser,\n    expr: N.Expression,\n    startLoc: Position,\n  ): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAt<N.CallExpression>(startLoc);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: true,\n  ): N.BreakStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: false,\n  ): N.ContinueStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === LoopLabelKind.Loop)) {\n          break;\n        }\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, node, { type });\n    }\n  }\n\n  parseDebuggerStatement(\n    node: Undone<N.DebuggerStatement>,\n  ): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(this: Parser): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  // https://tc39.es/ecma262/#prod-DoWhileStatement\n  parseDoWhileStatement(\n    this: Parser,\n    node: Undone<N.DoWhileStatement>,\n  ): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(\n    this: Parser,\n    node: Undone<N.ForStatement | N.ForInOf>,\n  ): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = null;\n\n    if (this.isContextual(tt._await) && this.recordAwaitIfAllowed()) {\n      awaitAt = this.state.startLoc;\n      this.next();\n    }\n    this.scope.enter(ScopeFlag.OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node as Undone<N.ForStatement>, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    {\n      const startsWithAwaitUsing =\n        this.isContextual(tt._await) && this.startsAwaitUsing();\n      const starsWithUsingDeclaration =\n        startsWithAwaitUsing ||\n        (this.isContextual(tt._using) && this.startsUsingForOf());\n      const isLetOrUsing =\n        (startsWithLet && this.hasFollowingBindingAtom()) ||\n        starsWithUsingDeclaration;\n\n      if (this.match(tt._var) || this.match(tt._const) || isLetOrUsing) {\n        const initNode = this.startNode<N.VariableDeclaration>();\n        let kind;\n        if (startsWithAwaitUsing) {\n          kind = \"await using\";\n          if (!this.recordAwaitIfAllowed()) {\n            this.raise(Errors.AwaitUsingNotInAsyncContext, this.state.startLoc);\n          }\n          this.next(); // eat 'await'\n        } else {\n          kind = this.state.value;\n        }\n        this.next();\n        this.parseVar(initNode, true, kind);\n        const init = this.finishNode(initNode, \"VariableDeclaration\");\n\n        const isForIn = this.match(tt._in);\n        if (isForIn && starsWithUsingDeclaration) {\n          this.raise(Errors.ForInUsing, init);\n        }\n        if (\n          (isForIn || this.isContextual(tt._of)) &&\n          init.declarations.length === 1\n        ) {\n          return this.parseForIn(node as Undone<N.ForInOf>, init, awaitAt);\n        }\n        if (awaitAt !== null) {\n          this.unexpected(awaitAt);\n        }\n        return this.parseFor(node as Undone<N.ForStatement>, init);\n      }\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, init);\n      }\n\n      if (\n        // `for await (async of []);` is allowed.\n        awaitAt === null &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(Errors.ForOfAsync, init);\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, /* isLHS */ true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, { type });\n      return this.parseForIn(\n        node as Undone<N.ForInStatement | N.ForOfStatement>,\n        // @ts-expect-error init has been transformed to an assignable\n        init,\n        awaitAt,\n      );\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node as Undone<N.ForStatement>, init);\n  }\n\n  // https://tc39.es/ecma262/#prod-HoistableDeclaration\n  parseFunctionStatement(\n    this: Parser,\n    node: Undone<N.FunctionDeclaration>,\n    isAsync: boolean,\n    isHangingDeclaration: boolean,\n  ): N.FunctionDeclaration {\n    this.next(); // eat 'function'\n    return this.parseFunction(\n      node,\n      ParseFunctionFlag.Declaration |\n        (isHangingDeclaration ? ParseFunctionFlag.HangingDeclaration : 0) |\n        (isAsync ? ParseFunctionFlag.Async : 0),\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-IfStatement\n  parseIfStatement(this: Parser, node: Undone<N.IfStatement>) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    // Annex B.3.3\n    // https://tc39.es/ecma262/#sec-functiondeclarations-in-ifstatement-statement-clauses\n    node.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration();\n    node.alternate = this.eat(tt._else)\n      ? this.parseStatementOrSloppyAnnexBFunctionDeclaration()\n      : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(this: Parser, node: Undone<N.ReturnStatement>) {\n    if (\n      !this.prodParam.hasReturn &&\n      !(this.optionFlags & OptionFlags.AllowReturnOutsideFunction)\n    ) {\n      this.raise(Errors.IllegalReturn, this.state.startLoc);\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-SwitchStatement\n  parseSwitchStatement(this: Parser, node: Undone<N.SwitchStatement>) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases: N.SwitchStatement[\"cases\"] = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(ScopeFlag.OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        // @ts-expect-error Fixme\n        cases.push((cur = this.startNode<N.SwitchCase>()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(\n              Errors.MultipleDefaultsInSwitch,\n              this.state.lastTokStartLoc,\n            );\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatementListItem());\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(this: Parser, node: Undone<N.ThrowStatement>) {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, this.state.lastTokEndLoc);\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(this: Parser): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    this.scope.enter(\n      this.options.annexB && param.type === \"Identifier\"\n        ? ScopeFlag.SIMPLE_CATCH\n        : 0,\n    );\n    this.checkLVal(\n      param,\n      { type: \"CatchClause\" },\n      BindingFlag.TYPE_CATCH_PARAM,\n    );\n\n    return param;\n  }\n\n  parseTryStatement(\n    this: Parser,\n    node: Undone<N.TryStatement>,\n  ): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode<N.CatchClause>();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(ScopeFlag.OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, node);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-VariableStatement\n  // https://tc39.es/ecma262/#prod-LexicalDeclaration\n  parseVarStatement(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n    allowMissingInitializer: boolean = false,\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  // https://tc39.es/ecma262/#prod-WhileStatement\n  parseWhileStatement(\n    this: Parser,\n    node: Undone<N.WhileStatement>,\n  ): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(\n    this: Parser,\n    node: Undone<N.WithStatement>,\n  ): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, this.state.startLoc);\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: Undone<N.EmptyStatement>): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-LabelledStatement\n  parseLabeledStatement(\n    this: Parser,\n    node: Undone<N.LabeledStatement>,\n    maybeName: string,\n    expr: N.Identifier,\n    flags: ParseStatementFlag,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, expr, {\n          labelName: maybeName,\n        });\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? LoopLabelKind.Loop\n      : this.match(tt._switch)\n        ? LoopLabelKind.Switch\n        : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.sourceToOffsetPos(this.state.start);\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.sourceToOffsetPos(this.state.start),\n    });\n    // https://tc39.es/ecma262/#prod-LabelledItem\n    node.body =\n      flags & ParseStatementFlag.AllowLabeledFunction\n        ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(true)\n        : this.parseStatement();\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: Undone<N.ExpressionStatement>,\n    expr: N.Expression,\n    /* eslint-disable-next-line @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    decorators: N.Decorator[] | null,\n  ) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    this: Parser,\n    allowDirectives: boolean = false,\n    createNewLexicalScope: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode<N.BlockStatement>();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(ScopeFlag.OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    this: Parser,\n    node: Undone<N.BlockStatementLike>,\n    allowDirectives: boolean | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body: N.BlockStatementLike[\"body\"] = (node.body = []);\n    const directives: N.BlockStatementLike[\"directives\"] = (node.directives =\n      []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    this: Parser,\n    body: N.Statement[],\n    directives: N.Directive[] | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = topLevel\n        ? this.parseModuleItem()\n        : this.parseStatementListItem();\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    afterBlockParse?.call(this, hasStrictModeDirective);\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    this: Parser,\n    node: Undone<N.ForStatement>,\n    init?: N.VariableDeclaration | N.Expression | null,\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    this: Parser,\n    node: Undone<N.ForInOf>,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt?: Position | null,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        !this.options.annexB ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(Errors.ForInOfLoopInitializer, init, {\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\",\n      });\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, init, {\n        ancestor: { type: \"ForStatement\" },\n      });\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n    allowMissingInitializer: boolean = false,\n  ): Undone<N.VariableDeclaration> {\n    const declarations: N.VariableDeclarator[] = (node.declarations = []);\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode<N.VariableDeclarator>();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(tt.eq)\n        ? null\n        : isFor\n          ? this.parseMaybeAssignDisallowIn()\n          : this.parseMaybeAssignAllowIn();\n\n      if (decl.init === null && !allowMissingInitializer) {\n        if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(\n            Errors.DeclarationMissingInitializer,\n            this.state.lastTokEndLoc,\n            {\n              kind: \"destructuring\",\n            },\n          );\n        } else if (\n          (kind === \"const\" || kind === \"using\" || kind === \"await using\") &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          this.raise(\n            Errors.DeclarationMissingInitializer,\n            this.state.lastTokEndLoc,\n            { kind },\n          );\n        }\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(\n    this: Parser,\n    decl: Undone<N.VariableDeclarator>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n  ): void {\n    const id = this.parseBindingAtom();\n    if (kind === \"using\" || kind === \"await using\") {\n      if (id.type === \"ArrayPattern\" || id.type === \"ObjectPattern\") {\n        this.raise(Errors.UsingDeclarationHasBindingPattern, id.loc.start);\n      }\n    }\n    this.checkLVal(\n      id,\n      { type: \"VariableDeclarator\" },\n      kind === \"var\" ? BindingFlag.TYPE_VAR : BindingFlag.TYPE_LEXICAL,\n    );\n    decl.id = id;\n  }\n\n  // https://tc39.es/ecma262/#prod-AsyncFunctionExpression\n  parseAsyncFunctionExpression(\n    this: Parser,\n    node: Undone<N.FunctionExpression>,\n  ): N.FunctionExpression {\n    return this.parseFunction(node, ParseFunctionFlag.Async);\n  }\n\n  // Parse a function declaration or expression (depending on the\n  // ParseFunctionFlag.Declaration flag).\n\n  parseFunction<T extends N.NormalFunction>(\n    this: Parser,\n    node: Undone<T>,\n    flags: ParseFunctionFlag = ParseFunctionFlag.Expression,\n  ): T {\n    const hangingDeclaration = flags & ParseFunctionFlag.HangingDeclaration;\n    const isDeclaration = !!(flags & ParseFunctionFlag.Declaration);\n    const requireId = isDeclaration && !(flags & ParseFunctionFlag.NullableId);\n    const isAsync = !!(flags & ParseFunctionFlag.Async);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star)) {\n      if (hangingDeclaration) {\n        this.raise(\n          Errors.GeneratorInSingleStatementContext,\n          this.state.startLoc,\n        );\n      }\n      this.next(); // eat *\n      node.generator = true;\n    }\n\n    if (isDeclaration) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(ScopeFlag.FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isDeclaration) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* isConstructor */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isDeclaration ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isDeclaration && !hangingDeclaration) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node as T);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node as T;\n  }\n\n  parseFunctionId(requireId?: boolean): N.Identifier | undefined | null {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(\n    this: Parser,\n    node: Undone<N.Function>,\n    isConstructor?: boolean,\n  ): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      ParseBindingListFlags.IS_FUNCTION_PARAMS |\n        (isConstructor ? ParseBindingListFlags.IS_CONSTRUCTOR_PARAMS : 0),\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BindingFlag.TYPE_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      !this.options.annexB || this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BindingFlag.TYPE_VAR\n          : BindingFlag.TYPE_LEXICAL\n        : BindingFlag.TYPE_FUNCTION,\n      node.id.loc.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T extends N.Class>(\n    this: Parser,\n    node: Undone<T>,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next(); // 'class'\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  nameIsConstructor(key: N.Expression | N.PrivateName): boolean {\n    return (\n      (key.type === \"Identifier\" && key.name === \"constructor\") ||\n      (key.type === \"StringLiteral\" && key.value === \"constructor\")\n    );\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed && !method.static && this.nameIsConstructor(method.key)\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(\n    this: Parser,\n    hadSuperClass: boolean,\n    oldStrict: boolean,\n  ): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody = this.startNode<N.ClassBody>();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(\n              Errors.DecoratorSemicolon,\n              this.state.lastTokEndLoc,\n            );\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode<N.ClassMember>();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          // @ts-expect-error Fixme\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          // @ts-expect-error Fixme\n          member.kind === \"constructor\" &&\n          // @ts-expect-error Fixme\n          member.decorators &&\n          // @ts-expect-error Fixme\n          member.decorators.length > 0\n        ) {\n          this.raise(Errors.DecoratorConstructor, member);\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, this.state.startLoc);\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = member as any;\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = member as any;\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, member as any as N.StaticBlock);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod = member as N.ClassMethod;\n    const privateMethod = member as N.ClassPrivateMethod;\n    const publicProp = member as N.ClassProperty;\n    const privateProp = member as N.ClassPrivateProperty;\n    const accessorProp = member as N.ClassAccessorProperty;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, publicMethod.key);\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      !this.state.containsEsc && tokenIsIdentifier(this.state.type);\n    const key = this.parseClassElementName(member);\n    const maybeContextualKw = isContextual ? (key as N.Identifier).name : null;\n    const isPrivate = this.isPrivateName(key);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, key);\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, key);\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (maybeContextualKw === \"async\" && !this.isLineTerminator()) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, publicMethod.key);\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      (maybeContextualKw === \"get\" || maybeContextualKw === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = maybeContextualKw;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, publicMethod.key);\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (maybeContextualKw === \"accessor\" && !this.isLineTerminator()) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n\n      // The so-called parsed name would have been \"accessor\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(\n    this: Parser,\n    member: Undone<N.ClassMember>,\n  ): N.Expression | N.Identifier | N.PrivateName {\n    const { type, value } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(Errors.StaticPrototype, this.state.startLoc);\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, this.state.startLoc);\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    this.parsePropertyName(member);\n    return member.key;\n  }\n\n  parseClassStaticBlock(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<\n      N.StaticBlock & {\n        decorators?: Array<N.Decorator>;\n      }\n    >,\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(\n      ScopeFlag.CLASS | ScopeFlag.STATIC_BLOCK | ScopeFlag.SUPER,\n    );\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(ParamKind.PARAM);\n    const body: N.Statement[] = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(Errors.DecoratorStaticBlock, member);\n    }\n  }\n\n  pushClassProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassProperty,\n  ) {\n    if (!prop.computed && this.nameIsConstructor(prop.key)) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, prop.key);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: Undone<N.ClassPrivateProperty>,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      ClassElementType.OTHER,\n      node.key.loc.start,\n    );\n  }\n\n  pushClassAccessorProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassAccessorProperty,\n    isPrivate: boolean,\n  ) {\n    if (!isPrivate && !prop.computed && this.nameIsConstructor(prop.key)) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, prop.key);\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(\n        this.getPrivateNameSV(node.key as N.PrivateName),\n        ClassElementType.OTHER,\n        node.key.loc.start,\n      );\n    }\n  }\n\n  pushClassMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassPrivateMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? ClassElementType.STATIC_GETTER\n          : ClassElementType.INSTANCE_GETTER\n        : node.kind === \"set\"\n          ? node.static\n            ? ClassElementType.STATIC_SETTER\n            : ClassElementType.INSTANCE_SETTER\n          : ClassElementType.OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: Undone<N.ClassPrivateMethod | N.TSDeclareMethod>,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key as N.PrivateName),\n      kind,\n      node.key.loc.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    methodOrProp: Undone<N.ClassMethod | N.ClassProperty>,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    this: Parser,\n    node: Undone<N.ClassPrivateProperty>,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(this: Parser, node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(\n    this: Parser,\n    node: N.ClassAccessorProperty,\n  ): N.ClassAccessorProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(\n    this: Parser,\n    node: Undone<\n      N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty\n    >,\n  ): void {\n    this.scope.enter(ScopeFlag.CLASS | ScopeFlag.SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(ParamKind.PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: Undone<N.Class>,\n    isStatement: boolean,\n    optionalId?: boolean | null,\n    bindingType: BindingFlag = BindingFlag.TYPE_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, this.state.startLoc);\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(this: Parser, node: Undone<N.Class>): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(\n    this: Parser,\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n    decorators: N.Decorator[] | null,\n  ): N.AnyExport {\n    const maybeDefaultIdentifier = this.parseMaybeImportPhase(\n      node,\n      /* isExport */ true,\n    );\n    const hasDefault = this.maybeParseExportDefaultSpecifier(\n      node,\n      maybeDefaultIdentifier,\n    );\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.parseExportFrom(node, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) {\n      this.unexpected(null, tt.braceL);\n    }\n\n    if (hasNamespace && parseAfterNamespace) {\n      this.unexpected(null, tt._from);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.parseExportFrom(\n        node as Undone<N.ExportNamedDeclaration>,\n        isFromRequired,\n      );\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(\n        node as Undone<N.ExportNamedDeclaration>,\n      );\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n      this.checkExport(node2, true, false, !!node2.source);\n      if (node2.declaration?.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, node2.declaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      return this.finishNode(node2, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      const node2 = node as Undone<N.ExportDefaultDeclaration>;\n      // export default ...\n      const decl = this.parseExportDefaultExpression();\n      node2.declaration = decl;\n\n      if (decl.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, decl as N.ClassDeclaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n\n      this.checkExport(node2, true, true);\n\n      return this.finishNode(node2, \"ExportDefaultDeclaration\");\n    }\n\n    this.unexpected(null, tt.braceL);\n  }\n\n  eatExportStar(\n    node: Undone<N.Node>,\n  ): node is Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration> {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): node is Undone<N.ExportNamedDeclaration> {\n    if (maybeDefaultIdentifier || this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\", maybeDefaultIdentifier?.loc.start);\n      const id = maybeDefaultIdentifier || this.parseIdentifier(true);\n      const specifier = this.startNodeAtNode<N.ExportDefaultSpecifier>(id);\n      specifier.exported = id;\n      (node as Undone<N.ExportNamedDeclaration>).specifiers = [\n        this.finishNode(specifier, \"ExportDefaultSpecifier\"),\n      ];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(\n    node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n  ): node is Undone<N.ExportNamedDeclaration> {\n    if (this.isContextual(tt._as)) {\n      (node as Undone<N.ExportNamedDeclaration>).specifiers ??= [];\n\n      const specifier = this.startNodeAt<N.ExportNamespaceSpecifier>(\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      (node as Undone<N.ExportNamedDeclaration>).specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(\n    node: Undone<N.Node>,\n  ): node is Undone<N.ExportNamedDeclaration> {\n    if (this.match(tt.braceL)) {\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n\n      if (!node2.specifiers) node2.specifiers = [];\n      const isTypeExport = node2.exportKind === \"type\";\n      node2.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n\n      node2.source = null;\n      node2.declaration = null;\n      if (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"importAssertions\")) {\n        node2.assertions = [];\n      }\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n  ): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenInLineStart();\n    return this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression(\n    this: Parser,\n  ): N.ExportDefaultDeclaration[\"declaration\"] {\n    const expr = this.startNode();\n\n    if (this.match(tt._function)) {\n      this.next();\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration | ParseFunctionFlag.NullableId,\n      );\n    } else if (this.isAsyncFunction()) {\n      this.next(); // eat 'async'\n      this.next(); // eat 'function'\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration |\n          ParseFunctionFlag.NullableId |\n          ParseFunctionFlag.Async,\n      );\n    }\n\n    if (this.match(tt._class)) {\n      return this.parseClass(expr as Undone<N.ClassExpression>, true, true);\n    }\n\n    if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true\n      ) {\n        this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);\n      }\n      return this.parseClass(\n        this.maybeTakeDecorators(\n          this.parseDecorators(false),\n          this.startNode<N.ClassDeclaration>(),\n        ),\n        true,\n        true,\n      );\n    }\n\n    if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, this.state.startLoc);\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n  parseExportDeclaration(\n    this: Parser,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    node: Undone<N.ExportNamedDeclaration>,\n  ): N.Declaration | undefined | null {\n    if (this.match(tt._class)) {\n      const node = this.parseClass(\n        this.startNode<N.ClassDeclaration>(),\n        true,\n        false,\n      );\n      return node;\n    }\n    return this.parseStatementListItem() as N.Declaration;\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        const { type: nextType } = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (tokenIsIdentifier(nextType) && nextType !== tt._from) ||\n          nextType === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n    expect?: boolean,\n  ): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      this.maybeParseImportAttributes(node);\n      this.checkJSONModuleImport(node);\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (\n          this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true\n        ) {\n          this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);\n        }\n\n        return true;\n      }\n    }\n\n    if (this.isContextual(tt._using)) {\n      this.raise(Errors.UsingDeclarationExport, this.state.startLoc);\n      return true;\n    }\n\n    if (this.isContextual(tt._await) && this.startsAwaitUsing()) {\n      this.raise(Errors.UsingDeclarationExport, this.state.startLoc);\n      return true;\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: Undone<\n      | N.ExportNamedDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportDefaultDeclaration\n    >,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = (node as any as N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, declaration);\n          }\n        }\n        // @ts-expect-error node.specifiers may not exist\n      } else if (node.specifiers?.length) {\n        // Named exports\n        // @ts-expect-error node.specifiers may not exist\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, specifier, {\n                localName: local.value,\n                exportName,\n              });\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if ((node as Undone<N.ExportNamedDeclaration>).declaration) {\n        const decl = (node as Undone<N.ExportNamedDeclaration>).declaration;\n        // Exported declarations\n        if (\n          decl.type === \"FunctionDeclaration\" ||\n          decl.type === \"ClassDeclaration\"\n        ) {\n          const { id } = decl;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (decl.type === \"VariableDeclaration\") {\n          for (const declaration of decl.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      // @ts-expect-error migrate to Babel types\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node: Undone<\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier\n    >,\n    exportName: string,\n  ): void {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, node);\n      } else {\n        this.raise(Errors.DuplicateExport, node, { exportName });\n      }\n    }\n    this.exportedIdentifiers.add(exportName);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode<N.ExportSpecifier>();\n      node.local = this.parseModuleExportName() as N.Identifier;\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = loneSurrogate.exec(result.value);\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, result, {\n          surrogateCharCode: surrogate[0].charCodeAt(0),\n        });\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  isJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ): boolean {\n    if (node.assertions != null) {\n      return node.assertions.some(({ key, value }) => {\n        return (\n          value.value === \"json\" &&\n          (key.type === \"Identifier\"\n            ? key.name === \"type\"\n            : key.value === \"type\")\n        );\n      });\n    }\n    return false;\n  }\n\n  checkImportReflection(node: Undone<N.ImportDeclaration>) {\n    const { specifiers } = node;\n    const singleBindingType =\n      specifiers.length === 1 ? specifiers[0].type : null;\n\n    if (node.phase === \"source\") {\n      if (singleBindingType !== \"ImportDefaultSpecifier\") {\n        this.raise(\n          Errors.SourcePhaseImportRequiresDefault,\n          specifiers[0].loc.start,\n        );\n      }\n    } else if (node.phase === \"defer\") {\n      if (singleBindingType !== \"ImportNamespaceSpecifier\") {\n        this.raise(\n          Errors.DeferImportRequiresNamespace,\n          specifiers[0].loc.start,\n        );\n      }\n    } else if (node.module) {\n      if (singleBindingType !== \"ImportDefaultSpecifier\") {\n        this.raise(Errors.ImportReflectionNotBinding, specifiers[0].loc.start);\n      }\n      if (node.assertions?.length > 0) {\n        this.raise(\n          Errors.ImportReflectionHasAssertion,\n          specifiers[0].loc.start,\n        );\n      }\n    }\n  }\n\n  checkJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ) {\n    // @ts-expect-error Fixme: node.type must be undefined because they are undone\n    if (this.isJSONModuleImport(node) && node.type !== \"ExportAllDeclaration\") {\n      // @ts-expect-error specifiers may not index node\n      const { specifiers } = node;\n      if (specifiers != null) {\n        // @ts-expect-error refine specifier types\n        const nonDefaultNamedSpecifier = specifiers.find(specifier => {\n          let imported;\n          if (specifier.type === \"ExportSpecifier\") {\n            imported = specifier.local;\n          } else if (specifier.type === \"ImportSpecifier\") {\n            imported = specifier.imported;\n          }\n          if (imported !== undefined) {\n            return imported.type === \"Identifier\"\n              ? imported.name !== \"default\"\n              : imported.value !== \"default\";\n          }\n        });\n        if (nonDefaultNamedSpecifier !== undefined) {\n          this.raise(\n            Errors.ImportJSONBindingNotDefault,\n            nonDefaultNamedSpecifier.loc.start,\n          );\n        }\n      }\n    }\n  }\n\n  isPotentialImportPhase(isExport: boolean): boolean {\n    if (isExport) return false;\n    return (\n      this.isContextual(tt._source) ||\n      this.isContextual(tt._defer) ||\n      (!process.env.BABEL_8_BREAKING && this.isContextual(tt._module))\n    );\n  }\n\n  applyImportPhase(\n    node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n    isExport: boolean,\n    phase: string | null,\n    loc?: Position,\n  ): void {\n    if (isExport) {\n      if (!process.env.IS_PUBLISH) {\n        if (\n          (!process.env.BABEL_8_BREAKING && phase === \"module\") ||\n          phase === \"source\"\n        ) {\n          throw new Error(\n            `Assertion failure: export declarations do not support the '${phase}' phase.`,\n          );\n        }\n      }\n      return;\n    }\n\n    if (!process.env.BABEL_8_BREAKING && phase === \"module\") {\n      this.expectPlugin(\"importReflection\", loc);\n      (node as N.ImportDeclaration).module = true;\n    } else if (this.hasPlugin(\"importReflection\")) {\n      (node as N.ImportDeclaration).module = false;\n    }\n\n    if (phase === \"source\") {\n      this.expectPlugin(\"sourcePhaseImports\", loc);\n      (node as N.ImportDeclaration).phase = \"source\";\n    } else if (phase === \"defer\") {\n      this.expectPlugin(\"deferredImportEvaluation\", loc);\n      (node as N.ImportDeclaration).phase = \"defer\";\n    } else if (this.hasPlugin(\"sourcePhaseImports\")) {\n      (node as N.ImportDeclaration).phase = null;\n    }\n  }\n\n  /*\n   * Parse `source` in `import source x from \"x\"`, disambiguating\n   * `import source from \"x\"` and `import source from from \"x\"`.\n   *\n   * This function might return an identifier representing the `source`\n   * if it eats `source` and then discovers that it was the default import\n   * binding and not the import reflection.\n   *\n   * This function is also used to parse `import type` and `import typeof`\n   * in the TS and Flow plugins, and for parsing `import defer`.\n   */\n  parseMaybeImportPhase(\n    node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    isExport: boolean,\n  ): N.Identifier | null {\n    if (!this.isPotentialImportPhase(isExport)) {\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        null,\n      );\n      return null;\n    }\n\n    const phaseIdentifier = this.parseIdentifier(true);\n\n    const { type } = this.state;\n    const isImportPhase = tokenIsKeywordOrIdentifier(type)\n      ? // OK: import <phase> x from \"foo\";\n        // OK: import <phase> from from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // NO: import <phase> from 'foo';\n        // With the module declarations proposals, we will need further disambiguation\n        // for `import module from from;`.\n        type !== tt._from || this.lookaheadCharCode() === charCodes.lowercaseF\n      : // OK: import <phase> { x } from \"foo\";\n        // OK: import <phase> x from \"foo\";\n        // OK: import <phase> * as T from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // OK: import <phase> \"foo\";\n        // The last one is invalid, we will continue parsing and throw\n        // an error later\n        type !== tt.comma;\n\n    if (isImportPhase) {\n      this.resetPreviousIdentifierLeadingComments(phaseIdentifier);\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        phaseIdentifier.name,\n        phaseIdentifier.loc.start,\n      );\n      return null;\n    } else {\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        null,\n      );\n      // `<phase>` is a default binding, return it to the main import declaration parser\n      return phaseIdentifier;\n    }\n  }\n\n  isPrecedingIdImportPhase(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    phase: string,\n  ) {\n    const { type } = this.state;\n    return tokenIsIdentifier(type)\n      ? // OK: import <phase> x from \"foo\";\n        // OK: import <phase> from from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // NO: import <phase> from 'foo';\n        // With the module declarations proposals, we will need further disambiguation\n        // for `import module from from;`.\n        type !== tt._from || this.lookaheadCharCode() === charCodes.lowercaseF\n      : // OK: import <phase> { x } from \"foo\";\n        // OK: import <phase> x from \"foo\";\n        // OK: import <phase> * as T from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // OK: import <phase> \"foo\";\n        // The last one is invalid, we will continue parsing and throw\n        // an error later\n        type !== tt.comma;\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(this: Parser, node: Undone<N.ImportDeclaration>): N.AnyImport {\n    if (this.match(tt.string)) {\n      // import '...'\n      return this.parseImportSourceAndAttributes(node);\n    }\n\n    return this.parseImportSpecifiersAndAfter(\n      node,\n      this.parseMaybeImportPhase(node, /* isExport */ false),\n    );\n  }\n\n  parseImportSpecifiersAndAfter(\n    this: Parser,\n    node: Undone<N.ImportDeclaration>,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): N.AnyImport {\n    node.specifiers = [];\n\n    // check if we have a default import like\n    // import React from \"react\";\n    const hasDefault = this.maybeParseDefaultImportSpecifier(\n      node,\n      maybeDefaultIdentifier,\n    );\n    /* we are checking if we do not have a default import, then it is obvious that we need named imports\n     * import { get } from \"axios\";\n     * but if we do have a default import\n     * we need to check if we have a comma after that and\n     * that is where this `|| this.eat` condition comes into play\n     */\n    const parseNext = !hasDefault || this.eat(tt.comma);\n    // if we do have to parse the next set of specifiers, we first check for star imports\n    // import React, * from \"react\";\n    const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n    // now we check if we need to parse the next imports\n    // but only if they are not importing * (everything)\n    if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n    this.expectContextual(tt._from);\n\n    return this.parseImportSourceAndAttributes(node);\n  }\n\n  parseImportSourceAndAttributes(\n    this: Parser,\n    node: Undone<N.ImportDeclaration>,\n  ): N.AnyImport {\n    node.specifiers ??= [];\n    node.source = this.parseImportSource();\n    this.maybeParseImportAttributes(node);\n    this.checkImportReflection(node);\n    this.checkJSONModuleImport(node);\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(this: Parser): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom() as N.StringLiteral;\n  }\n\n  parseImportSpecifierLocal<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(\n    node: Undone<N.ImportDeclaration>,\n    specifier: Undone<T>,\n    type: T[\"type\"],\n  ): void {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n\n  finishImportSpecifier<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(\n    specifier: Undone<T>,\n    type: T[\"type\"],\n    bindingType: BindingFlag = BindingFlag.TYPE_LEXICAL,\n  ) {\n    this.checkLVal(specifier.local, { type }, bindingType);\n    return this.finishNode(specifier, type);\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-attributes/#prod-WithEntries WithEntries}\n   */\n  parseImportAttributes(): N.ImportAttribute[] {\n    this.expect(tt.braceL);\n\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(\n          Errors.ModuleAttributesWithDuplicateKeys,\n          this.state.startLoc,\n          {\n            key: keyName,\n          },\n        );\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.raise(\n          Errors.ModuleAttributeInvalidValue,\n          this.state.startLoc,\n        );\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    this.expect(tt.braceR);\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   */\n  parseModuleAttributes() {\n    const attrs: N.ImportAttribute[] = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode<N.ImportAttribute>();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, node.key);\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, node.key, {\n          key: node.key.name,\n        });\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.raise(\n          Errors.ModuleAttributeInvalidValue,\n          this.state.startLoc,\n        );\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAttributes(\n    node: Undone<\n      N.ImportDeclaration | N.ExportNamedDeclaration | N.ExportAllDeclaration\n    >,\n  ) {\n    let attributes: N.ImportAttribute[];\n    if (!process.env.BABEL_8_BREAKING) {\n      // eslint-disable-next-line no-var\n      var useWith = false;\n    }\n\n    // https://tc39.es/proposal-import-attributes/#prod-WithClause\n    if (this.match(tt._with)) {\n      if (\n        this.hasPrecedingLineBreak() &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      ) {\n        // This will be parsed as a with statement, and we will throw a\n        // better error about it not being supported in strict mode.\n        return;\n      }\n\n      this.next(); // eat `with`\n\n      if (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"moduleAttributes\")) {\n        attributes = this.parseModuleAttributes();\n      } else {\n        attributes = this.parseImportAttributes();\n      }\n      if (!process.env.BABEL_8_BREAKING) {\n        useWith = true;\n      }\n    } else if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      if (\n        !this.hasPlugin(\"deprecatedImportAssert\") &&\n        (process.env.BABEL_8_BREAKING || !this.hasPlugin(\"importAssertions\"))\n      ) {\n        this.raise(Errors.ImportAttributesUseAssert, this.state.startLoc);\n      }\n      if (process.env.BABEL_8_BREAKING || !this.hasPlugin(\"importAssertions\")) {\n        this.addExtra(node, \"deprecatedAssertSyntax\", true);\n      }\n      this.next(); // eat `assert`\n      attributes = this.parseImportAttributes();\n    } else {\n      attributes = [];\n    }\n\n    if (\n      !process.env.BABEL_8_BREAKING &&\n      !useWith &&\n      this.hasPlugin(\"importAssertions\")\n    ) {\n      node.assertions = attributes;\n    } else {\n      node.attributes = attributes;\n    }\n  }\n\n  maybeParseDefaultImportSpecifier(\n    node: Undone<N.ImportDeclaration>,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): boolean {\n    // import defaultObj, { x, y as z } from '...'\n    if (maybeDefaultIdentifier) {\n      const specifier = this.startNodeAtNode<N.ImportDefaultSpecifier>(\n        maybeDefaultIdentifier,\n      );\n      specifier.local = maybeDefaultIdentifier;\n      node.specifiers.push(\n        this.finishImportSpecifier(specifier, \"ImportDefaultSpecifier\"),\n      );\n      return true;\n    } else if (\n      // We allow keywords, and parseImportSpecifierLocal will report a recoverable error\n      tokenIsKeywordOrIdentifier(this.state.type)\n    ) {\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode<N.ImportDefaultSpecifier>(),\n        \"ImportDefaultSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: Undone<N.ImportDeclaration>): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode<N.ImportNamespaceSpecifier>();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: Undone<N.ImportDeclaration>) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(Errors.DestructureNamedImport, this.state.startLoc);\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode<N.ImportSpecifier>();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n        undefined,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: Undone<N.ImportSpecifier>,\n    importedIsString: boolean,\n    /* used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    bindingType: BindingFlag | undefined,\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, specifier, {\n          importName: (imported as N.StringLiteral).value,\n        });\n      }\n      this.checkReservedWord(\n        (imported as N.Identifier).name,\n        specifier.loc.start,\n        true,\n        true,\n      );\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    return this.finishImportSpecifier(\n      specifier,\n      \"ImportSpecifier\",\n      bindingType,\n    );\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n","import type { Options } from \"../options.ts\";\nimport type * as N from \"../types.ts\";\nimport { getOptions, OptionFlags } from \"../options.ts\";\nimport StatementParser from \"./statement.ts\";\nimport ScopeHandler from \"../util/scope.ts\";\n\nexport type PluginsMap = Map<\n  string,\n  {\n    [x: string]: any;\n  }\n>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  // todo(flow->ts) - this probably can be removed\n  // abstract jsxParseOpeningElementAfterName(\n  //   node: N.JSXOpeningElement,\n  // ): N.JSXOpeningElement;\n\n  constructor(\n    options: Options | undefined | null,\n    input: string,\n    pluginsMap: PluginsMap,\n  ) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap;\n    this.filename = options.sourceFilename;\n    this.startIndex = options.startIndex;\n\n    let optionFlags = 0;\n    if (options.allowAwaitOutsideFunction) {\n      optionFlags |= OptionFlags.AllowAwaitOutsideFunction;\n    }\n    if (options.allowReturnOutsideFunction) {\n      optionFlags |= OptionFlags.AllowReturnOutsideFunction;\n    }\n    if (options.allowImportExportEverywhere) {\n      optionFlags |= OptionFlags.AllowImportExportEverywhere;\n    }\n    if (options.allowSuperOutsideMethod) {\n      optionFlags |= OptionFlags.AllowSuperOutsideMethod;\n    }\n    if (options.allowUndeclaredExports) {\n      optionFlags |= OptionFlags.AllowUndeclaredExports;\n    }\n    if (options.allowNewTargetOutsideFunction) {\n      optionFlags |= OptionFlags.AllowNewTargetOutsideFunction;\n    }\n    if (options.ranges) {\n      optionFlags |= OptionFlags.Ranges;\n    }\n    if (options.tokens) {\n      optionFlags |= OptionFlags.Tokens;\n    }\n    if (options.createImportExpressions) {\n      optionFlags |= OptionFlags.CreateImportExpressions;\n    }\n    if (options.createParenthesizedExpressions) {\n      optionFlags |= OptionFlags.CreateParenthesizedExpressions;\n    }\n    if (options.errorRecovery) {\n      optionFlags |= OptionFlags.ErrorRecovery;\n    }\n    if (options.attachComment) {\n      optionFlags |= OptionFlags.AttachComment;\n    }\n    if (options.annexB) {\n      optionFlags |= OptionFlags.AnnexB;\n    }\n\n    this.optionFlags = optionFlags;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): new (...args: any) => ScopeHandler {\n    return ScopeHandler;\n  }\n\n  parse(): N.File {\n    this.enterInitialScopes();\n    const file = this.startNode<N.File>();\n    const program = this.startNode<N.Program>();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    file.comments.length = this.state.commentsLen;\n    return file as N.File;\n  }\n}\n","import type { Options } from \"./options.ts\";\nimport {\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n} from \"./plugin-utils.ts\";\nimport type {\n  PluginConfig as ParserPlugin,\n  FlowPluginOptions,\n  RecordAndTuplePluginOptions,\n  PipelineOperatorPluginOptions,\n} from \"./typings.ts\";\nimport Parser, { type PluginsMap } from \"./parser/index.ts\";\n\nimport type { ExportedTokenType } from \"./tokenizer/types.ts\";\nimport {\n  getExportedToken,\n  tt as internalTokenTypes,\n  type InternalTokenTypes,\n} from \"./tokenizer/types.ts\";\nexport type { Token } from \"./tokenizer/index.ts\";\n\nimport type { Expression, File } from \"./types.ts\";\nexport type { Expression, File };\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(\n  internalTokenTypes: InternalTokenTypes,\n): Record<string, ExportedTokenType> {\n  const tokenTypes: Record<string, ExportedTokenType> = {};\n  for (const typeName of Object.keys(\n    internalTokenTypes,\n  ) as (keyof InternalTokenTypes)[]) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: Options | undefined | null, input: string): Parser {\n  let cls = Parser;\n  const pluginsMap: PluginsMap = new Map();\n  if (options?.plugins) {\n    for (const plugin of options.plugins) {\n      let name, opts;\n      if (typeof plugin === \"string\") {\n        name = plugin;\n      } else {\n        [name, opts] = plugin;\n      }\n      if (!pluginsMap.has(name)) {\n        pluginsMap.set(name, opts || {});\n      }\n    }\n    validatePlugins(pluginsMap);\n    cls = getParserClass(pluginsMap);\n  }\n\n  return new cls(options, input, pluginsMap);\n}\n\nconst parserClassCache = new Map<string, new (...args: any) => Parser>();\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(\n  pluginsMap: Map<string, any>,\n): new (...args: any) => Parser {\n  const pluginList = [];\n  for (const name of mixinPluginNames) {\n    if (pluginsMap.has(name)) {\n      pluginList.push(name);\n    }\n  }\n  const key = pluginList.join(\"|\");\n  let cls = parserClassCache.get(key);\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      // @ts-expect-error todo(flow->ts)\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache.set(key, cls);\n  }\n  return cls;\n}\n\nexport type {\n  FlowPluginOptions,\n  ParserPlugin,\n  PipelineOperatorPluginOptions,\n  RecordAndTuplePluginOptions,\n};\nexport type ParserOptions = Partial<Options>;\n"],"names":["Position","constructor","line","col","index","column","SourceLocation","start","end","filename","identifierName","createPositionWithColumnOffset","position","columnOffset","code","ModuleErrors","ImportMetaOutsideModule","message","ImportOutsideModule","NodeDescriptions","ArrayPattern","AssignmentExpression","AssignmentPattern","ArrowFunctionExpression","ConditionalExpression","CatchClause","ForOfStatement","ForInStatement","ForStatement","FormalParameters","Identifier","ImportSpecifier","ImportDefaultSpecifier","ImportNamespaceSpecifier","ObjectPattern","ParenthesizedExpression","RestElement","UpdateExpression","true","false","VariableDeclarator","YieldExpression","toNodeDescription","node","type","prefix","StandardErrors","AccessorIsGenerator","kind","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitUsingNotInAsyncContext","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorArgumentsOutsideParentheses","DecoratorBeforeExport","DecoratorsBeforeAfterExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeferImportRequiresNamespace","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","exportName","DuplicateProto","DuplicateRegExpFlags","DynamicImportPhaseRequiresImportExpressions","phase","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","localName","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForInUsing","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportAttributesUseAssert","ImportBindingIsString","importName","ImportCallArity","ImportCallNotNewExpression","ImportCallSpreadArgument","ImportJSONBindingNotDefault","ImportReflectionHasAssertion","ImportReflectionNotBinding","IncompatibleRegExpUVFlags","InvalidBigIntLiteral","InvalidCodePoint","InvalidCoverInitializedName","InvalidDecimal","InvalidDigit","radix","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","reservedWord","InvalidIdentifier","InvalidLhs","ancestor","InvalidLhsBinding","InvalidLhsOptionalChaining","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","unexpected","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","labelName","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingPlugin","missingPlugin","map","name","JSON","stringify","join","MissingOneOfPlugins","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","key","ModuleExportNameHasLoneSurrogate","surrogateCharCode","toString","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","SloppyFunctionAnnexB","SourcePhaseImportRequiresDefault","StaticPrototype","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","keyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","expected","UnexpectedTokenUnaryExponentiation","UnexpectedUsingDeclaration","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","target","onlyValidPropertyName","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","UsingDeclarationExport","UsingDeclarationHasBindingPattern","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","StrictModeErrors","StrictDelete","StrictEvalArguments","referenceName","StrictEvalArgumentsBinding","bindingName","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","UnparenthesizedPipeBodyDescriptions","Set","PipelineOperatorErrors","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","token","PipeTopicUnused","PipeUnparenthesizedBody","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","defineHidden","obj","value","Object","defineProperty","enumerable","configurable","toParseErrorConstructor","toMessage","reasonCode","syntaxPlugin","hasMissingPlugin","oldReasonCodes","AccessorCannotDeclareThisParameter","AccessorCannotHaveTypeParameters","ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference","SetAccessorCannotHaveOptionalParameter","SetAccessorCannotHaveRestParameter","SetAccessorCannotHaveReturnType","loc","details","error","SyntaxError","pos","clone","overrides","_overrides$loc","assign","get","set","writable","ParseErrorEnum","argument","Array","isArray","parseErrorTemplates","ParseErrorConstructors","keys","template","_ref","rest","_objectWithoutPropertiesLoose","_excluded","Errors","createDefaultOptions","sourceType","sourceFilename","undefined","startIndex","startColumn","startLine","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowNewTargetOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","plugins","strictMode","ranges","tokens","createImportExpressions","createParenthesizedExpressions","errorRecovery","attachComment","annexB","getOptions","opts","options","Error","toUnenumerable","object","toESTreeLocation","estree","superClass","ESTreeParserMixin","parse","file","optionFlags","parseRegExpLiteral","pattern","flags","regex","RegExp","_","estreeParseLiteral","parseBigIntLiteral","bigInt","BigInt","_unused","bigint","String","parseDecimalLiteral","decimal","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","directiveToStmt","directive","expression","raw","extra","expressionValue","stmt","rawValue","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","params","isValidDirective","_stmt$expression$extr","parenthesized","parseBlockBody","allowDirectives","topLevel","afterBlockParse","directiveStatements","directives","d","body","concat","parsePrivateName","getPluginOption","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","parseFunctionBody","allowExpression","isMethod","parseMethod","isGenerator","isConstructor","allowDirectSuper","inClassScope","funcNode","startNode","typeParameters","computed","finishNode","nameIsConstructor","parseClassProperty","args","propertyNode","parseClassPrivateProperty","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","startLoc","refExpressionErrors","isValidLVal","isUnparenthesizedInAssign","binding","isAssignable","isBinding","toAssignable","isLHS","classScope","usePrivateName","toAssignableObjectExpressionProp","isLast","raise","finishCallExpression","unfinished","optional","callee","_ref2","source","arguments","attributes","toReferencedArguments","parseExport","decorators","exportStartLoc","state","lastTokStartLoc","exported","specifiers","length","_declaration$decorato","declaration","resetStartLocation","parseSubscript","base","noCalls","optionalChainMember","substring","stop","chain","startNodeAtNode","isOptionalMemberExpression","hasPropertyAsPrivateName","isObjectMethod","finishNodeAt","endLoc","resetEndLocation","lastTokEndLoc","TokContext","preserveSpace","types","brace","j_oTag","j_cTag","j_expr","beforeExpr","startsExpr","isLoop","isAssign","postfix","ExportedTokenType","label","conf","rightAssociative","binop","updateContext","keywords","Map","createKeyword","createToken","createBinop","tokenTypeCounter","tokenTypes","tokenLabels","tokenBinops","tokenBeforeExprs","tokenStartsExprs","tokenPrefixes","_options$binop","_options$beforeExpr","_options$startsExpr","_options$prefix","push","createKeywordLike","_options$binop2","_options$beforeExpr2","_options$startsExpr2","_options$prefix2","tt","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","ellipsis","backQuote","dollarBraceL","templateTail","templateNonTail","at","hash","interpreterDirective","eq","slashAssign","xorAssign","moduloAssign","incDec","bang","tilde","doubleCaret","doubleAt","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","lt","gt","relational","bitShift","bitShiftL","bitShiftR","plusMin","modulo","star","slash","exponent","_in","_instanceof","_break","_case","_catch","_continue","_debugger","_default","_else","_finally","_function","_if","_return","_switch","_throw","_try","_var","_const","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_typeof","_void","_delete","_do","_for","_while","_as","_assert","_async","_await","_defer","_from","_get","_let","_meta","_of","_sent","_set","_source","_static","_using","_yield","_asserts","_checks","_exports","_global","_implements","_intrinsic","_infer","_is","_mixins","_proto","_require","_satisfies","_keyof","_readonly","_unique","_abstract","_declare","_enum","_module","_namespace","_interface","_type","_opaque","placeholder","string","num","regexp","privateName","eof","jsxName","jsxText","jsxTagStart","jsxTagEnd","tokenIsIdentifier","tokenKeywordOrIdentifierIsKeyword","tokenIsKeywordOrIdentifier","tokenIsLiteralPropertyName","tokenComesBeforeExpression","tokenCanStartExpression","tokenIsAssignment","tokenIsFlowInterfaceOrTypeOrOpaque","tokenIsLoop","tokenIsKeyword","tokenIsOperator","tokenIsPostfix","tokenIsPrefix","tokenIsTSTypeOperator","tokenIsTSDeclarationStart","tokenLabelName","tokenOperatorPrecedence","tokenIsRightAssociative","tokenIsTemplate","getExportedToken","context","pop","tc","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","i","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","has","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","next2","reservedWordLikeSet","canBeReservedWord","Scope","names","firstLexicalName","ScopeHandler","parser","scopeStack","undefinedExports","inTopLevel","currentScope","inFunction","currentVarScopeFlags","allowSuper","currentThisScopeFlags","inClass","inClassAndNotInNonArrowFunction","inStaticBlock","ScopeFlag","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","maybeExportDefined","delete","isRedeclaredInScope","checkLocalExport","topLevelScope","FlowScope","declareFunctions","FlowScopeHandler","add","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","sourceToOffsetPos","sourcePos","offsetToSourcePos","offsetPos","hasPlugin","pluginConfig","pluginName","pluginOptions","actualOptions","plugin","_this$plugins$get","setTrailingComments","comments","trailingComments","unshift","setLeadingComments","leadingComments","setInnerComments","innerComments","adjustInnerComments","elements","commentWS","lastElement","CommentsParser","addComment","comment","commentsLen","processComment","commentStack","commentStackLength","lastCommentWS","leadingNode","nodeStart","commentEnd","containingNode","finalizeComment","splice","trailingNode","commentStart","input","charCodeAt","properties","members","finalizeRemainingComments","resetPreviousNodeTrailingComments","resetPreviousIdentifierLeadingComments","takeSurroundingComments","lineBreak","lineBreakG","isNewLine","hasNewLine","skipWhiteSpace","skipWhiteSpaceInLine","isWhitespace","State","curLine","lineStart","errors","potentialArrowAt","noArrowAt","noArrowParamsConversionAt","topicContext","maxNumOfResolvableTopics","maxTopicIndex","labels","ct","firstInvalidTemplateEscapePos","strictErrors","tokensLength","v","init","maybeInArrowParameters","inType","noAnonFunctionType","hasFlowComment","isAmbientContext","inAbstractClass","inDisallowConditionalTypesContext","soloAwait","inFSharpPipelineDirectBody","canStartJSXElement","containsEsc","hasTopLevelAwait","curPosition","slice","isDigit","forbiddenNumericSeparatorSiblings","decBinOct","hex","isAllowedNumericSeparatorSibling","bin","ch","oct","dec","readStringContents","initialPos","initialLineStart","initialCurLine","out","firstInvalidLoc","chunkStart","unterminated","isStringEnd","res","readEscapedChar","str","containsInvalid","inTemplate","throwOnInvalid","readHexChar","readCodePoint","fromCodePoint","strictNumericEscape","startPos","match","exec","octalStr","octal","parseInt","len","forceLen","n","readInt","invalidEscapeSequence","allowNumSeparator","bailOnError","forbiddenSiblings","isAllowedSibling","invalid","total","e","Infinity","val","prev","numericSeparatorInEscapeSequence","Number","isNaN","unexpectedNumericSeparator","_isDigit","invalidDigit","indexOf","invalidCodePoint","buildPosition","VALID_REGEX_FLAGS","Token","Tokenizer","isLookahead","errorHandlers_readInt","errorBuilder","errorHandlers_readCodePoint","errorHandlers_readStringContents_string","recordStrictModeErrors","errorHandlers_readStringContents_template","pushToken","checkKeywordEscapes","nextToken","eat","createLookaheadState","curContext","lookahead","old","curr","nextTokenStart","nextTokenStartSince","lastIndex","lookaheadCharCode","nextTokenInLineStart","nextTokenInLineStartSince","lookaheadInLineCharCode","codePointAtPos","cp","trail","setStrict","forEach","toParseError","clear","skipSpace","finishToken","getTokenFromCode","skipBlockComment","skipLineComment","startSkip","spaceStart","loop","commentWhitespace","prevType","replaceToken","readToken_numberSign","readToken_interpreter","nextPos","expectPlugin","readWord1","finishOp","readToken_dot","readNumber","readToken_slash","readToken_mult_modulo","width","readToken_pipe_amp","readToken_caret","proposal","topicToken","lookaheadCh","codePointAt","readToken_atSign","readToken_plus_min","readToken_lt","readToken_gt","size","readToken_eq_excl","readToken_question","readTemplateToken","readRadixNumber","readString","readWord","readRegexp","escaped","content","mods","char","includes","isBigInt","replace","startsWithDot","isFloat","hasExponent","isOctal","hasLeadingZero","integer","underscorePos","isDecimal","parseFloat","quote","readTemplateContinuation","opening","firstCode","escStart","identifierCheck","esc","keywordTypes","raiseOverwrite","expectOnePlugin","pluginNames","some","ClassScope","privateNames","loneAccessors","undefinedPrivateNames","ClassScopeHandler","stack","oldClassScope","from","declarePrivateName","elementType","redefined","accessor","oldStatic","newStatic","oldKind","newKind","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","declarationErrors","recordDeclarationError","ParsingErrorClass","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","origin","recordArrowParameterBindingError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","UtilParser","addExtra","isContextual","isUnparsedContextual","nameStart","nameEnd","nextCh","isLookaheadContextual","eatContextual","expectContextual","canInsertSemicolon","hasPrecedingLineBreak","hasFollowingLineBreak","isLineTerminator","semicolon","allowAsi","expect","tryParse","fn","oldState","abortSignal","failState","thrown","aborted","checkExpressionErrors","andThrow","shorthandAssignLoc","doubleProtoLoc","privateKeyLoc","optionalParametersLoc","hasErrors","isLiteralPropertyName","property","initializeScopes","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","getScopeHandler","oldProdParam","prodParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","checkDestructuringPrivate","ExpressionErrors","Node","range","NodePrototype","prototype","__clone","newNode","clonePlaceholder","cloneIdentifier","cloned","create","expectedNode","cloneStringLiteral","NodeUtils","startNodeAt","resetStartLocationFromNode","locationNode","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","reservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","memberName","enumName","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","invalidEnumType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","explicitType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","suggestion","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitialized","GetterMayNotHaveThisParam","ImportReflectionHasImportType","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","PatternIsOptional","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","unsupportedExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","hasTypeImportKind","importKind","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flow","FlowParserMixin","flowPragma","shouldParseTypes","matches","flowParseTypeInitialiser","tok","oldInType","flowParseType","flowParsePredicate","moduloLoc","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","this","returnType","typeAnnotation","flowParseDeclare","insideModule","flowParseDeclareVariable","flowParseDeclareModuleExports","flowParseDeclareModule","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","parseExprAtom","bodyNode","parseImport","hasModuleExport","default","isLet","exportKind","flowParseTypeAnnotation","finished","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","flowParseInterfaceExtends","implements","mixins","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStartLoc","variance","flowParseVariance","ident","bound","defaultRequired","typeParameter","flowInTopLevelContext","cb","oldContext","flowParseTypeParameterInstantiationInExpression","reScan_lt","oldNoAnonFunctionType","reScan_lt_gt","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStartLoc","inexactStartLoc","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","proto","flowCheckGetterSetterParams","paramCount","_startLoc","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","createIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatementLike","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","setOptionalParametersError","originalNoArrowAt","consequent","failed","tryParseConditionalConsequent","valid","getArrowLikeExpressions","alternate","parseMaybeAssign","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","_node$extra","toAssignableList","trailingCommaLoc","checkParams","result","parseParenItem","typeCastNode","assertModuleNodeAllowed","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","classBody","member","parseClassMemberFromModifier","isIterator","readIterator","fullWord","left","exprList","toReferencedList","isParenthesizedExpr","_expr$extra","parseArrayLike","close","canBePattern","isTuple","isParenthesized","isClassMethod","isClassProperty","isNonstaticConstructor","pushClassMethod","allowsDirectSuper","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyNamePrefixOperator","parseObjPropValue","parseFunctionParamType","parseMaybeDefault","checkImportReflection","module","parseImportSpecifierLocal","specifier","local","finishImportSpecifier","isPotentialImportPhase","isExport","applyImportPhase","parseImportSpecifier","importedIsString","isInTypeOnlyImport","isMaybeTypeOnly","firstIdent","imported","specifierTypeKind","as_ident","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","parseVarId","decl","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","_jsx","jsx","currentContext","_jsx2","_jsx3","abort","_arrowExpression$extr","arrowExpression","maybeUnwrapTypeCastExpression","async","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","strictModeChanged","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewCallee","targs","parseArrowExpression","parseTopLevel","program","fileNode","skipFlowComment","hasFlowCommentCompletion","commentSkip","shiftToFirstNonWhiteSpace","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","flowEnumErrorInvalidMemberInitializer","enumContext","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitialized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","toUpperCase","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","jsxParseOpeningElementAfterName","afterNext","entities","__proto__","quot","amp","apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","openingTagName","MissingClosingTagFragment","UnexpectedSequenceExpression","HTMLEntity","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","isFragment","getQualifiedJSXName","namespace","JSXParserMixin","jsxReadToken","jsxReadEntity","jsxReadNewLine","normalizeCRLF","jsxReadString","codePoint","count","desc","entity","XHTMLEntities","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","jsxParseAttributeValue","setContext","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","previousContext","jsxParseAttribute","jsxParseOpeningElementAt","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","newContext","TypeScriptScope","tsNames","TypeScriptScopeHandler","importsStack","hasImport","allowShadow","isConst","wasConst","unwrapParenthesizedExpression","LValParser","_node$extra3","last","_node$extra2","operator","arg","checkToRestConversion","elt","element","toReferencedListDeep","parseSpread","parseRestBinding","parseBindingList","ParseBindingListFlags","parseObjectLike","closeCharCode","allowEmpty","elts","checkCommaAfterRest","parseDecorator","parseAssignableListItem","parseBindingRestProperty","parseBindingProperty","parsePropertyName","_left","checkLVal","checkClashes","hasParenthesizedAncestor","_expression$extra","checkIdentifier","validity","ParseErrorClass","isParenthesizedExpression","nextAncestor","child","declareNameFromIdentifier","identifier","allowPattern","nonNull","x","assert","TSErrors","AbstractMethodHasImplementation","methodName","AbstractPropertyHasInitializer","propertyName","AccessorCannotBeOptional","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","modifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","modifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InitializerNotAllowedInAmbientContext","InvalidModifierOnTypeMember","InvalidModifierOnTypeParameter","InvalidModifierOnTypeParameterPositions","InvalidModifiersOrder","orderedModifiers","InvalidPropertyAccessAfterInstantiationExpression","InvalidTupleMemberLabel","MissingInterfaceName","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","ReservedArrowTypeParam","ReservedTypeAssertion","SingleTypeParameterWithoutTrailingComma","typeParameterName","StaticBlockCannotHaveModifier","TupleOptionalAfterType","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","TypeModifierIsUsedInTypeExports","TypeModifierIsUsedInTypeImports","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","tsIsVarianceAnnotations","typescript","TypeScriptParserMixin","tsParseInOutModifiers","tsParseModifiers","bind","allowedModifiers","disallowedModifiers","errorTemplate","tsParseConstModifier","tsParseInOutConstModifiers","tsIsIdentifier","tsTokenCanFollowModifier","tsNextTokenOnSameLineAndCanFollowModifier","tsNextTokenCanFollowModifier","tsParseModifier","stopOnStartOfClassStaticBlock","tsIsStartOfStaticBlocks","tsTryParse","modified","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","hasOwnProperty","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","refTrailingCommaPos","tsParseDelimitedListWorker","expectSuccess","trailingCommaPos","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","parseModifiers","tsParseTypeParameterName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsFillSignature","returnToken","signature","returnTokenRequired","paramsKey","returnTypeKey","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","parameters","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","idx","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedType","tsExpectThenParseType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","elementNode","labeled","isWord","chAfterWord","wordName","typeOrLabel","tsParseNonArrayType","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","tsInAllowConditionalTypesContext","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","parseMaybeUnary","nodeType","tsParseArrayTypeOrHigher","tsParseTypeOperator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","tsParseConstraintForInferType","tsInDisallowConditionalTypesContext","isTypeOperator","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","previousErrorCount","_unused2","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsParseHeritageClause","originalStartLoc","delimitedList","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tsInTopLevelContext","oldInDisallowConditionalTypesContext","tsNextThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseEnumBody","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","maybeDefaultIdentifier","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","tsTryParseAndCatch","tsTryParseDeclare","nany","startType","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsParseTypeArgumentsInExpression","tsIsDeclarationStart","override","pp","parameter","isSimpleParameter","tsDisallowOptionalPattern","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","isOptionalCall","missingParenErrorLoc","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","tokenType","_callee$extra","parseExprOp","leftStartLoc","minPrec","isSatisfies","checkKeywords","checkDuplicateExports","importNode","parseMaybeImportPhase","parseImportSpecifiersAndAfter","nodeImportEquals","isAbstractClass","cls","allowMissingInitializer","declarations","isValidAmbientConstInitializer","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","isIdentifier","parseClassPropertyAnnotation","definite","parseClassAccessorProperty","declareClassPrivateMethodInScope","_typeCast","_typeCast2","typeCast","_typeParameters","reportReservedArrowTypeParam","trailingComma","sawUnary","toAssignableParenthesizedExpression","parseMaybeDecoratorArguments","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldStrict","oldInAbstractClass","maybeTakeDecorators","hasEstreePlugin","methodFn","shouldParseAsAmbientContext","getExpression","parseExportSpecifier","isString","isInTypeExport","parseTypeOnlyImportExportSpecifier","isImport","isInTypeOnlyImportExport","leftOfAsKey","rightOfAsKey","leftOfAs","rightOfAs","hasTypeSpecifier","canParseAsKeyword","firstAs","secondAs","parseModuleExportName","kindKey","isPossiblyLiteralEnum","expressions","isUncomputedMemberExpressionChain","isNumber","isNegativeNumber","PlaceholderErrors","ClassNameIsRequired","UnexpectedSpace","placeholders","PlaceholdersParserMixin","parsePlaceholder","assertNoSpace","finishPlaceholder","chStartsBindingIdentifier","verifyBreakContinue","isBreak","parseStatementOrSloppyAnnexBFunctionDeclaration","stmtPlaceholder","parseBlock","createNewLexicalScope","parseFunctionId","requireId","parseClassBody","startsWith","maybeParseExportDefaultSpecifier","_specifiers","checkExport","filter","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","v8intrinsic","V8IntrinsicMixin","parseV8Intrinsic","v8IntrinsicStartLoc","parseIdentifierName","PIPELINE_PROPOSALS","TOPIC_TOKENS","validatePlugins","pluginsMap","decoratorsBeforeExport","allowCallParenthesized","_pluginsMap$get","proposalList","p","tupleSyntaxIsHash","syntaxType","tokenList","moduleAttributesVersionPluginOption","version","deprecatedAssertSyntax","RECORD_AND_TUPLE_SYNTAX_TYPES","missingPlugins","mixinPlugins","mixinPluginNames","ExpressionParser","checkProto","isRecord","protoRef","used","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","parseMaybeAssignDisallowIn","resultError","_resultError$loc","parseYield","ownExpressionErrors","parseMaybeConditional","parseExprOps","parseMaybeUnaryOrPrivate","op","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","finishedNode","nextOp","withTopicBindingContext","parseHackPipeBody","parseSmartPipelineBodyInStyle","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","_body$extra","requiredParentheses","topicReferenceWasUsedInCurrentContext","checkExponentialAfterUnary","isAwait","recordAwaitIfAllowed","parseAwait","update","isDelete","parseUpdate","isAmbiguousAwait","updateExpressionNode","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseNoCallExpr","tag","quasi","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","addTrailingCommaExtraToNode","parseExprListItem","_call$extra","parseSuper","parseImportMetaProperty","parseImportCall","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","parseTopicReferenceThenEqualsSign","parseTopicReference","pipeProposal","parseModuleExpression","parseAsyncFunctionExpression","parseAsyncArrowUnaryFunction","topicTokenType","topicTokenValue","finishTopicReference","testTopicReferenceConfiguration","topicReferenceIsAllowedInCurrentContext","registerTopicReference","meta","parseMetaProperty","parseFunction","isSource","innerStartLoc","spreadStartLoc","optionalCommaStartLoc","spreadNodeStartLoc","innerEndLoc","arrowNode","wrapParenthesis","parenExpression","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","elemStart","elem","isTail","endOffset","elemEnd","cooked","tail","curElt","quasis","substitutions","propHash","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","_params","finishedProp","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","formalParameters","reservedTest","isAwaitAllowed","delegating","delegate","childExpr","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","callback","outerContextTopicState","withSmartMixTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","ParamKind","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","backquoteEnd","backquoteEndLoc","startToken","templateValue","templateElementEnd","templateElementEndLoc","endToken","StatementParser","interpreter","parseInterpreterDirective","finishedProgram","stmtToDirective","directiveLiteral","hasFollowingBindingAtom","endCh","chStartsBindingPattern","hasInLineFollowingBindingIdentifierOrBrace","startsUsingForOf","startsAwaitUsing","parseModuleItem","ParseStatementFlag","parseStatementListItem","allowLabeledFunction","parseStatement","allowDeclaration","allowFunctionDeclaration","parseBreakContinueStatement","parseDebuggerStatement","parseDoWhileStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","decoratorsEnabledBeforeExport","maybeDecorators","classNode","exportNode","_classNode$decorators","allowExport","paramsStartLoc","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","startsWithAwaitUsing","starsWithUsingDeclaration","isLetOrUsing","initNode","parseVar","isForIn","parseForIn","startsWithAsync","isForOf","isHangingDeclaration","ParseFunctionFlag","discriminant","cases","cur","sawDefault","isCase","block","handler","clause","finalizer","statementStart","parsedNonDirective","await","isFor","hangingDeclaration","isDeclaration","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","accessorProp","publicMember","parseClassElementName","maybeContextualKw","isPrivate","maybeQuestionTokenStartLoc","pushClassPrivateProperty","pushClassProperty","pushClassAccessorProperty","_member$decorators","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","_node2$declaration","_ref$specifiers","isTypeExport","assertions","nextType","hasFrom","nextAfterFrom","maybeParseImportAttributes","checkJSONModuleImport","checkNames","isDefault","isFrom","_node$specifiers","_declaration$extra","nodes","surrogate","isJSONModuleImport","singleBindingType","_node$assertions","nonDefaultNamedSpecifier","find","phaseIdentifier","isImportPhase","isPrecedingIdImportPhase","parseImportSourceAndAttributes","maybeParseDefaultImportSpecifier","parseNext","_node$specifiers2","parseImportAttributes","attrs","attrNames","parseModuleAttributes","useWith","importSpecifier","Parser","_options","getParser","ast","moduleError","generateExportedTokenTypes","internalTokenTypes","tokTypes","getParserClass","parserClassCache","pluginList"],"mappings":"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AC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,IAAI,EAAC,EAAE,EAAC,EAAE,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,GAAG,EAAC,IAAI,EAAC,EAAE,EAAC,IAAI,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,IAAI,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,IAAI,EAAC,KAAK,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,IAAI,EAAC,EAAE,EAAC,GAAG,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,IAAI,EAAC,CAAC,EAAC,IAAI,CAAC;AAEjkD,MAAMC,qBAAqB,GAAG,CAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,KAAK,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,KAAK,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,MAAM,EAAC,GAAG,CAAC;AAK/0B,SAASC,aAAaA,CAAC1oB,IAAY,EAAEwQ,GAAsB,EAAW;EACpE,IAAIN,GAAG,GAAG,OAAO;EACjB,KAAK,IAAIyY,CAAC,GAAG,CAAC,EAAEtO,MAAM,GAAG7J,GAAG,CAAC6J,MAAM,EAAEsO,CAAC,GAAGtO,MAAM,EAAEsO,CAAC,IAAI,CAAC,EAAE;IACvDzY,GAAG,IAAIM,GAAG,CAACmY,CAAC,CAAC;IACb,IAAIzY,GAAG,GAAGlQ,IAAI,EAAE,OAAO,KAAK;IAE5BkQ,GAAG,IAAIM,GAAG,CAACmY,CAAC,GAAG,CAAC,CAAC;IACjB,IAAIzY,GAAG,IAAIlQ,IAAI,EAAE,OAAO,IAAI;EAC9B;EACA,OAAO,KAAK;AACd;AAIO,SAAS4oB,iBAAiBA,CAAC5oB,IAAY,EAAW;EACvD,IAAIA,IAAI,GAAA,EAAuB,EAAE,OAAOA,IAAI,KAAyB,EAAA;EACrE,IAAIA,IAAI,IAAA,EAAwB,EAAE,OAAO,IAAI;EAC7C,IAAIA,IAAI,GAAA,EAAuB,EAAE,OAAOA,IAAI,KAAyB,EAAA;EACrE,IAAIA,IAAI,IAAA,GAAwB,EAAE,OAAO,IAAI;EAC7C,IAAIA,IAAI,IAAI,MAAM,EAAE;IAClB,OACEA,IAAI,IAAI,IAAI,IAAIsoB,uBAAuB,CAACO,IAAI,CAACvU,MAAM,CAACwU,YAAY,CAAC9oB,IAAI,CAAC,CAAC;EAE3E;EACA,OAAO0oB,aAAa,CAAC1oB,IAAI,EAAEwoB,0BAA0B,CAAC;AACxD;AAIO,SAASO,gBAAgBA,CAAC/oB,IAAY,EAAW;EACtD,IAAIA,IAAI,GAAA,EAAmB,EAAE,OAAOA,IAAI,KAAyB,EAAA;EACjE,IAAIA,IAAI,GAAA,EAAkB,EAAE,OAAO,IAAI;EACvC,IAAIA,IAAI,GAAA,EAAuB,EAAE,OAAO,KAAK;EAC7C,IAAIA,IAAI,IAAA,EAAwB,EAAE,OAAO,IAAI;EAC7C,IAAIA,IAAI,GAAA,EAAuB,EAAE,OAAOA,IAAI,KAAyB,EAAA;EACrE,IAAIA,IAAI,IAAA,GAAwB,EAAE,OAAO,IAAI;EAC7C,IAAIA,IAAI,IAAI,MAAM,EAAE;IAClB,OAAOA,IAAI,IAAI,IAAI,IAAIuoB,kBAAkB,CAACM,IAAI,CAACvU,MAAM,CAACwU,YAAY,CAAC9oB,IAAI,CAAC,CAAC;EAC3E;EACA,OACE0oB,aAAa,CAAC1oB,IAAI,EAAEwoB,0BAA0B,CAAC,IAC/CE,aAAa,CAAC1oB,IAAI,EAAEyoB,qBAAqB,CAAC;AAE9C;AClFA,MAAMO,aAAa,GAAG;EACpB/d,OAAO,EAAE,CACP,OAAO,EACP,MAAM,EACN,OAAO,EACP,UAAU,EACV,UAAU,EACV,SAAS,EACT,IAAI,EACJ,MAAM,EACN,SAAS,EACT,KAAK,EACL,UAAU,EACV,IAAI,EACJ,QAAQ,EACR,QAAQ,EACR,OAAO,EACP,KAAK,EACL,KAAK,EACL,OAAO,EACP,OAAO,EACP,MAAM,EACN,KAAK,EACL,MAAM,EACN,OAAO,EACP,OAAO,EACP,SAAS,EACT,QAAQ,EACR,QAAQ,EACR,MAAM,EACN,MAAM,EACN,OAAO,EACP,IAAI,EACJ,YAAY,EACZ,QAAQ,EACR,MAAM,EACN,QAAQ,CACT;EACDge,MAAM,EAAE,CACN,YAAY,EACZ,WAAW,EACX,KAAK,EACL,SAAS,EACT,SAAS,EACT,WAAW,EACX,QAAQ,EACR,QAAQ,EACR,OAAO,CACR;EACDC,UAAU,EAAE,CAAC,MAAM,EAAE,WAAW;AAClC,CAAC;AACD,MAAMxM,QAAQ,GAAG,IAAI9O,GAAG,CAACob,aAAa,CAAC/d,OAAO,CAAC;AAC/C,MAAMke,sBAAsB,GAAG,IAAIvb,GAAG,CAACob,aAAa,CAACC,MAAM,CAAC;AAC5D,MAAMG,0BAA0B,GAAG,IAAIxb,GAAG,CAACob,aAAa,CAACE,UAAU,CAAC;AAK7D,SAASG,cAAcA,CAACC,IAAY,EAAEC,QAAiB,EAAW;EACvE,OAAQA,QAAQ,IAAID,IAAI,KAAK,OAAO,IAAKA,IAAI,KAAK,MAAM;AAC1D;AAOO,SAASE,oBAAoBA,CAACF,IAAY,EAAEC,QAAiB,EAAW;EAC7E,OAAOF,cAAc,CAACC,IAAI,EAAEC,QAAQ,CAAC,IAAIJ,sBAAsB,CAACM,GAAG,CAACH,IAAI,CAAC;AAC3E;AAMO,SAASI,4BAA4BA,CAACJ,IAAY,EAAW;EAClE,OAAOF,0BAA0B,CAACK,GAAG,CAACH,IAAI,CAAC;AAC7C;AAOO,SAASK,wBAAwBA,CACtCL,IAAY,EACZC,QAAiB,EACR;EACT,OACEC,oBAAoB,CAACF,IAAI,EAAEC,QAAQ,CAAC,IAAIG,4BAA4B,CAACJ,IAAI,CAAC;AAE9E;AAEO,SAASM,SAASA,CAACN,IAAY,EAAW;EAC/C,OAAO5M,QAAQ,CAAC+M,GAAG,CAACH,IAAI,CAAC;AAC3B;AC9EO,SAASO,eAAeA,CAC7BC,OAAe,EACfC,IAAY,EACZC,KAAa,EACJ;EACT,OACEF,OAAO,OAAqB,IAC5BC,IAAI,OAAqB,IACzBnB,iBAAiB,CAACoB,KAAK,CAAC;AAE5B;AAOA,MAAMC,mBAAmB,GAAG,IAAIrc,GAAG,CAAC,CAClC,OAAO,EACP,MAAM,EACN,OAAO,EACP,UAAU,EACV,UAAU,EACV,SAAS,EACT,IAAI,EACJ,MAAM,EACN,SAAS,EACT,KAAK,EACL,UAAU,EACV,IAAI,EACJ,QAAQ,EACR,QAAQ,EACR,OAAO,EACP,KAAK,EACL,KAAK,EACL,OAAO,EACP,OAAO,EACP,MAAM,EACN,KAAK,EACL,MAAM,EACN,OAAO,EACP,OAAO,EACP,SAAS,EACT,QAAQ,EACR,QAAQ,EACR,MAAM,EACN,MAAM,EACN,OAAO,EACP,IAAI,EACJ,YAAY,EACZ,QAAQ,EACR,MAAM,EACN,QAAQ,EAER,YAAY,EACZ,WAAW,EACX,KAAK,EACL,SAAS,EACT,SAAS,EACT,WAAW,EACX,QAAQ,EACR,QAAQ,EACR,OAAO,EAEP,MAAM,EACN,WAAW,EAEX,MAAM,EACN,OAAO,CACR,CAAC;AAEK,SAASsc,iBAAiBA,CAACZ,IAAY,EAAW;EACvD,OAAOW,mBAAmB,CAACR,GAAG,CAACH,IAAI,CAAC;AACtC;AC1EO,MAAMa,KAAK,CAAC;EAKjBhrB,WAAWA,CAACyU,KAAgB,EAAE;IAAA,IAJ9BA,CAAAA,KAAK,GAAc,CAAC;IAAA,IAAA,CACpBwW,KAAK,GAA0B,IAAIzN,GAAG,EAAE;IAAA,IACxC0N,CAAAA,gBAAgB,GAAG,EAAE;IAGnB,IAAI,CAACzW,KAAK,GAAGA,KAAK;EACpB;AACF;AAIe,MAAM0W,YAAY,CAA+B;EAM9DnrB,WAAWA,CAACorB,MAAiB,EAAEhB,QAAiB,EAAE;IAAA,IAAA,CALlDgB,MAAM,GAAA,KAAA,CAAA;IAAA,IACNC,CAAAA,UAAU,GAAkB,EAAE;IAAA,IAAA,CAC9BjB,QAAQ,GAAA,KAAA,CAAA;IAAA,IAAA,CACRkB,gBAAgB,GAA0B,IAAI9N,GAAG,EAAE;IAGjD,IAAI,CAAC4N,MAAM,GAAGA,MAAM;IACpB,IAAI,CAAChB,QAAQ,GAAGA,QAAQ;EAC1B;EAEA,IAAImB,UAAUA,CAAAA,EAAG;IACf,OAAO,CAAC,IAAI,CAACC,YAAY,CAAE,CAAA,CAAC/W,KAAK,IAAoB,IAAI,CAAC;EAC5D;EACA,IAAIgX,UAAUA,CAAAA,EAAG;IACf,OAAO,CAAC,IAAI,CAACC,oBAAoB,CAAA,CAAE,IAAqB,IAAI,CAAC;EAC/D;EACA,IAAIC,UAAUA,CAAAA,EAAG;IACf,OAAO,CAAC,IAAI,CAACC,qBAAqB,CAAA,CAAE,KAAkB,IAAI,CAAC;EAC7D;EACA,IAAI1T,gBAAgBA,CAAAA,EAAG;IACrB,OAAO,CAAC,IAAI,CAAC0T,qBAAqB,CAAA,CAAE,KAAyB,IAAI,CAAC;EACpE;EACA,IAAIC,OAAOA,CAAAA,EAAG;IACZ,OAAO,CAAC,IAAI,CAACD,qBAAqB,CAAA,CAAE,KAAkB,IAAI,CAAC;EAC7D;EACA,IAAIE,+BAA+BA,CAAAA,EAAG;IACpC,MAAMrX,KAAK,GAAG,IAAI,CAACmX,qBAAqB,EAAE;IAC1C,OAAO,CAACnX,KAAK,KAAkB,IAAI,CAAC,IAAI,CAACA,KAAK,IAAqB,MAAM,CAAC;EAC5E;EACA,IAAIsX,aAAaA,CAAAA,EAAG;IAClB,KAAK,IAAIvC,CAAC,GAAG,IAAI,CAAC6B,UAAU,CAACnQ,MAAM,GAAG,CAAC,GAAIsO,CAAC,EAAE,EAAE;MAC9C,MAAM;QAAE/U;MAAM,CAAC,GAAG,IAAI,CAAC4W,UAAU,CAAC7B,CAAC,CAAC;MACpC,IAAI/U,KAAK,MAAyB,EAAE;QAClC,OAAO,IAAI;MACb;MACA,IAAIA,KAAK,IAAIuX,QAA+B,CAAC,EAAE;QAE7C,OAAO,KAAK;MACd;IACF;EACF;EACA,IAAIC,kBAAkBA,CAAAA,EAAG;IACvB,OAAO,CAAC,IAAI,CAACL,qBAAqB,CAAA,CAAE,IAAqB,IAAI,CAAC;EAChE;EACA,IAAIM,mBAAmBA,CAAAA,EAAG;IACxB,OAAO,IAAI,CAACC,0BAA0B,CAAC,IAAI,CAACX,YAAY,CAAE,CAAA,CAAC;EAC7D;EAEAY,WAAWA,CAAC3X,KAAgB,EAAS;IACnC,OAAO,IAAIuW,KAAK,CAACvW,KAAK,CAAC;EACzB;EAEA4X,KAAKA,CAAC5X,KAAgB,EAAE;IAGtB,IAAI,CAAC4W,UAAU,CAAC9M,IAAI,CAAC,IAAI,CAAC6N,WAAW,CAAC3X,KAAK,CAAC,CAAC;EAC/C;EAEA6X,IAAIA,CAAAA,EAAc;IAChB,MAAMC,KAAK,GAAG,IAAI,CAAClB,UAAU,CAACtC,GAAG,CAAA,CAAE;IACnC,OAAOwD,KAAK,CAAC9X,KAAK;EACpB;EAKA0X,0BAA0BA,CAACI,KAAa,EAAW;IACjD,OAAO,CAAC,EACNA,KAAK,CAAC9X,KAAK,IAAIuX,OAA2C,CAAC,IAC1D,CAAC,IAAI,CAACZ,MAAM,CAAChB,QAAQ,IAAImC,KAAK,CAAC9X,KAAK,IAAqB,CAC3D;EACH;EAEA+X,WAAWA,CAAC3jB,IAAY,EAAE4jB,WAAwB,EAAE9b,GAAa,EAAE;IACjE,IAAI4b,KAAK,GAAG,IAAI,CAACf,YAAY,EAAE;IAC/B,IACEiB,WAAW,IAA4B,IACvCA,WAAW,KAA6B,EACxC;MACA,IAAI,CAACC,yBAAyB,CAACH,KAAK,EAAE1jB,IAAI,EAAE4jB,WAAW,EAAE9b,GAAG,CAAC;MAE7D,IAAIhO,IAAI,GAAG4pB,KAAK,CAACtB,KAAK,CAAC7Z,GAAG,CAACvI,IAAI,CAAC,IAAI,CAAC;MAErC,IAAI4jB,WAAW,KAA6B,EAAE;QAC5C9pB,IAAI,GAAGA,IAAI,IAAoB;MACjC,CAAC,MAAM;QACL,IAAI,CAAC4pB,KAAK,CAACrB,gBAAgB,EAAE;UAC3BqB,KAAK,CAACrB,gBAAgB,GAAGriB,IAAI;QAC/B;QACAlG,IAAI,GAAGA,IAAI,IAAmB;MAChC;MAEA4pB,KAAK,CAACtB,KAAK,CAAC5Z,GAAG,CAACxI,IAAI,EAAElG,IAAI,CAAC;MAE3B,IAAI8pB,WAAW,IAA4B,EAAE;QAC3C,IAAI,CAACE,kBAAkB,CAACJ,KAAK,EAAE1jB,IAAI,CAAC;MACtC;IACF,CAAC,MAAM,IAAI4jB,WAAW,IAAwB,EAAE;MAC9C,KAAK,IAAIjD,CAAC,GAAG,IAAI,CAAC6B,UAAU,CAACnQ,MAAM,GAAG,CAAC,EAAEsO,CAAC,IAAI,CAAC,EAAE,EAAEA,CAAC,EAAE;QACpD+C,KAAK,GAAG,IAAI,CAAClB,UAAU,CAAC7B,CAAC,CAAC;QAC1B,IAAI,CAACkD,yBAAyB,CAACH,KAAK,EAAE1jB,IAAI,EAAE4jB,WAAW,EAAE9b,GAAG,CAAC;QAC7D4b,KAAK,CAACtB,KAAK,CAAC5Z,GAAG,CAACxI,IAAI,EAAE,CAAC0jB,KAAK,CAACtB,KAAK,CAAC7Z,GAAG,CAACvI,IAAI,CAAC,IAAI,CAAC,KAAgB,CAAC;QAClE,IAAI,CAAC8jB,kBAAkB,CAACJ,KAAK,EAAE1jB,IAAI,CAAC;QAEpC,IAAI0jB,KAAK,CAAC9X,KAAK,MAAgB,EAAE;MACnC;IACF;IACA,IAAI,IAAI,CAAC2W,MAAM,CAAChB,QAAQ,IAAImC,KAAK,CAAC9X,KAAK,IAAoB,EAAE;MAC3D,IAAI,CAAC6W,gBAAgB,CAACsB,MAAM,CAAC/jB,IAAI,CAAC;IACpC;EACF;EAEA8jB,kBAAkBA,CAACJ,KAAa,EAAE1jB,IAAY,EAAE;IAC9C,IAAI,IAAI,CAACuiB,MAAM,CAAChB,QAAQ,IAAImC,KAAK,CAAC9X,KAAK,IAAoB,EAAE;MAC3D,IAAI,CAAC6W,gBAAgB,CAACsB,MAAM,CAAC/jB,IAAI,CAAC;IACpC;EACF;EAEA6jB,yBAAyBA,CACvBH,KAAa,EACb1jB,IAAY,EACZ4jB,WAAwB,EACxB9b,GAAa,EACb;IACA,IAAI,IAAI,CAACkc,mBAAmB,CAACN,KAAK,EAAE1jB,IAAI,EAAE4jB,WAAW,CAAC,EAAE;MACtD,IAAI,CAACrB,MAAM,CAACnR,KAAK,CAAC9H,MAAM,CAACzE,gBAAgB,EAAEiD,GAAG,EAAE;QAC9ClQ,cAAc,EAAEoI;MAClB,CAAC,CAAC;IACJ;EACF;EAEAgkB,mBAAmBA,CACjBN,KAAa,EACb1jB,IAAY,EACZ4jB,WAAwB,EACf;IACT,IAAI,EAAEA,WAAW,IAAyB,CAAC,EAAE,OAAO,KAAK;IAEzD,IAAIA,WAAW,IAA4B,EAAE;MAC3C,OAAOF,KAAK,CAACtB,KAAK,CAACX,GAAG,CAACzhB,IAAI,CAAC;IAC9B;IAEA,MAAMlG,IAAI,GAAG4pB,KAAK,CAACtB,KAAK,CAAC7Z,GAAG,CAACvI,IAAI,CAAC;IAElC,IAAI4jB,WAAW,KAA6B,EAAE;MAC5C,OACE,CAAC9pB,IAAI,IAAmB,IAAI,CAAC,IAC5B,CAAC,IAAI,CAACwpB,0BAA0B,CAACI,KAAK,CAAC,IAAI,CAAC5pB,IAAI,IAAe,IAAI,CAAE;IAE1E;IAEA,OACG,CAACA,IAAI,IAAmB,IAAI,CAAC,IAG5B,EACE4pB,KAAK,CAAC9X,KAAK,IAAyB,IACpC8X,KAAK,CAACrB,gBAAgB,KAAKriB,IAAI,CAChC,IACF,CAAC,IAAI,CAACsjB,0BAA0B,CAACI,KAAK,CAAC,IACtC,CAAC5pB,IAAI,IAAoB,IAAI,CAAE;EAErC;EAEAmqB,gBAAgBA,CAACpV,EAAgB,EAAE;IACjC,MAAM;MAAE7O;IAAM,CAAA,GAAG6O,EAAE;IACnB,MAAMqV,aAAa,GAAG,IAAI,CAAC1B,UAAU,CAAC,CAAC,CAAC;IACxC,IAAI,CAAC0B,aAAa,CAAC9B,KAAK,CAACX,GAAG,CAACzhB,IAAI,CAAC,EAAE;MAClC,IAAI,CAACyiB,gBAAgB,CAACja,GAAG,CAACxI,IAAI,EAAE6O,EAAE,CAAC/G,GAAG,CAACrQ,KAAK,CAAC;IAC/C;EACF;EAEAkrB,YAAYA,CAAAA,EAAW;IACrB,OAAO,IAAI,CAACH,UAAU,CAAC,IAAI,CAACA,UAAU,CAACnQ,MAAM,GAAG,CAAC,CAAC;EACpD;EAEAwQ,oBAAoBA,CAAAA,EAAc;IAChC,KAAK,IAAIlC,CAAC,GAAG,IAAI,CAAC6B,UAAU,CAACnQ,MAAM,GAAG,CAAC,GAAIsO,CAAC,EAAE,EAAE;MAC9C,MAAM;QAAE/U;MAAM,CAAC,GAAG,IAAI,CAAC4W,UAAU,CAAC7B,CAAC,CAAC;MACpC,IAAI/U,KAAK,MAAgB,EAAE;QACzB,OAAOA,KAAK;MACd;IACF;EACF;EAGAmX,qBAAqBA,CAAAA,EAAc;IACjC,KAAK,IAAIpC,CAAC,GAAG,IAAI,CAAC6B,UAAU,CAACnQ,MAAM,GAAG,CAAC,GAAIsO,CAAC,EAAE,EAAE;MAC9C,MAAM;QAAE/U;MAAM,CAAC,GAAG,IAAI,CAAC4W,UAAU,CAAC7B,CAAC,CAAC;MACpC,IACE/U,KAAK,IAAIuX,QAA+B,CAAC,IACzC,EAAEvX,KAAK,IAAkB,CAAC,EAC1B;QACA,OAAOA,KAAK;MACd;IACF;EACF;AACF;AC5NA,MAAMuY,SAAS,SAAShC,KAAK,CAAC;EAAAhrB,WAAAA,CAAA,GAAA2Y,IAAA,EAAA;IAAA,KAAA,CAAA,GAAAA,IAAA,CAAA;IAAA,IAAA,CAE5BsU,gBAAgB,GAAgB,IAAIxe,GAAG,EAAE;EAAA;AAC3C;AAEe,MAAMye,gBAAgB,SAAS/B,YAAY,CAAY;EACpEiB,WAAWA,CAAC3X,KAAgB,EAAa;IACvC,OAAO,IAAIuY,SAAS,CAACvY,KAAK,CAAC;EAC7B;EAEA+X,WAAWA,CAAC3jB,IAAY,EAAE4jB,WAAwB,EAAE9b,GAAa,EAAE;IACjE,MAAM4b,KAAK,GAAG,IAAI,CAACf,YAAY,EAAE;IACjC,IAAIiB,WAAW,OAAmC,EAAE;MAClD,IAAI,CAACC,yBAAyB,CAACH,KAAK,EAAE1jB,IAAI,EAAE4jB,WAAW,EAAE9b,GAAG,CAAC;MAC7D,IAAI,CAACgc,kBAAkB,CAACJ,KAAK,EAAE1jB,IAAI,CAAC;MACpC0jB,KAAK,CAACU,gBAAgB,CAACE,GAAG,CAACtkB,IAAI,CAAC;MAChC;IACF;IAEA,KAAK,CAAC2jB,WAAW,CAAC3jB,IAAI,EAAE4jB,WAAW,EAAE9b,GAAG,CAAC;EAC3C;EAEAkc,mBAAmBA,CACjBN,KAAgB,EAChB1jB,IAAY,EACZ4jB,WAAwB,EACf;IACT,IAAI,KAAK,CAACI,mBAAmB,CAACN,KAAK,EAAE1jB,IAAI,EAAE4jB,WAAW,CAAC,EAAE,OAAO,IAAI;IAEpE,IACEA,WAAW,OAAmC,IAC9C,CAACF,KAAK,CAACU,gBAAgB,CAAC3C,GAAG,CAACzhB,IAAI,CAAC,EACjC;MACA,MAAMlG,IAAI,GAAG4pB,KAAK,CAACtB,KAAK,CAAC7Z,GAAG,CAACvI,IAAI,CAAC;MAClC,OAAO,CAAClG,IAAI,IAAoB,IAAI,CAAC,IAAI,CAACA,IAAI,IAAmB,IAAI,CAAC;IACxE;IAEA,OAAO,KAAK;EACd;EAEAmqB,gBAAgBA,CAACpV,EAAgB,EAAE;IACjC,IAAI,CAAC,IAAI,CAAC2T,UAAU,CAAC,CAAC,CAAC,CAAC4B,gBAAgB,CAAC3C,GAAG,CAAC5S,EAAE,CAAC7O,IAAI,CAAC,EAAE;MACrD,KAAK,CAACikB,gBAAgB,CAACpV,EAAE,CAAC;IAC5B;EACF;AACF;ACrCe,MAAM0V,UAAU,CAAC;EAAAptB,WAAAA,CAAA,EAAA;IAAA,IAe9BqtB,CAAAA,iBAAiB,GAAY,KAAK;IAAA,IAClCC,CAAAA,2BAA2B,GAAY,KAAK;EAAA;EAW5CC,iBAAiBA,CAACC,SAAiB,EAAE;IACnC,OAAOA,SAAS,GAAG,IAAI,CAAChb,UAAU;EACpC;EAEAib,iBAAiBA,CAACC,SAAiB,EAAE;IACnC,OAAOA,SAAS,GAAG,IAAI,CAAClb,UAAU;EACpC;EAMAmb,SAASA,CAACC,YAA0B,EAAW;IAC7C,IAAI,OAAOA,YAAY,KAAK,QAAQ,EAAE;MACpC,OAAO,IAAI,CAAC3a,OAAO,CAACqX,GAAG,CAACsD,YAAY,CAAC;IACvC,CAAC,MAAM;MACL,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGF,YAAY;MAChD,IAAI,CAAC,IAAI,CAACD,SAAS,CAACE,UAAU,CAAC,EAAE;QAC/B,OAAO,KAAK;MACd;MACA,MAAME,aAAa,GAAG,IAAI,CAAC9a,OAAO,CAAC7B,GAAG,CAACyc,UAAU,CAAC;MAClD,KAAK,MAAMtkB,GAAG,IAAIoG,MAAM,CAACkC,IAAI,CAC3Bic,aACF,CAAC,EAAoC;QACnC,IAAI,CAAAC,aAAa,IAAbA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,aAAa,CAAGxkB,GAAG,CAAC,MAAKukB,aAAa,CAACvkB,GAAG,CAAC,EAAE;UAC/C,OAAO,KAAK;QACd;MACF;MACA,OAAO,IAAI;IACb;EACF;EAEAgO,eAAeA,CAGbyW,MAAkB,EAAEnlB,IAAgB,EAAE;IAAA,IAAAolB,iBAAA;IACtC,OAAA,CAAAA,iBAAA,GAAQ,IAAI,CAAChb,OAAO,CAAC7B,GAAG,CAAC4c,MAAM,CAAC,KAAA,IAAA,GAAA,KAAA,CAAA,GAAzBC,iBAAA,CACLplB,IAAI,CACL;EACH;AACF;ACvCA,SAASqlB,mBAAmBA,CAACxrB,IAAkB,EAAEyrB,QAAwB,EAAE;EACzE,IAAIzrB,IAAI,CAAC0rB,gBAAgB,KAAK7b,SAAS,EAAE;IACvC7P,IAAI,CAAC0rB,gBAAgB,GAAGD,QAAQ;EAClC,CAAC,MAAM;IACLzrB,IAAI,CAAC0rB,gBAAgB,CAACC,OAAO,CAAC,GAAGF,QAAQ,CAAC;EAC5C;AACF;AAOA,SAASG,kBAAkBA,CAAC5rB,IAAkB,EAAEyrB,QAAwB,EAAE;EACxE,IAAIzrB,IAAI,CAAC6rB,eAAe,KAAKhc,SAAS,EAAE;IACtC7P,IAAI,CAAC6rB,eAAe,GAAGJ,QAAQ;EACjC,CAAC,MAAM;IACLzrB,IAAI,CAAC6rB,eAAe,CAACF,OAAO,CAAC,GAAGF,QAAQ,CAAC;EAC3C;AACF;AAOO,SAASK,gBAAgBA,CAC9B9rB,IAAkB,EAClByrB,QAAyB,EACzB;EACA,IAAIzrB,IAAI,CAAC+rB,aAAa,KAAKlc,SAAS,EAAE;IACpC7P,IAAI,CAAC+rB,aAAa,GAAGN,QAAQ;EAC/B,CAAC,MAAM;IACLzrB,IAAI,CAAC+rB,aAAa,CAACJ,OAAO,CAAC,GAAGF,QAAQ,CAAC;EACzC;AACF;AAOA,SAASO,mBAAmBA,CAC1BhsB,IAAkB,EAClBisB,QAAqB,EACrBC,SAA4B,EAC5B;EACA,IAAIC,WAAW,GAAG,IAAI;EACtB,IAAIrF,CAAC,GAAGmF,QAAQ,CAACzT,MAAM;EACvB,OAAO2T,WAAW,KAAK,IAAI,IAAIrF,CAAC,GAAG,CAAC,EAAE;IACpCqF,WAAW,GAAGF,QAAQ,CAAC,EAAEnF,CAAC,CAAC;EAC7B;EACA,IAAIqF,WAAW,KAAK,IAAI,IAAIA,WAAW,CAACvuB,KAAK,GAAGsuB,SAAS,CAACtuB,KAAK,EAAE;IAC/DkuB,gBAAgB,CAAC9rB,IAAI,EAAEksB,SAAS,CAACT,QAAQ,CAAC;EAC5C,CAAC,MAAM;IACLD,mBAAmB,CAACW,WAAW,EAAED,SAAS,CAACT,QAAQ,CAAC;EACtD;AACF;AAEe,MAAMW,cAAc,SAAS1B,UAAU,CAAC;EACrD2B,UAAUA,CAACC,OAAgB,EAAQ;IACjC,IAAI,IAAI,CAACxuB,QAAQ,EAAEwuB,OAAO,CAACre,GAAG,CAACnQ,QAAQ,GAAG,IAAI,CAACA,QAAQ;IACvD,MAAM;MAAEyuB;KAAa,GAAG,IAAI,CAACnU,KAAK;IAClC,IAAI,IAAI,CAACqT,QAAQ,CAACjT,MAAM,KAAK+T,WAAW,EAAE;MACxC,IAAI,CAACd,QAAQ,CAACjT,MAAM,GAAG+T,WAAW;IACpC;IACA,IAAI,CAACd,QAAQ,CAAC5P,IAAI,CAACyQ,OAAO,CAAC;IAC3B,IAAI,CAAClU,KAAK,CAACmU,WAAW,EAAE;EAC1B;EAMAC,cAAcA,CAACxsB,IAAU,EAAQ;IAC/B,MAAM;MAAEysB;KAAc,GAAG,IAAI,CAACrU,KAAK;IACnC,MAAMsU,kBAAkB,GAAGD,YAAY,CAACjU,MAAM;IAC9C,IAAIkU,kBAAkB,KAAK,CAAC,EAAE;IAC9B,IAAI5F,CAAC,GAAG4F,kBAAkB,GAAG,CAAC;IAC9B,MAAMC,aAAa,GAAGF,YAAY,CAAC3F,CAAC,CAAC;IAErC,IAAI6F,aAAa,CAAC/uB,KAAK,KAAKoC,IAAI,CAACnC,GAAG,EAAE;MACpC8uB,aAAa,CAACC,WAAW,GAAG5sB,IAAI;MAChC8mB,CAAC,EAAE;IACL;IAEA,MAAM;MAAElpB,KAAK,EAAEivB;IAAW,CAAA,GAAG7sB,IAAI;IAEjC,OAAO8mB,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAClB,MAAMoF,SAAS,GAAGO,YAAY,CAAC3F,CAAC,CAAC;MACjC,MAAMgG,UAAU,GAAGZ,SAAS,CAACruB,GAAG;MAChC,IAAIivB,UAAU,GAAGD,SAAS,EAAE;QAO1BX,SAAS,CAACa,cAAc,GAAG/sB,IAAI;QAC/B,IAAI,CAACgtB,eAAe,CAACd,SAAS,CAAC;QAC/BO,YAAY,CAACQ,MAAM,CAACnG,CAAC,EAAE,CAAC,CAAC;MAC3B,CAAC,MAAM;QACL,IAAIgG,UAAU,KAAKD,SAAS,EAAE;UAC5BX,SAAS,CAACgB,YAAY,GAAGltB,IAAI;QAC/B;QAEA;MACF;IACF;EACF;EAMAgtB,eAAeA,CAACd,SAA4B,EAAE;IAC5C,MAAM;MAAET;IAAU,CAAA,GAAGS,SAAS;IAC9B,IAAIA,SAAS,CAACU,WAAW,KAAK,IAAI,IAAIV,SAAS,CAACgB,YAAY,KAAK,IAAI,EAAE;MACrE,IAAIhB,SAAS,CAACU,WAAW,KAAK,IAAI,EAAE;QAClCpB,mBAAmB,CAACU,SAAS,CAACU,WAAW,EAAEnB,QAAQ,CAAC;MACtD;MACA,IAAIS,SAAS,CAACgB,YAAY,KAAK,IAAI,EAAE;QACnCtB,kBAAkB,CAACM,SAAS,CAACgB,YAAY,EAAEzB,QAAQ,CAAC;MACtD;IACF,CAAC,MAAM;MAEL,MAAM;QAAEsB,cAAc,EAAE/sB,IAAI;QAAEpC,KAAK,EAAEuvB;MAAc,CAAA,GAAGjB,SAAS;MAC/D,IACE,IAAI,CAACkB,KAAK,CAACC,UAAU,CAAC,IAAI,CAACtC,iBAAiB,CAACoC,YAAY,CAAC,GAAG,CAAC,CAAC,OAChD,EACf;QAIA,QAAQntB,IAAI,CAACC,IAAI;UACf,KAAK,kBAAkB;UACvB,KAAK,eAAe;UACpB,KAAK,kBAAkB;YACrB+rB,mBAAmB,CAAChsB,IAAI,EAAEA,IAAI,CAACstB,UAAU,EAAEpB,SAAS,CAAC;YACrD;UACF,KAAK,gBAAgB;UACrB,KAAK,wBAAwB;YAC3BF,mBAAmB,CAAChsB,IAAI,EAAEA,IAAI,CAAC8X,SAAS,EAAEoU,SAAS,CAAC;YACpD;UACF,KAAK,qBAAqB;UAC1B,KAAK,oBAAoB;UACzB,KAAK,yBAAyB;UAC9B,KAAK,cAAc;UACnB,KAAK,aAAa;UAClB,KAAK,oBAAoB;YACvBF,mBAAmB,CAAChsB,IAAI,EAAEA,IAAI,CAAC+T,MAAM,EAAEmY,SAAS,CAAC;YACjD;UACF,KAAK,iBAAiB;UACtB,KAAK,cAAc;UACnB,KAAK,iBAAiB;YACpBF,mBAAmB,CAAChsB,IAAI,EAAEA,IAAI,CAACisB,QAAQ,EAAEC,SAAS,CAAC;YACnD;UACF,KAAK,wBAAwB;UAC7B,KAAK,mBAAmB;YACtBF,mBAAmB,CAAChsB,IAAI,EAAEA,IAAI,CAACuY,UAAU,EAAE2T,SAAS,CAAC;YACrD;UACF,KAAK,mBAAmB;YACa;cACjCF,mBAAmB,CAAChsB,IAAI,EAAEA,IAAI,CAACutB,OAAO,EAAErB,SAAS,CAAC;YACpD;YAGA;UACF,KAAK,YAAY;YACfF,mBAAmB,CAAChsB,IAAI,EAAEA,IAAI,CAACutB,OAAO,EAAErB,SAAS,CAAC;YAClD;UACF;YAAS;cACPJ,gBAAgB,CAAC9rB,IAAI,EAAEyrB,QAAQ,CAAC;YAClC;QACF;MACF,CAAC,MAAM;QACLK,gBAAgB,CAAC9rB,IAAI,EAAEyrB,QAAQ,CAAC;MAClC;IACF;EACF;EAQA+B,yBAAyBA,CAAAA,EAAG;IAC1B,MAAM;MAAEf;KAAc,GAAG,IAAI,CAACrU,KAAK;IACnC,KAAK,IAAI0O,CAAC,GAAG2F,YAAY,CAACjU,MAAM,GAAG,CAAC,EAAEsO,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MACjD,IAAI,CAACkG,eAAe,CAACP,YAAY,CAAC3F,CAAC,CAAC,CAAC;IACvC;IACA,IAAI,CAAC1O,KAAK,CAACqU,YAAY,GAAG,EAAE;EAC9B;EAqBAgB,iCAAiCA,CAACztB,IAAU,EAAE;IAC5C,MAAM;MAAEysB;KAAc,GAAG,IAAI,CAACrU,KAAK;IACnC,MAAM;MAAEI;IAAQ,CAAA,GAAGiU,YAAY;IAC/B,IAAIjU,MAAM,KAAK,CAAC,EAAE;IAClB,MAAM0T,SAAS,GAAGO,YAAY,CAACjU,MAAM,GAAG,CAAC,CAAC;IAC1C,IAAI0T,SAAS,CAACU,WAAW,KAAK5sB,IAAI,EAAE;MAClCksB,SAAS,CAACU,WAAW,GAAG,IAAI;IAC9B;EACF;EAsBAc,sCAAsCA,CAAC1tB,IAAgB,EAAE;IACvD,MAAM;MAAEysB;KAAc,GAAG,IAAI,CAACrU,KAAK;IACnC,MAAM;MAAEI;IAAQ,CAAA,GAAGiU,YAAY;IAC/B,IAAIjU,MAAM,KAAK,CAAC,EAAE;IAElB,IAAIiU,YAAY,CAACjU,MAAM,GAAG,CAAC,CAAC,CAAC0U,YAAY,KAAKltB,IAAI,EAAE;MAClDysB,YAAY,CAACjU,MAAM,GAAG,CAAC,CAAC,CAAC0U,YAAY,GAAG,IAAI;IAC9C,CAAC,MAAM,IAAI1U,MAAM,IAAI,CAAC,IAAIiU,YAAY,CAACjU,MAAM,GAAG,CAAC,CAAC,CAAC0U,YAAY,KAAKltB,IAAI,EAAE;MACxEysB,YAAY,CAACjU,MAAM,GAAG,CAAC,CAAC,CAAC0U,YAAY,GAAG,IAAI;IAC9C;EACF;EASAS,uBAAuBA,CAAC3tB,IAAU,EAAEpC,KAAa,EAAEC,GAAW,EAAE;IAC9D,MAAM;MAAE4uB;KAAc,GAAG,IAAI,CAACrU,KAAK;IACnC,MAAMsU,kBAAkB,GAAGD,YAAY,CAACjU,MAAM;IAC9C,IAAIkU,kBAAkB,KAAK,CAAC,EAAE;IAC9B,IAAI5F,CAAC,GAAG4F,kBAAkB,GAAG,CAAC;IAE9B,OAAO5F,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAClB,MAAMoF,SAAS,GAAGO,YAAY,CAAC3F,CAAC,CAAC;MACjC,MAAMgG,UAAU,GAAGZ,SAAS,CAACruB,GAAG;MAChC,MAAMsvB,YAAY,GAAGjB,SAAS,CAACtuB,KAAK;MAEpC,IAAIuvB,YAAY,KAAKtvB,GAAG,EAAE;QACxBquB,SAAS,CAACU,WAAW,GAAG5sB,IAAI;MAC9B,CAAC,MAAM,IAAI8sB,UAAU,KAAKlvB,KAAK,EAAE;QAC/BsuB,SAAS,CAACgB,YAAY,GAAGltB,IAAI;MAC/B,CAAC,MAAM,IAAI8sB,UAAU,GAAGlvB,KAAK,EAAE;QAC7B;MACF;IACF;EACF;AACF;ACjUO,MAAMgwB,SAAS,GAAG,yBAAyB;AAC3C,MAAMC,UAAU,GAAG,IAAI5b,MAAM,CAAC2b,SAAS,CAAC/V,MAAM,EAAE,GAAG,CAAC;AAGpD,SAASiW,SAASA,CAAC3vB,IAAY,EAAW;EAC/C,QAAQA,IAAI;IACV,KAAA,EAAA;IACA,KAAA,EAAA;IACA,KAAA,IAAA;IACA,KAAA,IAAA;MACE,OAAO,IAAI;IAEb;MACE,OAAO,KAAK;EAChB;AACF;AAEO,SAAS4vB,UAAUA,CAACX,KAAa,EAAExvB,KAAa,EAAEC,GAAW,EAAW;EAC7E,KAAK,IAAIipB,CAAC,GAAGlpB,KAAK,EAAEkpB,CAAC,GAAGjpB,GAAG,EAAEipB,CAAC,EAAE,EAAE;IAChC,IAAIgH,SAAS,CAACV,KAAK,CAACC,UAAU,CAACvG,CAAC,CAAC,CAAC,EAAE;MAClC,OAAO,IAAI;IACb;EACF;EACA,OAAO,KAAK;AACd;AAEO,MAAMkH,cAAc,GAAG,+BAA+B;AAEtD,MAAMC,oBAAoB,GAC/B,gDAAgD;AAG3C,SAASC,YAAYA,CAAC/vB,IAAY,EAAW;EAClD,QAAQA,IAAI;IACV,KAAK,MAAM;IACX,KAAK,MAAM;IACX,KAAK,MAAM;IACX,KAAA,EAAA;IACA,KAAA,GAAA;IACA,KAAA,IAAA;IACA,KAAK,MAAM;IACX,KAAK,MAAM;IACX,KAAK,MAAM;IACX,KAAK,MAAM;IACX,KAAK,MAAM;IACX,KAAK,MAAM;IACX,KAAK,MAAM;IACX,KAAK,MAAM;IACX,KAAK,MAAM;IACX,KAAK,MAAM;IACX,KAAK,MAAM;IACX,KAAK,MAAM;IACX,KAAK,MAAM;IACX,KAAK,MAAM;IACX,KAAK,MAAM;MACT,OAAO,IAAI;IAEb;MACE,OAAO,KAAK;EAChB;AACF;AChCe,MAAMgwB,KAAK,CAAC;EAAA7wB,WAAAA,CAAA,EAAA;IAAA,IAAA,CACZyU,KAAK,GAAA,IAAA;IAAA,IAAA,CAIlBjC,UAAU,GAAA,KAAA,CAAA;IAAA,IAAA,CACVse,OAAO,GAAA,KAAA,CAAA;IAAA,IAAA,CACPC,SAAS,GAAA,KAAA,CAAA;IAAA,IAAA,CAIT3X,QAAQ,GAAA,KAAA,CAAA;IAAA,IAAA,CACR8C,MAAM,GAAA,KAAA,CAAA;IAAA,IA0BN8U,CAAAA,MAAM,GAAsB,EAAE;IAAA,IAG9BC,CAAAA,gBAAgB,GAAW,CAAC,CAAC;IAAA,IAM7BC,CAAAA,SAAS,GAAa,EAAE;IAAA,IAQxBC,CAAAA,yBAAyB,GAAa,EAAE;IAAA,IAAA,CAYxCC,YAAY,GAAsB;MAChCC,wBAAwB,EAAE,CAAC;MAC3BC,aAAa,EAAE;KAChB;IAAA,IAODC,CAAAA,MAAM,GAID,EAAE;IAAA,IAEPtC,CAAAA,WAAW,GAAG,CAAC;IAAA,IAEfE,CAAAA,YAAY,GAA6B,EAAE;IAAA,IAG3Cpe,CAAAA,GAAG,GAAW,CAAC;IAAA,IAAA,CAIfpO,IAAI,GAAA,GAAA;IAAA,IAGJ+M,CAAAA,KAAK,GAAQ,IAAI;IAAA,IAGjBpP,CAAAA,KAAK,GAAW,CAAC;IAAA,IACjBC,CAAAA,GAAG,GAAW,CAAC;IAAA,IAIf6b,CAAAA,aAAa,GAAa,IAAI;IAAA,IAE9BrB,CAAAA,eAAe,GAAa,IAAI;IAAA,IAAA,CAIhC+N,OAAO,GAAsB,CAAC0I,KAAE,CAAChV,KAAK,CAAC;IAAA,IAYvCiV,CAAAA,6BAA6B,GAAoB,IAAI;IAAA,IAAA,CAYrDC,YAAY,GAAiD,IAAIlU,GAAG,EAAE;IAAA,IAGtEmU,CAAAA,YAAY,GAAW,CAAC;EAAA;EAAA,IArIV7H,MAAMA,CAAAA,EAAA;IAAA,OAAA,CAAA,IAAA,CAFPrV,KAAK,GAAA,CAAA,IAAA,CAAA;EAAA;EAAA,IAEJqV,MAAMA,CAAA8H,CAAA,EAAA;IAAA,IAAAA,CAAA,EAAA,IAAA,CAFPnd,KAAK,IAAA,CAAA,CAAA,KAAA,IAAA,CAALA,KAAK,IAAA,CAAA,CAAA;EAAA;EAalBod,IAAIA,CAAC;IACH3e,UAAU;IACVb,UAAU;IACVG,UAAU;IACVE,SAAS;IACTD;EACO,CAAC,EAAQ;IAChB,IAAI,CAACqX,MAAM,GACT5W,UAAU,KAAK,KAAK,GAChB,KAAK,GACLA,UAAU,KAAK,IAAI,GACjB,IAAI,GACJb,UAAU,KAAK,QAAQ;IAE/B,IAAI,CAACG,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACse,OAAO,GAAGpe,SAAS;IACxB,IAAI,CAACqe,SAAS,GAAG,CAACte,WAAW;IAC7B,IAAI,CAAC2G,QAAQ,GAAG,IAAI,CAAC8C,MAAM,GAAG,IAAInc,QAAQ,CACxC2S,SAAS,EACTD,WAAW,EACXD,UACF,CAAC;EACH;EAAC,IAsBasf,sBAAsBA,CAAAA,EAAA;IAAA,OAAA,CAAA,IAAA,CAzDvBrd,KAAK,GAAA,CAAA,IAAA,CAAA;EAAA;EAAA,IAyDJqd,sBAAsBA,CAAAF,CAAA,EAAA;IAAA,IAAAA,CAAA,EAAA,IAAA,CAzDvBnd,KAAK,IAAA,CAAA,CAAA,KAAA,IAAA,CAALA,KAAK,IAAA,CAAA,CAAA;EAAA;EAAA,IA0DJsd,MAAMA,CAAAA,EAAA;IAAA,OAAA,CAAA,IAAA,CA1DPtd,KAAK,GAAA,CAAA,IAAA,CAAA;EAAA;EAAA,IA0DJsd,MAAMA,CAAAH,CAAA,EAAA;IAAA,IAAAA,CAAA,EAAA,IAAA,CA1DPnd,KAAK,IAAA,CAAA,CAAA,KAAA,IAAA,CAALA,KAAK,IAAA,CAAA,CAAA;EAAA;EAAA,IA2DJud,kBAAkBA,CAAAA,EAAA;IAAA,OAAA,CAAA,IAAA,CA3DnBvd,KAAK,GAAA,CAAA,IAAA,CAAA;EAAA;EAAA,IA2DJud,kBAAkBA,CAAAJ,CAAA,EAAA;IAAA,IAAAA,CAAA,EAAA,IAAA,CA3DnBnd,KAAK,IAAA,CAAA,CAAA,KAAA,IAAA,CAALA,KAAK,IAAA,CAAA,CAAA;EAAA;EAAA,IA4DJwd,cAAcA,CAAAA,EAAA;IAAA,OAAA,CAAA,IAAA,CA5Dfxd,KAAK,GAAA,EAAA,IAAA,CAAA;EAAA;EAAA,IA4DJwd,cAAcA,CAAAL,CAAA,EAAA;IAAA,IAAAA,CAAA,EAAA,IAAA,CA5Dfnd,KAAK,IAAA,EAAA,CAAA,KAAA,IAAA,CAALA,KAAK,IAAA,CAAA,EAAA;EAAA;EAAA,IA6DJyd,gBAAgBA,CAAAA,EAAA;IAAA,OAAA,CAAA,IAAA,CA7DjBzd,KAAK,GAAA,EAAA,IAAA,CAAA;EAAA;EAAA,IA6DJyd,gBAAgBA,CAAAN,CAAA,EAAA;IAAA,IAAAA,CAAA,EAAA,IAAA,CA7DjBnd,KAAK,IAAA,EAAA,CAAA,KAAA,IAAA,CAALA,KAAK,IAAA,CAAA,EAAA;EAAA;EAAA,IA8DJ0d,eAAeA,CAAAA,EAAA;IAAA,OAAA,CAAA,IAAA,CA9DhB1d,KAAK,GAAA,EAAA,IAAA,CAAA;EAAA;EAAA,IA8DJ0d,eAAeA,CAAAP,CAAA,EAAA;IAAA,IAAAA,CAAA,EAAA,IAAA,CA9DhBnd,KAAK,IAAA,EAAA,CAAA,KAAA,IAAA,CAALA,KAAK,IAAA,CAAA,EAAA;EAAA;EAAA,IA+DJ2d,iCAAiCA,CAAAA,EAAA;IAAA,OAAA,CAAA,IAAA,CA/DlC3d,KAAK,GAAA,GAAA,IAAA,CAAA;EAAA;EAAA,IA+DJ2d,iCAAiCA,CAAAR,CAAA,EAAA;IAAA,IAAAA,CAAA,EAAA,IAAA,CA/DlCnd,KAAK,IAAA,GAAA,CAAA,KAAA,IAAA,CAALA,KAAK,IAAA,CAAA,GAAA;EAAA;EAAA,IAwEJ4d,SAASA,CAAAA,EAAA;IAAA,OAAA,CAAA,IAAA,CAxEV5d,KAAK,GAAA,GAAA,IAAA,CAAA;EAAA;EAAA,IAwEJ4d,SAASA,CAAAT,CAAA,EAAA;IAAA,IAAAA,CAAA,EAAA,IAAA,CAxEVnd,KAAK,IAAA,GAAA,CAAA,KAAA,IAAA,CAALA,KAAK,IAAA,CAAA,GAAA;EAAA;EAAA,IAyEJ6d,0BAA0BA,CAAAA,EAAA;IAAA,OAAA,CAAA,IAAA,CAzE3B7d,KAAK,GAAA,GAAA,IAAA,CAAA;EAAA;EAAA,IAyEJ6d,0BAA0BA,CAAAV,CAAA,EAAA;IAAA,IAAAA,CAAA,EAAA,IAAA,CAzE3Bnd,KAAK,IAAA,GAAA,CAAA,KAAA,IAAA,CAALA,KAAK,IAAA,CAAA,GAAA;EAAA;EAAA,IA+GJ8d,kBAAkBA,CAAAA,EAAA;IAAA,OAAA,CAAA,IAAA,CA/GnB9d,KAAK,GAAA,IAAA,IAAA,CAAA;EAAA;EAAA,IA+GJ8d,kBAAkBA,CAAAX,CAAA,EAAA;IAAA,IAAAA,CAAA,EAAA,IAAA,CA/GnBnd,KAAK,IAAA,IAAA,CAAA,KAAA,IAAA,CAALA,KAAK,IAAA,CAAA,IAAA;EAAA;EAAA,IAoHJ+d,WAAWA,CAAAA,EAAA;IAAA,OAAA,CAAA,IAAA,CApHZ/d,KAAK,GAAA,IAAA,IAAA,CAAA;EAAA;EAAA,IAoHJ+d,WAAWA,CAAAZ,CAAA,EAAA;IAAA,IAAAA,CAAA,EAAA,IAAA,CApHZnd,KAAK,IAAA,IAAA,CAAA,KAAA,IAAA,CAALA,KAAK,IAAA,CAAA,IAAA;EAAA;EAAA,IA0HJge,gBAAgBA,CAAAA,EAAA;IAAA,OAAA,CAAA,IAAA,CA1HjBhe,KAAK,GAAA,IAAA,IAAA,CAAA;EAAA;EAAA,IA0HJge,gBAAgBA,CAAAb,CAAA,EAAA;IAAA,IAAAA,CAAA,EAAA,IAAA,CA1HjBnd,KAAK,IAAA,IAAA,CAAA,KAAA,IAAA,CAALA,KAAK,IAAA,CAAA,IAAA;EAAA;EA8IlBie,WAAWA,CAAAA,EAAa;IACtB,OAAO,IAAI3yB,QAAQ,CACjB,IAAI,CAAC+wB,OAAO,EACZ,IAAI,CAAC/f,GAAG,GAAG,IAAI,CAACggB,SAAS,EACzB,IAAI,CAAChgB,GAAG,GAAG,IAAI,CAACyB,UAClB,CAAC;EACH;EAEAxB,KAAKA,CAAAA,EAAU;IACb,MAAM8J,KAAK,GAAG,IAAI+V,KAAK,EAAE;IACzB/V,KAAK,CAACrG,KAAK,GAAG,IAAI,CAACA,KAAK;IACxBqG,KAAK,CAACtI,UAAU,GAAG,IAAI,CAACA,UAAU;IAClCsI,KAAK,CAACgW,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5BhW,KAAK,CAACiW,SAAS,GAAG,IAAI,CAACA,SAAS;IAChCjW,KAAK,CAAC1B,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAC9B0B,KAAK,CAACoB,MAAM,GAAG,IAAI,CAACA,MAAM;IAC1BpB,KAAK,CAACkW,MAAM,GAAG,IAAI,CAACA,MAAM,CAAC2B,KAAK,CAAA,CAAE;IAClC7X,KAAK,CAACmW,gBAAgB,GAAG,IAAI,CAACA,gBAAgB;IAC9CnW,KAAK,CAACoW,SAAS,GAAG,IAAI,CAACA,SAAS,CAACyB,KAAK,CAAA,CAAE;IACxC7X,KAAK,CAACqW,yBAAyB,GAAG,IAAI,CAACA,yBAAyB,CAACwB,KAAK,CAAA,CAAE;IACxE7X,KAAK,CAACsW,YAAY,GAAG,IAAI,CAACA,YAAY;IACtCtW,KAAK,CAACyW,MAAM,GAAG,IAAI,CAACA,MAAM,CAACoB,KAAK,CAAA,CAAE;IAClC7X,KAAK,CAACmU,WAAW,GAAG,IAAI,CAACA,WAAW;IACpCnU,KAAK,CAACqU,YAAY,GAAG,IAAI,CAACA,YAAY,CAACwD,KAAK,CAAA,CAAE;IAC9C7X,KAAK,CAAC/J,GAAG,GAAG,IAAI,CAACA,GAAG;IACpB+J,KAAK,CAACnY,IAAI,GAAG,IAAI,CAACA,IAAI;IACtBmY,KAAK,CAACpL,KAAK,GAAG,IAAI,CAACA,KAAK;IACxBoL,KAAK,CAACxa,KAAK,GAAG,IAAI,CAACA,KAAK;IACxBwa,KAAK,CAACva,GAAG,GAAG,IAAI,CAACA,GAAG;IACpBua,KAAK,CAACsB,aAAa,GAAG,IAAI,CAACA,aAAa;IACxCtB,KAAK,CAACC,eAAe,GAAG,IAAI,CAACA,eAAe;IAC5CD,KAAK,CAACgO,OAAO,GAAG,IAAI,CAACA,OAAO,CAAC6J,KAAK,CAAA,CAAE;IACpC7X,KAAK,CAAC2W,6BAA6B,GAAG,IAAI,CAACA,6BAA6B;IACxE3W,KAAK,CAAC4W,YAAY,GAAG,IAAI,CAACA,YAAY;IACtC5W,KAAK,CAAC6W,YAAY,GAAG,IAAI,CAACA,YAAY;IAEtC,OAAO7W,KAAK;EACd;AACF;eCrNA,SAAS8X,OAAOA,CAAC/xB,IAAI,EAAE;EACrB,OAAOA,IAAI,IAAA,EAAU,IAAIA,IAAI,IAAU,EAAA;AACzC,CAAC;AAID,MAAMgyB,iCAAiC,GAAG;EACxCC,SAAS,EAAE,IAAIrkB,GAAG,CAAS,kCAS1B,CAAC;EACFskB,GAAG,EAAE,IAAItkB,GAAG,CAAS,CAKpB,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,CAAA;AACH,CAAC;AAED,MAAMukB,gCAAgC,GAAG;EAEvCC,GAAG,EAAGC,EAAU,IAAKA,EAAE,KAAqB,EAAA,IAAIA,EAAE,KAAqB,EAAA;EAGvEC,GAAG,EAAGD,EAAU,IAAKA,EAAE,IAAoB,EAAA,IAAIA,EAAE,IAAoB,EAAA;EAGrEE,GAAG,EAAGF,EAAU,IAAKA,EAAE,IAAoB,EAAA,IAAIA,EAAE,IAAoB,EAAA;EAGrEH,GAAG,EAAGG,EAAU,IACbA,EAAE,IAAoB,EAAA,IAAIA,EAAE,IAAoB,EAAA,IAChDA,EAAE,IAAA,EAAwB,IAAIA,EAAE,IAAA,EAAyB,IACzDA,EAAE,IAAA,EAAwB,IAAIA,EAAE,IAAA;AACrC,CAAC;AAUM,SAASG,kBAAkBA,CAChC1wB,IAAsC,EACtCmtB,KAAa,EACb/e,GAAW,EACXggB,SAAiB,EACjBD,OAAe,EACfE,MAAmC,EACnC;EACA,MAAMsC,UAAU,GAAGviB,GAAG;EACtB,MAAMwiB,gBAAgB,GAAGxC,SAAS;EAClC,MAAMyC,cAAc,GAAG1C,OAAO;EAE9B,IAAI2C,GAAG,GAAG,EAAE;EACZ,IAAIC,eAAe,GAAG,IAAI;EAC1B,IAAIC,UAAU,GAAG5iB,GAAG;EACpB,MAAM;IAAEmK;EAAQ,CAAA,GAAG4U,KAAK;EACxB,SAAS;IACP,IAAI/e,GAAG,IAAImK,MAAM,EAAE;MACjB8V,MAAM,CAAC4C,YAAY,CAACN,UAAU,EAAEC,gBAAgB,EAAEC,cAAc,CAAC;MACjEC,GAAG,IAAI3D,KAAK,CAAC6C,KAAK,CAACgB,UAAU,EAAE5iB,GAAG,CAAC;MACnC;IACF;IACA,MAAMmiB,EAAE,GAAGpD,KAAK,CAACC,UAAU,CAAChf,GAAG,CAAC;IAChC,IAAI8iB,WAAW,CAAClxB,IAAI,EAAEuwB,EAAE,EAAEpD,KAAK,EAAE/e,GAAG,CAAC,EAAE;MACrC0iB,GAAG,IAAI3D,KAAK,CAAC6C,KAAK,CAACgB,UAAU,EAAE5iB,GAAG,CAAC;MACnC;IACF;IACA,IAAImiB,EAAE,OAAwB,EAAE;MAC9BO,GAAG,IAAI3D,KAAK,CAAC6C,KAAK,CAACgB,UAAU,EAAE5iB,GAAG,CAAC;MACnC,MAAM+iB,GAAG,GAAGC,eAAe,CACzBjE,KAAK,EACL/e,GAAG,EACHggB,SAAS,EACTD,OAAO,EACPnuB,IAAI,KAAK,UAAU,EACnBquB,MACF,CAAC;MACD,IAAI8C,GAAG,CAACZ,EAAE,KAAK,IAAI,IAAI,CAACQ,eAAe,EAAE;QACvCA,eAAe,GAAG;UAAE3iB,GAAG;UAAEggB,SAAS;UAAED;SAAS;MAC/C,CAAC,MAAM;QACL2C,GAAG,IAAIK,GAAG,CAACZ,EAAE;MACf;MACA,CAAC;QAAEniB,GAAG;QAAEggB,SAAS;QAAED;MAAS,CAAA,GAAGgD,GAAG;MAClCH,UAAU,GAAG5iB,GAAG;IACjB,CAAA,MAAM,IACLmiB,EAAE,SAA4B,IAC9BA,EAAE,SAAiC,EACnC;MACA,EAAEniB,GAAG;MACL,EAAE+f,OAAO;MACTC,SAAS,GAAGhgB,GAAG;IAChB,CAAA,MAAM,IAAImiB,EAAE,OAAuB,IAAIA,EAAE,OAA6B,EAAE;MACvE,IAAIvwB,IAAI,KAAK,UAAU,EAAE;QACvB8wB,GAAG,IAAI3D,KAAK,CAAC6C,KAAK,CAACgB,UAAU,EAAE5iB,GAAG,CAAC,GAAG,IAAI;QAC1C,EAAEA,GAAG;QACL,IACEmiB,EAAE,KAA6B,EAAA,IAC/BpD,KAAK,CAACC,UAAU,CAAChf,GAAG,CAAC,KAAA,EAAuB,EAC5C;UACA,EAAEA,GAAG;QACP;QACA,EAAE+f,OAAO;QACT6C,UAAU,GAAG5C,SAAS,GAAGhgB,GAAG;MAC9B,CAAC,MAAM;QACLigB,MAAM,CAAC4C,YAAY,CAACN,UAAU,EAAEC,gBAAgB,EAAEC,cAAc,CAAC;MACnE;IACF,CAAC,MAAM;MACL,EAAEziB,GAAG;IACP;EACF;EACA,OAEI;IACEA,GAAG;IACHijB,GAAG,EAAEP,GAAG;IACRC,eAAe;IACf3C,SAAS;IACTD,OAAO;IACPmD,eAAe,EAAE,CAAC,CAACP;GACpB;AACP;AAEA,SAASG,WAAWA,CAClBlxB,IAAsC,EACtCuwB,EAAU,EACVpD,KAAa,EACb/e,GAAW,EACX;EACA,IAAIpO,IAAI,KAAK,UAAU,EAAE;IACvB,OACEuwB,EAAE,KAAA,EAA0B,IAC3BA,EAAE,OAAyB,IAC1BpD,KAAK,CAACC,UAAU,CAAChf,GAAG,GAAG,CAAC,CAAC,KAA8B,GAAA;EAE7D;EACA,OACEmiB,EAAE,MAAMvwB,IAAI,KAAK,QAAQ,UAAiD,CAAC;AAE/E;AAOA,SAASoxB,eAAeA,CACtBjE,KAAa,EACb/e,GAAW,EACXggB,SAAiB,EACjBD,OAAe,EACfoD,UAAmB,EACnBlD,MAAgC,EAChC;EACA,MAAMmD,cAAc,GAAG,CAACD,UAAU;EAClCnjB,GAAG,EAAE;EAEL,MAAM+iB,GAAG,GAAIZ,EAAiB,KAAM;IAAEniB,GAAG;IAAEmiB,EAAE;IAAEnC,SAAS;IAAED;EAAQ,CAAC,CAAC;EAEpE,MAAMoC,EAAE,GAAGpD,KAAK,CAACC,UAAU,CAAChf,GAAG,EAAE,CAAC;EAClC,QAAQmiB,EAAE;IACR,KAAA,GAAA;MACE,OAAOY,GAAG,CAAC,IAAI,CAAC;IAClB,KAAA,GAAA;MACE,OAAOA,GAAG,CAAC,IAAI,CAAC;IAClB,KAAA,GAAA;MAA2B;QACzB,IAAIjzB,IAAI;QACR,CAAC;UAAEA,IAAI;UAAEkQ;QAAI,CAAC,GAAGqjB,WAAW,CAC1BtE,KAAK,EACL/e,GAAG,EACHggB,SAAS,EACTD,OAAO,EACP,CAAC,EACD,KAAK,EACLqD,cAAc,EACdnD,MACF,CAAC;QACD,OAAO8C,GAAG,CAACjzB,IAAI,KAAK,IAAI,GAAG,IAAI,GAAGsU,MAAM,CAACwU,YAAY,CAAC9oB,IAAI,CAAC,CAAC;MAC9D;IACA,KAAA,GAAA;MAA2B;QACzB,IAAIA,IAAI;QACR,CAAC;UAAEA,IAAI;UAAEkQ;QAAI,CAAC,GAAGsjB,aAAa,CAC5BvE,KAAK,EACL/e,GAAG,EACHggB,SAAS,EACTD,OAAO,EACPqD,cAAc,EACdnD,MACF,CAAC;QACD,OAAO8C,GAAG,CAACjzB,IAAI,KAAK,IAAI,GAAG,IAAI,GAAGsU,MAAM,CAACmf,aAAa,CAACzzB,IAAI,CAAC,CAAC;MAC/D;IACA,KAAA,GAAA;MACE,OAAOizB,GAAG,CAAC,IAAI,CAAC;IAClB,KAAA,EAAA;MACE,OAAOA,GAAG,CAAC,IAAI,CAAC;IAClB,KAAA,GAAA;MACE,OAAOA,GAAG,CAAC,QAAQ,CAAC;IACtB,KAAA,GAAA;MACE,OAAOA,GAAG,CAAC,IAAI,CAAC;IAClB,KAAA,EAAA;MACE,IAAIhE,KAAK,CAACC,UAAU,CAAChf,GAAG,CAAC,OAAuB,EAAE;QAChD,EAAEA,GAAG;MACP;IAEF,KAAA,EAAA;MACEggB,SAAS,GAAGhgB,GAAG;MACf,EAAE+f,OAAO;IAEX,KAAA,IAAA;IACA,KAAA,IAAA;MACE,OAAOgD,GAAG,CAAC,EAAE,CAAC;IAChB,KAAA,EAAA;IACA,KAAA,EAAA;MACE,IAAII,UAAU,EAAE;QACd,OAAOJ,GAAG,CAAC,IAAI,CAAC;MAClB,CAAC,MAAM;QACL9C,MAAM,CAACuD,mBAAmB,CAACxjB,GAAG,GAAG,CAAC,EAAEggB,SAAS,EAAED,OAAO,CAAC;MACzD;IAEF;MACE,IAAIoC,EAAE,IAAA,EAAoB,IAAIA,EAAE,MAAoB,EAAE;QACpD,MAAMsB,QAAQ,GAAGzjB,GAAG,GAAG,CAAC;QACxB,MAAM0jB,KAAK,GAAG,SAAS,CAACC,IAAI,CAAC5E,KAAK,CAAC6C,KAAK,CAAC6B,QAAQ,EAAEzjB,GAAG,GAAG,CAAC,CAAC,CAAC;QAE5D,IAAI4jB,QAAQ,GAAGF,KAAK,CAAC,CAAC,CAAC;QAEvB,IAAIG,KAAK,GAAGC,QAAQ,CAACF,QAAQ,EAAE,CAAC,CAAC;QACjC,IAAIC,KAAK,GAAG,GAAG,EAAE;UACfD,QAAQ,GAAGA,QAAQ,CAAChC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;UAChCiC,KAAK,GAAGC,QAAQ,CAACF,QAAQ,EAAE,CAAC,CAAC;QAC/B;QACA5jB,GAAG,IAAI4jB,QAAQ,CAACzZ,MAAM,GAAG,CAAC;QAC1B,MAAM0P,IAAI,GAAGkF,KAAK,CAACC,UAAU,CAAChf,GAAG,CAAC;QAClC,IACE4jB,QAAQ,KAAK,GAAG,IAChB/J,IAAI,KAAqB,EAAA,IACzBA,IAAI,KAAA,EAAqB,EACzB;UACA,IAAIsJ,UAAU,EAAE;YACd,OAAOJ,GAAG,CAAC,IAAI,CAAC;UAClB,CAAC,MAAM;YACL9C,MAAM,CAACuD,mBAAmB,CAACC,QAAQ,EAAEzD,SAAS,EAAED,OAAO,CAAC;UAC1D;QACF;QAEA,OAAOgD,GAAG,CAAC3e,MAAM,CAACwU,YAAY,CAACiL,KAAK,CAAC,CAAC;MACxC;MAEA,OAAOd,GAAG,CAAC3e,MAAM,CAACwU,YAAY,CAACuJ,EAAE,CAAC,CAAC;EACvC;AACF;AAOA,SAASkB,WAAWA,CAClBtE,KAAa,EACb/e,GAAW,EACXggB,SAAiB,EACjBD,OAAe,EACfgE,GAAW,EACXC,QAAiB,EACjBZ,cAAuB,EACvBnD,MAA4B,EAC5B;EACA,MAAMsC,UAAU,GAAGviB,GAAG;EACtB,IAAIikB,CAAC;EACL,CAAC;IAAEA,CAAC;IAAEjkB;EAAK,CAAA,GAAGkkB,OAAO,CACnBnF,KAAK,EACL/e,GAAG,EACHggB,SAAS,EACTD,OAAO,EACP,EAAE,EACFgE,GAAG,EACHC,QAAQ,EACR,KAAK,EACL/D,MAAM,EACY,CAACmD,cACrB,CAAC;EACD,IAAIa,CAAC,KAAK,IAAI,EAAE;IACd,IAAIb,cAAc,EAAE;MAClBnD,MAAM,CAACkE,qBAAqB,CAAC5B,UAAU,EAAEvC,SAAS,EAAED,OAAO,CAAC;IAC9D,CAAC,MAAM;MACL/f,GAAG,GAAGuiB,UAAU,GAAG,CAAC;IACtB;EACF;EACA,OAAO;IAAEzyB,IAAI,EAAEm0B,CAAC;IAAEjkB;GAAK;AACzB;AAuBO,SAASkkB,OAAOA,CACrBnF,KAAa,EACb/e,GAAW,EACXggB,SAAiB,EACjBD,OAAe,EACf/pB,KAAa,EACb+tB,GAAuB,EACvBC,QAAiB,EACjBI,iBAAmC,EACnCnE,MAAwB,EACxBoE,WAAoB,EACpB;EACA,MAAM90B,KAAK,GAAGyQ,GAAG;EACjB,MAAMskB,iBAAiB,GACrBtuB,KAAK,KAAK,EAAE,GACR8rB,iCAAiC,CAACE,GAAG,GACrCF,iCAAiC,CAACC,SAAS;EACjD,MAAMwC,gBAAgB,GACpBvuB,KAAK,KAAK,EAAE,GACRisB,gCAAgC,CAACD,GAAG,GACpChsB,KAAK,KAAK,EAAE,GACVisB,gCAAgC,CAACI,GAAG,GACpCrsB,KAAK,KAAK,CAAC,GACTisB,gCAAgC,CAACG,GAAG,GACpCH,gCAAgC,CAACC,GAAG;EAE9C,IAAIsC,OAAO,GAAG,KAAK;EACnB,IAAIC,KAAK,GAAG,CAAC;EAEb,KAAK,IAAIhM,CAAC,GAAG,CAAC,EAAEiM,CAAC,GAAGX,GAAG,IAAI,IAAI,GAAGY,QAAQ,GAAGZ,GAAG,EAAEtL,CAAC,GAAGiM,CAAC,EAAE,EAAEjM,CAAC,EAAE;IAC5D,MAAM3oB,IAAI,GAAGivB,KAAK,CAACC,UAAU,CAAChf,GAAG,CAAC;IAClC,IAAI4kB,GAAG;IAEP,IAAI90B,IAAI,KAAyB,EAAA,IAAIs0B,iBAAiB,KAAK,MAAM,EAAE;MACjE,MAAMS,IAAI,GAAG9F,KAAK,CAACC,UAAU,CAAChf,GAAG,GAAG,CAAC,CAAC;MACtC,MAAM6Z,IAAI,GAAGkF,KAAK,CAACC,UAAU,CAAChf,GAAG,GAAG,CAAC,CAAC;MAEtC,IAAI,CAACokB,iBAAiB,EAAE;QACtB,IAAIC,WAAW,EAAE,OAAO;UAAEJ,CAAC,EAAE,IAAI;UAAEjkB;SAAK;QACxCigB,MAAM,CAAC6E,gCAAgC,CAAC9kB,GAAG,EAAEggB,SAAS,EAAED,OAAO,CAAC;MAClE,CAAC,MAAM,IACLgF,MAAM,CAACC,KAAK,CAACnL,IAAI,CAAC,IAClB,CAAC0K,gBAAgB,CAAC1K,IAAI,CAAC,IACvByK,iBAAiB,CAAC/K,GAAG,CAACsL,IAAI,CAAC,IAC3BP,iBAAiB,CAAC/K,GAAG,CAACM,IAAI,CAAC,EAC3B;QACA,IAAIwK,WAAW,EAAE,OAAO;UAAEJ,CAAC,EAAE,IAAI;UAAEjkB;SAAK;QACxCigB,MAAM,CAACgF,0BAA0B,CAACjlB,GAAG,EAAEggB,SAAS,EAAED,OAAO,CAAC;MAC5D;MAGA,EAAE/f,GAAG;MACL;IACF;IAEA,IAAIlQ,IAAI,MAAwB,EAAE;MAChC80B,GAAG,GAAG90B,IAAI,GAAA,EAAuB,GAAqB,EAAA;IACxD,CAAC,MAAM,IAAIA,IAAI,IAAA,EAAwB,EAAE;MACvC80B,GAAG,GAAG90B,IAAI,GAAA,EAAuB,GAAqB,EAAA;IACxD,CAAC,MAAM,IAAIo1B,QAAA,CAAkBp1B,IAAI,CAAC,EAAE;MAClC80B,GAAG,GAAG90B,IAAI,GAAmB,EAAA;IAC/B,CAAC,MAAM;MACL80B,GAAG,GAAGD,QAAQ;IAChB;IACA,IAAIC,GAAG,IAAI5uB,KAAK,EAAE;MAGhB,IAAI4uB,GAAG,IAAI,CAAC,IAAIP,WAAW,EAAE;QAC3B,OAAO;UAAEJ,CAAC,EAAE,IAAI;UAAEjkB;SAAK;MACzB,CAAC,MAAM,IACL4kB,GAAG,IAAI,CAAC,IACR3E,MAAM,CAACkF,YAAY,CAACnlB,GAAG,EAAEggB,SAAS,EAAED,OAAO,EAAE/pB,KAAK,CAAC,EACnD;QACA4uB,GAAG,GAAG,CAAC;MACR,CAAA,MAAM,IAAIZ,QAAQ,EAAE;QACnBY,GAAG,GAAG,CAAC;QACPJ,OAAO,GAAG,IAAI;MAChB,CAAC,MAAM;QACL;MACF;IACF;IACA,EAAExkB,GAAG;IACLykB,KAAK,GAAGA,KAAK,GAAGzuB,KAAK,GAAG4uB,GAAG;EAC7B;EACA,IAAI5kB,GAAG,KAAKzQ,KAAK,IAAKw0B,GAAG,IAAI,IAAI,IAAI/jB,GAAG,GAAGzQ,KAAK,KAAKw0B,GAAI,IAAIS,OAAO,EAAE;IACpE,OAAO;MAAEP,CAAC,EAAE,IAAI;MAAEjkB;KAAK;EACzB;EAEA,OAAO;IAAEikB,CAAC,EAAEQ,KAAK;IAAEzkB;GAAK;AAC1B;AAMO,SAASsjB,aAAaA,CAC3BvE,KAAa,EACb/e,GAAW,EACXggB,SAAiB,EACjBD,OAAe,EACfqD,cAAuB,EACvBnD,MAA8B,EAC9B;EACA,MAAMkC,EAAE,GAAGpD,KAAK,CAACC,UAAU,CAAChf,GAAG,CAAC;EAChC,IAAIlQ,IAAI;EAER,IAAIqyB,EAAE,QAA6B,EAAE;IACnC,EAAEniB,GAAG;IACL,CAAC;MAAElQ,IAAI;MAAEkQ;KAAK,GAAGqjB,WAAW,CAC1BtE,KAAK,EACL/e,GAAG,EACHggB,SAAS,EACTD,OAAO,EACPhB,KAAK,CAACqG,OAAO,CAAC,GAAG,EAAEplB,GAAG,CAAC,GAAGA,GAAG,EAC7B,IAAI,EACJojB,cAAc,EACdnD,MACF,CAAC;IACD,EAAEjgB,GAAG;IACL,IAAIlQ,IAAI,KAAK,IAAI,IAAIA,IAAI,GAAG,QAAQ,EAAE;MACpC,IAAIszB,cAAc,EAAE;QAClBnD,MAAM,CAACoF,gBAAgB,CAACrlB,GAAG,EAAEggB,SAAS,EAAED,OAAO,CAAC;MAClD,CAAC,MAAM;QACL,OAAO;UAAEjwB,IAAI,EAAE,IAAI;UAAEkQ;SAAK;MAC5B;IACF;EACF,CAAC,MAAM;IACL,CAAC;MAAElQ,IAAI;MAAEkQ;IAAI,CAAC,GAAGqjB,WAAW,CAC1BtE,KAAK,EACL/e,GAAG,EACHggB,SAAS,EACTD,OAAO,EACP,CAAC,EACD,KAAK,EACLqD,cAAc,EACdnD,MACF,CAAC;EACH;EACA,OAAO;IAAEnwB,IAAI;IAAEkQ;GAAK;AACtB;AC5ZA,SAASslB,aAAaA,CAACtlB,GAAW,EAAEggB,SAAiB,EAAED,OAAe,EAAE;EACtE,OAAO,IAAI/wB,QAAQ,CAAC+wB,OAAO,EAAE/f,GAAG,GAAGggB,SAAS,EAAEhgB,GAAG,CAAC;AACpD;AAEA,MAAMulB,iBAAiB,GAAG,IAAI7nB,GAAG,CAAC,wCASjC,CAAC;AAMK,MAAM8nB,KAAK,CAAC;EACjBv2B,WAAWA,CAAC8a,KAAY,EAAE;IACxB,MAAMtI,UAAU,GAAGsI,KAAK,CAACtI,UAAU,IAAI,CAAC;IACxC,IAAI,CAAC7P,IAAI,GAAGmY,KAAK,CAACnY,IAAI;IACtB,IAAI,CAAC+M,KAAK,GAAGoL,KAAK,CAACpL,KAAK;IACxB,IAAI,CAACpP,KAAK,GAAGkS,UAAU,GAAGsI,KAAK,CAACxa,KAAK;IACrC,IAAI,CAACC,GAAG,GAAGiS,UAAU,GAAGsI,KAAK,CAACva,GAAG;IACjC,IAAI,CAACoQ,GAAG,GAAG,IAAItQ,cAAc,CAACya,KAAK,CAAC1B,QAAQ,EAAE0B,KAAK,CAACoB,MAAM,CAAC;EAC7D;AAOF;AAIe,MAAesa,SAAS,SAAS1H,cAAc,CAAC;EAM7D9uB,WAAWA,CAAC4T,OAAgB,EAAEkc,KAAa,EAAE;IAC3C,KAAK,EAAE;IAAC,IAAA,CANV2G,WAAW,GAAA,KAAA,CAAA;IAAA,IAGXrjB,CAAAA,MAAM,GAA6B,EAAE;IAAA,IAAA,CA28CrCsjB,qBAAqB,GAAqB;MACxCR,YAAY,EAAEA,CAACnlB,GAAG,EAAEggB,SAAS,EAAED,OAAO,EAAE/pB,KAAK,KAAK;QAChD,IAAI,EAAE,IAAI,CAACuN,WAAW,OAA4B,CAAC,EAAE,OAAO,KAAK;QAEjE,IAAI,CAAC2F,KAAK,CAAC9H,MAAM,CAACrL,YAAY,EAAEuvB,aAAa,CAACtlB,GAAG,EAAEggB,SAAS,EAAED,OAAO,CAAC,EAAE;UACtE/pB;QACF,CAAC,CAAC;QAEF,OAAO,IAAI;MACZ,CAAA;MACD8uB,gCAAgC,EAAE,IAAI,CAACc,YAAY,CACjDxkB,MAAM,CAACnI,gCACT,CAAC;MACDgsB,0BAA0B,EAAE,IAAI,CAACW,YAAY,CAC3CxkB,MAAM,CAACjG,0BACT;KACD;IAAA,IAED0qB,CAAAA,2BAA2B,GAAAjnB,MAAA,CAAAwB,MAAA,CACtB,CAAA,CAAA,EAAA,IAAI,CAACulB,qBAAqB,EAAA;MAC7BxB,qBAAqB,EAAE,IAAI,CAACyB,YAAY,CAACxkB,MAAM,CAACnL,qBAAqB,CAAC;MACtEovB,gBAAgB,EAAE,IAAI,CAACO,YAAY,CAACxkB,MAAM,CAACxL,gBAAgB;IAAC,CAAA,CAAA;IAAA,IAG9DkwB,CAAAA,uCAAuC,GAAAlnB,MAAA,CAAAwB,MAAA,CAClC,CAAA,CAAA,EAAA,IAAI,CAACylB,2BAA2B,EAAA;MACnCrC,mBAAmB,EAAEA,CAACxjB,GAAG,EAAEggB,SAAS,EAAED,OAAO,KAAK;QAChD,IAAI,CAACgG,sBAAsB,CACzB3kB,MAAM,CAAC9D,mBAAmB,EAC1BgoB,aAAa,CAACtlB,GAAG,EAAEggB,SAAS,EAAED,OAAO,CACvC,CAAC;MACF,CAAA;MACD8C,YAAY,EAAEA,CAAC7iB,GAAG,EAAEggB,SAAS,EAAED,OAAO,KAAK;QACzC,MAAM,IAAI,CAAC7W,KAAK,CACd9H,MAAM,CAAC7E,kBAAkB,EACzB+oB,aAAa,CAACtlB,GAAG,GAAG,CAAC,EAAEggB,SAAS,EAAED,OAAO,CAC3C,CAAC;MACH;IAAC,CAAA,CAAA;IAAA,IAGHiG,CAAAA,yCAAyC,GAAApnB,MAAA,CAAAwB,MAAA,CACpC,CAAA,CAAA,EAAA,IAAI,CAACylB,2BAA2B,EAAA;MACnCrC,mBAAmB,EAAE,IAAI,CAACoC,YAAY,CAACxkB,MAAM,CAAC9D,mBAAmB,CAAC;MAClEulB,YAAY,EAAEA,CAAC7iB,GAAG,EAAEggB,SAAS,EAAED,OAAO,KAAK;QACzC,MAAM,IAAI,CAAC7W,KAAK,CACd9H,MAAM,CAAC5E,oBAAoB,EAC3B8oB,aAAa,CAACtlB,GAAG,EAAEggB,SAAS,EAAED,OAAO,CACvC,CAAC;MACH;IAAC,CAAA,CAAA;IAv/CD,IAAI,CAAChW,KAAK,GAAG,IAAI+V,KAAK,EAAE;IACxB,IAAI,CAAC/V,KAAK,CAAC+W,IAAI,CAACje,OAAO,CAAC;IACxB,IAAI,CAACkc,KAAK,GAAGA,KAAK;IAClB,IAAI,CAAC5U,MAAM,GAAG4U,KAAK,CAAC5U,MAAM;IAC1B,IAAI,CAACiT,QAAQ,GAAG,EAAE;IAClB,IAAI,CAACsI,WAAW,GAAG,KAAK;EAC1B;EAEAO,SAASA,CAACjoB,KAAwB,EAAE;IAGlC,IAAI,CAACqE,MAAM,CAAC8H,MAAM,GAAG,IAAI,CAACJ,KAAK,CAAC6W,YAAY;IAC5C,IAAI,CAACve,MAAM,CAACmL,IAAI,CAACxP,KAAK,CAAC;IACvB,EAAE,IAAI,CAAC+L,KAAK,CAAC6W,YAAY;EAC3B;EAIA/G,IAAIA,CAAAA,EAAS;IACX,IAAI,CAACqM,mBAAmB,CAAA,CAAE;IAC1B,IAAI,IAAI,CAAC3iB,WAAW,MAAqB,EAAE;MACzC,IAAI,CAAC0iB,SAAS,CAAC,IAAIT,KAAK,CAAC,IAAI,CAACzb,KAAK,CAAC,CAAC;IACvC;IAEA,IAAI,CAACA,KAAK,CAACsB,aAAa,GAAG,IAAI,CAACtB,KAAK,CAACoB,MAAM;IAC5C,IAAI,CAACpB,KAAK,CAACC,eAAe,GAAG,IAAI,CAACD,KAAK,CAAC1B,QAAQ;IAChD,IAAI,CAAC8d,SAAS,CAAA,CAAE;EAClB;EAEAC,GAAGA,CAACx0B,IAAe,EAAW;IAC5B,IAAI,IAAI,CAAC8xB,KAAK,CAAC9xB,IAAI,CAAC,EAAE;MACpB,IAAI,CAACioB,IAAI,CAAA,CAAE;MACX,OAAO,IAAI;IACb,CAAC,MAAM;MACL,OAAO,KAAK;IACd;EACF;EAKA6J,KAAKA,CAAC9xB,IAAe,EAAW;IAC9B,OAAO,IAAI,CAACmY,KAAK,CAACnY,IAAI,KAAKA,IAAI;EACjC;EAKAy0B,oBAAoBA,CAACtc,KAAY,EAAkB;IACjD,OAAO;MACL/J,GAAG,EAAE+J,KAAK,CAAC/J,GAAG;MACdrB,KAAK,EAAE,IAAI;MACX/M,IAAI,EAAEmY,KAAK,CAACnY,IAAI;MAChBrC,KAAK,EAAEwa,KAAK,CAACxa,KAAK;MAClBC,GAAG,EAAEua,KAAK,CAACva,GAAG;MACduoB,OAAO,EAAE,CAAC,IAAI,CAACuO,UAAU,EAAE,CAAC;MAC5BtF,MAAM,EAAEjX,KAAK,CAACiX,MAAM;MACpB3Y,QAAQ,EAAE0B,KAAK,CAAC1B,QAAQ;MACxBgD,aAAa,EAAEtB,KAAK,CAACsB,aAAa;MAClC0U,OAAO,EAAEhW,KAAK,CAACgW,OAAO;MACtBC,SAAS,EAAEjW,KAAK,CAACiW,SAAS;MAC1B2B,WAAW,EAAE5X,KAAK,CAAC4X;KACpB;EACH;EAeA4E,SAASA,CAAAA,EAAmB;IAC1B,MAAMC,GAAG,GAAG,IAAI,CAACzc,KAAK;IAEtB,IAAI,CAACA,KAAK,GAAG,IAAI,CAACsc,oBAAoB,CAACG,GAAG,CAAC;IAE3C,IAAI,CAACd,WAAW,GAAG,IAAI;IACvB,IAAI,CAACS,SAAS,CAAA,CAAE;IAChB,IAAI,CAACT,WAAW,GAAG,KAAK;IAExB,MAAMe,IAAI,GAAG,IAAI,CAAC1c,KAAK;IACvB,IAAI,CAACA,KAAK,GAAGyc,GAAG;IAChB,OAAOC,IAAI;EACb;EAEAC,cAAcA,CAAAA,EAAW;IACvB,OAAO,IAAI,CAACC,mBAAmB,CAAC,IAAI,CAAC5c,KAAK,CAAC/J,GAAG,CAAC;EACjD;EAEA2mB,mBAAmBA,CAAC3mB,GAAW,EAAU;IACvC2f,cAAc,CAACiH,SAAS,GAAG5mB,GAAG;IAC9B,OAAO2f,cAAc,CAAChH,IAAI,CAAC,IAAI,CAACoG,KAAK,CAAC,GAAGY,cAAc,CAACiH,SAAS,GAAG5mB,GAAG;EACzE;EAEA6mB,iBAAiBA,CAAAA,EAAW;IAC1B,OAAO,IAAI,CAAC9H,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC0H,cAAc,CAAE,CAAA,CAAC;EACrD;EAQAI,oBAAoBA,CAAAA,EAAW;IAC7B,OAAO,IAAI,CAACC,yBAAyB,CAAC,IAAI,CAAChd,KAAK,CAAC/J,GAAG,CAAC;EACvD;EAEA+mB,yBAAyBA,CAAC/mB,GAAW,EAAU;IAC7C4f,oBAAoB,CAACgH,SAAS,GAAG5mB,GAAG;IACpC,OAAO4f,oBAAoB,CAACjH,IAAI,CAAC,IAAI,CAACoG,KAAK,CAAC,GACxCa,oBAAoB,CAACgH,SAAS,GAC9B5mB,GAAG;EACT;EASAgnB,uBAAuBA,CAAAA,EAAW;IAChC,OAAO,IAAI,CAACjI,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC8H,oBAAoB,CAAE,CAAA,CAAC;EAC3D;EAEAG,cAAcA,CAACjnB,GAAW,EAAU;IAKlC,IAAIknB,EAAE,GAAG,IAAI,CAACnI,KAAK,CAACC,UAAU,CAAChf,GAAG,CAAC;IACnC,IAAI,CAACknB,EAAE,GAAG,MAAM,MAAM,MAAM,IAAI,EAAElnB,GAAG,GAAG,IAAI,CAAC+e,KAAK,CAAC5U,MAAM,EAAE;MACzD,MAAMgd,KAAK,GAAG,IAAI,CAACpI,KAAK,CAACC,UAAU,CAAChf,GAAG,CAAC;MACxC,IAAI,CAACmnB,KAAK,GAAG,MAAM,MAAM,MAAM,EAAE;QAC/BD,EAAE,GAAG,OAAO,IAAI,CAACA,EAAE,GAAG,KAAK,KAAK,EAAE,CAAC,IAAIC,KAAK,GAAG,KAAK,CAAC;MACvD;IACF;IACA,OAAOD,EAAE;EACX;EAKAE,SAASA,CAACrO,MAAe,EAAQ;IAC/B,IAAI,CAAChP,KAAK,CAACgP,MAAM,GAAGA,MAAM;IAC1B,IAAIA,MAAM,EAAE;MAKV,IAAI,CAAChP,KAAK,CAAC4W,YAAY,CAAC0G,OAAO,CAAC,CAAC,CAACC,YAAY,EAAE9X,EAAE,CAAC,KACjD,IAAI,CAACtG,KAAK,CAACoe,YAAY,EAAE9X,EAAE,CAC7B,CAAC;MACD,IAAI,CAACzF,KAAK,CAAC4W,YAAY,CAAC4G,KAAK,EAAE;IACjC;EACF;EAEAjB,UAAUA,CAAAA,EAAe;IACvB,OAAO,IAAI,CAACvc,KAAK,CAACgO,OAAO,CAAC,IAAI,CAAChO,KAAK,CAACgO,OAAO,CAAC5N,MAAM,GAAG,CAAC,CAAC;EAC1D;EAGAgc,SAASA,CAAAA,EAAS;IAChB,IAAI,CAACqB,SAAS,CAAA,CAAE;IAChB,IAAI,CAACzd,KAAK,CAACxa,KAAK,GAAG,IAAI,CAACwa,KAAK,CAAC/J,GAAG;IACjC,IAAI,CAAC,IAAI,CAAC0lB,WAAW,EAAE,IAAI,CAAC3b,KAAK,CAAC1B,QAAQ,GAAG,IAAI,CAAC0B,KAAK,CAAC4X,WAAW,EAAE;IACrE,IAAI,IAAI,CAAC5X,KAAK,CAAC/J,GAAG,IAAI,IAAI,CAACmK,MAAM,EAAE;MACjC,IAAI,CAACsd,WAAW,CAAA,GAAO,CAAC;MACxB;IACF;IAEA,IAAI,CAACC,gBAAgB,CAAC,IAAI,CAACT,cAAc,CAAC,IAAI,CAACld,KAAK,CAAC/J,GAAG,CAAC,CAAC;EAC5D;EAKA2nB,gBAAgBA,CAAClJ,UAAwB,EAA8B;IACrE,IAAIpW,QAAQ;IACZ,IAAI,CAAC,IAAI,CAACqd,WAAW,EAAErd,QAAQ,GAAG,IAAI,CAAC0B,KAAK,CAAC4X,WAAW,EAAE;IAC1D,MAAMpyB,KAAK,GAAG,IAAI,CAACwa,KAAK,CAAC/J,GAAG;IAC5B,MAAMxQ,GAAG,GAAG,IAAI,CAACuvB,KAAK,CAACqG,OAAO,CAAC3G,UAAU,EAAElvB,KAAK,GAAG,CAAC,CAAC;IACrD,IAAIC,GAAG,KAAK,CAAC,CAAC,EAAE;MAId,MAAM,IAAI,CAAC0Z,KAAK,CAAC9H,MAAM,CAAC/E,mBAAmB,EAAE,IAAI,CAAC0N,KAAK,CAAC4X,WAAW,CAAA,CAAE,CAAC;IACxE;IAEA,IAAI,CAAC5X,KAAK,CAAC/J,GAAG,GAAGxQ,GAAG,GAAGivB,UAAU,CAACtU,MAAM;IACxCqV,UAAU,CAACoH,SAAS,GAAGr3B,KAAK,GAAG,CAAC;IAChC,OAAOiwB,UAAU,CAAC7G,IAAI,CAAC,IAAI,CAACoG,KAAK,CAAC,IAAIS,UAAU,CAACoH,SAAS,IAAIp3B,GAAG,EAAE;MACjE,EAAE,IAAI,CAACua,KAAK,CAACgW,OAAO;MACpB,IAAI,CAAChW,KAAK,CAACiW,SAAS,GAAGR,UAAU,CAACoH,SAAS;IAC7C;IAIA,IAAI,IAAI,CAAClB,WAAW,EAAE;IAGtB,MAAMzH,OAAuB,GAAG;MAC9BrsB,IAAI,EAAE,cAAc;MACpB+M,KAAK,EAAE,IAAI,CAACogB,KAAK,CAAC6C,KAAK,CAACryB,KAAK,GAAG,CAAC,EAAEC,GAAG,CAAC;MACvCD,KAAK,EAAE,IAAI,CAACitB,iBAAiB,CAACjtB,KAAK,CAAC;MACpCC,GAAG,EAAE,IAAI,CAACgtB,iBAAiB,CAAChtB,GAAG,GAAGivB,UAAU,CAACtU,MAAM,CAAC;MACpDvK,GAAG,EAAE,IAAItQ,cAAc,CAAC+Y,QAAQ,EAAE,IAAI,CAAC0B,KAAK,CAAC4X,WAAW,EAAE;KAC3D;IACD,IAAI,IAAI,CAACpe,WAAW,MAAqB,EAAE,IAAI,CAAC0iB,SAAS,CAAChI,OAAO,CAAC;IAClE,OAAOA,OAAO;EAChB;EAEA2J,eAAeA,CAACC,SAAiB,EAA6B;IAC5D,MAAMt4B,KAAK,GAAG,IAAI,CAACwa,KAAK,CAAC/J,GAAG;IAC5B,IAAIqI,QAAQ;IACZ,IAAI,CAAC,IAAI,CAACqd,WAAW,EAAErd,QAAQ,GAAG,IAAI,CAAC0B,KAAK,CAAC4X,WAAW,EAAE;IAC1D,IAAIQ,EAAE,GAAG,IAAI,CAACpD,KAAK,CAACC,UAAU,CAAE,IAAI,CAACjV,KAAK,CAAC/J,GAAG,IAAI6nB,SAAU,CAAC;IAC7D,IAAI,IAAI,CAAC9d,KAAK,CAAC/J,GAAG,GAAG,IAAI,CAACmK,MAAM,EAAE;MAChC,OAAO,CAACsV,SAAS,CAAC0C,EAAE,CAAC,IAAI,EAAE,IAAI,CAACpY,KAAK,CAAC/J,GAAG,GAAG,IAAI,CAACmK,MAAM,EAAE;QACvDgY,EAAE,GAAG,IAAI,CAACpD,KAAK,CAACC,UAAU,CAAC,IAAI,CAACjV,KAAK,CAAC/J,GAAG,CAAC;MAC5C;IACF;IAIA,IAAI,IAAI,CAAC0lB,WAAW,EAAE;IAEtB,MAAMl2B,GAAG,GAAG,IAAI,CAACua,KAAK,CAAC/J,GAAG;IAC1B,MAAMrB,KAAK,GAAG,IAAI,CAACogB,KAAK,CAAC6C,KAAK,CAACryB,KAAK,GAAGs4B,SAAS,EAAEr4B,GAAG,CAAC;IAEtD,MAAMyuB,OAAsB,GAAG;MAC7BrsB,IAAI,EAAE,aAAa;MACnB+M,KAAK;MACLpP,KAAK,EAAE,IAAI,CAACitB,iBAAiB,CAACjtB,KAAK,CAAC;MACpCC,GAAG,EAAE,IAAI,CAACgtB,iBAAiB,CAAChtB,GAAG,CAAC;MAChCoQ,GAAG,EAAE,IAAItQ,cAAc,CAAC+Y,QAAQ,EAAE,IAAI,CAAC0B,KAAK,CAAC4X,WAAW,EAAE;KAC3D;IACD,IAAI,IAAI,CAACpe,WAAW,MAAqB,EAAE,IAAI,CAAC0iB,SAAS,CAAChI,OAAO,CAAC;IAClE,OAAOA,OAAO;EAChB;EAKAuJ,SAASA,CAAAA,EAAS;IAChB,MAAMM,UAAU,GAAG,IAAI,CAAC/d,KAAK,CAAC/J,GAAG;IACjC,MAAMod,QAAqB,GACzB,IAAI,CAAC7Z,WAAW,OAA4B,GAAG,EAAE,GAAG,IAAI;IAC1DwkB,IAAI,EAAE,OAAO,IAAI,CAAChe,KAAK,CAAC/J,GAAG,GAAG,IAAI,CAACmK,MAAM,EAAE;MACzC,MAAMgY,EAAE,GAAG,IAAI,CAACpD,KAAK,CAACC,UAAU,CAAC,IAAI,CAACjV,KAAK,CAAC/J,GAAG,CAAC;MAChD,QAAQmiB,EAAE;QACR,KAAA,EAAA;QACA,KAAA,GAAA;QACA,KAAA,CAAA;UACE,EAAE,IAAI,CAACpY,KAAK,CAAC/J,GAAG;UAChB;QACF,KAAA,EAAA;UACE,IACE,IAAI,CAAC+e,KAAK,CAACC,UAAU,CAAC,IAAI,CAACjV,KAAK,CAAC/J,GAAG,GAAG,CAAC,CAAC,OAAuB,EAChE;YACA,EAAE,IAAI,CAAC+J,KAAK,CAAC/J,GAAG;UAClB;QAEF,KAAA,EAAA;QACA,KAAA,IAAA;QACA,KAAA,IAAA;UACE,EAAE,IAAI,CAAC+J,KAAK,CAAC/J,GAAG;UAChB,EAAE,IAAI,CAAC+J,KAAK,CAACgW,OAAO;UACpB,IAAI,CAAChW,KAAK,CAACiW,SAAS,GAAG,IAAI,CAACjW,KAAK,CAAC/J,GAAG;UACrC;QAEF,KAAA,EAAA;UACE,QAAQ,IAAI,CAAC+e,KAAK,CAACC,UAAU,CAAC,IAAI,CAACjV,KAAK,CAAC/J,GAAG,GAAG,CAAC,CAAC;YAC/C,KAAA,EAAA;cAAyB;gBACvB,MAAMie,OAAO,GAAG,IAAI,CAAC0J,gBAAgB,CAAC,IAAI,CAAC;gBAC3C,IAAI1J,OAAO,KAAKzc,SAAS,EAAE;kBACzB,IAAI,CAACwc,UAAU,CAACC,OAAO,CAAC;kBACxBb,QAAQ,YAARA,QAAQ,CAAE5P,IAAI,CAACyQ,OAAO,CAAC;gBACzB;gBACA;cACF;YAEA,KAAA,EAAA;cAAsB;gBACpB,MAAMA,OAAO,GAAG,IAAI,CAAC2J,eAAe,CAAC,CAAC,CAAC;gBACvC,IAAI3J,OAAO,KAAKzc,SAAS,EAAE;kBACzB,IAAI,CAACwc,UAAU,CAACC,OAAO,CAAC;kBACxBb,QAAQ,YAARA,QAAQ,CAAE5P,IAAI,CAACyQ,OAAO,CAAC;gBACzB;gBACA;cACF;YAEA;cACE,MAAM8J,IAAI;UACd;UACA;QAEF;UACE,IAAIlI,YAAY,CAACsC,EAAE,CAAC,EAAE;YACpB,EAAE,IAAI,CAACpY,KAAK,CAAC/J,GAAG;UAClB,CAAC,MAAM,IACLmiB,EAAE,KAAmB,EAAA,IACrB,CAAC,IAAI,CAAC9I,QAAQ,IACd,IAAI,CAAC9V,WAAW,OAAqB,EACrC;YACA,MAAMvD,GAAG,GAAG,IAAI,CAAC+J,KAAK,CAAC/J,GAAG;YAC1B,IACE,IAAI,CAAC+e,KAAK,CAACC,UAAU,CAAChf,GAAG,GAAG,CAAC,CAAC,OAAmB,IACjD,IAAI,CAAC+e,KAAK,CAACC,UAAU,CAAChf,GAAG,GAAG,CAAC,CAAC,KAAA,EAA0B,KACvD8nB,UAAU,KAAK,CAAC,IAAI,IAAI,CAAC/d,KAAK,CAACiW,SAAS,GAAG8H,UAAU,CAAC,EACvD;cAEA,MAAM7J,OAAO,GAAG,IAAI,CAAC2J,eAAe,CAAC,CAAC,CAAC;cACvC,IAAI3J,OAAO,KAAKzc,SAAS,EAAE;gBACzB,IAAI,CAACwc,UAAU,CAACC,OAAO,CAAC;gBACxBb,QAAQ,YAARA,QAAQ,CAAE5P,IAAI,CAACyQ,OAAO,CAAC;cACzB;YACF,CAAC,MAAM;cACL,MAAM8J,IAAI;YACZ;UACF,CAAC,MAAM,IACL5F,EAAE,KAAuB,EAAA,IACzB,CAAC,IAAI,CAAC9I,QAAQ,IACd,IAAI,CAAC9V,WAAW,OAAqB,EACrC;YACA,MAAMvD,GAAG,GAAG,IAAI,CAAC+J,KAAK,CAAC/J,GAAG;YAC1B,IACE,IAAI,CAAC+e,KAAK,CAACC,UAAU,CAAChf,GAAG,GAAG,CAAC,CAAC,KAA8B,EAAA,IAC5D,IAAI,CAAC+e,KAAK,CAACC,UAAU,CAAChf,GAAG,GAAG,CAAC,CAAC,KAAmB,EAAA,IACjD,IAAI,CAAC+e,KAAK,CAACC,UAAU,CAAChf,GAAG,GAAG,CAAC,CAAC,OAAmB,EACjD;cAEA,MAAMie,OAAO,GAAG,IAAI,CAAC2J,eAAe,CAAC,CAAC,CAAC;cACvC,IAAI3J,OAAO,KAAKzc,SAAS,EAAE;gBACzB,IAAI,CAACwc,UAAU,CAACC,OAAO,CAAC;gBACxBb,QAAQ,YAARA,QAAQ,CAAE5P,IAAI,CAACyQ,OAAO,CAAC;cACzB;YACF,CAAC,MAAM;cACL,MAAM8J,IAAI;YACZ;UACF,CAAC,MAAM;YACL,MAAMA,IAAI;UACZ;MACJ;IACF;IAEA,IAAI,CAAA3K,QAAQ,IAARA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,QAAQ,CAAEjT,MAAM,IAAG,CAAC,EAAE;MACxB,MAAM3a,GAAG,GAAG,IAAI,CAACua,KAAK,CAAC/J,GAAG;MAC1B,MAAMgoB,iBAAoC,GAAG;QAC3Cz4B,KAAK,EAAE,IAAI,CAACitB,iBAAiB,CAACsL,UAAU,CAAC;QACzCt4B,GAAG,EAAE,IAAI,CAACgtB,iBAAiB,CAAChtB,GAAG,CAAC;QAChC4tB,QAAQ;QACRmB,WAAW,EAAE,IAAI;QACjBM,YAAY,EAAE,IAAI;QAClBH,cAAc,EAAE;OACjB;MACD,IAAI,CAAC3U,KAAK,CAACqU,YAAY,CAAC5Q,IAAI,CAACwa,iBAAiB,CAAC;IACjD;EACF;EAOAP,WAAWA,CAAC71B,IAAe,EAAEgzB,GAAS,EAAQ;IAC5C,IAAI,CAAC7a,KAAK,CAACva,GAAG,GAAG,IAAI,CAACua,KAAK,CAAC/J,GAAG;IAC/B,IAAI,CAAC+J,KAAK,CAACoB,MAAM,GAAG,IAAI,CAACpB,KAAK,CAAC4X,WAAW,CAAA,CAAE;IAC5C,MAAMsG,QAAQ,GAAG,IAAI,CAACle,KAAK,CAACnY,IAAI;IAChC,IAAI,CAACmY,KAAK,CAACnY,IAAI,GAAGA,IAAI;IACtB,IAAI,CAACmY,KAAK,CAACpL,KAAK,GAAGimB,GAAG;IAEtB,IAAI,CAAC,IAAI,CAACc,WAAW,EAAE;MACrB,IAAI,CAACnZ,aAAa,CAAC0b,QAAQ,CAAC;IAC9B;EACF;EAEAC,YAAYA,CAACt2B,IAAe,EAAQ;IAClC,IAAI,CAACmY,KAAK,CAACnY,IAAI,GAAGA,IAAI;IAGtB,IAAI,CAAC2a,aAAa,CAAA,CAAE;EACtB;EAYA4b,oBAAoBA,CAAAA,EAAS;IAC3B,IAAI,IAAI,CAACpe,KAAK,CAAC/J,GAAG,KAAK,CAAC,IAAI,IAAI,CAACooB,qBAAqB,EAAE,EAAE;MACxD;IACF;IAEA,MAAMC,OAAO,GAAG,IAAI,CAACte,KAAK,CAAC/J,GAAG,GAAG,CAAC;IAClC,MAAM6Z,IAAI,GAAG,IAAI,CAACoN,cAAc,CAACoB,OAAO,CAAC;IACzC,IAAIxO,IAAI,IAAA,EAAoB,IAAIA,IAAI,MAAoB,EAAE;MACxD,MAAM,IAAI,CAAC3Q,KAAK,CACd9H,MAAM,CAACxG,wBAAwB,EAC/B,IAAI,CAACmP,KAAK,CAAC4X,WAAW,CAAA,CACxB,CAAC;IACH;IAEA,IACE9H,IAAI,KAAA,GAA6B,IAChCA,IAAI,KAAgC,EAAA,IAAI,IAAI,CAAC+C,SAAS,CAAC,gBAAgB,CAAE,EAC1E;MAKA,IAAI,CAAC0L,YAAY,CAAC,gBAAgB,CAAC;MACnC,IAEE,IAAI,CAAC9hB,eAAe,CAAC,gBAAgB,EAAE,YAAY,CAAC,KAAK,KAAK,EAC9D;QACA,MAAM,IAAI,CAAC0C,KAAK,CACd2Q,IAAI,KAA6B,GAAA,GAC7BzY,MAAM,CAACvH,4CAA4C,GACnDuH,MAAM,CAAC3G,2CAA2C,EACtD,IAAI,CAACsP,KAAK,CAAC4X,WAAW,CACxB,CAAA,CAAC;MACH;MAEA,IAAI,CAAC5X,KAAK,CAAC/J,GAAG,IAAI,CAAC;MACnB,IAAI6Z,IAAI,QAA6B,EAAE;QAErC,IAAI,CAAC4N,WAAW,CAAA,CAAc,CAAC;MACjC,CAAC,MAAM;QAEL,IAAI,CAACA,WAAW,CAAA,CAAgB,CAAC;MACnC;IACF,CAAC,MAAM,IAAI/O,iBAAiB,CAACmB,IAAI,CAAC,EAAE;MAClC,EAAE,IAAI,CAAC9P,KAAK,CAAC/J,GAAG;MAChB,IAAI,CAACynB,WAAW,CAAiB,GAAA,EAAA,IAAI,CAACc,SAAS,CAAC1O,IAAI,CAAC,CAAC;IACxD,CAAC,MAAM,IAAIA,IAAI,KAAA,EAAwB,EAAE;MACvC,EAAE,IAAI,CAAC9P,KAAK,CAAC/J,GAAG;MAChB,IAAI,CAACynB,WAAW,CAAiB,GAAA,EAAA,IAAI,CAACc,SAAS,CAAE,CAAA,CAAC;IACpD,CAAC,MAAM;MACL,IAAI,CAACC,QAAQ,CAAU,EAAA,EAAA,CAAC,CAAC;IAC3B;EACF;EAEAC,aAAaA,CAAAA,EAAS;IACpB,MAAM5O,IAAI,GAAG,IAAI,CAACkF,KAAK,CAACC,UAAU,CAAC,IAAI,CAACjV,KAAK,CAAC/J,GAAG,GAAG,CAAC,CAAC;IACtD,IAAI6Z,IAAI,IAAA,EAAoB,IAAIA,IAAI,MAAoB,EAAE;MACxD,IAAI,CAAC6O,UAAU,CAAC,IAAI,CAAC;MACrB;IACF;IAEA,IACE7O,IAAI,KAAkB,EAAA,IACtB,IAAI,CAACkF,KAAK,CAACC,UAAU,CAAC,IAAI,CAACjV,KAAK,CAAC/J,GAAG,GAAG,CAAC,CAAC,OAAkB,EAC3D;MACA,IAAI,CAAC+J,KAAK,CAAC/J,GAAG,IAAI,CAAC;MACnB,IAAI,CAACynB,WAAW,CAAA,EAAY,CAAC;IAC/B,CAAC,MAAM;MACL,EAAE,IAAI,CAAC1d,KAAK,CAAC/J,GAAG;MAChB,IAAI,CAACynB,WAAW,CAAA,EAAO,CAAC;IAC1B;EACF;EAEAkB,eAAeA,CAAAA,EAAS;IACtB,MAAM9O,IAAI,GAAG,IAAI,CAACkF,KAAK,CAACC,UAAU,CAAC,IAAI,CAACjV,KAAK,CAAC/J,GAAG,GAAG,CAAC,CAAC;IACtD,IAAI6Z,IAAI,OAAuB,EAAE;MAC/B,IAAI,CAAC2O,QAAQ,CAAiB,EAAA,EAAA,CAAC,CAAC;IAClC,CAAC,MAAM;MACL,IAAI,CAACA,QAAQ,CAAW,EAAA,EAAA,CAAC,CAAC;IAC5B;EACF;EAEAJ,qBAAqBA,CAAAA,EAAY;IAC/B,IAAI,IAAI,CAACre,KAAK,CAAC/J,GAAG,KAAK,CAAC,IAAI,IAAI,CAACmK,MAAM,GAAG,CAAC,EAAE,OAAO,KAAK;IAEzD,IAAIgY,EAAE,GAAG,IAAI,CAACpD,KAAK,CAACC,UAAU,CAAC,IAAI,CAACjV,KAAK,CAAC/J,GAAG,GAAG,CAAC,CAAC;IAClD,IAAImiB,EAAE,KAAA,EAA8B,EAAE,OAAO,KAAK;IAElD,MAAM5yB,KAAK,GAAG,IAAI,CAACwa,KAAK,CAAC/J,GAAG;IAC5B,IAAI,CAAC+J,KAAK,CAAC/J,GAAG,IAAI,CAAC;IAEnB,OAAO,CAACyf,SAAS,CAAC0C,EAAE,CAAC,IAAI,EAAE,IAAI,CAACpY,KAAK,CAAC/J,GAAG,GAAG,IAAI,CAACmK,MAAM,EAAE;MACvDgY,EAAE,GAAG,IAAI,CAACpD,KAAK,CAACC,UAAU,CAAC,IAAI,CAACjV,KAAK,CAAC/J,GAAG,CAAC;IAC5C;IAEA,MAAMrB,KAAK,GAAG,IAAI,CAACogB,KAAK,CAAC6C,KAAK,CAACryB,KAAK,GAAG,CAAC,EAAE,IAAI,CAACwa,KAAK,CAAC/J,GAAG,CAAC;IAEzD,IAAI,CAACynB,WAAW,CAA0B9oB,EAAAA,EAAAA,KAAK,CAAC;IAEhD,OAAO,IAAI;EACb;EAEAiqB,qBAAqBA,CAAC94B,IAAY,EAAQ;IAExC,IAAI8B,IAAI,GAAG9B,IAAI,KAAA,EAAuB,GAAsB,EAAA,GAAA,EAAA;IAC5D,IAAI+4B,KAAK,GAAG,CAAC;IACb,IAAIhP,IAAI,GAAG,IAAI,CAACkF,KAAK,CAACC,UAAU,CAAC,IAAI,CAACjV,KAAK,CAAC/J,GAAG,GAAG,CAAC,CAAC;IAGpD,IAAIlQ,IAAI,KAAA,EAAuB,IAAI+pB,IAAI,OAAuB,EAAE;MAC9DgP,KAAK,EAAE;MACPhP,IAAI,GAAG,IAAI,CAACkF,KAAK,CAACC,UAAU,CAAC,IAAI,CAACjV,KAAK,CAAC/J,GAAG,GAAG,CAAC,CAAC;MAChDpO,IAAI,GAAc,EAAA;IACpB;IAGA,IAAIioB,IAAI,OAAuB,IAAI,CAAC,IAAI,CAAC9P,KAAK,CAACiX,MAAM,EAAE;MACrD6H,KAAK,EAAE;MAIPj3B,IAAI,GAAG9B,IAAI,KAAA,EAA0B,GAA8B,EAAA,GAAA,EAAA;IACrE;IAEA,IAAI,CAAC04B,QAAQ,CAAC52B,IAAI,EAAEi3B,KAAK,CAAC;EAC5B;EAEAC,kBAAkBA,CAACh5B,IAAY,EAAQ;IAErC,MAAM+pB,IAAI,GAAG,IAAI,CAACkF,KAAK,CAACC,UAAU,CAAC,IAAI,CAACjV,KAAK,CAAC/J,GAAG,GAAG,CAAC,CAAC;IAEtD,IAAI6Z,IAAI,KAAK/pB,IAAI,EAAE;MACjB,IAAI,IAAI,CAACivB,KAAK,CAACC,UAAU,CAAC,IAAI,CAACjV,KAAK,CAAC/J,GAAG,GAAG,CAAC,CAAC,OAAuB,EAAE;QACpE,IAAI,CAACwoB,QAAQ,CAAY,EAAA,EAAA,CAAC,CAAC;MAC7B,CAAC,MAAM;QACL,IAAI,CAACA,QAAQ,CACX14B,IAAI,QAA0B,GAA+B,EAAA,GAAA,EAAA,EAC7D,CACF,CAAC;MACH;MACA;IACF;IAEA,IAAIA,IAAI,QAA0B,EAAE;MAElC,IAAI+pB,IAAI,OAA0B,EAAE;QAClC,IAAI,CAAC2O,QAAQ,CAAc,EAAA,EAAA,CAAC,CAAC;QAC7B;MACF;MAEA,IAEE,IAAI,CAAC5L,SAAS,CAAC,gBAAgB,CAAC,IAChC/C,IAAI,KAAA,GAA8B,EAClC;QACA,IAAI,IAAI,CAACrT,eAAe,CAAC,gBAAgB,EAAE,YAAY,CAAC,KAAK,KAAK,EAAE;UAClE,MAAM,IAAI,CAAC0C,KAAK,CACd9H,MAAM,CAACzH,yCAAyC,EAChD,IAAI,CAACoQ,KAAK,CAAC4X,WAAW,CAAA,CACxB,CAAC;QACH;QACA,IAAI,CAAC5X,KAAK,CAAC/J,GAAG,IAAI,CAAC;QACnB,IAAI,CAACynB,WAAW,CAAA,CAAa,CAAC;QAC9B;MACF;MAGA,IAEE,IAAI,CAAC7K,SAAS,CAAC,gBAAgB,CAAC,IAChC/C,IAAI,KAAA,EAAiC,EACrC;QACA,IAAI,IAAI,CAACrT,eAAe,CAAC,gBAAgB,EAAE,YAAY,CAAC,KAAK,KAAK,EAAE;UAClE,MAAM,IAAI,CAAC0C,KAAK,CACd9H,MAAM,CAAC7G,wCAAwC,EAC/C,IAAI,CAACwP,KAAK,CAAC4X,WAAW,CAAA,CACxB,CAAC;QACH;QACA,IAAI,CAAC5X,KAAK,CAAC/J,GAAG,IAAI,CAAC;QACnB,IAAI,CAACynB,WAAW,CAAA,CAAe,CAAC;QAChC;MACF;IACF;IAEA,IAAI5N,IAAI,OAAuB,EAAE;MAC/B,IAAI,CAAC2O,QAAQ,CAAY,EAAA,EAAA,CAAC,CAAC;MAC3B;IACF;IAEA,IAAI,CAACA,QAAQ,CACX14B,IAAI,QAA0B,GAA+B,EAAA,GAAA,EAAA,EAC7D,CACF,CAAC;EACH;EAEAi5B,eAAeA,CAAAA,EAAS;IACtB,MAAMlP,IAAI,GAAG,IAAI,CAACkF,KAAK,CAACC,UAAU,CAAC,IAAI,CAACjV,KAAK,CAAC/J,GAAG,GAAG,CAAC,CAAC;IAGtD,IAAI6Z,IAAI,OAAuB,IAAI,CAAC,IAAI,CAAC9P,KAAK,CAACiX,MAAM,EAAE;MAIrD,IAAI,CAACwH,QAAQ,CAAe,EAAA,EAAA,CAAC,CAAC;KAC/B,MAEI,IACH3O,IAAI,KAAoB,EAAA,IAGxB,IAAI,CAAC+C,SAAS,CAAC,CACb,kBAAkB,EAClB;MAAEoM,QAAQ,EAAE,MAAM;MAAEC,UAAU,EAAE;IAAM,CAAA,CACvC,CAAC,EACF;MACA,IAAI,CAACT,QAAQ,CAAiB,EAAA,EAAA,CAAC,CAAC;MAGhC,MAAMU,WAAW,GAAG,IAAI,CAACnK,KAAK,CAACoK,WAAW,CAAC,IAAI,CAACpf,KAAK,CAAC/J,GAAG,CAAC;MAC1D,IAAIkpB,WAAW,OAAoB,EAAE;QACnC,IAAI,CAACryB,UAAU,CAAA,CAAE;MACnB;IACF,CAAC,MAEI;MACH,IAAI,CAAC2xB,QAAQ,CAAgB,EAAA,EAAA,CAAC,CAAC;IACjC;EACF;EAEAY,gBAAgBA,CAAAA,EAAS;IACvB,MAAMvP,IAAI,GAAG,IAAI,CAACkF,KAAK,CAACC,UAAU,CAAC,IAAI,CAACjV,KAAK,CAAC/J,GAAG,GAAG,CAAC,CAAC;IAGtD,IACE6Z,IAAI,OAAqB,IACzB,IAAI,CAAC+C,SAAS,CAAC,CACb,kBAAkB,EAClB;MAAEoM,QAAQ,EAAE,MAAM;MAAEC,UAAU,EAAE;IAAM,CAAA,CACvC,CAAC,EACF;MACA,IAAI,CAACT,QAAQ,CAAc,EAAA,EAAA,CAAC,CAAC;IAC/B,CAAC,MAEI;MACH,IAAI,CAACA,QAAQ,CAAQ,EAAA,EAAA,CAAC,CAAC;IACzB;EACF;EAEAa,kBAAkBA,CAACv5B,IAAY,EAAQ;IAErC,MAAM+pB,IAAI,GAAG,IAAI,CAACkF,KAAK,CAACC,UAAU,CAAC,IAAI,CAACjV,KAAK,CAAC/J,GAAG,GAAG,CAAC,CAAC;IAEtD,IAAI6Z,IAAI,KAAK/pB,IAAI,EAAE;MACjB,IAAI,CAAC04B,QAAQ,CAAY,EAAA,EAAA,CAAC,CAAC;MAC3B;IACF;IAEA,IAAI3O,IAAI,OAAuB,EAAE;MAC/B,IAAI,CAAC2O,QAAQ,CAAY,EAAA,EAAA,CAAC,CAAC;IAC7B,CAAC,MAAM;MACL,IAAI,CAACA,QAAQ,CAAa,EAAA,EAAA,CAAC,CAAC;IAC9B;EACF;EAEAc,YAAYA,CAAAA,EAAS;IAEnB,MAAM;MAAEtpB;KAAK,GAAG,IAAI,CAAC+J,KAAK;IAC1B,MAAM8P,IAAI,GAAG,IAAI,CAACkF,KAAK,CAACC,UAAU,CAAChf,GAAG,GAAG,CAAC,CAAC;IAE3C,IAAI6Z,IAAI,OAAuB,EAAE;MAC/B,IAAI,IAAI,CAACkF,KAAK,CAACC,UAAU,CAAChf,GAAG,GAAG,CAAC,CAAC,KAAA,EAAuB,EAAE;QACzD,IAAI,CAACwoB,QAAQ,CAAY,EAAA,EAAA,CAAC,CAAC;QAC3B;MACF;MACA,IAAI,CAACA,QAAQ,CAAe,EAAA,EAAA,CAAC,CAAC;MAC9B;IACF;IAEA,IAAI3O,IAAI,OAAuB,EAAE;MAE/B,IAAI,CAAC2O,QAAQ,CAAgB,EAAA,EAAA,CAAC,CAAC;MAC/B;IACF;IAEA,IAAI,CAACA,QAAQ,CAAQ,EAAA,EAAA,CAAC,CAAC;EACzB;EAEAe,YAAYA,CAAAA,EAAS;IAEnB,MAAM;MAAEvpB;KAAK,GAAG,IAAI,CAAC+J,KAAK;IAC1B,MAAM8P,IAAI,GAAG,IAAI,CAACkF,KAAK,CAACC,UAAU,CAAChf,GAAG,GAAG,CAAC,CAAC;IAE3C,IAAI6Z,IAAI,OAA0B,EAAE;MAClC,MAAM2P,IAAI,GACR,IAAI,CAACzK,KAAK,CAACC,UAAU,CAAChf,GAAG,GAAG,CAAC,CAAC,KAAA,EAA0B,GAAG,CAAC,GAAG,CAAC;MAClE,IAAI,IAAI,CAAC+e,KAAK,CAACC,UAAU,CAAChf,GAAG,GAAGwpB,IAAI,CAAC,KAAA,EAAuB,EAAE;QAC5D,IAAI,CAAChB,QAAQ,CAAA,EAAA,EAAYgB,IAAI,GAAG,CAAC,CAAC;QAClC;MACF;MACA,IAAI,CAAChB,QAAQ,CAAegB,EAAAA,EAAAA,IAAI,CAAC;MACjC;IACF;IAEA,IAAI3P,IAAI,OAAuB,EAAE;MAE/B,IAAI,CAAC2O,QAAQ,CAAgB,EAAA,EAAA,CAAC,CAAC;MAC/B;IACF;IAEA,IAAI,CAACA,QAAQ,CAAQ,EAAA,EAAA,CAAC,CAAC;EACzB;EAEAiB,iBAAiBA,CAAC35B,IAAY,EAAQ;IAEpC,MAAM+pB,IAAI,GAAG,IAAI,CAACkF,KAAK,CAACC,UAAU,CAAC,IAAI,CAACjV,KAAK,CAAC/J,GAAG,GAAG,CAAC,CAAC;IACtD,IAAI6Z,IAAI,OAAuB,EAAE;MAC/B,IAAI,CAAC2O,QAAQ,CAEX,EAAA,EAAA,IAAI,CAACzJ,KAAK,CAACC,UAAU,CAAC,IAAI,CAACjV,KAAK,CAAC/J,GAAG,GAAG,CAAC,CAAC,OAAuB,GAC5D,CAAC,GACD,CACN,CAAC;MACD;IACF;IACA,IAAIlQ,IAAI,KAAA,EAAuB,IAAI+pB,IAAI,OAA0B,EAAE;MAEjE,IAAI,CAAC9P,KAAK,CAAC/J,GAAG,IAAI,CAAC;MACnB,IAAI,CAACynB,WAAW,CAAA,EAAS,CAAC;MAC1B;IACF;IACA,IAAI,CAACe,QAAQ,CAAC14B,IAAI,OAAuB,GAAkB,EAAA,GAAA,EAAA,EAAE,CAAC,CAAC;EACjE;EAEA45B,kBAAkBA,CAAAA,EAAS;IAEzB,MAAM7P,IAAI,GAAG,IAAI,CAACkF,KAAK,CAACC,UAAU,CAAC,IAAI,CAACjV,KAAK,CAAC/J,GAAG,GAAG,CAAC,CAAC;IACtD,MAAM8Z,KAAK,GAAG,IAAI,CAACiF,KAAK,CAACC,UAAU,CAAC,IAAI,CAACjV,KAAK,CAAC/J,GAAG,GAAG,CAAC,CAAC;IACvD,IAAI6Z,IAAI,OAA2B,EAAE;MACnC,IAAIC,KAAK,OAAuB,EAAE;QAEhC,IAAI,CAAC0O,QAAQ,CAAY,EAAA,EAAA,CAAC,CAAC;MAC7B,CAAC,MAAM;QAEL,IAAI,CAACA,QAAQ,CAAuB,EAAA,EAAA,CAAC,CAAC;MACxC;IACF,CAAC,MAAM,IACL3O,IAAI,KAAA,EAAkB,IACtB,EAAEC,KAAK,IAAA,EAAoB,IAAIA,KAAK,IAAoB,EAAA,CAAC,EACzD;MAEA,IAAI,CAAC/P,KAAK,CAAC/J,GAAG,IAAI,CAAC;MACnB,IAAI,CAACynB,WAAW,CAAA,EAAe,CAAC;IAClC,CAAC,MAAM;MACL,EAAE,IAAI,CAAC1d,KAAK,CAAC/J,GAAG;MAChB,IAAI,CAACynB,WAAW,CAAA,EAAY,CAAC;IAC/B;EACF;EAEAC,gBAAgBA,CAAC53B,IAAY,EAAQ;IACnC,QAAQA,IAAI;MAIV,KAAA,EAAA;QACE,IAAI,CAAC24B,aAAa,CAAA,CAAE;QACpB;MAEF,KAAA,EAAA;QACE,EAAE,IAAI,CAAC1e,KAAK,CAAC/J,GAAG;QAChB,IAAI,CAACynB,WAAW,CAAA,EAAU,CAAC;QAC3B;MACF,KAAA,EAAA;QACE,EAAE,IAAI,CAAC1d,KAAK,CAAC/J,GAAG;QAChB,IAAI,CAACynB,WAAW,CAAA,EAAU,CAAC;QAC3B;MACF,KAAA,EAAA;QACE,EAAE,IAAI,CAAC1d,KAAK,CAAC/J,GAAG;QAChB,IAAI,CAACynB,WAAW,CAAA,EAAQ,CAAC;QACzB;MACF,KAAA,EAAA;QACE,EAAE,IAAI,CAAC1d,KAAK,CAAC/J,GAAG;QAChB,IAAI,CAACynB,WAAW,CAAA,EAAS,CAAC;QAC1B;MACF,KAAA,EAAA;QACE,IAEE,IAAI,CAAC7K,SAAS,CAAC,gBAAgB,CAAC,IAChC,IAAI,CAACmC,KAAK,CAACC,UAAU,CAAC,IAAI,CAACjV,KAAK,CAAC/J,GAAG,GAAG,CAAC,CAAC,KAAA,GAA0B,EACnE;UACA,IAAI,IAAI,CAACwG,eAAe,CAAC,gBAAgB,EAAE,YAAY,CAAC,KAAK,KAAK,EAAE;YAClE,MAAM,IAAI,CAAC0C,KAAK,CACd9H,MAAM,CAAC5G,0CAA0C,EACjD,IAAI,CAACuP,KAAK,CAAC4X,WAAW,CAAA,CACxB,CAAC;UACH;UAGA,IAAI,CAAC5X,KAAK,CAAC/J,GAAG,IAAI,CAAC;UACnB,IAAI,CAACynB,WAAW,CAAA,CAAe,CAAC;QAClC,CAAC,MAAM;UACL,EAAE,IAAI,CAAC1d,KAAK,CAAC/J,GAAG;UAChB,IAAI,CAACynB,WAAW,CAAA,CAAY,CAAC;QAC/B;QACA;MACF,KAAA,EAAA;QACE,EAAE,IAAI,CAAC1d,KAAK,CAAC/J,GAAG;QAChB,IAAI,CAACynB,WAAW,CAAA,CAAY,CAAC;QAC7B;MACF,KAAA,GAAA;QACE,IAEE,IAAI,CAAC7K,SAAS,CAAC,gBAAgB,CAAC,IAChC,IAAI,CAACmC,KAAK,CAACC,UAAU,CAAC,IAAI,CAACjV,KAAK,CAAC/J,GAAG,GAAG,CAAC,CAAC,KAAA,GAA0B,EACnE;UACA,IAAI,IAAI,CAACwG,eAAe,CAAC,gBAAgB,EAAE,YAAY,CAAC,KAAK,KAAK,EAAE;YAClE,MAAM,IAAI,CAAC0C,KAAK,CACd9H,MAAM,CAACxH,2CAA2C,EAClD,IAAI,CAACmQ,KAAK,CAAC4X,WAAW,CAAA,CACxB,CAAC;UACH;UAGA,IAAI,CAAC5X,KAAK,CAAC/J,GAAG,IAAI,CAAC;UACnB,IAAI,CAACynB,WAAW,CAAA,CAAa,CAAC;QAChC,CAAC,MAAM;UACL,EAAE,IAAI,CAAC1d,KAAK,CAAC/J,GAAG;UAChB,IAAI,CAACynB,WAAW,CAAA,CAAU,CAAC;QAC7B;QACA;MACF,KAAA,GAAA;QACE,EAAE,IAAI,CAAC1d,KAAK,CAAC/J,GAAG;QAChB,IAAI,CAACynB,WAAW,CAAA,CAAU,CAAC;QAC3B;MAEF,KAAA,EAAA;QACE,IACE,IAAI,CAAC7K,SAAS,CAAC,cAAc,CAAC,IAC9B,IAAI,CAACmC,KAAK,CAACC,UAAU,CAAC,IAAI,CAACjV,KAAK,CAAC/J,GAAG,GAAG,CAAC,CAAC,KAAA,EAAoB,EAC7D;UACA,IAAI,CAACwoB,QAAQ,CAAiB,EAAA,EAAA,CAAC,CAAC;QAClC,CAAC,MAAM;UACL,EAAE,IAAI,CAACze,KAAK,CAAC/J,GAAG;UAChB,IAAI,CAACynB,WAAW,CAAA,EAAS,CAAC;QAC5B;QACA;MAEF,KAAA,EAAA;QACE,IAAI,CAACiC,kBAAkB,CAAA,CAAE;QACzB;MAEF,KAAA,EAAA;QACE,IAAI,CAACC,iBAAiB,CAAA,CAAE;QACxB;MAEF,KAAA,EAAA;QAAuB;UACrB,MAAM9P,IAAI,GAAG,IAAI,CAACkF,KAAK,CAACC,UAAU,CAAC,IAAI,CAACjV,KAAK,CAAC/J,GAAG,GAAG,CAAC,CAAC;UAEtD,IAAI6Z,IAAI,KAAA,GAAyB,IAAIA,IAAI,OAAyB,EAAE;YAClE,IAAI,CAAC+P,eAAe,CAAC,EAAE,CAAC;YACxB;UACF;UAEA,IAAI/P,IAAI,KAAA,GAAyB,IAAIA,IAAI,OAAyB,EAAE;YAClE,IAAI,CAAC+P,eAAe,CAAC,CAAC,CAAC;YACvB;UACF;UAEA,IAAI/P,IAAI,KAAA,EAAyB,IAAIA,IAAI,OAAyB,EAAE;YAClE,IAAI,CAAC+P,eAAe,CAAC,CAAC,CAAC;YACvB;UACF;QACF;MAGA,KAAA,EAAA;MACA,KAAA,EAAA;MACA,KAAA,EAAA;MACA,KAAA,EAAA;MACA,KAAA,EAAA;MACA,KAAA,EAAA;MACA,KAAA,EAAA;MACA,KAAA,EAAA;MACA,KAAA,EAAA;QACE,IAAI,CAAClB,UAAU,CAAC,KAAK,CAAC;QACtB;MAGF,KAAA,EAAA;MACA,KAAA,EAAA;QACE,IAAI,CAACmB,UAAU,CAAC/5B,IAAI,CAAC;QACrB;MAOF,KAAA,EAAA;QACE,IAAI,CAAC64B,eAAe,CAAA,CAAE;QACtB;MAEF,KAAA,EAAA;MACA,KAAA,EAAA;QACE,IAAI,CAACC,qBAAqB,CAAC94B,IAAI,CAAC;QAChC;MAEF,KAAA,GAAA;MACA,KAAA,EAAA;QACE,IAAI,CAACg5B,kBAAkB,CAACh5B,IAAI,CAAC;QAC7B;MAEF,KAAA,EAAA;QACE,IAAI,CAACi5B,eAAe,CAAA,CAAE;QACtB;MAEF,KAAA,EAAA;MACA,KAAA,EAAA;QACE,IAAI,CAACM,kBAAkB,CAACv5B,IAAI,CAAC;QAC7B;MAEF,KAAA,EAAA;QACE,IAAI,CAACw5B,YAAY,CAAA,CAAE;QACnB;MAEF,KAAA,EAAA;QACE,IAAI,CAACC,YAAY,CAAA,CAAE;QACnB;MAEF,KAAA,EAAA;MACA,KAAA,EAAA;QACE,IAAI,CAACE,iBAAiB,CAAC35B,IAAI,CAAC;QAC5B;MAEF,KAAA,GAAA;QACE,IAAI,CAAC04B,QAAQ,CAAW,EAAA,EAAA,CAAC,CAAC;QAC1B;MAEF,KAAA,EAAA;QACE,IAAI,CAACY,gBAAgB,CAAA,CAAE;QACvB;MAEF,KAAA,EAAA;QACE,IAAI,CAACjB,oBAAoB,CAAA,CAAE;QAC3B;MAEF,KAAA,EAAA;QACE,IAAI,CAAC2B,QAAQ,CAAA,CAAE;QACf;MAEF;QACE,IAAIpR,iBAAiB,CAAC5oB,IAAI,CAAC,EAAE;UAC3B,IAAI,CAACg6B,QAAQ,CAACh6B,IAAI,CAAC;UACnB;QACF;IACJ;IAEA,MAAM,IAAI,CAACoZ,KAAK,CACd9H,MAAM,CAACxK,wBAAwB,EAC/B,IAAI,CAACmT,KAAK,CAAC4X,WAAW,EAAE,EACxB;MACE9qB,UAAU,EAAEuN,MAAM,CAACmf,aAAa,CAACzzB,IAAI;IACvC,CACF,CAAC;EACH;EAEA04B,QAAQA,CAAC52B,IAAe,EAAE43B,IAAY,EAAQ;IAC5C,MAAMvG,GAAG,GAAG,IAAI,CAAClE,KAAK,CAAC6C,KAAK,CAAC,IAAI,CAAC7X,KAAK,CAAC/J,GAAG,EAAE,IAAI,CAAC+J,KAAK,CAAC/J,GAAG,GAAGwpB,IAAI,CAAC;IACnE,IAAI,CAACzf,KAAK,CAAC/J,GAAG,IAAIwpB,IAAI;IACtB,IAAI,CAAC/B,WAAW,CAAC71B,IAAI,EAAEqxB,GAAG,CAAC;EAC7B;EAEA8G,UAAUA,CAAAA,EAAS;IACjB,MAAM1hB,QAAQ,GAAG,IAAI,CAAC0B,KAAK,CAAC1B,QAAQ;IACpC,MAAM9Y,KAAK,GAAG,IAAI,CAACwa,KAAK,CAACxa,KAAK,GAAG,CAAC;IAClC,IAAIy6B,OAAO,EAAElP,OAAO;IACpB,IAAI;MAAE9a;KAAK,GAAG,IAAI,CAAC+J,KAAK;IACxB,QAAS,EAAE/J,GAAG,EAAE;MACd,IAAIA,GAAG,IAAI,IAAI,CAACmK,MAAM,EAAE;QAEtB,MAAM,IAAI,CAACjB,KAAK,CACd9H,MAAM,CAAC9E,kBAAkB,EACzB3M,8BAA8B,CAAC0Y,QAAQ,EAAE,CAAC,CAC5C,CAAC;MACH;MACA,MAAM8Z,EAAE,GAAG,IAAI,CAACpD,KAAK,CAACC,UAAU,CAAChf,GAAG,CAAC;MACrC,IAAIyf,SAAS,CAAC0C,EAAE,CAAC,EAAE;QACjB,MAAM,IAAI,CAACjZ,KAAK,CACd9H,MAAM,CAAC9E,kBAAkB,EACzB3M,8BAA8B,CAAC0Y,QAAQ,EAAE,CAAC,CAC5C,CAAC;MACH;MACA,IAAI2hB,OAAO,EAAE;QACXA,OAAO,GAAG,KAAK;MACjB,CAAC,MAAM;QACL,IAAI7H,EAAE,OAAgC,EAAE;UACtCrH,OAAO,GAAG,IAAI;QAChB,CAAC,MAAM,IAAIqH,EAAE,KAAiC,EAAA,IAAIrH,OAAO,EAAE;UACzDA,OAAO,GAAG,KAAK;QAChB,CAAA,MAAM,IAAIqH,EAAE,OAAoB,IAAI,CAACrH,OAAO,EAAE;UAC7C;QACF;QACAkP,OAAO,GAAG7H,EAAE,KAAwB,EAAA;MACtC;IACF;IACA,MAAM8H,OAAO,GAAG,IAAI,CAAClL,KAAK,CAAC6C,KAAK,CAACryB,KAAK,EAAEyQ,GAAG,CAAC;IAC5C,EAAEA,GAAG;IAEL,IAAIkqB,IAAI,GAAG,EAAE;IAEb,MAAM7B,OAAO,GAAGA,CAAAA,KAEd14B,8BAA8B,CAAC0Y,QAAQ,EAAErI,GAAG,GAAG,CAAC,GAAGzQ,KAAK,CAAC;IAE3D,OAAOyQ,GAAG,GAAG,IAAI,CAACmK,MAAM,EAAE;MACxB,MAAM+c,EAAE,GAAG,IAAI,CAACD,cAAc,CAACjnB,GAAG,CAAC;MAEnC,MAAMmqB,IAAI,GAAG/lB,MAAM,CAACwU,YAAY,CAACsO,EAAE,CAAC;MAGpC,IAAI3B,iBAAiB,CAAChM,GAAG,CAAC2N,EAAE,CAAC,EAAE;QAC7B,IAAIA,EAAE,QAAyB,EAAE;UAC/B,IAAIgD,IAAI,CAACE,QAAQ,CAAC,GAAG,CAAC,EAAE;YACtB,IAAI,CAAClhB,KAAK,CAAC9H,MAAM,CAAC1L,yBAAyB,EAAE2yB,OAAO,CAAE,CAAA,CAAC;UACzD;QACF,CAAC,MAAM,IAAInB,EAAE,KAAA,GAAyB,EAAE;UACtC,IAAIgD,IAAI,CAACE,QAAQ,CAAC,GAAG,CAAC,EAAE;YACtB,IAAI,CAAClhB,KAAK,CAAC9H,MAAM,CAAC1L,yBAAyB,EAAE2yB,OAAO,CAAE,CAAA,CAAC;UACzD;QACF;QACA,IAAI6B,IAAI,CAACE,QAAQ,CAACD,IAAI,CAAC,EAAE;UACvB,IAAI,CAACjhB,KAAK,CAAC9H,MAAM,CAACnN,oBAAoB,EAAEo0B,OAAO,CAAE,CAAA,CAAC;QACpD;MACD,CAAA,MAAM,IAAIxP,gBAAgB,CAACqO,EAAE,CAAC,IAAIA,EAAE,KAAA,EAAwB,EAAE;QAC7D,IAAI,CAAChe,KAAK,CAAC9H,MAAM,CAAC7J,oBAAoB,EAAE8wB,OAAO,CAAE,CAAA,CAAC;MACpD,CAAC,MAAM;QACL;MACF;MAEA,EAAEroB,GAAG;MACLkqB,IAAI,IAAIC,IAAI;IACd;IACA,IAAI,CAACpgB,KAAK,CAAC/J,GAAG,GAAGA,GAAG;IAEpB,IAAI,CAACynB,WAAW,CAAY,GAAA,EAAA;MAC1BhkB,OAAO,EAAEwmB,OAAO;MAChBvmB,KAAK,EAAEwmB;IACT,CAAC,CAAC;EACJ;EAWAhG,OAAOA,CACLluB,KAAa,EACb+tB,GAAY,EACZC,QAAiB,GAAG,KAAK,EACzBI,iBAAmC,GAAG,IAAI,EAC3B;IACf,MAAM;MAAEH,CAAC;MAAEjkB;IAAI,CAAC,GAAGkkB,OAAO,CACxB,IAAI,CAACnF,KAAK,EACV,IAAI,CAAChV,KAAK,CAAC/J,GAAG,EACd,IAAI,CAAC+J,KAAK,CAACiW,SAAS,EACpB,IAAI,CAACjW,KAAK,CAACgW,OAAO,EAClB/pB,KAAK,EACL+tB,GAAG,EACHC,QAAQ,EACRI,iBAAiB,EACjB,IAAI,CAACuB,qBAAqB,EACR,KACpB,CAAC;IACD,IAAI,CAAC5b,KAAK,CAAC/J,GAAG,GAAGA,GAAG;IACpB,OAAOikB,CAAC;EACV;EAEA2F,eAAeA,CAAC5zB,KAAa,EAAQ;IACnC,MAAMzG,KAAK,GAAG,IAAI,CAACwa,KAAK,CAAC/J,GAAG;IAC5B,MAAMqI,QAAQ,GAAG,IAAI,CAAC0B,KAAK,CAAC4X,WAAW,CAAA,CAAE;IACzC,IAAI0I,QAAQ,GAAG,KAAK;IAEpB,IAAI,CAACtgB,KAAK,CAAC/J,GAAG,IAAI,CAAC;IACnB,MAAM4kB,GAAG,GAAG,IAAI,CAACV,OAAO,CAACluB,KAAK,CAAC;IAC/B,IAAI4uB,GAAG,IAAI,IAAI,EAAE;MACf,IAAI,CAAC1b,KAAK,CACR9H,MAAM,CAACrL,YAAY,EAEnBpG,8BAA8B,CAAC0Y,QAAQ,EAAE,CAAC,CAAC,EAC3C;QACErS;MACF,CACF,CAAC;IACH;IACA,MAAM6jB,IAAI,GAAG,IAAI,CAACkF,KAAK,CAACC,UAAU,CAAC,IAAI,CAACjV,KAAK,CAAC/J,GAAG,CAAC;IAElD,IAAI6Z,IAAI,QAAyB,EAAE;MACjC,EAAE,IAAI,CAAC9P,KAAK,CAAC/J,GAAG;MAChBqqB,QAAQ,GAAG,IAAI;IACjB,CAAC,MAAM,IAAIxQ,IAAI,KAAA,GAAyB,EAAE;MACxC,MAAM,IAAI,CAAC3Q,KAAK,CAAC9H,MAAM,CAACtL,cAAc,EAAEuS,QAAQ,CAAC;IACnD;IAEA,IAAIqQ,iBAAiB,CAAC,IAAI,CAACuO,cAAc,CAAC,IAAI,CAACld,KAAK,CAAC/J,GAAG,CAAC,CAAC,EAAE;MAC1D,MAAM,IAAI,CAACkJ,KAAK,CAAC9H,MAAM,CAACpI,gBAAgB,EAAE,IAAI,CAAC+Q,KAAK,CAAC4X,WAAW,CAAA,CAAE,CAAC;IACrE;IAEA,IAAI0I,QAAQ,EAAE;MACZ,MAAMpH,GAAG,GAAG,IAAI,CAAClE,KAAK,CAAC6C,KAAK,CAACryB,KAAK,EAAE,IAAI,CAACwa,KAAK,CAAC/J,GAAG,CAAC,CAACsqB,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;MACxE,IAAI,CAAC7C,WAAW,CAAYxE,GAAAA,EAAAA,GAAG,CAAC;MAChC;IACF;IAEA,IAAI,CAACwE,WAAW,CAAS7C,GAAAA,EAAAA,GAAG,CAAC;EAC/B;EAIA8D,UAAUA,CAAC6B,aAAsB,EAAQ;IACvC,MAAMh7B,KAAK,GAAG,IAAI,CAACwa,KAAK,CAAC/J,GAAG;IAC5B,MAAMqI,QAAQ,GAAG,IAAI,CAAC0B,KAAK,CAAC4X,WAAW,CAAA,CAAE;IACzC,IAAI6I,OAAO,GAAG,KAAK;IACnB,IAAIH,QAAQ,GAAG,KAAK;IACpB,IAAII,WAAW,GAAG,KAAK;IACvB,IAAIC,OAAO,GAAG,KAAK;IAEnB,IAAI,CAACH,aAAa,IAAI,IAAI,CAACrG,OAAO,CAAC,EAAE,CAAC,KAAK,IAAI,EAAE;MAC/C,IAAI,CAAChb,KAAK,CAAC9H,MAAM,CAAC1K,aAAa,EAAE,IAAI,CAACqT,KAAK,CAAC4X,WAAW,CAAA,CAAE,CAAC;IAC5D;IACA,MAAMgJ,cAAc,GAClB,IAAI,CAAC5gB,KAAK,CAAC/J,GAAG,GAAGzQ,KAAK,IAAI,CAAC,IAC3B,IAAI,CAACwvB,KAAK,CAACC,UAAU,CAACzvB,KAAK,CAAC,KAAqB,EAAA;IAEnD,IAAIo7B,cAAc,EAAE;MAClB,MAAMC,OAAO,GAAG,IAAI,CAAC7L,KAAK,CAAC6C,KAAK,CAACryB,KAAK,EAAE,IAAI,CAACwa,KAAK,CAAC/J,GAAG,CAAC;MACvD,IAAI,CAAC+lB,sBAAsB,CAAC3kB,MAAM,CAAC7D,kBAAkB,EAAE8K,QAAQ,CAAC;MAChE,IAAI,CAAC,IAAI,CAAC0B,KAAK,CAACgP,MAAM,EAAE;QAEtB,MAAM8R,aAAa,GAAGD,OAAO,CAACxF,OAAO,CAAC,GAAG,CAAC;QAC1C,IAAIyF,aAAa,GAAG,CAAC,EAAE;UAErB,IAAI,CAAC3hB,KAAK,CACR9H,MAAM,CAACtE,yBAAyB,EAChCnN,8BAA8B,CAAC0Y,QAAQ,EAAEwiB,aAAa,CACxD,CAAC;QACH;MACF;MACAH,OAAO,GAAGC,cAAc,IAAI,CAAC,MAAM,CAAChS,IAAI,CAACiS,OAAO,CAAC;IACnD;IAEA,IAAI/Q,IAAI,GAAG,IAAI,CAACkF,KAAK,CAACC,UAAU,CAAC,IAAI,CAACjV,KAAK,CAAC/J,GAAG,CAAC;IAChD,IAAI6Z,IAAI,KAAA,EAAkB,IAAI,CAAC6Q,OAAO,EAAE;MACtC,EAAE,IAAI,CAAC3gB,KAAK,CAAC/J,GAAG;MAChB,IAAI,CAACkkB,OAAO,CAAC,EAAE,CAAC;MAChBsG,OAAO,GAAG,IAAI;MACd3Q,IAAI,GAAG,IAAI,CAACkF,KAAK,CAACC,UAAU,CAAC,IAAI,CAACjV,KAAK,CAAC/J,GAAG,CAAC;IAC9C;IAEA,IACE,CAAC6Z,IAAI,KAAyB,EAAA,IAAIA,IAAI,KAAyB,GAAA,KAC/D,CAAC6Q,OAAO,EACR;MACA7Q,IAAI,GAAG,IAAI,CAACkF,KAAK,CAACC,UAAU,CAAC,EAAE,IAAI,CAACjV,KAAK,CAAC/J,GAAG,CAAC;MAC9C,IAAI6Z,IAAI,KAAA,EAAuB,IAAIA,IAAI,OAAmB,EAAE;QAC1D,EAAE,IAAI,CAAC9P,KAAK,CAAC/J,GAAG;MAClB;MACA,IAAI,IAAI,CAACkkB,OAAO,CAAC,EAAE,CAAC,KAAK,IAAI,EAAE;QAC7B,IAAI,CAAChb,KAAK,CAAC9H,MAAM,CAACzK,wBAAwB,EAAE0R,QAAQ,CAAC;MACvD;MACAmiB,OAAO,GAAG,IAAI;MACdC,WAAW,GAAG,IAAI;MAClB5Q,IAAI,GAAG,IAAI,CAACkF,KAAK,CAACC,UAAU,CAAC,IAAI,CAACjV,KAAK,CAAC/J,GAAG,CAAC;IAC9C;IAEA,IAAI6Z,IAAI,QAAyB,EAAE;MAGjC,IAAI2Q,OAAO,IAAIG,cAAc,EAAE;QAC7B,IAAI,CAACzhB,KAAK,CAAC9H,MAAM,CAACzL,oBAAoB,EAAE0S,QAAQ,CAAC;MACnD;MACA,EAAE,IAAI,CAAC0B,KAAK,CAAC/J,GAAG;MAChBqqB,QAAQ,GAAG,IAAI;IACjB;IAEA,IAAqCxQ,IAAI,QAAyB,EAAE;MAClE,IAAI,CAACyO,YAAY,CAAC,SAAS,EAAE,IAAI,CAACve,KAAK,CAAC4X,WAAW,CAAA,CAAE,CAAC;MACtD,IAAI8I,WAAW,IAAIE,cAAc,EAAE;QACjC,IAAI,CAACzhB,KAAK,CAAC9H,MAAM,CAACtL,cAAc,EAAEuS,QAAQ,CAAC;MAC7C;MACA,EAAE,IAAI,CAAC0B,KAAK,CAAC/J,GAAG;MAEhB,IAAI8qB,SAAS,GAAG,IAAI;IACtB;IAEA,IAAIpS,iBAAiB,CAAC,IAAI,CAACuO,cAAc,CAAC,IAAI,CAACld,KAAK,CAAC/J,GAAG,CAAC,CAAC,EAAE;MAC1D,MAAM,IAAI,CAACkJ,KAAK,CAAC9H,MAAM,CAACpI,gBAAgB,EAAE,IAAI,CAAC+Q,KAAK,CAAC4X,WAAW,CAAA,CAAE,CAAC;IACrE;IAGA,MAAMsB,GAAG,GAAG,IAAI,CAAClE,KAAK,CAAC6C,KAAK,CAACryB,KAAK,EAAE,IAAI,CAACwa,KAAK,CAAC/J,GAAG,CAAC,CAACsqB,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;IAEzE,IAAID,QAAQ,EAAE;MACZ,IAAI,CAAC5C,WAAW,CAAYxE,GAAAA,EAAAA,GAAG,CAAC;MAChC;IACF;IAEA,IAAqC6H,SAAS,EAAE;MAC9C,IAAI,CAACrD,WAAW,CAAaxE,GAAAA,EAAAA,GAAG,CAAC;MACjC;IACF;IAEA,MAAM2B,GAAG,GAAG8F,OAAO,GAAG5G,QAAQ,CAACb,GAAG,EAAE,CAAC,CAAC,GAAG8H,UAAU,CAAC9H,GAAG,CAAC;IACxD,IAAI,CAACwE,WAAW,CAAS7C,GAAAA,EAAAA,GAAG,CAAC;EAC/B;EAIAtB,aAAaA,CAACF,cAAuB,EAAiB;IACpD,MAAM;MAAEtzB,IAAI;MAAEkQ;IAAI,CAAC,GAAGsjB,aAAa,CACjC,IAAI,CAACvE,KAAK,EACV,IAAI,CAAChV,KAAK,CAAC/J,GAAG,EACd,IAAI,CAAC+J,KAAK,CAACiW,SAAS,EACpB,IAAI,CAACjW,KAAK,CAACgW,OAAO,EAClBqD,cAAc,EACd,IAAI,CAACyC,2BACP,CAAC;IACD,IAAI,CAAC9b,KAAK,CAAC/J,GAAG,GAAGA,GAAG;IACpB,OAAOlQ,IAAI;EACb;EAEA+5B,UAAUA,CAACmB,KAAa,EAAQ;IAC9B,MAAM;MAAE/H,GAAG;MAAEjjB,GAAG;MAAE+f,OAAO;MAAEC;IAAU,CAAC,GAAGsC,kBAAkB,CACzD0I,KAAK,KAAA,EAA4B,GAAG,QAAQ,GAAG,QAAQ,EACvD,IAAI,CAACjM,KAAK,EACV,IAAI,CAAChV,KAAK,CAAC/J,GAAG,GAAG,CAAC,EAClB,IAAI,CAAC+J,KAAK,CAACiW,SAAS,EACpB,IAAI,CAACjW,KAAK,CAACgW,OAAO,EAClB,IAAI,CAAC+F,uCACP,CAAC;IACD,IAAI,CAAC/b,KAAK,CAAC/J,GAAG,GAAGA,GAAG,GAAG,CAAC;IACxB,IAAI,CAAC+J,KAAK,CAACiW,SAAS,GAAGA,SAAS;IAChC,IAAI,CAACjW,KAAK,CAACgW,OAAO,GAAGA,OAAO;IAC5B,IAAI,CAAC0H,WAAW,CAAYxE,GAAAA,EAAAA,GAAG,CAAC;EAClC;EAGAgI,wBAAwBA,CAAAA,EAAS;IAC/B,IAAI,CAAC,IAAI,CAACvH,KAAK,CAAA,CAAU,CAAC,EAAE;MAC1B,IAAI,CAAC7sB,UAAU,CAAC,IAAI,GAAW,CAAC;IAClC;IAEA,IAAI,CAACkT,KAAK,CAAC/J,GAAG,EAAE;IAChB,IAAI,CAAC2pB,iBAAiB,CAAA,CAAE;EAC1B;EAGAA,iBAAiBA,CAAAA,EAAS;IACxB,MAAMuB,OAAO,GAAG,IAAI,CAACnM,KAAK,CAAC,IAAI,CAAChV,KAAK,CAAC/J,GAAG,CAAC;IAC1C,MAAM;MAAEijB,GAAG;MAAEN,eAAe;MAAE3iB,GAAG;MAAE+f,OAAO;MAAEC;IAAU,CAAC,GACrDsC,kBAAkB,CAChB,UAAU,EACV,IAAI,CAACvD,KAAK,EACV,IAAI,CAAChV,KAAK,CAAC/J,GAAG,GAAG,CAAC,EAClB,IAAI,CAAC+J,KAAK,CAACiW,SAAS,EACpB,IAAI,CAACjW,KAAK,CAACgW,OAAO,EAClB,IAAI,CAACiG,yCACP,CAAC;IACH,IAAI,CAACjc,KAAK,CAAC/J,GAAG,GAAGA,GAAG,GAAG,CAAC;IACxB,IAAI,CAAC+J,KAAK,CAACiW,SAAS,GAAGA,SAAS;IAChC,IAAI,CAACjW,KAAK,CAACgW,OAAO,GAAGA,OAAO;IAE5B,IAAI4C,eAAe,EAAE;MACnB,IAAI,CAAC5Y,KAAK,CAAC2W,6BAA6B,GAAG,IAAI1xB,QAAQ,CACrD2zB,eAAe,CAAC5C,OAAO,EACvB4C,eAAe,CAAC3iB,GAAG,GAAG2iB,eAAe,CAAC3C,SAAS,EAC/C,IAAI,CAACxD,iBAAiB,CAACmG,eAAe,CAAC3iB,GAAG,CAC5C,CAAC;IACH;IAEA,IAAI,IAAI,CAAC+e,KAAK,CAACoK,WAAW,CAACnpB,GAAG,CAAC,KAAA,EAA0B,EAAE;MACzD,IAAI,CAACynB,WAAW,CAEd9E,EAAAA,EAAAA,eAAe,GAAG,IAAI,GAAGuI,OAAO,GAAGjI,GAAG,GAAG,GAC3C,CAAC;IACH,CAAC,MAAM;MACL,IAAI,CAAClZ,KAAK,CAAC/J,GAAG,EAAE;MAChB,IAAI,CAACynB,WAAW,CAEd9E,EAAAA,EAAAA,eAAe,GAAG,IAAI,GAAGuI,OAAO,GAAGjI,GAAG,GAAG,IAC3C,CAAC;IACH;EACF;EAEA8C,sBAAsBA,CAACuB,YAAiC,EAAE9X,EAAY,EAAE;IACtE,MAAMpgB,KAAK,GAAGogB,EAAE,CAACpgB,KAAK;IAEtB,IAAI,IAAI,CAAC2a,KAAK,CAACgP,MAAM,IAAI,CAAC,IAAI,CAAChP,KAAK,CAAC4W,YAAY,CAACpH,GAAG,CAACnqB,KAAK,CAAC,EAAE;MAC5D,IAAI,CAAC8Z,KAAK,CAACoe,YAAY,EAAE9X,EAAE,CAAC;IAC9B,CAAC,MAAM;MACL,IAAI,CAACzF,KAAK,CAAC4W,YAAY,CAACrgB,GAAG,CAAClR,KAAK,EAAE,CAACk4B,YAAY,EAAE9X,EAAE,CAAC,CAAC;IACxD;EACF;EAWA+Y,SAASA,CAAC4C,SAAkB,EAAU;IACpC,IAAI,CAACphB,KAAK,CAAC0X,WAAW,GAAG,KAAK;IAC9B,IAAIrI,IAAI,GAAG,EAAE;IACb,MAAM7pB,KAAK,GAAG,IAAI,CAACwa,KAAK,CAAC/J,GAAG;IAC5B,IAAI4iB,UAAU,GAAG,IAAI,CAAC7Y,KAAK,CAAC/J,GAAG;IAC/B,IAAImrB,SAAS,KAAK3pB,SAAS,EAAE;MAC3B,IAAI,CAACuI,KAAK,CAAC/J,GAAG,IAAImrB,SAAS,IAAI,MAAM,GAAG,CAAC,GAAG,CAAC;IAC/C;IAEA,OAAO,IAAI,CAACphB,KAAK,CAAC/J,GAAG,GAAG,IAAI,CAACmK,MAAM,EAAE;MACnC,MAAMgY,EAAE,GAAG,IAAI,CAAC8E,cAAc,CAAC,IAAI,CAACld,KAAK,CAAC/J,GAAG,CAAC;MAC9C,IAAI6Y,gBAAgB,CAACsJ,EAAE,CAAC,EAAE;QACxB,IAAI,CAACpY,KAAK,CAAC/J,GAAG,IAAImiB,EAAE,IAAI,MAAM,GAAG,CAAC,GAAG,CAAC;MACxC,CAAC,MAAM,IAAIA,EAAE,KAAA,EAAwB,EAAE;QACrC,IAAI,CAACpY,KAAK,CAAC0X,WAAW,GAAG,IAAI;QAE7BrI,IAAI,IAAI,IAAI,CAAC2F,KAAK,CAAC6C,KAAK,CAACgB,UAAU,EAAE,IAAI,CAAC7Y,KAAK,CAAC/J,GAAG,CAAC;QACpD,MAAMorB,QAAQ,GAAG,IAAI,CAACrhB,KAAK,CAAC4X,WAAW,CAAA,CAAE;QACzC,MAAM0J,eAAe,GACnB,IAAI,CAACthB,KAAK,CAAC/J,GAAG,KAAKzQ,KAAK,GAAGmpB,iBAAiB,GAAGG,gBAAgB;QAEjE,IAAI,IAAI,CAACkG,KAAK,CAACC,UAAU,CAAC,EAAE,IAAI,CAACjV,KAAK,CAAC/J,GAAG,CAAC,QAAyB,EAAE;UACpE,IAAI,CAACkJ,KAAK,CAAC9H,MAAM,CAACjJ,oBAAoB,EAAE,IAAI,CAAC4R,KAAK,CAAC4X,WAAW,CAAA,CAAE,CAAC;UACjEiB,UAAU,GAAG,IAAI,CAAC7Y,KAAK,CAAC/J,GAAG,GAAG,CAAC;UAC/B;QACF;QAEA,EAAE,IAAI,CAAC+J,KAAK,CAAC/J,GAAG;QAChB,MAAMsrB,GAAG,GAAG,IAAI,CAAChI,aAAa,CAAC,IAAI,CAAC;QACpC,IAAIgI,GAAG,KAAK,IAAI,EAAE;UAChB,IAAI,CAACD,eAAe,CAACC,GAAG,CAAC,EAAE;YACzB,IAAI,CAACpiB,KAAK,CAAC9H,MAAM,CAAC/M,0BAA0B,EAAE+2B,QAAQ,CAAC;UACzD;UAEAhS,IAAI,IAAIhV,MAAM,CAACmf,aAAa,CAAC+H,GAAG,CAAC;QACnC;QACA1I,UAAU,GAAG,IAAI,CAAC7Y,KAAK,CAAC/J,GAAG;MAC7B,CAAC,MAAM;QACL;MACF;IACF;IACA,OAAOoZ,IAAI,GAAG,IAAI,CAAC2F,KAAK,CAAC6C,KAAK,CAACgB,UAAU,EAAE,IAAI,CAAC7Y,KAAK,CAAC/J,GAAG,CAAC;EAC5D;EAKA8pB,QAAQA,CAACqB,SAAkB,EAAQ;IACjC,MAAM/R,IAAI,GAAG,IAAI,CAACmP,SAAS,CAAC4C,SAAS,CAAC;IACtC,MAAMv5B,IAAI,GAAG25B,UAAY,CAAClrB,GAAG,CAAC+Y,IAAI,CAAC;IACnC,IAAIxnB,IAAI,KAAK4P,SAAS,EAAE;MAGtB,IAAI,CAACimB,WAAW,CAAC71B,IAAI,EAAE8lB,cAAc,CAAC9lB,IAAI,CAAC,CAAC;IAC9C,CAAC,MAAM;MACL,IAAI,CAAC61B,WAAW,CAAUrO,GAAAA,EAAAA,IAAI,CAAC;IACjC;EACF;EAEA8M,mBAAmBA,CAAAA,EAAS;IAC1B,MAAM;MAAEt0B;KAAM,GAAG,IAAI,CAACmY,KAAK;IAC3B,IAAIqN,cAAc,CAACxlB,IAAI,CAAC,IAAI,IAAI,CAACmY,KAAK,CAAC0X,WAAW,EAAE;MAClD,IAAI,CAACvY,KAAK,CAAC9H,MAAM,CAACjL,0BAA0B,EAAE,IAAI,CAAC4T,KAAK,CAAC1B,QAAQ,EAAE;QACjEjS,YAAY,EAAEshB,cAAc,CAAC9lB,IAAI;MACnC,CAAC,CAAC;IACJ;EACF;EAcAsX,KAAKA,CACHoe,YAAiD,EACjD9X,EAA2B,EAC3B3P,OAAqB,GAAG,CAAA,CAAkB,EAChB;IAC1B,MAAMD,GAAG,GAAG4P,EAAE,YAAYxgB,QAAQ,GAAGwgB,EAAE,GAAGA,EAAE,CAAC5P,GAAG,CAACrQ,KAAK;IACtD,MAAMuQ,KAAK,GAAGwnB,YAAY,CAAC1nB,GAAG,EAAEC,OAAO,CAAC;IAExC,IAAI,EAAE,IAAI,CAAC0D,WAAW,OAA4B,CAAC,EAAE,MAAMzD,KAAK;IAChE,IAAI,CAAC,IAAI,CAAC4lB,WAAW,EAAE,IAAI,CAAC3b,KAAK,CAACkW,MAAM,CAACzS,IAAI,CAAC1N,KAAK,CAAC;IAEpD,OAAOA,KAAK;EACd;EAQA0rB,cAAcA,CACZlE,YAAiD,EACjD9X,EAA2B,EAC3B3P,OAAqB,GAAG,CAAA,CAAkB,EACR;IAClC,MAAMD,GAAG,GAAG4P,EAAE,YAAYxgB,QAAQ,GAAGwgB,EAAE,GAAGA,EAAE,CAAC5P,GAAG,CAACrQ,KAAK;IACtD,MAAMyQ,GAAG,GAAGJ,GAAG,CAACxQ,KAAK;IACrB,MAAM6wB,MAAM,GAAG,IAAI,CAAClW,KAAK,CAACkW,MAAM;IAEhC,KAAK,IAAIxH,CAAC,GAAGwH,MAAM,CAAC9V,MAAM,GAAG,CAAC,EAAEsO,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC3C,MAAM3Y,KAAK,GAAGmgB,MAAM,CAACxH,CAAC,CAAC;MACvB,IAAI3Y,KAAK,CAACF,GAAG,CAACxQ,KAAK,KAAK4Q,GAAG,EAAE;QAC3B,OAAQigB,MAAM,CAACxH,CAAC,CAAC,GAAG6O,YAAY,CAAC1nB,GAAG,EAAEC,OAAO,CAAC;MAChD;MACA,IAAIC,KAAK,CAACF,GAAG,CAACxQ,KAAK,GAAG4Q,GAAG,EAAE;IAC7B;IAEA,OAAO,IAAI,CAACkJ,KAAK,CAACoe,YAAY,EAAE9X,EAAE,EAAE3P,OAAO,CAAC;EAC9C;EAIA0M,aAAaA,CAAC0b,QAAmB,EAAQ,CAAC;EAG1CpxB,UAAUA,CAAC+I,GAAqB,EAAEhO,IAAgB,EAAQ;IACxD,MAAM,IAAI,CAACsX,KAAK,CACd9H,MAAM,CAAC7F,eAAe,EACtBqE,GAAG,IAAI,IAAI,GAAGA,GAAG,GAAG,IAAI,CAACmK,KAAK,CAAC1B,QAAQ,EACvC;MACE7M,QAAQ,EAAE5J,IAAI,GAAG8lB,cAAc,CAAC9lB,IAAI,CAAC,GAAG;IAC1C,CACF,CAAC;EACH;EAEA02B,YAAYA,CAACxL,UAAkB,EAAEld,GAAc,EAAQ;IACrD,IAAI,IAAI,CAACgd,SAAS,CAACE,UAAU,CAAC,EAAE;MAC9B,OAAO,IAAI;IACb;IAEA,MAAM,IAAI,CAAC5T,KAAK,CACd9H,MAAM,CAACzJ,aAAa,EACpBiI,GAAG,IAAI,IAAI,GAAGA,GAAG,GAAG,IAAI,CAACmK,KAAK,CAAC1B,QAAQ,EACvC;MACEzQ,aAAa,EAAE,CAACklB,UAAU;IAC5B,CACF,CAAC;EACH;EAEA2O,eAAeA,CAACC,WAAqB,EAAQ;IAC3C,IAAI,CAACA,WAAW,CAACC,IAAI,CAAC7zB,IAAI,IAAI,IAAI,CAAC8kB,SAAS,CAAC9kB,IAAI,CAAC,CAAC,EAAE;MACnD,MAAM,IAAI,CAACoR,KAAK,CAAC9H,MAAM,CAAClJ,mBAAmB,EAAE,IAAI,CAAC6R,KAAK,CAAC1B,QAAQ,EAAE;QAChEzQ,aAAa,EAAE8zB;MACjB,CAAC,CAAC;IACJ;EACF;EAEA9F,YAAYA,CAAC9lB,KAAoC,EAAE;IACjD,OAAO,CAACE,GAAW,EAAEggB,SAAiB,EAAED,OAAe,KAAK;MAC1D,IAAI,CAAC7W,KAAK,CAACpJ,KAAK,EAAEwlB,aAAa,CAACtlB,GAAG,EAAEggB,SAAS,EAAED,OAAO,CAAC,CAAC;KAC1D;EACH;AAoDF;ACllDO,MAAM6L,UAAU,CAAC;EAAA38B,WAAAA,CAAA,EAAA;IAAA,IAAA,CAEtB48B,YAAY,GAAgB,IAAInuB,GAAG,EAAE;IAAA,IAAA,CAGrCouB,aAAa,GAAkC,IAAIrf,GAAG,EAAE;IAAA,IAAA,CAIxDsf,qBAAqB,GAA0B,IAAItf,GAAG,EAAE;EAAA;AAC1D;AAEe,MAAMuf,iBAAiB,CAAC;EAKrC/8B,WAAWA,CAACorB,MAAiB,EAAE;IAAA,IAAA,CAJ/BA,MAAM,GAAA,KAAA,CAAA;IAAA,IACN4R,CAAAA,KAAK,GAAsB,EAAE;IAAA,IAAA,CAC7BF,qBAAqB,GAA0B,IAAItf,GAAG,EAAE;IAGtD,IAAI,CAAC4N,MAAM,GAAGA,MAAM;EACtB;EAEAT,OAAOA,CAAAA,EAAe;IACpB,OAAO,IAAI,CAACqS,KAAK,CAAC,IAAI,CAACA,KAAK,CAAC9hB,MAAM,GAAG,CAAC,CAAC;EAC1C;EAEAmR,KAAKA,CAAAA,EAAG;IACN,IAAI,CAAC2Q,KAAK,CAACze,IAAI,CAAC,IAAIoe,UAAU,CAAE,CAAA,CAAC;EACnC;EAEArQ,IAAIA,CAAAA,EAAG;IACL,MAAM2Q,aAAa,GAAG,IAAI,CAACD,KAAK,CAACjU,GAAG,CAAA,CAAE;IAKtC,MAAM4B,OAAO,GAAG,IAAI,CAACA,OAAO,EAAE;IAG9B,KAAK,MAAM,CAAC9hB,IAAI,EAAE8H,GAAG,CAAC,IAAIc,KAAK,CAACyrB,IAAI,CAACD,aAAa,CAACH,qBAAqB,CAAC,EAAE;MACzE,IAAInS,OAAO,EAAE;QACX,IAAI,CAACA,OAAO,CAACmS,qBAAqB,CAACxS,GAAG,CAACzhB,IAAI,CAAC,EAAE;UAC5C8hB,OAAO,CAACmS,qBAAqB,CAACzrB,GAAG,CAACxI,IAAI,EAAE8H,GAAG,CAAC;QAC9C;MACF,CAAC,MAAM;QACL,IAAI,CAACya,MAAM,CAACnR,KAAK,CAAC9H,MAAM,CAACrK,6BAA6B,EAAE6I,GAAG,EAAE;UAC3DlQ,cAAc,EAAEoI;QAClB,CAAC,CAAC;MACJ;IACF;EACF;EAEAs0B,kBAAkBA,CAChBt0B,IAAY,EACZu0B,WAA6B,EAC7BzsB,GAAa,EACb;IACA,MAAM;MAAEisB,YAAY;MAAEC,aAAa;MAAEC;IAAsB,CAAC,GAC1D,IAAI,CAACnS,OAAO,EAAE;IAChB,IAAI0S,SAAS,GAAGT,YAAY,CAACtS,GAAG,CAACzhB,IAAI,CAAC;IAEtC,IAAIu0B,WAAW,IAAiC,EAAE;MAChD,MAAME,QAAQ,GAAGD,SAAS,IAAIR,aAAa,CAACzrB,GAAG,CAACvI,IAAI,CAAC;MACrD,IAAIy0B,QAAQ,EAAE;QACZ,MAAMC,SAAS,GAAGD,QAAQ,IAA+B;QACzD,MAAME,SAAS,GAAGJ,WAAW,IAA+B;QAE5D,MAAMK,OAAO,GAAGH,QAAQ,IAAiC;QACzD,MAAMI,OAAO,GAAGN,WAAW,IAAiC;QAK5DC,SAAS,GAAGI,OAAO,KAAKC,OAAO,IAAIH,SAAS,KAAKC,SAAS;QAE1D,IAAI,CAACH,SAAS,EAAER,aAAa,CAACjQ,MAAM,CAAC/jB,IAAI,CAAC;MAC5C,CAAC,MAAM,IAAI,CAACw0B,SAAS,EAAE;QACrBR,aAAa,CAACxrB,GAAG,CAACxI,IAAI,EAAEu0B,WAAW,CAAC;MACtC;IACF;IAEA,IAAIC,SAAS,EAAE;MACb,IAAI,CAACjS,MAAM,CAACnR,KAAK,CAAC9H,MAAM,CAAC1H,wBAAwB,EAAEkG,GAAG,EAAE;QACtDlQ,cAAc,EAAEoI;MAClB,CAAC,CAAC;IACJ;IAEA+zB,YAAY,CAACzP,GAAG,CAACtkB,IAAI,CAAC;IACtBi0B,qBAAqB,CAAClQ,MAAM,CAAC/jB,IAAI,CAAC;EACpC;EAEAiR,cAAcA,CAACjR,IAAY,EAAE8H,GAAa,EAAE;IAC1C,IAAIkJ,UAAU;IACd,KAAKA,UAAU,IAAI,IAAI,CAACmjB,KAAK,EAAE;MAC7B,IAAInjB,UAAU,CAAC+iB,YAAY,CAACtS,GAAG,CAACzhB,IAAI,CAAC,EAAE;IACzC;IAEA,IAAIgR,UAAU,EAAE;MACdA,UAAU,CAACijB,qBAAqB,CAACzrB,GAAG,CAACxI,IAAI,EAAE8H,GAAG,CAAC;IACjD,CAAC,MAAM;MAEL,IAAI,CAACya,MAAM,CAACnR,KAAK,CAAC9H,MAAM,CAACrK,6BAA6B,EAAE6I,GAAG,EAAE;QAC3DlQ,cAAc,EAAEoI;MAClB,CAAC,CAAC;IACJ;EACF;AACF;ACtDA,MAAM80B,eAAe,CAAC;EAGpB39B,WAAWA,CAAC2C,IAAyB,GAAA,CAAkC,EAAE;IACvE,IAAI,CAACA,IAAI,GAAGA,IAAI;EAClB;EAEAi7B,8BAA8BA,CAAAA,EAAkC;IAC9D,OACE,IAAI,CAACj7B,IAAI,KAAA,CAA6D,IACtE,IAAI,CAACA,IAAI,KAAwD,CAAA;EAErE;EAEAk7B,+BAA+BA,CAAAA,EAAG;IAChC,OAAO,IAAI,CAACl7B,IAAI,KAA8C,CAAA;EAChE;AACF;AAUA,MAAMm7B,qBAAqB,SAASH,eAAe,CAAC;EAGlD39B,WAAWA,CACT2C,IAE4D,EAC5D;IACA,KAAK,CAACA,IAAI,CAAC;IAAC,IAAA,CAPdo7B,iBAAiB,GACf,IAAIvgB,GAAG,EAAE;EAOX;EACAwgB,sBAAsBA,CACpBC,iBAAgD,EAChD1d,EAAY,EACZ;IACA,MAAMpgB,KAAK,GAAGogB,EAAE,CAACpgB,KAAK;IAEtB,IAAI,CAAC49B,iBAAiB,CAAC1sB,GAAG,CAAClR,KAAK,EAAE,CAAC89B,iBAAiB,EAAE1d,EAAE,CAAC,CAAC;EAC5D;EACA2d,qBAAqBA,CAAC/9B,KAAa,EAAE;IACnC,IAAI,CAAC49B,iBAAiB,CAACnR,MAAM,CAACzsB,KAAK,CAAC;EACtC;EACAg+B,aAAaA,CACXC,QAAmE,EACnE;IACA,IAAI,CAACL,iBAAiB,CAAC3F,OAAO,CAACgG,QAAQ,CAAC;EAC1C;AACF;AAEe,MAAMC,sBAAsB,CAAC;EAI1Cr+B,WAAWA,CAACorB,MAAiB,EAAE;IAAA,IAAA,CAH/BA,MAAM,GAAA,KAAA,CAAA;IAAA,IAAA,CACN4R,KAAK,GAA2B,CAAC,IAAIW,eAAe,CAAE,CAAA,CAAC;IAGrD,IAAI,CAACvS,MAAM,GAAGA,MAAM;EACtB;EACAiB,KAAKA,CAACE,KAAsB,EAAE;IAC5B,IAAI,CAACyQ,KAAK,CAACze,IAAI,CAACgO,KAAK,CAAC;EACxB;EAEAD,IAAIA,CAAAA,EAAG;IACL,IAAI,CAAC0Q,KAAK,CAACjU,GAAG,EAAE;EAClB;EASAuV,+BAA+BA,CAC7BjG,YAAuD,EACvD31B,IAAU,EACJ;IACN,MAAM67B,MAAM,GAAG77B,IAAI,CAACiO,GAAG,CAACrQ,KAAK;IAC7B,MAAM;MAAE08B;IAAO,CAAA,GAAG,IAAI;IACtB,IAAIxT,CAAC,GAAGwT,KAAK,CAAC9hB,MAAM,GAAG,CAAC;IACxB,IAAIqR,KAAsB,GAAGyQ,KAAK,CAACxT,CAAC,CAAC;IACrC,OAAO,CAAC+C,KAAK,CAACsR,+BAA+B,EAAE,EAAE;MAC/C,IAAItR,KAAK,CAACqR,8BAA8B,EAAE,EAAE;QAC1CrR,KAAK,CAACyR,sBAAsB,CAAC3F,YAAY,EAAEkG,MAAM,CAAC;MACpD,CAAC,MAAM;QAGL;MACF;MACAhS,KAAK,GAAGyQ,KAAK,CAAC,EAAExT,CAAC,CAAC;IACpB;IACA,IAAI,CAAC4B,MAAM,CAACnR,KAAK,CAACoe,YAAY,EAAEkG,MAAM,CAAC;EACzC;EAqBAC,gCAAgCA,CAC9B3tB,KAAoC,EACpCnO,IAAU,EACJ;IACN,MAAM;MAAEs6B;IAAO,CAAA,GAAG,IAAI;IACtB,MAAMzQ,KAAsB,GAAGyQ,KAAK,CAACA,KAAK,CAAC9hB,MAAM,GAAG,CAAC,CAAC;IACtD,MAAMqjB,MAAM,GAAG77B,IAAI,CAACiO,GAAG,CAACrQ,KAAK;IAC7B,IAAIisB,KAAK,CAACsR,+BAA+B,EAAE,EAAE;MAC3C,IAAI,CAACzS,MAAM,CAACnR,KAAK,CAACpJ,KAAK,EAAE0tB,MAAM,CAAC;IAClC,CAAC,MAAM,IAAIhS,KAAK,CAACqR,8BAA8B,EAAE,EAAE;MACjDrR,KAAK,CAACyR,sBAAsB,CAACntB,KAAK,EAAE0tB,MAAM,CAAC;IAC7C,CAAC,MAAM;MACL;IACF;EACF;EAQAE,+BAA+BA,CAACle,EAAY,EAAQ;IAClD,MAAM;MAAEyc;IAAO,CAAA,GAAG,IAAI;IACtB,IAAIxT,CAAC,GAAGwT,KAAK,CAAC9hB,MAAM,GAAG,CAAC;IACxB,IAAIqR,KAAsB,GAAGyQ,KAAK,CAACxT,CAAC,CAAC;IACrC,OAAO+C,KAAK,CAACqR,8BAA8B,EAAE,EAAE;MAC7C,IACErR,KAAK,CAAC5pB,IAAI,KAAA,CAA6D,EACvE;QACA4pB,KAAK,CAACyR,sBAAsB,CAAC7rB,MAAM,CAACjP,sBAAsB,EAAEqd,EAAE,CAAC;MACjE;MACAgM,KAAK,GAAGyQ,KAAK,CAAC,EAAExT,CAAC,CAAC;IACpB;EACF;EAEAkV,iBAAiBA,CAAAA,EAAS;IACxB,MAAM;MAAE1B;IAAO,CAAA,GAAG,IAAI;IACtB,MAAMxR,YAAY,GAAGwR,KAAK,CAACA,KAAK,CAAC9hB,MAAM,GAAG,CAAC,CAAC;IAC5C,IAAI,CAACsQ,YAAY,CAACoS,8BAA8B,CAAA,CAAE,EAAE;IACpDpS,YAAY,CAAC2S,aAAa,CAAC,CAAC,CAAC9F,YAAY,EAAE1nB,GAAG,CAAC,KAAK;MAClD,IAAI,CAACya,MAAM,CAACnR,KAAK,CAACoe,YAAY,EAAE1nB,GAAG,CAAC;MAEpC,IAAI6Y,CAAC,GAAGwT,KAAK,CAAC9hB,MAAM,GAAG,CAAC;MACxB,IAAIqR,KAAK,GAAGyQ,KAAK,CAACxT,CAAC,CAAC;MACpB,OAAO+C,KAAK,CAACqR,8BAA8B,EAAE,EAAE;QAC7CrR,KAAK,CAAC2R,qBAAqB,CAACvtB,GAAG,CAACxQ,KAAK,CAAC;QACtCosB,KAAK,GAAGyQ,KAAK,CAAC,EAAExT,CAAC,CAAC;MACpB;IACF,CAAC,CAAC;EACJ;AACF;AAEO,SAASmV,4BAA4BA,CAAAA,EAAG;EAC7C,OAAO,IAAIhB,eAAe,CAAA,CAA0C,CAAC;AACvE;AAEO,SAASiB,iBAAiBA,CAAAA,EAAG;EAClC,OAAO,IAAId,qBAAqB,CAAA,CAEhC,CAAC;AACH;AAEO,SAASe,kBAAkBA,CAAAA,EAAG;EACnC,OAAO,IAAIf,qBAAqB,CAAA,CAEhC,CAAC;AACH;AAEO,SAASgB,kBAAkBA,CAAAA,EAAG;EACnC,OAAO,IAAInB,eAAe,CAAA,CAAE;AAC9B;ACzMe,MAAMoB,0BAA0B,CAAC;EAAA/+B,WAAAA,CAAA,EAAA;IAAA,IAC9Cg/B,CAAAA,MAAM,GAAqB,EAAE;EAAA;EAC7B3S,KAAKA,CAAC5X,KAAgB,EAAE;IACtB,IAAI,CAACuqB,MAAM,CAACzgB,IAAI,CAAC9J,KAAK,CAAC;EACzB;EAEA6X,IAAIA,CAAAA,EAAG;IACL,IAAI,CAAC0S,MAAM,CAACjW,GAAG,EAAE;EACnB;EAEAkW,YAAYA,CAAAA,EAAc;IACxB,OAAO,IAAI,CAACD,MAAM,CAAC,IAAI,CAACA,MAAM,CAAC9jB,MAAM,GAAG,CAAC,CAAC;EAC5C;EAEA,IAAIgkB,QAAQA,CAAAA,EAAY;IACtB,OAAO,CAAC,IAAI,CAACD,YAAY,CAAA,CAAE,IAAwB,IAAI,CAAC;EAC1D;EAEA,IAAIE,QAAQA,CAAAA,EAAY;IACtB,OAAO,CAAC,IAAI,CAACF,YAAY,CAAA,CAAE,IAAwB,IAAI,CAAC;EAC1D;EAEA,IAAIG,SAASA,CAAAA,EAAY;IACvB,OAAO,CAAC,IAAI,CAACH,YAAY,CAAA,CAAE,IAAyB,IAAI,CAAC;EAC3D;EAEA,IAAII,KAAKA,CAAAA,EAAY;IACnB,OAAO,CAAC,IAAI,CAACJ,YAAY,CAAA,CAAE,IAAqB,IAAI,CAAC;EACvD;AACF;AAEO,SAASK,aAAaA,CAC3BlpB,OAAgB,EAChB4B,WAAoB,EACT;EACX,OACE,CAAC5B,OAAO,OAA2B,CAAC,KACnC4B,WAAW,OAA2B,CAAC,CAAC;AAE7C;ACxCe,MAAeunB,UAAU,SAAS/I,SAAS,CAAC;EAIzDgJ,QAAQA,CACN98B,IAAmB,EACnB6G,GAAW,EACXmG,KAAU,EACVG,UAAmB,GAAG,IAAI,EACpB;IACN,IAAI,CAACnN,IAAI,EAAE;IAEX,IAAI;MAAEqT;IAAO,CAAA,GAAGrT,IAAI;IACpB,IAAIqT,KAAK,IAAI,IAAI,EAAE;MACjBA,KAAK,GAAG,CAAA,CAAE;MACVrT,IAAI,CAACqT,KAAK,GAAGA,KAAK;IACpB;IAEA,IAAIlG,UAAU,EAAE;MACdkG,KAAK,CAACxM,GAAG,CAAC,GAAGmG,KAAK;IACpB,CAAC,MAAM;MACLC,MAAM,CAACC,cAAc,CAACmG,KAAK,EAAExM,GAAG,EAAE;QAAEsG,UAAU;QAAEH;MAAM,CAAC,CAAC;IAC1D;EACF;EAIA+vB,YAAYA,CAAC1wB,KAAgB,EAAW;IACtC,OAAO,IAAI,CAAC+L,KAAK,CAACnY,IAAI,KAAKoM,KAAK,IAAI,CAAC,IAAI,CAAC+L,KAAK,CAAC0X,WAAW;EAC7D;EAEAkN,oBAAoBA,CAACC,SAAiB,EAAE92B,IAAY,EAAW;IAC7D,MAAM+2B,OAAO,GAAGD,SAAS,GAAG92B,IAAI,CAACqS,MAAM;IACvC,IAAI,IAAI,CAAC4U,KAAK,CAAC6C,KAAK,CAACgN,SAAS,EAAEC,OAAO,CAAC,KAAK/2B,IAAI,EAAE;MACjD,MAAMg3B,MAAM,GAAG,IAAI,CAAC/P,KAAK,CAACC,UAAU,CAAC6P,OAAO,CAAC;MAC7C,OAAO,EACLhW,gBAAgB,CAACiW,MAAM,CAAC,IAIxB,CAACA,MAAM,GAAG,MAAM,MAAM,MAAM,CAC7B;IACH;IACA,OAAO,KAAK;EACd;EAEAC,qBAAqBA,CAACj3B,IAAY,EAAW;IAC3C,MAAM+hB,IAAI,GAAG,IAAI,CAAC6M,cAAc,EAAE;IAClC,OAAO,IAAI,CAACiI,oBAAoB,CAAC9U,IAAI,EAAE/hB,IAAI,CAAC;EAC9C;EAIAk3B,aAAaA,CAAChxB,KAAgB,EAAW;IACvC,IAAI,IAAI,CAAC0wB,YAAY,CAAC1wB,KAAK,CAAC,EAAE;MAC5B,IAAI,CAAC6b,IAAI,CAAA,CAAE;MACX,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd;EAIAoV,gBAAgBA,CACdjxB,KAAgB,EAChBspB,YAAyC,EACnC;IACN,IAAI,CAAC,IAAI,CAAC0H,aAAa,CAAChxB,KAAK,CAAC,EAAE;MAC9B,IAAIspB,YAAY,IAAI,IAAI,EAAE;QACxB,MAAM,IAAI,CAACpe,KAAK,CAACoe,YAAY,EAAE,IAAI,CAACvd,KAAK,CAAC1B,QAAQ,CAAC;MACrD;MACA,IAAI,CAACxR,UAAU,CAAC,IAAI,EAAEmH,KAAK,CAAC;IAC9B;EACF;EAIAkxB,kBAAkBA,CAAAA,EAAY;IAC5B,OACE,IAAI,CAACxL,KAAK,CAAO,GAAA,CAAC,IAClB,IAAI,CAACA,KAAK,CAAA,CAAU,CAAC,IACrB,IAAI,CAACyL,qBAAqB,EAAE;EAEhC;EAEAA,qBAAqBA,CAAAA,EAAY;IAC/B,OAAOzP,UAAU,CACf,IAAI,CAACX,KAAK,EACV,IAAI,CAACrC,iBAAiB,CAAC,IAAI,CAAC3S,KAAK,CAACsB,aAAa,CAACjc,KAAK,CAAC,EACtD,IAAI,CAAC2a,KAAK,CAACxa,KACb,CAAC;EACH;EAEA6/B,qBAAqBA,CAAAA,EAAY;IAC/B,OAAO1P,UAAU,CAAC,IAAI,CAACX,KAAK,EAAE,IAAI,CAAChV,KAAK,CAACva,GAAG,EAAE,IAAI,CAACk3B,cAAc,CAAA,CAAE,CAAC;EACtE;EAEA2I,gBAAgBA,CAAAA,EAAY;IAC1B,OAAO,IAAI,CAACjJ,GAAG,CAAQ,EAAA,CAAC,IAAI,IAAI,CAAC8I,kBAAkB,CAAA,CAAE;EACvD;EAKAI,SAASA,CAACC,QAAiB,GAAG,IAAI,EAAQ;IACxC,IAAIA,QAAQ,GAAG,IAAI,CAACF,gBAAgB,CAAA,CAAE,GAAG,IAAI,CAACjJ,GAAG,CAAA,EAAQ,CAAC,EAAE;IAC5D,IAAI,CAACld,KAAK,CAAC9H,MAAM,CAAC1J,gBAAgB,EAAE,IAAI,CAACqS,KAAK,CAACsB,aAAa,CAAC;EAC/D;EAKAmkB,MAAMA,CAAC59B,IAAe,EAAEgO,GAAqB,EAAQ;IACnD,IAAI,CAAC,IAAI,CAACwmB,GAAG,CAACx0B,IAAI,CAAC,EAAE;MACnB,IAAI,CAACiF,UAAU,CAAC+I,GAAG,EAAEhO,IAAI,CAAC;IAC5B;EACF;EAIA69B,QAAQA,CACNC,EAAqC,EACrCC,QAAe,GAAG,IAAI,CAAC5lB,KAAK,CAAC9J,KAAK,CAAA,CAAE,EAIW;IAC/C,MAAM2vB,WAEL,GAAG;MAAEj+B,IAAI,EAAE;KAAM;IAClB,IAAI;MACF,MAAMA,IAAI,GAAG+9B,EAAE,CAAC,CAAC/9B,IAAI,GAAG,IAAI,KAAK;QAC/Bi+B,WAAW,CAACj+B,IAAI,GAAGA,IAAI;QAEvB,MAAMi+B,WAAW;MACnB,CAAC,CAAC;MACF,IAAI,IAAI,CAAC7lB,KAAK,CAACkW,MAAM,CAAC9V,MAAM,GAAGwlB,QAAQ,CAAC1P,MAAM,CAAC9V,MAAM,EAAE;QACrD,MAAM0lB,SAAS,GAAG,IAAI,CAAC9lB,KAAK;QAC5B,IAAI,CAACA,KAAK,GAAG4lB,QAAQ;QAIrB,IAAI,CAAC5lB,KAAK,CAAC6W,YAAY,GAAGiP,SAAS,CAACjP,YAAY;QAChD,OAAO;UACLjvB,IAAI;UACJmO,KAAK,EAAE+vB,SAAS,CAAC5P,MAAM,CAAC0P,QAAQ,CAAC1P,MAAM,CAAC9V,MAAM,CAAC;UAC/C2lB,MAAM,EAAE,KAAK;UACbC,OAAO,EAAE,KAAK;UACdF;SACD;MACH;MAEA,OAAO;QACLl+B,IAAI;QACJmO,KAAK,EAAE,IAAI;QACXgwB,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE,KAAK;QACdF,SAAS,EAAE;OACZ;IACF,CAAA,CAAC,OAAO/vB,KAAK,EAAE;MACd,MAAM+vB,SAAS,GAAG,IAAI,CAAC9lB,KAAK;MAC5B,IAAI,CAACA,KAAK,GAAG4lB,QAAQ;MACrB,IAAI7vB,KAAK,YAAYC,WAAW,EAAE;QAEhC,OAAO;UAAEpO,IAAI,EAAE,IAAI;UAAEmO,KAAK;UAAEgwB,MAAM,EAAE,IAAI;UAAEC,OAAO,EAAE,KAAK;UAAEF;SAAW;MACvE;MACA,IAAI/vB,KAAK,KAAK8vB,WAAW,EAAE;QACzB,OAAO;UACLj+B,IAAI,EAAEi+B,WAAW,CAACj+B,IAAI;UACtBmO,KAAK,EAAE,IAAI;UACXgwB,MAAM,EAAE,KAAK;UACbC,OAAO,EAAE,IAAI;UACbF;SACD;MACH;MAEA,MAAM/vB,KAAK;IACb;EACF;EAEAkwB,qBAAqBA,CACnB1nB,mBAAwD,EACxD2nB,QAAiB,EACjB;IACA,IAAI,CAAC3nB,mBAAmB,EAAE,OAAO,KAAK;IACtC,MAAM;MACJ4nB,kBAAkB;MAClBC,cAAc;MACdC,aAAa;MACbC;IACD,CAAA,GAAG/nB,mBAAmB;IAEvB,MAAMgoB,SAAS,GACb,CAAC,CAACJ,kBAAkB,IACpB,CAAC,CAACC,cAAc,IAChB,CAAC,CAACE,qBAAqB,IACvB,CAAC,CAACD,aAAa;IAEjB,IAAI,CAACH,QAAQ,EAAE;MACb,OAAOK,SAAS;IAClB;IAEA,IAAIJ,kBAAkB,IAAI,IAAI,EAAE;MAC9B,IAAI,CAAChnB,KAAK,CAAC9H,MAAM,CAACvL,2BAA2B,EAAEq6B,kBAAkB,CAAC;IACpE;IAEA,IAAIC,cAAc,IAAI,IAAI,EAAE;MAC1B,IAAI,CAACjnB,KAAK,CAAC9H,MAAM,CAACpN,cAAc,EAAEm8B,cAAc,CAAC;IACnD;IAEA,IAAIC,aAAa,IAAI,IAAI,EAAE;MACzB,IAAI,CAAClnB,KAAK,CAAC9H,MAAM,CAAChG,sBAAsB,EAAEg1B,aAAa,CAAC;IAC1D;IAEA,IAAIC,qBAAqB,IAAI,IAAI,EAAE;MACjC,IAAI,CAACx5B,UAAU,CAACw5B,qBAAqB,CAAC;IACxC;EACF;EAWAE,qBAAqBA,CAAAA,EAAY;IAC/B,OAAOzZ,0BAA0B,CAAC,IAAI,CAAC/M,KAAK,CAACnY,IAAI,CAAC;EACpD;EAMAgV,aAAaA,CAACjV,IAAU,EAAuB;IAC7C,OAAOA,IAAI,CAACC,IAAI,KAAK,aAAa;EACpC;EAOA8U,gBAAgBA,CAAC/U,IAAiB,EAAU;IAC1C,OAAOA,IAAI,CAACgV,EAAE,CAAC7O,IAAI;EACrB;EAOAkT,wBAAwBA,CAACrZ,IAAU,EAAW;IAC5C,OACE,CAACA,IAAI,CAACC,IAAI,KAAK,kBAAkB,IAC/BD,IAAI,CAACC,IAAI,KAAK,0BAA0B,KAC1C,IAAI,CAACgV,aAAa,CAACjV,IAAI,CAAC6+B,QAAQ,CAAC;EAErC;EAEAjrB,gBAAgBA,CACd5T,IAAU,EACyC;IACnD,OAAOA,IAAI,CAACC,IAAI,KAAK,gBAAgB;EACvC;EAEAqZ,cAAcA,CAACtZ,IAAU,EAAwB;IAC/C,OAAOA,IAAI,CAACC,IAAI,KAAK,cAAc;EACrC;EAEA6+B,gBAAgBA,CAEdpX,QAAiB,GAAG,IAAI,CAACxW,OAAO,CAACvB,UAAU,KAAK,QAAQ,EAC5C;IAEZ,MAAMovB,SAAS,GAAG,IAAI,CAAC3mB,KAAK,CAACyW,MAAM;IACnC,IAAI,CAACzW,KAAK,CAACyW,MAAM,GAAG,EAAE;IAEtB,MAAMmQ,sBAAsB,GAAG,IAAI,CAACC,mBAAmB;IACvD,IAAI,CAACA,mBAAmB,GAAG,IAAIlzB,GAAG,EAAE;IAGpC,MAAMmzB,WAAW,GAAG,IAAI,CAACxX,QAAQ;IACjC,IAAI,CAACA,QAAQ,GAAGA,QAAQ;IAExB,MAAMyX,QAAQ,GAAG,IAAI,CAACtV,KAAK;IAC3B,MAAMpB,YAAY,GAAG,IAAI,CAAC2W,eAAe,EAAE;IAC3C,IAAI,CAACvV,KAAK,GAAG,IAAIpB,YAAY,CAAC,IAAI,EAAEf,QAAQ,CAAC;IAE7C,MAAM2X,YAAY,GAAG,IAAI,CAACC,SAAS;IACnC,IAAI,CAACA,SAAS,GAAG,IAAIjD,0BAA0B,EAAE;IAEjD,MAAM9B,aAAa,GAAG,IAAI,CAACpjB,UAAU;IACrC,IAAI,CAACA,UAAU,GAAG,IAAIkjB,iBAAiB,CAAC,IAAI,CAAC;IAE7C,MAAMkF,kBAAkB,GAAG,IAAI,CAACC,eAAe;IAC/C,IAAI,CAACA,eAAe,GAAG,IAAI7D,sBAAsB,CAAC,IAAI,CAAC;IAEvD,OAAO,MAAM;MAEX,IAAI,CAACvjB,KAAK,CAACyW,MAAM,GAAGkQ,SAAS;MAC7B,IAAI,CAACE,mBAAmB,GAAGD,sBAAsB;MAGjD,IAAI,CAACtX,QAAQ,GAAGwX,WAAW;MAC3B,IAAI,CAACrV,KAAK,GAAGsV,QAAQ;MACrB,IAAI,CAACG,SAAS,GAAGD,YAAY;MAC7B,IAAI,CAACloB,UAAU,GAAGojB,aAAa;MAC/B,IAAI,CAACiF,eAAe,GAAGD,kBAAkB;KAC1C;EACH;EAEAE,kBAAkBA,CAAAA,EAAG;IACnB,IAAIC,UAAU,IAAkB;IAChC,IAAI,IAAI,CAAChY,QAAQ,EAAE;MACjBgY,UAAU,KAAyB;IACrC;IACA,IAAI,CAAC7V,KAAK,CAACF,KAAK,EAAkB,CAAC;IACnC,IAAI,CAAC2V,SAAS,CAAC3V,KAAK,CAAC+V,UAAU,CAAC;EAClC;EAEAC,yBAAyBA,CAAChpB,mBAAqC,EAAE;IAC/D,MAAM;MAAE8nB;IAAe,CAAA,GAAG9nB,mBAAmB;IAC7C,IAAI8nB,aAAa,KAAK,IAAI,EAAE;MAC1B,IAAI,CAAC9H,YAAY,CAAC,sBAAsB,EAAE8H,aAAa,CAAC;IAC1D;EACF;AACF;AAeO,MAAMmB,gBAAgB,CAAC;EAAAtiC,WAAAA,CAAA,EAAA;IAAA,IAC5BihC,CAAAA,kBAAkB,GAAgC,IAAI;IAAA,IACtDC,CAAAA,cAAc,GAAgC,IAAI;IAAA,IAClDC,CAAAA,aAAa,GAAgC,IAAI;IAAA,IACjDC,CAAAA,qBAAqB,GAAgC,IAAI;EAAA;AAC3D;AChYA,MAAMmB,IAAI,CAAqB;EAC7BviC,WAAWA,CAACorB,MAAkB,EAAEra,GAAW,EAAEJ,GAAa,EAAE;IAAA,IAQ5DhO,CAAAA,IAAI,GAAW,EAAE;IAPf,IAAI,CAACrC,KAAK,GAAGyQ,GAAG;IAChB,IAAI,CAACxQ,GAAG,GAAG,CAAC;IACZ,IAAI,CAACoQ,GAAG,GAAG,IAAItQ,cAAc,CAACsQ,GAAG,CAAC;IAClC,IAAI,CAAAya,MAAM,IAAA,IAAA,GAAA,KAAA,CAAA,GAANA,MAAM,CAAE9W,WAAW,MAAqB,EAAE,IAAI,CAACkuB,KAAK,GAAG,CAACzxB,GAAG,EAAE,CAAC,CAAC;IACnE,IAAIqa,MAAM,IAAA,IAAA,IAANA,MAAM,CAAE5qB,QAAQ,EAAE,IAAI,CAACmQ,GAAG,CAACnQ,QAAQ,GAAG4qB,MAAM,CAAC5qB,QAAQ;EAC3D;AAaF;AACA,MAAMiiC,aAAa,GAAGF,IAAI,CAACG,SAAS;AAED;EAEjCD,aAAa,CAACE,OAAO,GAAG,YAAkB;IACxC,MAAMC,OAAO,GAAG,IAAIL,IAAI,CAAChwB,SAAS,EAAE,IAAI,CAACjS,KAAK,EAAE,IAAI,CAACqQ,GAAG,CAACrQ,KAAK,CAAC;IAC/D,MAAMuR,IAAI,GAAGlC,MAAM,CAACkC,IAAI,CAAC,IAAI,CAAmB;IAChD,KAAK,IAAI2X,CAAC,GAAG,CAAC,EAAEtO,MAAM,GAAGrJ,IAAI,CAACqJ,MAAM,EAAEsO,CAAC,GAAGtO,MAAM,EAAEsO,CAAC,EAAE,EAAE;MACrD,MAAMjgB,GAAG,GAAGsI,IAAI,CAAC2X,CAAC,CAAC;MAEnB,IACEjgB,GAAG,KAAK,iBAAiB,IACzBA,GAAG,KAAK,kBAAkB,IAC1BA,GAAG,KAAK,eAAe,EACvB;QAEAq5B,OAAO,CAACr5B,GAAG,CAAC,GAAG,IAAI,CAACA,GAAG,CAAC;MAC1B;IACF;IAEA,OAAOq5B,OAAO;GACf;AACH;AAEA,SAASC,gBAAgBA,CAACngC,IAAS,EAAO;EACxC,OAAOogC,eAAe,CAACpgC,IAAI,CAAC;AAC9B;AAEO,SAASogC,eAAeA,CAACpgC,IAAS,EAAO;EAI9C,MAAM;IAAEC,IAAI;IAAErC,KAAK;IAAEC,GAAG;IAAEoQ,GAAG;IAAE6xB,KAAK;IAAEzsB,KAAK;IAAElN;EAAM,CAAA,GAAGnG,IAAI;EAC1D,MAAMqgC,MAAM,GAAGpzB,MAAM,CAACqzB,MAAM,CAACP,aAAa,CAAC;EAC3CM,MAAM,CAACpgC,IAAI,GAAGA,IAAI;EAClBogC,MAAM,CAACziC,KAAK,GAAGA,KAAK;EACpByiC,MAAM,CAACxiC,GAAG,GAAGA,GAAG;EAChBwiC,MAAM,CAACpyB,GAAG,GAAGA,GAAG;EAChBoyB,MAAM,CAACP,KAAK,GAAGA,KAAK;EACpBO,MAAM,CAAChtB,KAAK,GAAGA,KAAK;EACpBgtB,MAAM,CAACl6B,IAAI,GAAGA,IAAI;EAClB,IAAIlG,IAAI,KAAK,aAAa,EAAE;IAC1BogC,MAAM,CAACE,YAAY,GAAGvgC,IAAI,CAACugC,YAAY;EACzC;EACA,OAAOF,MAAM;AACf;AAEO,SAASG,kBAAkBA,CAACxgC,IAAS,EAAO;EACjD,MAAM;IAAEC,IAAI;IAAErC,KAAK;IAAEC,GAAG;IAAEoQ,GAAG;IAAE6xB,KAAK;IAAEzsB;EAAO,CAAA,GAAGrT,IAAI;EACpD,IAAIC,IAAI,KAAK,aAAa,EAAE;IAC1B,OAAOkgC,gBAAgB,CAACngC,IAAI,CAAC;EAC/B;EACA,MAAMqgC,MAAM,GAAGpzB,MAAM,CAACqzB,MAAM,CAACP,aAAa,CAAC;EAC3CM,MAAM,CAACpgC,IAAI,GAAGA,IAAI;EAClBogC,MAAM,CAACziC,KAAK,GAAGA,KAAK;EACpByiC,MAAM,CAACxiC,GAAG,GAAGA,GAAG;EAChBwiC,MAAM,CAACpyB,GAAG,GAAGA,GAAG;EAChBoyB,MAAM,CAACP,KAAK,GAAGA,KAAK;EACpB,IAAI9/B,IAAI,CAACoT,GAAG,KAAKvD,SAAS,EAAE;IAE1BwwB,MAAM,CAACjtB,GAAG,GAAGpT,IAAI,CAACoT,GAAG;EACvB,CAAC,MAAM;IACLitB,MAAM,CAAChtB,KAAK,GAAGA,KAAK;EACtB;EACAgtB,MAAM,CAACrzB,KAAK,GAAGhN,IAAI,CAACgN,KAAK;EACzB,OAAOqzB,MAAM;AACf;AAIO,MAAeI,SAAS,SAAS5D,UAAU,CAAC;EACjDlnB,SAASA,CAAAA,EAA0C;IACjD,MAAM1H,GAAG,GAAG,IAAI,CAACmK,KAAK,CAAC1B,QAAQ;IAC/B,OAAO,IAAImpB,IAAI,CAAC,IAAI,EAAE5xB,GAAG,CAACxQ,KAAK,EAAEwQ,GAAG,CAAC;EACvC;EAEAyyB,WAAWA,CAA6BzyB,GAAa,EAAa;IAChE,OAAO,IAAI4xB,IAAI,CAAC,IAAI,EAAE5xB,GAAG,CAACxQ,KAAK,EAAEwQ,GAAG,CAAC;EACvC;EAGAkL,eAAeA,CACblZ,IAAsB,EACX;IACX,OAAO,IAAI,CAACygC,WAAW,CAACzgC,IAAI,CAACgO,GAAG,CAACrQ,KAAK,CAAC;EACzC;EAIAkY,UAAUA,CAAqB9V,IAAe,EAAEC,IAAe,EAAK;IAClE,OAAO,IAAI,CAACsZ,YAAY,CAACvZ,IAAI,EAAEC,IAAI,EAAE,IAAI,CAACmY,KAAK,CAACsB,aAAa,CAAC;EAChE;EAIAH,YAAYA,CACVvZ,IAAqB,EACrBC,IAAe,EACfuZ,MAAgB,EACb;IAOFxZ,IAAI,CAAOC,IAAI,GAAGA,IAAI;IACvBD,IAAI,CAACnC,GAAG,GAAG2b,MAAM,CAAC/b,KAAK;IACvBuC,IAAI,CAACiO,GAAG,CAACpQ,GAAG,GAAG2b,MAAM;IACrB,IAAI,IAAI,CAAC5H,WAAW,KAAqB,EAAE5R,IAAI,CAAC8/B,KAAK,CAAC,CAAC,CAAC,GAAGtmB,MAAM,CAAC/b,KAAK;IACvE,IAAI,IAAI,CAACmU,WAAW,OAA4B,EAAE;MAChD,IAAI,CAAC4a,cAAc,CAACxsB,IAAS,CAAC;IAChC;IACA,OAAOA,IAAI;EACb;EAEA2Y,kBAAkBA,CAAC3Y,IAAc,EAAE0W,QAAkB,EAAQ;IAC3D1W,IAAI,CAACpC,KAAK,GAAG8Y,QAAQ,CAACjZ,KAAK;IAC3BuC,IAAI,CAACiO,GAAG,CAACrQ,KAAK,GAAG8Y,QAAQ;IACzB,IAAI,IAAI,CAAC9E,WAAW,KAAqB,EAAE5R,IAAI,CAAC8/B,KAAK,CAAC,CAAC,CAAC,GAAGppB,QAAQ,CAACjZ,KAAK;EAC3E;EAEAgc,gBAAgBA,CACdzZ,IAAc,EACdwZ,MAAgB,GAAG,IAAI,CAACpB,KAAK,CAACsB,aAAa,EACrC;IACN1Z,IAAI,CAACnC,GAAG,GAAG2b,MAAM,CAAC/b,KAAK;IACvBuC,IAAI,CAACiO,GAAG,CAACpQ,GAAG,GAAG2b,MAAM;IACrB,IAAI,IAAI,CAAC5H,WAAW,KAAqB,EAAE5R,IAAI,CAAC8/B,KAAK,CAAC,CAAC,CAAC,GAAGtmB,MAAM,CAAC/b,KAAK;EACzE;EAKAkjC,0BAA0BA,CAAC3gC,IAAc,EAAE4gC,YAAsB,EAAQ;IACvE,IAAI,CAACjoB,kBAAkB,CAAC3Y,IAAI,EAAE4gC,YAAY,CAAC3yB,GAAG,CAACrQ,KAAK,CAAC;EACvD;AACF;AC3IA,MAAMijC,aAAa,GAAG,IAAI90B,GAAG,CAAC,CAC5B,GAAG,EACH,KAAK,EACL,MAAM,EACN,SAAS,EACT,OAAO,EACP,SAAS,EACT,OAAO,EACP,WAAW,EACX,OAAO,EACP,MAAM,EACN,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,MAAM,EACN,QAAQ,EACR,MAAM,CACP,CAAC;AAIF,MAAM+0B,UAAU,GAAGjyB,cAAc,MAAM,CAAC;EACtCkyB,yBAAyB,EACvB,gFAAgF;EAClFC,0BAA0B,EACxB,wKAAwK;EAG1KC,kBAAkB,EAAEA,CAAC;IAAEC;GAAwC,KAC7D,kCAAkCA,YAAY,GAAG;EACnDC,mBAAmB,EACjB,yDAAyD;EAC3DC,4BAA4B,EAC1B,qEAAqE;EACvEC,6BAA6B,EAC3B,+CAA+C;EACjDC,+BAA+B,EAAEA,CAAC;IAChCC,UAAU;IACVC;EAIF,CAAC,KACC,6DAA6DD,UAAU,mBAAmBA,UAAU,yBAAyBC,QAAQ,KAAK;EAC5IC,uBAAuB,EAAEA,CAAC;IACxBF,UAAU;IACVC;EAID,CAAA,KACC,uDAAuDD,UAAU,6CAA6CC,QAAQ,KAAK;EAC7HE,4BAA4B,EAAEA,CAAC;IAAEF;GAAgC,KAC/D,UAAUA,QAAQ,uKAAuK;EAC3LG,uBAAuB,EAAEA,CAAC;IACxBC,eAAe;IACfJ;EAID,CAAA,KACC,eAAeI,eAAe,4FAA4FJ,QAAQ,KAAK;EACzIK,sCAAsC,EAAEA,CAAC;IACvCL;GAGD,KACC,4GAA4GA,QAAQ,KAAK;EAa3HM,uCAAuC,EAAEA,CAAC;IACxCN,QAAQ;IACRD,UAAU;IACVQ;GAKD,KACC,UAAUP,QAAQ,iBAAiBO,YAAY,+BAA+BR,UAAU,oBAAoBQ,YAAY,WAAW;EACrIC,sCAAsC,EAAEA,CAAC;IACvCR,QAAQ;IACRD;EAKD,CAAA,KACC,oDAAoDA,UAAU,iBAAiBC,QAAQ,KAAK;EAC9FS,uCAAuC,EAAEA,CAAC;IACxCT,QAAQ;IACRD;EAKD,CAAA,KACC,qCAAqCA,UAAU,4EAA4EC,QAAQ,KAAK;EAC1IU,qBAAqB,EAAEA,CAAC;IACtBV,QAAQ;IACRD,UAAU;IACVY;EAKF,CAAC,KACC,qFAAqFZ,UAAU,wBAAwBY,UAAU,iBAAiBX,QAAQ,KAAK;EACjKY,8BAA8B,EAAEA,CAAC;IAC/BZ,QAAQ;IACRD;EAID,CAAA,KACC,sDAAsDA,UAAU,oBAAoBC,QAAQ,KAAK;EACnGa,yCAAyC,EAAEA,CAAC;IAC1Cb;GAGD,KACC,2GAA2GA,QAAQ,KAAK;EAC1Hc,yBAAyB,EAAE,0CAA0C;EACrEC,6BAA6B,EAC3B,wEAAwE;EAC1EC,mCAAmC,EACjC,wKAAwK;EAC1KC,kBAAkB,EAChB,6EAA6E;EAC/EC,sBAAsB,EACpB,0EAA0E;EAC5EC,eAAe,EAAE,+CAA+C;EAChEC,mCAAmC,EACjC,yFAAyF;EAC3FC,uBAAuB,EACrB,yGAAyG;EAC3GC,mBAAmB,EACjB,kEAAkE;EACpEC,iBAAiB,EAAE,yDAAyD;EAC5EC,iBAAiB,EAAA/1B,MAAA,CAAAwB,MAAA,CAAA;IACfnQ,OAAO,EACL;GAGE,EAAA;IAAEiP,UAAU,EAAE;EAAyB,CAAC,CAE7C;EACD01B,yBAAyB,EAAE,0CAA0C;EACrEC,cAAc,EAAE,yCAAyC;EACzDC,2BAA2B,EACzB,yDAAyD;EAC3DC,4BAA4B,EAC1B,mGAAmG;EACrGC,yBAAyB,EAAE,0CAA0C;EACrEC,oBAAoB,EAClB,4DAA4D;EAC9DC,kBAAkB,EAAE,oDAAoD;EACxEC,qBAAqB,EACnB,mHAAmH;EACrHC,iBAAiB,EACf,sEAAsE;EACxEC,iCAAiC,EAC/B,sEAAsE;EACxEC,sBAAsB,EAAEA,CAAC;IAAEzC;GAAwC,KACjE,4BAA4BA,YAAY,GAAG;EAC7C0C,4BAA4B,EAC1B,wDAAwD;EAC1DC,kCAAkC,EAChC,uDAAuD;EACzDC,oBAAoB,EAClB,kEAAkE;EACpEC,4BAA4B,EAC1B,kDAAkD;EACpDC,iCAAiC,EAC/B,mEAAmE;EACrEC,+CAA+C,EAC7C,mHAAmH;EACrHC,4BAA4B,EAAEA,CAAC;IAC7BC,qBAAqB;IACrBhC;EAID,CAAA,KACC,oBAAoBgC,qBAAqB,8BAA8BhC,UAAU,aAAa;EAChGiC,mCAAmC,EACjC,mEAAmE;EACrEC,uBAAuB,EAAE;AAC3B,CAAC,CAAC;AAGF,SAASC,cAAcA,CAACC,WAAmB,EAAW;EACpD,OACEA,WAAW,CAACtkC,IAAI,KAAK,6BAA6B,IACjDskC,WAAW,CAACtkC,IAAI,KAAK,0BAA0B,KAC7C,CAACskC,WAAW,CAAC7rB,WAAW,IACtB6rB,WAAW,CAAC7rB,WAAW,CAACzY,IAAI,KAAK,WAAW,IAC3CskC,WAAW,CAAC7rB,WAAW,CAACzY,IAAI,KAAK,sBAAuB,CAAE;AAEpE;AAEA,SAASukC,iBAAiBA,CACxBxkC,IAAqD,EAC5C;EACT,OAAOA,IAAI,CAACykC,UAAU,KAAK,MAAM,IAAIzkC,IAAI,CAACykC,UAAU,KAAK,QAAQ;AACnE;AAEA,MAAMC,iBAAiB,GAAG;EACxBC,KAAK,EAAE,oBAAoB;EAC3BC,GAAG,EAAE,oBAAoB;EACzB3kC,IAAI,EAAE,aAAa;EACnB4kC,SAAS,EAAE;AACb,CAAC;AAGD,SAASC,SAASA,CAChBC,IAAS,EACT/d,IAA6D,EACjD;EACZ,MAAMge,KAAU,GAAG,EAAE;EACrB,MAAMC,KAAU,GAAG,EAAE;EACrB,KAAK,IAAIne,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGie,IAAI,CAACvsB,MAAM,EAAEsO,CAAC,EAAE,EAAE;IACpC,CAACE,IAAI,CAAC+d,IAAI,CAACje,CAAC,CAAC,EAAEA,CAAC,EAAEie,IAAI,CAAC,GAAGC,KAAK,GAAGC,KAAK,EAAEppB,IAAI,CAACkpB,IAAI,CAACje,CAAC,CAAC,CAAC;EACxD;EACA,OAAO,CAACke,KAAK,EAAEC,KAAK,CAAC;AACvB;AAEA,MAAMC,iBAAiB,GAAG,wBAAwB;AAoClD,IAAAC,IAAA,GAAgB3zB,UAA0D,IACxE,MAAM4zB,eAAe,SAAS5zB,UAAU,CAAmB;EAAAlU,WAAAA,CAAA,GAAA2Y,IAAA,EAAA;IAAA,KAAA,CAAA,GAAAA,IAAA,CAAA;IAAA,IAIzDovB,CAAAA,UAAU,GAAoCx1B,SAAS;EAAA;EAEvDuvB,eAAeA,CAAAA,EAA2C;IACxD,OAAO5U,gBAAgB;EACzB;EAEA8a,gBAAgBA,CAAAA,EAAY;IAC1B,OAAO,IAAI,CAACzwB,eAAe,CAAC,MAAM,EAAE,KAAK,CAAC,IAAI,IAAI,CAACwwB,UAAU,KAAK,MAAM;EAC1E;EAEAvP,WAAWA,CAAC71B,IAAe,EAAEgzB,GAAQ,EAAQ;IAC3C,IACEhzB,IAAI,QAAc,IAClBA,IAAI,OAAY,IAChBA,IAAI,OAA4B,EAChC;MACA,IAAI,IAAI,CAAColC,UAAU,KAAKx1B,SAAS,EAAE;QACjC,IAAI,CAACw1B,UAAU,GAAG,IAAI;MACxB;IACF;IACA,KAAK,CAACvP,WAAW,CAAC71B,IAAI,EAAEgzB,GAAG,CAAC;EAC9B;EAEA5G,UAAUA,CAACC,OAAkB,EAAQ;IACnC,IAAI,IAAI,CAAC+Y,UAAU,KAAKx1B,SAAS,EAAE;MAEjC,MAAM01B,OAAO,GAAGL,iBAAiB,CAAClT,IAAI,CAAC1F,OAAO,CAACtf,KAAK,CAAC;MACrD,IAAI,CAACu4B,OAAO,EAAE,CAEb,KAAM,IAAIA,OAAO,CAAC,CAAC,CAAC,KAAK,MAAM,EAAE;QAChC,IAAI,CAACF,UAAU,GAAG,MAAM;MACzB,CAAA,MAAM,IAAIE,OAAO,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;QAClC,IAAI,CAACF,UAAU,GAAG,QAAQ;MAC5B,CAAC,MAAM;QACL,MAAM,IAAIl0B,KAAK,CAAC,wBAAwB,CAAC;MAC3C;IACF;IACA,KAAK,CAACkb,UAAU,CAACC,OAAO,CAAC;EAC3B;EAEAkZ,wBAAwBA,CAACC,GAAe,EAAc;IACpD,MAAMC,SAAS,GAAG,IAAI,CAACttB,KAAK,CAACiX,MAAM;IACnC,IAAI,CAACjX,KAAK,CAACiX,MAAM,GAAG,IAAI;IACxB,IAAI,CAACwO,MAAM,CAAC4H,GAAG,MAAY,CAAC;IAE5B,MAAMxlC,IAAI,GAAG,IAAI,CAAC0lC,aAAa,EAAE;IACjC,IAAI,CAACvtB,KAAK,CAACiX,MAAM,GAAGqW,SAAS;IAC7B,OAAOzlC,IAAI;EACb;EAEA2lC,kBAAkBA,CAAAA,EAAoB;IACpC,MAAM5lC,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAmB;IAC9C,MAAMkwB,SAAS,GAAG,IAAI,CAACztB,KAAK,CAAC1B,QAAQ;IACrC,IAAI,CAACwR,IAAI,CAAA,CAAE;IACX,IAAI,CAACoV,gBAAgB,CAAA,GAAW,CAAC;IAEjC,IAAI,IAAI,CAACllB,KAAK,CAACC,eAAe,CAAC5a,KAAK,GAAGooC,SAAS,CAACpoC,KAAK,GAAG,CAAC,EAAE;MAC1D,IAAI,CAAC8Z,KAAK,CAACupB,UAAU,CAAC+C,kCAAkC,EAAEgC,SAAS,CAAC;IACtE;IACA,IAAI,IAAI,CAACpR,GAAG,CAAA,EAAU,CAAC,EAAE;MACvBz0B,IAAI,CAACgN,KAAK,GAAG,KAAK,CAAC84B,eAAe,EAAE;MACpC,IAAI,CAACjI,MAAM,CAAA,EAAU,CAAC;MACtB,OAAO,IAAI,CAAC/nB,UAAU,CAAC9V,IAAI,EAAE,mBAAmB,CAAC;IACnD,CAAC,MAAM;MACL,OAAO,IAAI,CAAC8V,UAAU,CAAC9V,IAAI,EAAE,mBAAmB,CAAC;IACnD;EACF;EAEA+lC,oCAAoCA,CAAAA,EAGlC;IACA,MAAML,SAAS,GAAG,IAAI,CAACttB,KAAK,CAACiX,MAAM;IACnC,IAAI,CAACjX,KAAK,CAACiX,MAAM,GAAG,IAAI;IACxB,IAAI,CAACwO,MAAM,CAAA,EAAS,CAAC;IACrB,IAAI59B,IAAI,GAAG,IAAI;IACf,IAAI+lC,SAAS,GAAG,IAAI;IACpB,IAAI,IAAI,CAACjU,KAAK,CAAA,EAAU,CAAC,EAAE;MACzB,IAAI,CAAC3Z,KAAK,CAACiX,MAAM,GAAGqW,SAAS;MAC7BM,SAAS,GAAG,IAAI,CAACJ,kBAAkB,EAAE;IACvC,CAAC,MAAM;MACL3lC,IAAI,GAAG,IAAI,CAAC0lC,aAAa,EAAE;MAC3B,IAAI,CAACvtB,KAAK,CAACiX,MAAM,GAAGqW,SAAS;MAC7B,IAAI,IAAI,CAAC3T,KAAK,CAAA,EAAU,CAAC,EAAE;QACzBiU,SAAS,GAAG,IAAI,CAACJ,kBAAkB,EAAE;MACvC;IACF;IACA,OAAO,CAAC3lC,IAAI,EAAE+lC,SAAS,CAAC;EAC1B;EAEAC,qBAAqBA,CACnBjmC,IAAgC,EACZ;IACpB,IAAI,CAACkoB,IAAI,CAAA,CAAE;IACX,IAAI,CAACge,qBAAqB,CAAClmC,IAAI,EAAc,IAAI,CAAC;IAClD,OAAO,IAAI,CAAC8V,UAAU,CAAC9V,IAAI,EAAE,cAAc,CAAC;EAC9C;EAEAmmC,wBAAwBA,CACtBnmC,IAAmC,EACZ;IACvB,IAAI,CAACkoB,IAAI,CAAA,CAAE;IAEX,MAAMlT,EAAE,GAAIhV,IAAI,CAACgV,EAAE,GAAG,IAAI,CAACoxB,eAAe,CAAA,CAAG;IAE7C,MAAMC,QAAQ,GAAG,IAAI,CAAC1wB,SAAS,EAAgC;IAC/D,MAAM2wB,aAAa,GAAG,IAAI,CAAC3wB,SAAS,EAAoB;IAExD,IAAI,IAAI,CAACoc,KAAK,CAAA,EAAM,CAAC,EAAE;MACrBsU,QAAQ,CAACzwB,cAAc,GAAG,IAAI,CAAC2wB,iCAAiC,EAAE;IACpE,CAAC,MAAM;MACLF,QAAQ,CAACzwB,cAAc,GAAG,IAAI;IAChC;IAEA,IAAI,CAACioB,MAAM,CAAA,EAAU,CAAC;IACtB,MAAM2I,GAAG,GAAG,IAAI,CAACC,2BAA2B,EAAE;IAC9CJ,QAAQ,CAACtyB,MAAM,GAAGyyB,GAAG,CAACzyB,MAAM;IAC5BsyB,QAAQ,CAAC/2B,IAAI,GAAGk3B,GAAG,CAACl3B,IAAI;IACxB+2B,QAAQ,CAACK,IAAI,GAAGF,GAAG,CAACxlB,KAAK;IACzB,IAAI,CAAC6c,MAAM,CAAA,EAAU,CAAC;IAEtB,CAACwI,QAAQ,CAACM,UAAU,EAAE3mC,IAAI,CAACgmC,SAAS,CAAC,GACnC,IAAI,CAACD,oCAAoC,EAAE;IAE7CO,aAAa,CAACM,cAAc,GAAG,IAAI,CAAC9wB,UAAU,CAC5CuwB,QAAQ,EACR,wBACF,CAAC;IAEDrxB,EAAE,CAAC4xB,cAAc,GAAG,IAAI,CAAC9wB,UAAU,CAACwwB,aAAa,EAAE,gBAAgB,CAAC;IAEpE,IAAI,CAAC7sB,gBAAgB,CAACzE,EAAE,CAAC;IACzB,IAAI,CAAC2oB,SAAS,CAAA,CAAE;IAEhB,IAAI,CAAC9T,KAAK,CAACC,WAAW,CACpB9pB,IAAI,CAACgV,EAAE,CAAC7O,IAAI,QAEZnG,IAAI,CAACgV,EAAE,CAAC/G,GAAG,CAACrQ,KACd,CAAC;IAED,OAAO,IAAI,CAACkY,UAAU,CAAC9V,IAAI,EAAE,iBAAiB,CAAC;EACjD;EAEA6mC,gBAAgBA,CACd7mC,IAA2B,EAC3B8mC,YAAsB,EACP;IACf,IAAI,IAAI,CAAC/U,KAAK,CAAA,EAAU,CAAC,EAAE;MACzB,OAAO,IAAI,CAACkU,qBAAqB,CAACjmC,IAAI,CAAC;IACxC,CAAA,MAAM,IAAI,IAAI,CAAC+xB,KAAK,CAAA,EAAa,CAAC,EAAE;MACnC,OAAO,IAAI,CAACoU,wBAAwB,CAACnmC,IAAI,CAAC;IAC3C,CAAA,MAAM,IAAI,IAAI,CAAC+xB,KAAK,CAAA,EAAQ,CAAC,EAAE;MAC9B,OAAO,IAAI,CAACgV,wBAAwB,CAAC/mC,IAAI,CAAC;IAC3C,CAAA,MAAM,IAAI,IAAI,CAACq9B,aAAa,CAAA,GAAW,CAAC,EAAE;MACzC,IAAI,IAAI,CAACtL,KAAK,CAAA,EAAO,CAAC,EAAE;QACtB,OAAO,IAAI,CAACiV,6BAA6B,CAAChnC,IAAI,CAAC;MACjD,CAAC,MAAM;QACL,IAAI8mC,YAAY,EAAE;UAChB,IAAI,CAACvvB,KAAK,CACRupB,UAAU,CAACgC,mBAAmB,EAC9B,IAAI,CAAC1qB,KAAK,CAACC,eACb,CAAC;QACH;QACA,OAAO,IAAI,CAAC4uB,sBAAsB,CAACjnC,IAAI,CAAC;MAC1C;IACD,CAAA,MAAM,IAAI,IAAI,CAAC+8B,YAAY,CAAA,GAAS,CAAC,EAAE;MACtC,OAAO,IAAI,CAACmK,yBAAyB,CAAClnC,IAAI,CAAC;IAC5C,CAAA,MAAM,IAAI,IAAI,CAAC+8B,YAAY,CAAA,GAAW,CAAC,EAAE;MACxC,OAAO,IAAI,CAACoK,0BAA0B,CAACnnC,IAAI,CAAC;IAC7C,CAAA,MAAM,IAAI,IAAI,CAAC+8B,YAAY,CAAA,GAAc,CAAC,EAAE;MAC3C,OAAO,IAAI,CAACqK,yBAAyB,CAACpnC,IAAI,CAAC;IAC5C,CAAA,MAAM,IAAI,IAAI,CAAC+xB,KAAK,CAAA,EAAW,CAAC,EAAE;MACjC,OAAO,IAAI,CAACsV,iCAAiC,CAACrnC,IAAI,EAAE8mC,YAAY,CAAC;IACnE,CAAC,MAAM;MACL,IAAI,CAAC5hC,UAAU,CAAA,CAAE;IACnB;EACF;EAEA6hC,wBAAwBA,CACtB/mC,IAAmC,EACZ;IACvB,IAAI,CAACkoB,IAAI,CAAA,CAAE;IACXloB,IAAI,CAACgV,EAAE,GAAG,IAAI,CAACsyB,kCAAkC,CACpB,IAC7B,CAAC;IACD,IAAI,CAACzd,KAAK,CAACC,WAAW,CACpB9pB,IAAI,CAACgV,EAAE,CAAC7O,IAAI,KAEZnG,IAAI,CAACgV,EAAE,CAAC/G,GAAG,CAACrQ,KACd,CAAC;IACD,IAAI,CAAC+/B,SAAS,CAAA,CAAE;IAChB,OAAO,IAAI,CAAC7nB,UAAU,CAAC9V,IAAI,EAAE,iBAAiB,CAAC;EACjD;EAEAinC,sBAAsBA,CACpBjnC,IAAiC,EACZ;IACrB,IAAI,CAAC6pB,KAAK,CAACF,KAAK,EAAgB,CAAC;IAEjC,IAAI,IAAI,CAACoI,KAAK,CAAA,GAAU,CAAC,EAAE;MACzB/xB,IAAI,CAACgV,EAAE,GAAG,KAAK,CAACuyB,aAAa,EAAE;IACjC,CAAC,MAAM;MACLvnC,IAAI,CAACgV,EAAE,GAAG,IAAI,CAACoxB,eAAe,EAAE;IAClC;IAEA,MAAMoB,QAAQ,GAAIxnC,IAAI,CAAC0U,IAAI,GAAG,IAAI,CAACiB,SAAS,CAAA,CAAqB;IAEjE,MAAMjB,IAAI,GAAI8yB,QAAQ,CAAC9yB,IAAI,GAAG,EAAG;IACjC,IAAI,CAACmpB,MAAM,CAAA,CAAU,CAAC;IACtB,OAAO,CAAC,IAAI,CAAC9L,KAAK,CAAA,CAAU,CAAC,EAAE;MAC7B,IAAIyV,QAAQ,GAAG,IAAI,CAAC7xB,SAAS,EAAuB;MAEpD,IAAI,IAAI,CAACoc,KAAK,CAAA,EAAW,CAAC,EAAE;QAC1B,IAAI,CAAC7J,IAAI,CAAA,CAAE;QACX,IAAI,CAAC,IAAI,CAAC6U,YAAY,CAAS,GAAA,CAAC,IAAI,CAAC,IAAI,CAAChL,KAAK,CAAA,EAAW,CAAC,EAAE;UAC3D,IAAI,CAACxa,KAAK,CACRupB,UAAU,CAAC8B,mCAAmC,EAC9C,IAAI,CAACxqB,KAAK,CAACC,eACb,CAAC;QACH;QACA,KAAK,CAACovB,WAAW,CAACD,QAAQ,CAAC;MAC7B,CAAC,MAAM;QACL,IAAI,CAAClK,gBAAgB,CAAA,GAAA,EAEnBwD,UAAU,CAACsD,mCACb,CAAC;QAEDoD,QAAQ,GAAG,IAAI,CAACX,gBAAgB,CAACW,QAAQ,EAAE,IAAI,CAAC;MAClD;MAEA9yB,IAAI,CAACmH,IAAI,CAAC2rB,QAAQ,CAAC;IACrB;IAEA,IAAI,CAAC3d,KAAK,CAACD,IAAI,EAAE;IAEjB,IAAI,CAACiU,MAAM,CAAA,CAAU,CAAC;IAEtB,IAAI,CAAC/nB,UAAU,CAAC0xB,QAAQ,EAAE,gBAAgB,CAAC;IAE3C,IAAInnC,IAA8B,GAAG,IAAI;IACzC,IAAIqnC,eAAe,GAAG,KAAK;IAC3BhzB,IAAI,CAACghB,OAAO,CAAC6O,WAAW,IAAI;MAC1B,IAAID,cAAc,CAACC,WAAW,CAAC,EAAE;QAC/B,IAAIlkC,IAAI,KAAK,UAAU,EAAE;UACvB,IAAI,CAACkX,KAAK,CAACupB,UAAU,CAACE,0BAA0B,EAAEuD,WAAW,CAAC;QAChE;QACAlkC,IAAI,GAAG,IAAI;MACb,CAAC,MAAM,IAAIkkC,WAAW,CAACtkC,IAAI,KAAK,sBAAsB,EAAE;QACtD,IAAIynC,eAAe,EAAE;UACnB,IAAI,CAACnwB,KAAK,CAACupB,UAAU,CAACO,6BAA6B,EAAEkD,WAAW,CAAC;QACnE;QACA,IAAIlkC,IAAI,KAAK,IAAI,EAAE;UACjB,IAAI,CAACkX,KAAK,CAACupB,UAAU,CAACE,0BAA0B,EAAEuD,WAAW,CAAC;QAChE;QACAlkC,IAAI,GAAG,UAAU;QACjBqnC,eAAe,GAAG,IAAI;MACxB;IACF,CAAC,CAAC;IAEF1nC,IAAI,CAACK,IAAI,GAAGA,IAAI,IAAI,UAAU;IAC9B,OAAO,IAAI,CAACyV,UAAU,CAAC9V,IAAI,EAAE,eAAe,CAAC;EAC/C;EAEAqnC,iCAAiCA,CAC/BrnC,IAA4C,EAC5C8mC,YAA6B,EACG;IAChC,IAAI,CAACjJ,MAAM,CAAA,EAAW,CAAC;IAEvB,IAAI,IAAI,CAACpJ,GAAG,CAAA,EAAY,CAAC,EAAE;MACzB,IAAI,IAAI,CAAC1C,KAAK,CAAa,EAAA,CAAC,IAAI,IAAI,CAACA,KAAK,CAAU,EAAA,CAAC,EAAE;QAGrD/xB,IAAI,CAAC0Y,WAAW,GAAG,IAAI,CAACmuB,gBAAgB,CAAC,IAAI,CAAClxB,SAAS,CAAA,CAAE,CAAC;MAC5D,CAAC,MAAM;QAEL3V,IAAI,CAAC0Y,WAAW,GAAG,IAAI,CAACitB,aAAa,EAAE;QACvC,IAAI,CAAChI,SAAS,CAAA,CAAE;MAClB;MACA39B,IAAI,CAAC2nC,OAAO,GAAG,IAAI;MAEnB,OAAO,IAAI,CAAC7xB,UAAU,CAAC9V,IAAI,EAAE,0BAA0B,CAAC;IAC1D,CAAC,MAAM;MACL,IACE,IAAI,CAAC+xB,KAAK,CAAU,EAAA,CAAC,IACrB,IAAI,CAAC6V,KAAK,CAAA,CAAE,IACX,CAAC,IAAI,CAAC7K,YAAY,CAAA,GAAS,CAAC,IAAI,IAAI,CAACA,YAAY,CAAA,GAAc,CAAC,KAC/D,CAAC+J,YAAa,EAChB;QACA,MAAMtsB,KAAK,GAAG,IAAI,CAACpC,KAAK,CAACpL,KAIV;QACf,MAAM,IAAI,CAACuK,KAAK,CACdupB,UAAU,CAACoD,4BAA4B,EACvC,IAAI,CAAC9rB,KAAK,CAAC1B,QAAQ,EACnB;UACEytB,qBAAqB,EAAE3pB,KAAK;UAC5B2nB,UAAU,EAAEuC,iBAAiB,CAAClqB,KAAK;QACrC,CACF,CAAC;MACH;MAEA,IACE,IAAI,CAACuX,KAAK,CAAA,EAAQ,CAAC,IACnB,IAAI,CAACA,KAAK,CAAa,EAAA,CAAC,IACxB,IAAI,CAACA,KAAK,CAAA,EAAU,CAAC,IACrB,IAAI,CAACgL,YAAY,CAAW,GAAA,CAAC,EAC7B;QACA/8B,IAAI,CAAC0Y,WAAW,GAAG,IAAI,CAACmuB,gBAAgB,CAAC,IAAI,CAAClxB,SAAS,CAAA,CAAE,CAAC;QAC1D3V,IAAI,CAAC2nC,OAAO,GAAG,KAAK;QAEpB,OAAO,IAAI,CAAC7xB,UAAU,CAAC9V,IAAI,EAAE,0BAA0B,CAAC;MAC1D,CAAC,MAAM,IACL,IAAI,CAAC+xB,KAAK,CAAA,EAAQ,CAAC,IACnB,IAAI,CAACA,KAAK,CAAA,CAAU,CAAC,IACrB,IAAI,CAACgL,YAAY,CAAc,GAAA,CAAC,IAChC,IAAI,CAACA,YAAY,CAAA,GAAS,CAAC,IAC3B,IAAI,CAACA,YAAY,CAAA,GAAW,CAAC,EAC7B;QACA/8B,IAAI,GAAG,IAAI,CAACiY,WAAW,CACrBjY,IAAI,EACa,IACnB,CAAC;QACD,IAAIA,IAAI,CAACC,IAAI,KAAK,wBAAwB,EAAE;UAC1CD,IAAI,CAACC,IAAI,GAAG,mBAAmB;UAC/BD,IAAI,CAAC2nC,OAAO,GAAG,KAAK;UACpB,OAAO3nC,IAAI,CAAC6nC,UAAU;QACxB;QAEA7nC,IAAI,CAACC,IAAI,GAAG,SAAS,GAAGD,IAAI,CAACC,IAAI;QAEjC,OAAOD,IAAI;MACb;IACF;IAEA,IAAI,CAACkF,UAAU,CAAA,CAAE;EACnB;EAEA8hC,6BAA6BA,CAC3BhnC,IAAwC,EACZ;IAC5B,IAAI,CAACkoB,IAAI,CAAA,CAAE;IACX,IAAI,CAACoV,gBAAgB,CAAA,GAAY,CAAC;IAClCt9B,IAAI,CAAC4mC,cAAc,GAAG,IAAI,CAACkB,uBAAuB,EAAE;IACpD,IAAI,CAACnK,SAAS,CAAA,CAAE;IAEhB,OAAO,IAAI,CAAC7nB,UAAU,CAAC9V,IAAI,EAAE,sBAAsB,CAAC;EACtD;EAEAknC,yBAAyBA,CACvBlnC,IAAoC,EACZ;IACxB,IAAI,CAACkoB,IAAI,CAAA,CAAE;IACX,MAAM6f,QAAQ,GAAG,IAAI,CAACC,kBAAkB,CACtChoC,IACF,CAAsC;IAEtC+nC,QAAQ,CAAC9nC,IAAI,GAAG,kBAAkB;IAClC,OAAO8nC,QAAQ;EACjB;EAEAZ,0BAA0BA,CACxBnnC,IAAqC,EACZ;IACzB,IAAI,CAACkoB,IAAI,CAAA,CAAE;IACX,MAAM6f,QAAQ,GAAG,IAAI,CAACE,mBAAmB,CACvCjoC,IAAI,EACJ,IACF,CAAuC;IAEvC+nC,QAAQ,CAAC9nC,IAAI,GAAG,mBAAmB;IACnC,OAAO8nC,QAAQ;EACjB;EAEAX,yBAAyBA,CACvBpnC,IAAoC,EACZ;IACxB,IAAI,CAACkoB,IAAI,CAAA,CAAE;IACX,IAAI,CAACge,qBAAqB,CAAClmC,IAAI,EAAgB,KAAK,CAAC;IACrD,OAAO,IAAI,CAAC8V,UAAU,CAAC9V,IAAI,EAAE,kBAAkB,CAAC;EAClD;EAIAkmC,qBAAqBA,CAAClmC,IAA2B,EAAEkoC,OAAgB,EAAQ;IACzEloC,IAAI,CAACgV,EAAE,GAAG,IAAI,CAACmzB,6BAA6B,CAC5B,CAACD,OAAO,EACJ,IACpB,CAAC;IAED,IAAI,CAACre,KAAK,CAACC,WAAW,CACpB9pB,IAAI,CAACgV,EAAE,CAAC7O,IAAI,EACZ+hC,OAAO,YAAuD,EAC9DloC,IAAI,CAACgV,EAAE,CAAC/G,GAAG,CAACrQ,KACd,CAAC;IAED,IAAI,IAAI,CAACm0B,KAAK,CAAA,EAAM,CAAC,EAAE;MACrB/xB,IAAI,CAAC4V,cAAc,GAAG,IAAI,CAAC2wB,iCAAiC,EAAE;IAChE,CAAC,MAAM;MACLvmC,IAAI,CAAC4V,cAAc,GAAG,IAAI;IAC5B;IAEA5V,IAAI,CAACooC,OAAO,GAAG,EAAE;IAEjB,IAAI,IAAI,CAAC3T,GAAG,CAAA,EAAY,CAAC,EAAE;MACzB,GAAG;QACDz0B,IAAI,CAACooC,OAAO,CAACvsB,IAAI,CAAC,IAAI,CAACwsB,yBAAyB,CAAE,CAAA,CAAC;MACpD,CAAA,QAAQ,CAACH,OAAO,IAAI,IAAI,CAACzT,GAAG,GAAS,CAAC;IACzC;IAEA,IAAIyT,OAAO,EAAE;MACXloC,IAAI,CAACsoC,UAAU,GAAG,EAAE;MACpBtoC,IAAI,CAACuoC,MAAM,GAAG,EAAE;MAEhB,IAAI,IAAI,CAAClL,aAAa,CAAA,GAAW,CAAC,EAAE;QAClC,GAAG;UACDr9B,IAAI,CAACuoC,MAAM,CAAC1sB,IAAI,CAAC,IAAI,CAACwsB,yBAAyB,CAAE,CAAA,CAAC;QACpD,CAAC,QAAQ,IAAI,CAAC5T,GAAG,GAAS,CAAC;MAC7B;MAEA,IAAI,IAAI,CAAC4I,aAAa,CAAA,GAAe,CAAC,EAAE;QACtC,GAAG;UACDr9B,IAAI,CAACsoC,UAAU,CAACzsB,IAAI,CAAC,IAAI,CAACwsB,yBAAyB,CAAE,CAAA,CAAC;QACxD,CAAC,QAAQ,IAAI,CAAC5T,GAAG,GAAS,CAAC;MAC7B;IACF;IAEAz0B,IAAI,CAAC0U,IAAI,GAAG,IAAI,CAAC8zB,mBAAmB,CAAC;MACnCC,WAAW,EAAEP,OAAO;MACpBQ,UAAU,EAAE,KAAK;MACjBC,WAAW,EAAE,KAAK;MAClBC,UAAU,EAAEV,OAAO;MACnBW,YAAY,EAAE;IAChB,CAAC,CAAC;EACJ;EAEAR,yBAAyBA,CAAAA,EAA2B;IAClD,MAAMroC,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAA0B;IAErD3V,IAAI,CAACgV,EAAE,GAAG,IAAI,CAAC8zB,gCAAgC,EAAE;IACjD,IAAI,IAAI,CAAC/W,KAAK,CAAA,EAAM,CAAC,EAAE;MACrB/xB,IAAI,CAAC4V,cAAc,GAAG,IAAI,CAACmzB,mCAAmC,EAAE;IAClE,CAAC,MAAM;MACL/oC,IAAI,CAAC4V,cAAc,GAAG,IAAI;IAC5B;IAEA,OAAO,IAAI,CAACE,UAAU,CAAC9V,IAAI,EAAE,kBAAkB,CAAC;EAClD;EAEAgpC,kBAAkBA,CAAChpC,IAA6B,EAAmB;IACjE,IAAI,CAACkmC,qBAAqB,CAAClmC,IAAI,EAAgB,KAAK,CAAC;IACrD,OAAO,IAAI,CAAC8V,UAAU,CAAC9V,IAAI,EAAE,sBAAsB,CAAC;EACtD;EAEAipC,kBAAkBA,CAACxhB,IAAY,EAAE;IAC/B,IAAIA,IAAI,KAAK,GAAG,EAAE;MAChB,IAAI,CAAClQ,KAAK,CACRupB,UAAU,CAAC8C,4BAA4B,EACvC,IAAI,CAACxrB,KAAK,CAAC1B,QACb,CAAC;IACH;EACF;EAEAwyB,iBAAiBA,CAACzhB,IAAY,EAAE/Q,QAAkB,EAAEgC,WAAqB,EAAE;IACzE,IAAI,CAACmoB,aAAa,CAACjZ,GAAG,CAACH,IAAI,CAAC,EAAE;IAE9B,IAAI,CAAClQ,KAAK,CACRmB,WAAW,GACPooB,UAAU,CAACG,kBAAkB,GAC7BH,UAAU,CAAC6C,sBAAsB,EACrCjtB,QAAQ,EACR;MACEwqB,YAAY,EAAEzZ;IAChB,CACF,CAAC;EACH;EAEA0gB,6BAA6BA,CAC3BgB,OAAiB,EACjBzwB,WAAqB,EACP;IACd,IAAI,CAACwwB,iBAAiB,CACpB,IAAI,CAAC9wB,KAAK,CAACpL,KAAK,EAChB,IAAI,CAACoL,KAAK,CAAC1B,QAAQ,EACnBgC,WACF,CAAC;IACD,OAAO,IAAI,CAAC0tB,eAAe,CAAC+C,OAAO,CAAC;EACtC;EAIAnB,kBAAkBA,CAAChoC,IAA6B,EAAmB;IACjEA,IAAI,CAACgV,EAAE,GAAG,IAAI,CAACmzB,6BAA6B,CAC5B,KAAK,EACD,IACpB,CAAC;IACD,IAAI,CAACte,KAAK,CAACC,WAAW,CACpB9pB,IAAI,CAACgV,EAAE,CAAC7O,IAAI,QAEZnG,IAAI,CAACgV,EAAE,CAAC/G,GAAG,CAACrQ,KACd,CAAC;IAED,IAAI,IAAI,CAACm0B,KAAK,CAAA,EAAM,CAAC,EAAE;MACrB/xB,IAAI,CAAC4V,cAAc,GAAG,IAAI,CAAC2wB,iCAAiC,EAAE;IAChE,CAAC,MAAM;MACLvmC,IAAI,CAAC4V,cAAc,GAAG,IAAI;IAC5B;IAEA5V,IAAI,CAACopC,KAAK,GAAG,IAAI,CAAC5D,wBAAwB,GAAM,CAAC;IACjD,IAAI,CAAC7H,SAAS,CAAA,CAAE;IAEhB,OAAO,IAAI,CAAC7nB,UAAU,CAAC9V,IAAI,EAAE,WAAW,CAAC;EAC3C;EAEAioC,mBAAmBA,CACjBjoC,IAA8B,EAC9BqpC,OAAgB,EACE;IAClB,IAAI,CAAC/L,gBAAgB,CAAA,GAAS,CAAC;IAC/Bt9B,IAAI,CAACgV,EAAE,GAAG,IAAI,CAACmzB,6BAA6B,CAC5B,IAAI,EACA,IACpB,CAAC;IACD,IAAI,CAACte,KAAK,CAACC,WAAW,CACpB9pB,IAAI,CAACgV,EAAE,CAAC7O,IAAI,QAEZnG,IAAI,CAACgV,EAAE,CAAC/G,GAAG,CAACrQ,KACd,CAAC;IAED,IAAI,IAAI,CAACm0B,KAAK,CAAA,EAAM,CAAC,EAAE;MACrB/xB,IAAI,CAAC4V,cAAc,GAAG,IAAI,CAAC2wB,iCAAiC,EAAE;IAChE,CAAC,MAAM;MACLvmC,IAAI,CAAC4V,cAAc,GAAG,IAAI;IAC5B;IAGA5V,IAAI,CAACspC,SAAS,GAAG,IAAI;IACrB,IAAI,IAAI,CAACvX,KAAK,CAAA,EAAS,CAAC,EAAE;MACxB/xB,IAAI,CAACspC,SAAS,GAAG,IAAI,CAAC9D,wBAAwB,GAAS,CAAC;IAC1D;IAEAxlC,IAAI,CAACupC,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACF,OAAO,EAAE;MACZrpC,IAAI,CAACupC,QAAQ,GAAG,IAAI,CAAC/D,wBAAwB,GAAM,CAAC;IACtD;IACA,IAAI,CAAC7H,SAAS,CAAA,CAAE;IAEhB,OAAO,IAAI,CAAC7nB,UAAU,CAAC9V,IAAI,EAAE,YAAY,CAAC;EAC5C;EAIAwpC,sBAAsBA,CAACC,cAAuB,GAAG,KAAK,EAAmB;IACvE,MAAMC,YAAY,GAAG,IAAI,CAACtxB,KAAK,CAAC1B,QAAQ;IAExC,MAAM1W,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAmB;IAE9C,MAAMg0B,QAAQ,GAAG,IAAI,CAACC,iBAAiB,EAAE;IAEzC,MAAMC,KAAK,GAAG,IAAI,CAACvC,kCAAkC,EAAE;IACvDtnC,IAAI,CAACmG,IAAI,GAAG0jC,KAAK,CAAC1jC,IAAI;IAEtBnG,IAAI,CAAC2pC,QAAQ,GAAGA,QAAQ;IAExB3pC,IAAI,CAAC8pC,KAAK,GAAGD,KAAK,CAACjD,cAAc;IAEjC,IAAI,IAAI,CAAC7U,KAAK,CAAA,EAAM,CAAC,EAAE;MACrB,IAAI,CAAC0C,GAAG,CAAA,EAAM,CAAC;MAEfz0B,IAAI,CAAC2nC,OAAO,GAAG,IAAI,CAAChC,aAAa,EAAE;IACrC,CAAC,MAAM;MACL,IAAI8D,cAAc,EAAE;QAClB,IAAI,CAAClyB,KAAK,CAACupB,UAAU,CAAC+B,uBAAuB,EAAE6G,YAAY,CAAC;MAC9D;IACF;IAEA,OAAO,IAAI,CAAC5zB,UAAU,CAAC9V,IAAI,EAAE,eAAe,CAAC;EAC/C;EAEAumC,iCAAiCA,CAAAA,EAA+B;IAC9D,MAAMb,SAAS,GAAG,IAAI,CAACttB,KAAK,CAACiX,MAAM;IACnC,MAAMrvB,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAA8B;IACzD3V,IAAI,CAAC+T,MAAM,GAAG,EAAE;IAEhB,IAAI,CAACqE,KAAK,CAACiX,MAAM,GAAG,IAAI;IAGxB,IAAI,IAAI,CAAC0C,KAAK,CAAM,EAAA,CAAC,IAAI,IAAI,CAACA,KAAK,CAAe,GAAA,CAAC,EAAE;MACnD,IAAI,CAAC7J,IAAI,CAAA,CAAE;IACb,CAAC,MAAM;MACL,IAAI,CAAChjB,UAAU,CAAA,CAAE;IACnB;IAEA,IAAI6kC,eAAe,GAAG,KAAK;IAE3B,GAAG;MACD,MAAMC,aAAa,GAAG,IAAI,CAACR,sBAAsB,CAACO,eAAe,CAAC;MAElE/pC,IAAI,CAAC+T,MAAM,CAAC8H,IAAI,CAACmuB,aAAa,CAAC;MAE/B,IAAIA,aAAa,CAACrC,OAAO,EAAE;QACzBoC,eAAe,GAAG,IAAI;MACxB;MAEA,IAAI,CAAC,IAAI,CAAChY,KAAK,CAAA,EAAM,CAAC,EAAE;QACtB,IAAI,CAAC8L,MAAM,CAAA,EAAS,CAAC;MACvB;IACD,CAAA,QAAQ,CAAC,IAAI,CAAC9L,KAAK,GAAM,CAAC;IAC3B,IAAI,CAAC8L,MAAM,CAAA,EAAM,CAAC;IAElB,IAAI,CAACzlB,KAAK,CAACiX,MAAM,GAAGqW,SAAS;IAE7B,OAAO,IAAI,CAAC5vB,UAAU,CAAC9V,IAAI,EAAE,0BAA0B,CAAC;EAC1D;EAGAiqC,qBAAqBA,CAAIC,EAAW,EAAK;IACvC,IAAI,IAAI,CAACvV,UAAU,EAAE,KAAKrO,KAAE,CAACxM,KAAK,EAAE;MAClC,MAAMqwB,UAAU,GAAG,IAAI,CAAC/xB,KAAK,CAACgO,OAAO;MACrC,IAAI,CAAChO,KAAK,CAACgO,OAAO,GAAG,CAAC+jB,UAAU,CAAC,CAAC,CAAC,CAAC;MACpC,IAAI;QACF,OAAOD,EAAE,CAAA,CAAE;MACb,CAAC,SAAS;QACR,IAAI,CAAC9xB,KAAK,CAACgO,OAAO,GAAG+jB,UAAU;MACjC;IACF,CAAC,MAAM;MACL,OAAOD,EAAE,CAAA,CAAE;IACb;EACF;EAIAE,+CAA+CA,CAAAA,EAEjC;IACZ,IAAI,IAAI,CAACC,SAAS,EAAE,OAAU,EAAE;IAChC,OAAO,IAAI,CAACtB,mCAAmC,EAAE;EACnD;EAEAA,mCAAmCA,CAAAA,EAAiC;IAClE,MAAM/oC,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAgC;IAC3D,MAAM+vB,SAAS,GAAG,IAAI,CAACttB,KAAK,CAACiX,MAAM;IAEnC,IAAI,CAACjX,KAAK,CAACiX,MAAM,GAAG,IAAI;IACxBrvB,IAAI,CAAC+T,MAAM,GAAG,EAAE;IAChB,IAAI,CAACk2B,qBAAqB,CAAC,MAAM;MAC/B,IAAI,CAACpM,MAAM,CAAA,EAAM,CAAC;MAClB,MAAMyM,qBAAqB,GAAG,IAAI,CAAClyB,KAAK,CAACkX,kBAAkB;MAC3D,IAAI,CAAClX,KAAK,CAACkX,kBAAkB,GAAG,KAAK;MACrC,OAAO,CAAC,IAAI,CAACyC,KAAK,CAAA,EAAM,CAAC,EAAE;QACzB/xB,IAAI,CAAC+T,MAAM,CAAC8H,IAAI,CAAC,IAAI,CAAC8pB,aAAa,CAAE,CAAA,CAAC;QACtC,IAAI,CAAC,IAAI,CAAC5T,KAAK,CAAA,EAAM,CAAC,EAAE;UACtB,IAAI,CAAC8L,MAAM,CAAA,EAAS,CAAC;QACvB;MACF;MACA,IAAI,CAACzlB,KAAK,CAACkX,kBAAkB,GAAGgb,qBAAqB;IACvD,CAAC,CAAC;IAEF,IAAI,CAAClyB,KAAK,CAACiX,MAAM,GAAGqW,SAAS;IAC7B,IAAI,CAAC,IAAI,CAACttB,KAAK,CAACiX,MAAM,IAAI,IAAI,CAACsF,UAAU,CAAE,CAAA,KAAKrO,KAAE,CAACxM,KAAK,EAAE;MAGxD,IAAI,CAACywB,YAAY,CAAA,CAAE;IACrB;IACA,IAAI,CAAC1M,MAAM,CAAA,EAAM,CAAC;IAElB,OAAO,IAAI,CAAC/nB,UAAU,CAAC9V,IAAI,EAAE,4BAA4B,CAAC;EAC5D;EAEAwqC,4CAA4CA,CAAAA,EAAiC;IAC3E,IAAI,IAAI,CAACH,SAAS,EAAE,OAAU,EAAE;IAChC,MAAMrqC,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAgC;IAC3D,MAAM+vB,SAAS,GAAG,IAAI,CAACttB,KAAK,CAACiX,MAAM;IACnCrvB,IAAI,CAAC+T,MAAM,GAAG,EAAE;IAEhB,IAAI,CAACqE,KAAK,CAACiX,MAAM,GAAG,IAAI;IAExB,IAAI,CAACwO,MAAM,CAAA,EAAM,CAAC;IAClB,OAAO,CAAC,IAAI,CAAC9L,KAAK,CAAA,EAAM,CAAC,EAAE;MACzB/xB,IAAI,CAAC+T,MAAM,CAAC8H,IAAI,CAAC,IAAI,CAAC4uB,oCAAoC,CAAE,CAAA,CAAC;MAC7D,IAAI,CAAC,IAAI,CAAC1Y,KAAK,CAAA,EAAM,CAAC,EAAE;QACtB,IAAI,CAAC8L,MAAM,CAAA,EAAS,CAAC;MACvB;IACF;IACA,IAAI,CAACA,MAAM,CAAA,EAAM,CAAC;IAElB,IAAI,CAACzlB,KAAK,CAACiX,MAAM,GAAGqW,SAAS;IAE7B,OAAO,IAAI,CAAC5vB,UAAU,CAAC9V,IAAI,EAAE,4BAA4B,CAAC;EAC5D;EAEA0qC,sBAAsBA,CAAAA,EAAwB;IAC5C,MAAM1qC,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAuB;IAClD,IAAI,CAAC2nB,gBAAgB,CAAA,GAAc,CAAC;IAEpCt9B,IAAI,CAACooC,OAAO,GAAG,EAAE;IACjB,IAAI,IAAI,CAAC3T,GAAG,CAAA,EAAY,CAAC,EAAE;MACzB,GAAG;QACDz0B,IAAI,CAACooC,OAAO,CAACvsB,IAAI,CAAC,IAAI,CAACwsB,yBAAyB,CAAE,CAAA,CAAC;MACrD,CAAC,QAAQ,IAAI,CAAC5T,GAAG,GAAS,CAAC;IAC7B;IAEAz0B,IAAI,CAAC0U,IAAI,GAAG,IAAI,CAAC8zB,mBAAmB,CAAC;MACnCC,WAAW,EAAE,KAAK;MAClBC,UAAU,EAAE,KAAK;MACjBC,WAAW,EAAE,KAAK;MAClBC,UAAU,EAAE,KAAK;MACjBC,YAAY,EAAE;IAChB,CAAC,CAAC;IAEF,OAAO,IAAI,CAAC/yB,UAAU,CAAC9V,IAAI,EAAE,yBAAyB,CAAC;EACzD;EAEA2qC,0BAA0BA,CAAAA,EAAiB;IACzC,OAAO,IAAI,CAAC5Y,KAAK,CAAA,GAAO,CAAC,IAAI,IAAI,CAACA,KAAK,CAAU,GAAA,CAAC,GAC9C,KAAK,CAACwV,aAAa,CAAE,CAAA,GACrB,IAAI,CAACnB,eAAe,CAAC,IAAI,CAAC;EAChC;EAEAwE,0BAA0BA,CACxB5qC,IAAqC,EACrC6qC,QAAiB,EACjBlB,QAAgC,EACP;IACzB3pC,IAAI,CAAC8qC,MAAM,GAAGD,QAAQ;IAGtB,IAAI,IAAI,CAACjW,SAAS,EAAE,CAAC30B,IAAI,OAAa,EAAE;MACtCD,IAAI,CAACgV,EAAE,GAAG,IAAI,CAAC21B,0BAA0B,EAAE;MAC3C3qC,IAAI,CAAC6G,GAAG,GAAG,IAAI,CAAC2+B,wBAAwB,EAAE;IAC5C,CAAC,MAAM;MACLxlC,IAAI,CAACgV,EAAE,GAAG,IAAI;MACdhV,IAAI,CAAC6G,GAAG,GAAG,IAAI,CAAC8+B,aAAa,EAAE;IACjC;IACA,IAAI,CAAC9H,MAAM,CAAA,CAAY,CAAC;IACxB79B,IAAI,CAACgN,KAAK,GAAG,IAAI,CAACw4B,wBAAwB,EAAE;IAC5CxlC,IAAI,CAAC2pC,QAAQ,GAAGA,QAAQ;IAExB,OAAO,IAAI,CAAC7zB,UAAU,CAAC9V,IAAI,EAAE,mBAAmB,CAAC;EACnD;EAEA+qC,+BAA+BA,CAC7B/qC,IAA0C,EAC1C6qC,QAAiB,EACa;IAC9B7qC,IAAI,CAAC8qC,MAAM,GAAGD,QAAQ;IAEtB7qC,IAAI,CAACgV,EAAE,GAAG,IAAI,CAAC21B,0BAA0B,EAAE;IAC3C,IAAI,CAAC9M,MAAM,CAAA,CAAY,CAAC;IACxB,IAAI,CAACA,MAAM,CAAA,CAAY,CAAC;IACxB,IAAI,IAAI,CAAC9L,KAAK,CAAM,EAAA,CAAC,IAAI,IAAI,CAACA,KAAK,CAAU,EAAA,CAAC,EAAE;MAC9C/xB,IAAI,CAAC8T,MAAM,GAAG,IAAI;MAClB9T,IAAI,CAAC0X,QAAQ,GAAG,KAAK;MACrB1X,IAAI,CAACgN,KAAK,GAAG,IAAI,CAACg+B,4BAA4B,CAC5C,IAAI,CAACtK,WAAW,CAAC1gC,IAAI,CAACiO,GAAG,CAACrQ,KAAK,CACjC,CAAC;IACH,CAAC,MAAM;MACLoC,IAAI,CAAC8T,MAAM,GAAG,KAAK;MACnB,IAAI,IAAI,CAAC2gB,GAAG,CAAA,EAAY,CAAC,EAAE;QACzBz0B,IAAI,CAAC0X,QAAQ,GAAG,IAAI;MACtB;MACA1X,IAAI,CAACgN,KAAK,GAAG,IAAI,CAACw4B,wBAAwB,EAAE;IAC9C;IACA,OAAO,IAAI,CAAC1vB,UAAU,CAAC9V,IAAI,EAAE,wBAAwB,CAAC;EACxD;EAEAgrC,4BAA4BA,CAC1BhrC,IAA0C,EACZ;IAC9BA,IAAI,CAAC+T,MAAM,GAAG,EAAE;IAChB/T,IAAI,CAACsP,IAAI,GAAG,IAAI;IAChBtP,IAAI,CAAC4V,cAAc,GAAG,IAAI;IAC1B5V,IAAI,CAAC0mC,IAAI,GAAG,IAAI;IAEhB,IAAI,IAAI,CAAC3U,KAAK,CAAA,EAAM,CAAC,EAAE;MACrB/xB,IAAI,CAAC4V,cAAc,GAAG,IAAI,CAAC2wB,iCAAiC,EAAE;IAChE;IAEA,IAAI,CAAC1I,MAAM,CAAA,EAAU,CAAC;IACtB,IAAI,IAAI,CAAC9L,KAAK,CAAA,EAAS,CAAC,EAAE;MACxB/xB,IAAI,CAAC0mC,IAAI,GAAG,IAAI,CAACuE,0BAA0B,CAAa,IAAI,CAAC;MAE7DjrC,IAAI,CAAC0mC,IAAI,CAACvgC,IAAI,GAAG,IAAI;MACrB,IAAI,CAAC,IAAI,CAAC4rB,KAAK,CAAA,EAAU,CAAC,EAAE;QAC1B,IAAI,CAAC8L,MAAM,CAAA,EAAS,CAAC;MACvB;IACF;IACA,OAAO,CAAC,IAAI,CAAC9L,KAAK,CAAU,EAAA,CAAC,IAAI,CAAC,IAAI,CAACA,KAAK,CAAA,EAAY,CAAC,EAAE;MACzD/xB,IAAI,CAAC+T,MAAM,CAAC8H,IAAI,CAAC,IAAI,CAACovB,0BAA0B,CAAC,KAAK,CAAC,CAAC;MACxD,IAAI,CAAC,IAAI,CAAClZ,KAAK,CAAA,EAAU,CAAC,EAAE;QAC1B,IAAI,CAAC8L,MAAM,CAAA,EAAS,CAAC;MACvB;IACF;IAEA,IAAI,IAAI,CAACpJ,GAAG,CAAA,EAAY,CAAC,EAAE;MACzBz0B,IAAI,CAACsP,IAAI,GAAG,IAAI,CAAC27B,0BAA0B,CAAC,KAAK,CAAC;IACpD;IACA,IAAI,CAACpN,MAAM,CAAA,EAAU,CAAC;IACtB79B,IAAI,CAAC2mC,UAAU,GAAG,IAAI,CAACnB,wBAAwB,EAAE;IAEjD,OAAO,IAAI,CAAC1vB,UAAU,CAAC9V,IAAI,EAAE,wBAAwB,CAAC;EACxD;EAEAkrC,+BAA+BA,CAC7BlrC,IAA0C,EAC1C6qC,QAAiB,EACa;IAC9B,MAAMM,SAAS,GAAG,IAAI,CAACx1B,SAAS,EAAE;IAClC3V,IAAI,CAAC8qC,MAAM,GAAGD,QAAQ;IACtB7qC,IAAI,CAACgN,KAAK,GAAG,IAAI,CAACg+B,4BAA4B,CAACG,SAAS,CAAC;IACzD,OAAO,IAAI,CAACr1B,UAAU,CAAC9V,IAAI,EAAE,wBAAwB,CAAC;EACxD;EAEAwoC,mBAAmBA,CAAC;IAClBC,WAAW;IACXC,UAAU;IACVC,WAAW;IACXC,UAAU;IACVC;EAOF,CAAC,EAA8B;IAC7B,MAAMnD,SAAS,GAAG,IAAI,CAACttB,KAAK,CAACiX,MAAM;IACnC,IAAI,CAACjX,KAAK,CAACiX,MAAM,GAAG,IAAI;IAExB,MAAMxC,SAAS,GAAG,IAAI,CAAClX,SAAS,EAA8B;IAE9DkX,SAAS,CAACue,cAAc,GAAG,EAAE;IAC7Bve,SAAS,CAACS,UAAU,GAAG,EAAE;IACzBT,SAAS,CAACwe,QAAQ,GAAG,EAAE;IACvBxe,SAAS,CAACye,aAAa,GAAG,EAAE;IAE5B,IAAIC,QAAQ;IACZ,IAAIC,KAAK;IACT,IAAIC,OAAO,GAAG,KAAK;IACnB,IAAI/C,UAAU,IAAI,IAAI,CAAC3W,KAAK,CAAA,CAAa,CAAC,EAAE;MAC1C,IAAI,CAAC8L,MAAM,CAAA,CAAa,CAAC;MACzB0N,QAAQ,GAAe,CAAA;MACvBC,KAAK,GAAG,IAAI;IACd,CAAC,MAAM;MACL,IAAI,CAAC3N,MAAM,CAAA,CAAU,CAAC;MACtB0N,QAAQ,GAAY,CAAA;MACpBC,KAAK,GAAG,KAAK;IACf;IAEA3e,SAAS,CAAC2e,KAAK,GAAGA,KAAK;IAEvB,OAAO,CAAC,IAAI,CAACzZ,KAAK,CAACwZ,QAAQ,CAAC,EAAE;MAC5B,IAAIV,QAAQ,GAAG,KAAK;MACpB,IAAIa,aAA0C,GAAG,IAAI;MACrD,IAAIC,eAA4C,GAAG,IAAI;MACvD,MAAM3rC,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAE;MAE7B,IAAIizB,UAAU,IAAI,IAAI,CAAC7L,YAAY,CAAA,GAAU,CAAC,EAAE;QAC9C,MAAMnI,SAAS,GAAG,IAAI,CAACA,SAAS,EAAE;QAElC,IAAIA,SAAS,CAAC30B,IAAI,KAAA,EAAa,IAAI20B,SAAS,CAAC30B,IAAI,KAAA,EAAgB,EAAE;UACjE,IAAI,CAACioB,IAAI,CAAA,CAAE;UACXwjB,aAAa,GAAG,IAAI,CAACtzB,KAAK,CAAC1B,QAAQ;UACnC+xB,WAAW,GAAG,KAAK;QACrB;MACF;MAEA,IAAIA,WAAW,IAAI,IAAI,CAAC1L,YAAY,CAAA,GAAW,CAAC,EAAE;QAChD,MAAMnI,SAAS,GAAG,IAAI,CAACA,SAAS,EAAE;QAGlC,IAAIA,SAAS,CAAC30B,IAAI,KAAA,EAAa,IAAI20B,SAAS,CAAC30B,IAAI,KAAA,EAAgB,EAAE;UACjE,IAAI,CAACioB,IAAI,CAAA,CAAE;UACX2iB,QAAQ,GAAG,IAAI;QACjB;MACF;MAEA,MAAMlB,QAAQ,GAAG,IAAI,CAACC,iBAAiB,EAAE;MAEzC,IAAI,IAAI,CAACnV,GAAG,CAAA,CAAY,CAAC,EAAE;QACzB,IAAIiX,aAAa,IAAI,IAAI,EAAE;UACzB,IAAI,CAACxmC,UAAU,CAACwmC,aAAa,CAAC;QAChC;QACA,IAAI,IAAI,CAACjX,GAAG,CAAA,CAAY,CAAC,EAAE;UACzB,IAAIkV,QAAQ,EAAE;YACZ,IAAI,CAACzkC,UAAU,CAACykC,QAAQ,CAAC17B,GAAG,CAACrQ,KAAK,CAAC;UACrC;UACAivB,SAAS,CAACye,aAAa,CAACzvB,IAAI,CAC1B,IAAI,CAACkvB,+BAA+B,CAAC/qC,IAAI,EAAE6qC,QAAQ,CACrD,CAAC;QACH,CAAC,MAAM;UACLhe,SAAS,CAACwe,QAAQ,CAACxvB,IAAI,CACrB,IAAI,CAAC+uB,0BAA0B,CAAC5qC,IAAI,EAAE6qC,QAAQ,EAAElB,QAAQ,CAC1D,CAAC;QACH;MACF,CAAC,MAAM,IAAI,IAAI,CAAC5X,KAAK,CAAA,EAAU,CAAC,IAAI,IAAI,CAACA,KAAK,CAAA,EAAM,CAAC,EAAE;QACrD,IAAI2Z,aAAa,IAAI,IAAI,EAAE;UACzB,IAAI,CAACxmC,UAAU,CAACwmC,aAAa,CAAC;QAChC;QACA,IAAI/B,QAAQ,EAAE;UACZ,IAAI,CAACzkC,UAAU,CAACykC,QAAQ,CAAC17B,GAAG,CAACrQ,KAAK,CAAC;QACrC;QACAivB,SAAS,CAACue,cAAc,CAACvvB,IAAI,CAC3B,IAAI,CAACqvB,+BAA+B,CAAClrC,IAAI,EAAE6qC,QAAQ,CACrD,CAAC;MACH,CAAC,MAAM;QACL,IAAIxqC,IAAI,GAAG,MAAM;QAEjB,IAAI,IAAI,CAAC08B,YAAY,CAAQ,EAAA,CAAC,IAAI,IAAI,CAACA,YAAY,CAAQ,GAAA,CAAC,EAAE;UAC5D,MAAMnI,SAAS,GAAG,IAAI,CAACA,SAAS,EAAE;UAClC,IAAIzP,0BAA0B,CAACyP,SAAS,CAAC30B,IAAI,CAAC,EAAE;YAC9CI,IAAI,GAAG,IAAI,CAAC+X,KAAK,CAACpL,KAAK;YACvB,IAAI,CAACkb,IAAI,CAAA,CAAE;UACb;QACF;QAEA,MAAM0jB,aAAa,GAAG,IAAI,CAACC,2BAA2B,CACpD7rC,IAAI,EACJ6qC,QAAQ,EACRa,aAAa,EACb/B,QAAQ,EACRtpC,IAAI,EACJsoC,WAAW,EACXE,YAAY,WAAZA,YAAY,GAAI,CAAC2C,KACnB,CAAC;QAED,IAAII,aAAa,KAAK,IAAI,EAAE;UAC1BH,OAAO,GAAG,IAAI;UACdE,eAAe,GAAG,IAAI,CAACvzB,KAAK,CAACC,eAAe;QAC9C,CAAC,MAAM;UACLwU,SAAS,CAACS,UAAU,CAACzR,IAAI,CAAC+vB,aAAa,CAAC;QAC1C;MACF;MAEA,IAAI,CAACE,uBAAuB,CAAA,CAAE;MAE9B,IACEH,eAAe,IACf,CAAC,IAAI,CAAC5Z,KAAK,CAAA,CAAU,CAAC,IACtB,CAAC,IAAI,CAACA,KAAK,CAAA,CAAa,CAAC,EACzB;QACA,IAAI,CAACxa,KAAK,CACRupB,UAAU,CAAC4C,iCAAiC,EAC5CiI,eACF,CAAC;MACH;IACF;IAEA,IAAI,CAAC9N,MAAM,CAAC0N,QAAQ,CAAC;IAOrB,IAAI5C,WAAW,EAAE;MACf9b,SAAS,CAAC4e,OAAO,GAAGA,OAAO;IAC7B;IAEA,MAAM1a,GAAG,GAAG,IAAI,CAACjb,UAAU,CAAC+W,SAAS,EAAE,sBAAsB,CAAC;IAE9D,IAAI,CAACzU,KAAK,CAACiX,MAAM,GAAGqW,SAAS;IAE7B,OAAO3U,GAAG;EACZ;EAEA8a,2BAA2BA,CACzB7rC,IAAuE,EACvE6qC,QAAiB,EACjBa,aAA0C,EAC1C/B,QAA2C,EAC3CtpC,IAAY,EACZsoC,WAAoB,EACpBE,YAAqB,EAC6C;IAClE,IAAI,IAAI,CAACpU,GAAG,CAAA,EAAY,CAAC,EAAE;MACzB,MAAMsX,cAAc,GAClB,IAAI,CAACha,KAAK,GAAS,CAAC,IACpB,IAAI,CAACA,KAAK,CAAA,EAAQ,CAAC,IACnB,IAAI,CAACA,KAAK,CAAU,CAAA,CAAC,IACrB,IAAI,CAACA,KAAK,CAAA,CAAa,CAAC;MAE1B,IAAIga,cAAc,EAAE;QAClB,IAAI,CAACpD,WAAW,EAAE;UAChB,IAAI,CAACpxB,KAAK,CACRupB,UAAU,CAAC4B,sBAAsB,EACjC,IAAI,CAACtqB,KAAK,CAACC,eACb,CAAC;QACH,CAAC,MAAM,IAAI,CAACwwB,YAAY,EAAE;UACxB,IAAI,CAACtxB,KAAK,CACRupB,UAAU,CAAC2B,kBAAkB,EAC7B,IAAI,CAACrqB,KAAK,CAACC,eACb,CAAC;QACH;QACA,IAAIsxB,QAAQ,EAAE;UACZ,IAAI,CAACpyB,KAAK,CAACupB,UAAU,CAAC6B,eAAe,EAAEgH,QAAQ,CAAC;QAClD;QAEA,OAAO,IAAI;MACb;MAEA,IAAI,CAAChB,WAAW,EAAE;QAChB,IAAI,CAACpxB,KAAK,CACRupB,UAAU,CAACgD,oBAAoB,EAC/B,IAAI,CAAC1rB,KAAK,CAACC,eACb,CAAC;MACH;MACA,IAAIqzB,aAAa,IAAI,IAAI,EAAE;QACzB,IAAI,CAACxmC,UAAU,CAACwmC,aAAa,CAAC;MAChC;MACA,IAAI/B,QAAQ,EAAE;QACZ,IAAI,CAACpyB,KAAK,CAACupB,UAAU,CAACoC,cAAc,EAAEyG,QAAQ,CAAC;MACjD;MAEA3pC,IAAI,CAAC8O,QAAQ,GAAG,IAAI,CAAC62B,aAAa,EAAE;MACpC,OAAO,IAAI,CAAC7vB,UAAU,CAAC9V,IAAI,EAAE,0BAA0B,CAAC;IAC1D,CAAC,MAAM;MACLA,IAAI,CAAC6G,GAAG,GAAG,IAAI,CAAC8jC,0BAA0B,EAAE;MAC5C3qC,IAAI,CAAC8qC,MAAM,GAAGD,QAAQ;MACtB7qC,IAAI,CAACgsC,KAAK,GAAGN,aAAa,IAAI,IAAI;MAClC1rC,IAAI,CAACK,IAAI,GAAGA,IAAI;MAEhB,IAAIqX,QAAQ,GAAG,KAAK;MACpB,IAAI,IAAI,CAACqa,KAAK,CAAM,EAAA,CAAC,IAAI,IAAI,CAACA,KAAK,CAAU,EAAA,CAAC,EAAE;QAE9C/xB,IAAI,CAAC8T,MAAM,GAAG,IAAI;QAElB,IAAI43B,aAAa,IAAI,IAAI,EAAE;UACzB,IAAI,CAACxmC,UAAU,CAACwmC,aAAa,CAAC;QAChC;QACA,IAAI/B,QAAQ,EAAE;UACZ,IAAI,CAACzkC,UAAU,CAACykC,QAAQ,CAAC17B,GAAG,CAACrQ,KAAK,CAAC;QACrC;QAEAoC,IAAI,CAACgN,KAAK,GAAG,IAAI,CAACg+B,4BAA4B,CAC5C,IAAI,CAACtK,WAAW,CAAC1gC,IAAI,CAACiO,GAAG,CAACrQ,KAAK,CACjC,CAAC;QACD,IAAIyC,IAAI,KAAK,KAAK,IAAIA,IAAI,KAAK,KAAK,EAAE;UACpC,IAAI,CAAC4rC,2BAA2B,CAACjsC,IAAI,CAAC;QACxC;QAEA,IACE,CAAC2oC,WAAW,IACZ3oC,IAAI,CAAC6G,GAAG,CAACV,IAAI,KAAK,aAAa,IAC/BnG,IAAI,CAACgN,KAAK,CAAC05B,IAAI,EACf;UACA,IAAI,CAACnvB,KAAK,CACRupB,UAAU,CAACsC,4BAA4B,EACvCpjC,IAAI,CAACgN,KAAK,CAAC05B,IACb,CAAC;QACH;MACF,CAAC,MAAM;QACL,IAAIrmC,IAAI,KAAK,MAAM,EAAE,IAAI,CAAC6E,UAAU,CAAA,CAAE;QAEtClF,IAAI,CAAC8T,MAAM,GAAG,KAAK;QAEnB,IAAI,IAAI,CAAC2gB,GAAG,CAAA,EAAY,CAAC,EAAE;UACzB/c,QAAQ,GAAG,IAAI;QACjB;QACA1X,IAAI,CAACgN,KAAK,GAAG,IAAI,CAACw4B,wBAAwB,EAAE;QAC5CxlC,IAAI,CAAC2pC,QAAQ,GAAGA,QAAQ;MAC1B;MAEA3pC,IAAI,CAAC0X,QAAQ,GAAGA,QAAQ;MAExB,OAAO,IAAI,CAAC5B,UAAU,CAAC9V,IAAI,EAAE,oBAAoB,CAAC;IACpD;EACF;EAIAisC,2BAA2BA,CACzBpN,QAEC,EACK;IACN,MAAMqN,UAAU,GAAGrN,QAAQ,CAACx+B,IAAI,KAAK,KAAK,GAAG,CAAC,GAAG,CAAC;IAClD,MAAMmY,MAAM,GACVqmB,QAAQ,CAAC7xB,KAAK,CAAC+G,MAAM,CAACyE,MAAM,IAAIqmB,QAAQ,CAAC7xB,KAAK,CAACsC,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;IAE9D,IAAIuvB,QAAQ,CAAC7xB,KAAK,CAAC05B,IAAI,EAAE;MACvB,IAAI,CAACnvB,KAAK,CACRsnB,QAAQ,CAACx+B,IAAI,KAAK,KAAK,GACnBygC,UAAU,CAACwB,yBAAyB,GACpCxB,UAAU,CAACmC,yBAAyB,EACxCpE,QAAQ,CAAC7xB,KAAK,CAAC05B,IACjB,CAAC;IACH;IAEA,IAAIluB,MAAM,KAAK0zB,UAAU,EAAE;MACzB,IAAI,CAAC30B,KAAK,CACRsnB,QAAQ,CAACx+B,IAAI,KAAK,KAAK,GACnBoP,MAAM,CAAC3O,cAAc,GACrB2O,MAAM,CAAC1O,cAAc,EACzB89B,QACF,CAAC;IACH;IAEA,IAAIA,QAAQ,CAACx+B,IAAI,KAAK,KAAK,IAAIw+B,QAAQ,CAAC7xB,KAAK,CAACsC,IAAI,EAAE;MAClD,IAAI,CAACiI,KAAK,CAAC9H,MAAM,CAACzO,sBAAsB,EAAE69B,QAAQ,CAAC;IACrD;EACF;EAEAiN,uBAAuBA,CAAAA,EAAS;IAC9B,IACE,CAAC,IAAI,CAACrX,GAAG,CAAA,EAAQ,CAAC,IAClB,CAAC,IAAI,CAACA,GAAG,CAAS,EAAA,CAAC,IACnB,CAAC,IAAI,CAAC1C,KAAK,CAAA,CAAU,CAAC,IACtB,CAAC,IAAI,CAACA,KAAK,CAAa,CAAA,CAAC,EACzB;MACA,IAAI,CAAC7sB,UAAU,CAAA,CAAE;IACnB;EACF;EAEA4jC,gCAAgCA,CAC9BpyB,QAAmB,EACnB1B,EAAiB,EAC6B;IAAA,IAAAm3B,SAAA;IAC9C,CAAAA,SAAA,GAAAz1B,QAAQ,KAAA,IAAA,GAAAy1B,SAAA,GAARz1B,QAAQ,GAAK,IAAI,CAAC0B,KAAK,CAAC1B,QAAQ;IAChC,IAAI1W,IAAkD,GACpDgV,EAAE,IAAI,IAAI,CAACmzB,6BAA6B,CAAC,IAAI,CAAC;IAEhD,OAAO,IAAI,CAAC1T,GAAG,CAAA,EAAO,CAAC,EAAE;MACvB,MAAM2X,KAAK,GAAG,IAAI,CAAC1L,WAAW,CAAgChqB,QAAQ,CAAC;MACvE01B,KAAK,CAACC,aAAa,GAAGrsC,IAAI;MAC1BosC,KAAK,CAACp3B,EAAE,GAAG,IAAI,CAACmzB,6BAA6B,CAAC,IAAI,CAAC;MACnDnoC,IAAI,GAAG,IAAI,CAAC8V,UAAU,CAACs2B,KAAK,EAAE,yBAAyB,CAAC;IAC1D;IAEA,OAAOpsC,IAAI;EACb;EAEAssC,oBAAoBA,CAClB51B,QAAkB,EAClB1B,EAAgB,EACa;IAC7B,MAAMhV,IAAI,GAAG,IAAI,CAAC0gC,WAAW,CAA8BhqB,QAAQ,CAAC;IAEpE1W,IAAI,CAAC4V,cAAc,GAAG,IAAI;IAC1B5V,IAAI,CAACgV,EAAE,GAAG,IAAI,CAAC8zB,gCAAgC,CAACpyB,QAAQ,EAAE1B,EAAE,CAAC;IAE7D,IAAI,IAAI,CAAC+c,KAAK,CAAA,EAAM,CAAC,EAAE;MACrB/xB,IAAI,CAAC4V,cAAc,GAAG,IAAI,CAACmzB,mCAAmC,EAAE;IAClE;IAEA,OAAO,IAAI,CAACjzB,UAAU,CAAC9V,IAAI,EAAE,uBAAuB,CAAC;EACvD;EAEAusC,mBAAmBA,CAAAA,EAA+B;IAChD,MAAMvsC,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAA8B;IACzD,IAAI,CAACkoB,MAAM,CAAA,EAAW,CAAC;IACvB79B,IAAI,CAAC8O,QAAQ,GAAG,IAAI,CAAC09B,oBAAoB,EAAE;IAC3C,OAAO,IAAI,CAAC12B,UAAU,CAAC9V,IAAI,EAAE,sBAAsB,CAAC;EACtD;EAEAysC,kBAAkBA,CAAAA,EAA8B;IAC9C,MAAMzsC,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAA6B;IACxD3V,IAAI,CAAC6Z,KAAK,GAAG,EAAE;IACf,IAAI,CAACgkB,MAAM,CAAA,CAAY,CAAC;IAExB,OAAO,IAAI,CAACzlB,KAAK,CAAC/J,GAAG,GAAG,IAAI,CAACmK,MAAM,IAAI,CAAC,IAAI,CAACuZ,KAAK,CAAA,CAAY,CAAC,EAAE;MAC/D/xB,IAAI,CAAC6Z,KAAK,CAACgC,IAAI,CAAC,IAAI,CAAC8pB,aAAa,CAAE,CAAA,CAAC;MACrC,IAAI,IAAI,CAAC5T,KAAK,CAAA,CAAY,CAAC,EAAE;MAC7B,IAAI,CAAC8L,MAAM,CAAA,EAAS,CAAC;IACvB;IACA,IAAI,CAACA,MAAM,CAAA,CAAY,CAAC;IACxB,OAAO,IAAI,CAAC/nB,UAAU,CAAC9V,IAAI,EAAE,qBAAqB,CAAC;EACrD;EAEAirC,0BAA0BA,CAACyB,KAAc,EAA2B;IAClE,IAAIvmC,IAAI,GAAG,IAAI;IACf,IAAIuR,QAAQ,GAAG,KAAK;IACpB,IAAIkvB,cAAc,GAAG,IAAI;IACzB,MAAM5mC,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAA2B;IACtD,MAAMg3B,EAAE,GAAG,IAAI,CAAC/X,SAAS,EAAE;IAC3B,MAAMgY,MAAM,GAAG,IAAI,CAACx0B,KAAK,CAACnY,IAAI,KAAa,EAAA;IAE3C,IAAI0sC,EAAE,CAAC1sC,IAAI,KAAA,EAAa,IAAI0sC,EAAE,CAAC1sC,IAAI,KAAA,EAAgB,EAAE;MACnD,IAAI2sC,MAAM,IAAI,CAACF,KAAK,EAAE;QACpB,IAAI,CAACn1B,KAAK,CAACupB,UAAU,CAACwC,oBAAoB,EAAEtjC,IAAI,CAAC;MACnD;MACAmG,IAAI,GAAG,IAAI,CAACigC,eAAe,CAACwG,MAAM,CAAC;MACnC,IAAI,IAAI,CAACnY,GAAG,CAAA,EAAY,CAAC,EAAE;QACzB/c,QAAQ,GAAG,IAAI;QACf,IAAIk1B,MAAM,EAAE;UACV,IAAI,CAACr1B,KAAK,CAACupB,UAAU,CAACuC,yBAAyB,EAAErjC,IAAI,CAAC;QACxD;MACF;MACA4mC,cAAc,GAAG,IAAI,CAACpB,wBAAwB,EAAE;IAClD,CAAC,MAAM;MACLoB,cAAc,GAAG,IAAI,CAACjB,aAAa,EAAE;IACvC;IACA3lC,IAAI,CAACmG,IAAI,GAAGA,IAAI;IAChBnG,IAAI,CAAC0X,QAAQ,GAAGA,QAAQ;IACxB1X,IAAI,CAAC4mC,cAAc,GAAGA,cAAc;IACpC,OAAO,IAAI,CAAC9wB,UAAU,CAAC9V,IAAI,EAAE,mBAAmB,CAAC;EACnD;EAEA6sC,kCAAkCA,CAChC5sC,IAAgB,EACS;IACzB,MAAMD,IAAI,GAAG,IAAI,CAAC0gC,WAAW,CAA0BzgC,IAAI,CAACgO,GAAG,CAACrQ,KAAK,CAAC;IACtEoC,IAAI,CAACmG,IAAI,GAAG,IAAI;IAChBnG,IAAI,CAAC0X,QAAQ,GAAG,KAAK;IACrB1X,IAAI,CAAC4mC,cAAc,GAAG3mC,IAAI;IAC1B,OAAO,IAAI,CAAC6V,UAAU,CAAC9V,IAAI,EAAE,mBAAmB,CAAC;EACnD;EAEAymC,2BAA2BA,CAAC1yB,MAAiC,GAAG,EAAE,EAIhE;IACA,IAAIzE,IAAgD,GAAG,IAAI;IAC3D,IAAI0R,KAAiD,GAAG,IAAI;IAC5D,IAAI,IAAI,CAAC+Q,KAAK,CAAA,EAAS,CAAC,EAAE;MACxB/Q,KAAK,GAAG,IAAI,CAACiqB,0BAA0B,CAAa,IAAI,CAAC;MAEzDjqB,KAAK,CAAC7a,IAAI,GAAG,IAAI;MACjB,IAAI,CAAC,IAAI,CAAC4rB,KAAK,CAAA,EAAU,CAAC,EAAE;QAC1B,IAAI,CAAC8L,MAAM,CAAA,EAAS,CAAC;MACvB;IACF;IACA,OAAO,CAAC,IAAI,CAAC9L,KAAK,CAAU,EAAA,CAAC,IAAI,CAAC,IAAI,CAACA,KAAK,CAAA,EAAY,CAAC,EAAE;MACzDhe,MAAM,CAAC8H,IAAI,CAAC,IAAI,CAACovB,0BAA0B,CAAC,KAAK,CAAC,CAAC;MACnD,IAAI,CAAC,IAAI,CAAClZ,KAAK,CAAA,EAAU,CAAC,EAAE;QAC1B,IAAI,CAAC8L,MAAM,CAAA,EAAS,CAAC;MACvB;IACF;IACA,IAAI,IAAI,CAACpJ,GAAG,CAAA,EAAY,CAAC,EAAE;MACzBnlB,IAAI,GAAG,IAAI,CAAC27B,0BAA0B,CAAC,KAAK,CAAC;IAC/C;IACA,OAAO;MAAEl3B,MAAM;MAAEzE,IAAI;MAAE0R;KAAO;EAChC;EAEA8rB,yBAAyBA,CACvBp2B,QAAkB,EAClB1W,IAAwB,EACxBgV,EAAgB,EACJ;IACZ,QAAQA,EAAE,CAAC7O,IAAI;MACb,KAAK,KAAK;QACR,OAAO,IAAI,CAAC2P,UAAU,CAAC9V,IAAI,EAAE,mBAAmB,CAAC;MAEnD,KAAK,MAAM;MACX,KAAK,SAAS;QACZ,OAAO,IAAI,CAAC8V,UAAU,CAAC9V,IAAI,EAAE,uBAAuB,CAAC;MAEvD,KAAK,OAAO;QACV,OAAO,IAAI,CAAC8V,UAAU,CAAC9V,IAAI,EAAE,qBAAqB,CAAC;MAErD,KAAK,OAAO;QACV,OAAO,IAAI,CAAC8V,UAAU,CAAC9V,IAAI,EAAE,qBAAqB,CAAC;MAErD,KAAK,QAAQ;QACX,OAAO,IAAI,CAAC8V,UAAU,CAAC9V,IAAI,EAAE,sBAAsB,CAAC;MAEtD,KAAK,QAAQ;QACX,OAAO,IAAI,CAAC8V,UAAU,CAAC9V,IAAI,EAAE,sBAAsB,CAAC;MAEtD,KAAK,QAAQ;QACX,OAAO,IAAI,CAAC8V,UAAU,CAAC9V,IAAI,EAAE,sBAAsB,CAAC;MAEtD;QACE,IAAI,CAACipC,kBAAkB,CAACj0B,EAAE,CAAC7O,IAAI,CAAC;QAChC,OAAO,IAAI,CAACmmC,oBAAoB,CAAC51B,QAAQ,EAAE1B,EAAE,CAAC;IAClD;EACF;EAKAw3B,oBAAoBA,CAAAA,EAAe;IACjC,MAAM91B,QAAQ,GAAG,IAAI,CAAC0B,KAAK,CAAC1B,QAAQ;IACpC,MAAM1W,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAA6B;IACxD,IAAI6wB,GAAG;IACP,IAAIvmC,IAAI;IACR,IAAI8sC,aAAa,GAAG,KAAK;IACzB,MAAMzC,qBAAqB,GAAG,IAAI,CAAClyB,KAAK,CAACkX,kBAAkB;IAE3D,QAAQ,IAAI,CAAClX,KAAK,CAACnY,IAAI;MACrB,KAAA,CAAA;QACE,OAAO,IAAI,CAACuoC,mBAAmB,CAAC;UAC9BC,WAAW,EAAE,KAAK;UAClBC,UAAU,EAAE,KAAK;UACjBC,WAAW,EAAE,IAAI;UACjBC,UAAU,EAAE,KAAK;UACjBC,YAAY,EAAE;QAChB,CAAC,CAAC;MAEJ,KAAA,CAAA;QACE,OAAO,IAAI,CAACL,mBAAmB,CAAC;UAC9BC,WAAW,EAAE,KAAK;UAClBC,UAAU,EAAE,IAAI;UAChBC,WAAW,EAAE,IAAI;UACjBC,UAAU,EAAE,KAAK;UACjBC,YAAY,EAAE;QAChB,CAAC,CAAC;MAEJ,KAAA,CAAA;QACE,IAAI,CAACzwB,KAAK,CAACkX,kBAAkB,GAAG,KAAK;QACrCrvB,IAAI,GAAG,IAAI,CAACwsC,kBAAkB,EAAE;QAChC,IAAI,CAACr0B,KAAK,CAACkX,kBAAkB,GAAGgb,qBAAqB;QACrD,OAAOrqC,IAAI;MAEb,KAAA,EAAA;QAAY;UACV,MAAMD,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAgC;UAC3D3V,IAAI,CAAC4V,cAAc,GAAG,IAAI,CAAC2wB,iCAAiC,EAAE;UAC9D,IAAI,CAAC1I,MAAM,CAAA,EAAU,CAAC;UACtB2I,GAAG,GAAG,IAAI,CAACC,2BAA2B,EAAE;UACxCzmC,IAAI,CAAC+T,MAAM,GAAGyyB,GAAG,CAACzyB,MAAM;UACxB/T,IAAI,CAACsP,IAAI,GAAGk3B,GAAG,CAACl3B,IAAI;UACpBtP,IAAI,CAAC0mC,IAAI,GAAGF,GAAG,CAACxlB,KAAK;UACrB,IAAI,CAAC6c,MAAM,CAAA,EAAU,CAAC;UAEtB,IAAI,CAACA,MAAM,CAAA,EAAS,CAAC;UAErB79B,IAAI,CAAC2mC,UAAU,GAAG,IAAI,CAAChB,aAAa,EAAE;UAEtC,OAAO,IAAI,CAAC7vB,UAAU,CAAC9V,IAAI,EAAE,wBAAwB,CAAC;QACxD;MAEA,KAAA,EAAA;QAAgB;UACd,MAAMA,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAgC;UAC3D,IAAI,CAACuS,IAAI,CAAA,CAAE;UAGX,IAAI,CAAC,IAAI,CAAC6J,KAAK,CAAU,EAAA,CAAC,IAAI,CAAC,IAAI,CAACA,KAAK,CAAA,EAAY,CAAC,EAAE;YACtD,IAAI/M,iBAAiB,CAAC,IAAI,CAAC5M,KAAK,CAACnY,IAAI,CAAC,IAAI,IAAI,CAAC8xB,KAAK,CAAA,EAAS,CAAC,EAAE;cAC9D,MAAM1lB,KAAK,GAAG,IAAI,CAACuoB,SAAS,CAAA,CAAE,CAAC30B,IAAI;cACnC8sC,aAAa,GAAG1gC,KAAK,KAAgB,EAAA,IAAIA,KAAK,KAAa,EAAA;YAC7D,CAAC,MAAM;cACL0gC,aAAa,GAAG,IAAI;YACtB;UACF;UAEA,IAAIA,aAAa,EAAE;YACjB,IAAI,CAAC30B,KAAK,CAACkX,kBAAkB,GAAG,KAAK;YACrCrvB,IAAI,GAAG,IAAI,CAAC0lC,aAAa,EAAE;YAC3B,IAAI,CAACvtB,KAAK,CAACkX,kBAAkB,GAAGgb,qBAAqB;YAGrD,IACE,IAAI,CAAClyB,KAAK,CAACkX,kBAAkB,IAC7B,EACE,IAAI,CAACyC,KAAK,CAAS,EAAA,CAAC,IACnB,IAAI,CAACA,KAAK,CAAU,EAAA,CAAC,IAAI,IAAI,CAAC6C,SAAS,CAAA,CAAE,CAAC30B,IAAI,KAAc,EAAA,CAC9D,EACD;cACA,IAAI,CAAC49B,MAAM,CAAA,EAAU,CAAC;cACtB,OAAO59B,IAAI;YACb,CAAC,MAAM;cAEL,IAAI,CAACw0B,GAAG,CAAA,EAAS,CAAC;YACpB;UACF;UAEA,IAAIx0B,IAAI,EAAE;YACRumC,GAAG,GAAG,IAAI,CAACC,2BAA2B,CAAC,CACrC,IAAI,CAACoG,kCAAkC,CAAC5sC,IAAI,CAAC,CAC9C,CAAC;UACJ,CAAC,MAAM;YACLumC,GAAG,GAAG,IAAI,CAACC,2BAA2B,EAAE;UAC1C;UAEAzmC,IAAI,CAAC+T,MAAM,GAAGyyB,GAAG,CAACzyB,MAAM;UACxB/T,IAAI,CAACsP,IAAI,GAAGk3B,GAAG,CAACl3B,IAAI;UACpBtP,IAAI,CAAC0mC,IAAI,GAAGF,GAAG,CAACxlB,KAAK;UAErB,IAAI,CAAC6c,MAAM,CAAA,EAAU,CAAC;UAEtB,IAAI,CAACA,MAAM,CAAA,EAAS,CAAC;UAErB79B,IAAI,CAAC2mC,UAAU,GAAG,IAAI,CAAChB,aAAa,EAAE;UAEtC3lC,IAAI,CAAC4V,cAAc,GAAG,IAAI;UAE1B,OAAO,IAAI,CAACE,UAAU,CAAC9V,IAAI,EAAE,wBAAwB,CAAC;QACxD;MAEA,KAAA,GAAA;QACE,OAAO,IAAI,CAAC4S,YAAY,CACtB,IAAI,CAACwF,KAAK,CAACpL,KAAK,EAChB,6BACF,CAAC;MAEH,KAAA,EAAA;MACA,KAAA,EAAA;QACEhN,IAAI,CAACgN,KAAK,GAAG,IAAI,CAAC+kB,KAAK,GAAS,CAAC;QACjC,IAAI,CAAC7J,IAAI,CAAA,CAAE;QACX,OAAO,IAAI,CAACpS,UAAU,CACpB9V,IAAI,EACJ,8BACF,CAAC;MAEH,KAAA,EAAA;QACE,IAAI,IAAI,CAACoY,KAAK,CAACpL,KAAK,KAAK,GAAG,EAAE;UAC5B,IAAI,CAACkb,IAAI,CAAA,CAAE;UACX,IAAI,IAAI,CAAC6J,KAAK,CAAA,GAAO,CAAC,EAAE;YACtB,OAAO,IAAI,CAACib,kBAAkB,CAC5B,CAAC,IAAI,CAAC50B,KAAK,CAACpL,KAAK,EACjB,6BAA6B,EAC7BhN,IACF,CAAC;UACH;UAEA,IAAI,IAAI,CAAC+xB,KAAK,CAAA,GAAU,CAAC,EAAE;YACzB,OAAO,IAAI,CAACib,kBAAkB,CAC5B,CAAC,IAAI,CAAC50B,KAAK,CAACpL,KAAK,EACjB,6BAA6B,EAC7BhN,IACF,CAAC;UACH;UAEA,MAAM,IAAI,CAACuX,KAAK,CACdupB,UAAU,CAACiD,4BAA4B,EACvC,IAAI,CAAC3rB,KAAK,CAAC1B,QACb,CAAC;QACH;QACA,IAAI,CAACxR,UAAU,CAAA,CAAE;QACjB;MACF,KAAA,GAAA;QACE,OAAO,IAAI,CAAC0N,YAAY,CACtB,IAAI,CAACwF,KAAK,CAACpL,KAAK,EAChB,6BACF,CAAC;MAEH,KAAA,GAAA;QACE,OAAO,IAAI,CAAC4F,YAAY,CACtB,IAAI,CAACwF,KAAK,CAACpL,KAAK,EAChB,6BACF,CAAC;MAEH,KAAA,EAAA;QACE,IAAI,CAACkb,IAAI,CAAA,CAAE;QACX,OAAO,IAAI,CAACpS,UAAU,CAAC9V,IAAI,EAAE,oBAAoB,CAAC;MAEpD,KAAA,EAAA;QACE,IAAI,CAACkoB,IAAI,CAAA,CAAE;QACX,OAAO,IAAI,CAACpS,UAAU,CAAC9V,IAAI,EAAE,2BAA2B,CAAC;MAE3D,KAAA,EAAA;QACE,IAAI,CAACkoB,IAAI,CAAA,CAAE;QACX,OAAO,IAAI,CAACpS,UAAU,CAAC9V,IAAI,EAAE,oBAAoB,CAAC;MAEpD,KAAA,EAAA;QACE,IAAI,CAACkoB,IAAI,CAAA,CAAE;QACX,OAAO,IAAI,CAACpS,UAAU,CAAC9V,IAAI,EAAE,sBAAsB,CAAC;MAEtD,KAAA,EAAA;QACE,OAAO,IAAI,CAACusC,mBAAmB,EAAE;MAEnC;QACE,IAAI9mB,cAAc,CAAC,IAAI,CAACrN,KAAK,CAACnY,IAAI,CAAC,EAAE;UACnC,MAAMua,KAAK,GAAGuL,cAAc,CAAC,IAAI,CAAC3N,KAAK,CAACnY,IAAI,CAAC;UAC7C,IAAI,CAACioB,IAAI,CAAA,CAAE;UACX,OAAO,KAAK,CAAC+kB,gBAAgB,CAACjtC,IAAI,EAA0Bwa,KAAK,CAAC;QACnE,CAAA,MAAM,IAAIwK,iBAAiB,CAAC,IAAI,CAAC5M,KAAK,CAACnY,IAAI,CAAC,EAAE;UAC7C,IAAI,IAAI,CAAC88B,YAAY,CAAA,GAAc,CAAC,EAAE;YACpC,OAAO,IAAI,CAAC2N,sBAAsB,EAAE;UACtC;UAEA,OAAO,IAAI,CAACoC,yBAAyB,CACnCp2B,QAAQ,EACR1W,IAAI,EACJ,IAAI,CAAComC,eAAe,CAAA,CACtB,CAAC;QACH;IACJ;IAEA,IAAI,CAAClhC,UAAU,CAAA,CAAE;EACnB;EAEAgoC,oBAAoBA,CAAAA,EAAe;IACjC,MAAMx2B,QAAQ,GAAG,IAAI,CAAC0B,KAAK,CAAC1B,QAAQ;IACpC,IAAIzW,IAAI,GAAG,IAAI,CAACusC,oBAAoB,EAAE;IACtC,IAAIW,yBAAyB,GAAG,KAAK;IACrC,OACE,CAAC,IAAI,CAACpb,KAAK,CAAY,CAAA,CAAC,IAAI,IAAI,CAACA,KAAK,CAAe,EAAA,CAAC,KACtD,CAAC,IAAI,CAACwL,kBAAkB,CAAA,CAAE,EAC1B;MACA,MAAMv9B,IAAI,GAAG,IAAI,CAAC0gC,WAAW,CAA4BhqB,QAAQ,CAAC;MAClE,MAAMgB,QAAQ,GAAG,IAAI,CAAC+c,GAAG,GAAe,CAAC;MACzC0Y,yBAAyB,GAAGA,yBAAyB,IAAIz1B,QAAQ;MACjE,IAAI,CAACmmB,MAAM,CAAA,CAAY,CAAC;MACxB,IAAI,CAACnmB,QAAQ,IAAI,IAAI,CAACqa,KAAK,CAAA,CAAY,CAAC,EAAE;QACxC/xB,IAAI,CAAC06B,WAAW,GAAGz6B,IAAI;QACvB,IAAI,CAACioB,IAAI,CAAA,CAAE;QACXjoB,IAAI,GAAG,IAAI,CAAC6V,UAAU,CAAC9V,IAAI,EAAE,qBAAqB,CAAC;MACrD,CAAC,MAAM;QACLA,IAAI,CAACotC,UAAU,GAAGntC,IAAI;QACtBD,IAAI,CAACqtC,SAAS,GAAG,IAAI,CAAC1H,aAAa,EAAE;QACrC,IAAI,CAAC9H,MAAM,CAAA,CAAY,CAAC;QACxB,IAAIsP,yBAAyB,EAAE;UAC7BntC,IAAI,CAAC0X,QAAQ,GAAGA,QAAQ;UACxBzX,IAAI,GAAG,IAAI,CAAC6V,UAAU,CAEpB9V,IAAI,EACJ,2BACF,CAAC;QACH,CAAC,MAAM;UACLC,IAAI,GAAG,IAAI,CAAC6V,UAAU,CAEpB9V,IAAI,EACJ,mBACF,CAAC;QACH;MACF;IACF;IACA,OAAOC,IAAI;EACb;EAEAqtC,mBAAmBA,CAAAA,EAAe;IAChC,MAAMttC,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAA6B;IACxD,IAAI,IAAI,CAAC8e,GAAG,CAAA,EAAY,CAAC,EAAE;MACzBz0B,IAAI,CAAC4mC,cAAc,GAAG,IAAI,CAAC0G,mBAAmB,EAAE;MAChD,OAAO,IAAI,CAACx3B,UAAU,CAAC9V,IAAI,EAAE,wBAAwB,CAAC;IACxD,CAAC,MAAM;MACL,OAAO,IAAI,CAACktC,oBAAoB,EAAE;IACpC;EACF;EAEAK,kCAAkCA,CAAAA,EAAe;IAC/C,MAAMC,KAAK,GAAG,IAAI,CAACF,mBAAmB,EAAE;IACxC,IAAI,CAAC,IAAI,CAACl1B,KAAK,CAACkX,kBAAkB,IAAI,IAAI,CAACmF,GAAG,CAAS,EAAA,CAAC,EAAE;MAExD,MAAMz0B,IAAI,GAAG,IAAI,CAAC0gC,WAAW,CAC3B8M,KAAK,CAACv/B,GAAG,CAACrQ,KACZ,CAAC;MACDoC,IAAI,CAAC+T,MAAM,GAAG,CAAC,IAAI,CAAC84B,kCAAkC,CAACW,KAAK,CAAC,CAAC;MAC9DxtC,IAAI,CAACsP,IAAI,GAAG,IAAI;MAChBtP,IAAI,CAAC0mC,IAAI,GAAG,IAAI;MAChB1mC,IAAI,CAAC2mC,UAAU,GAAG,IAAI,CAAChB,aAAa,EAAE;MACtC3lC,IAAI,CAAC4V,cAAc,GAAG,IAAI;MAC1B,OAAO,IAAI,CAACE,UAAU,CAAC9V,IAAI,EAAE,wBAAwB,CAAC;IACxD;IACA,OAAOwtC,KAAK;EACd;EAEAC,yBAAyBA,CAAAA,EAAe;IACtC,MAAMztC,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAA6B;IACxD,IAAI,CAAC8e,GAAG,CAAA,EAAc,CAAC;IACvB,MAAMx0B,IAAI,GAAG,IAAI,CAACstC,kCAAkC,EAAE;IACtDvtC,IAAI,CAAC6Z,KAAK,GAAG,CAAC5Z,IAAI,CAAC;IACnB,OAAO,IAAI,CAACw0B,GAAG,CAAA,EAAc,CAAC,EAAE;MAC9Bz0B,IAAI,CAAC6Z,KAAK,CAACgC,IAAI,CAAC,IAAI,CAAC0xB,kCAAkC,CAAE,CAAA,CAAC;IAC5D;IACA,OAAOvtC,IAAI,CAAC6Z,KAAK,CAACrB,MAAM,KAAK,CAAC,GAC1BvY,IAAI,GACJ,IAAI,CAAC6V,UAAU,CAAC9V,IAAI,EAAE,4BAA4B,CAAC;EACzD;EAEA0tC,kBAAkBA,CAAAA,EAAe;IAC/B,MAAM1tC,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAA6B;IACxD,IAAI,CAAC8e,GAAG,CAAA,EAAa,CAAC;IACtB,MAAMx0B,IAAI,GAAG,IAAI,CAACwtC,yBAAyB,EAAE;IAC7CztC,IAAI,CAAC6Z,KAAK,GAAG,CAAC5Z,IAAI,CAAC;IACnB,OAAO,IAAI,CAACw0B,GAAG,CAAA,EAAa,CAAC,EAAE;MAC7Bz0B,IAAI,CAAC6Z,KAAK,CAACgC,IAAI,CAAC,IAAI,CAAC4xB,yBAAyB,CAAE,CAAA,CAAC;IACnD;IACA,OAAOztC,IAAI,CAAC6Z,KAAK,CAACrB,MAAM,KAAK,CAAC,GAC1BvY,IAAI,GACJ,IAAI,CAAC6V,UAAU,CAAC9V,IAAI,EAAE,qBAAqB,CAAC;EAClD;EAEA2lC,aAAaA,CAAAA,EAAe;IAC1B,MAAMD,SAAS,GAAG,IAAI,CAACttB,KAAK,CAACiX,MAAM;IACnC,IAAI,CAACjX,KAAK,CAACiX,MAAM,GAAG,IAAI;IACxB,MAAMpvB,IAAI,GAAG,IAAI,CAACytC,kBAAkB,EAAE;IACtC,IAAI,CAACt1B,KAAK,CAACiX,MAAM,GAAGqW,SAAS;IAC7B,OAAOzlC,IAAI;EACb;EAEAwqC,oCAAoCA,CAAAA,EAAe;IACjD,IAAI,IAAI,CAACryB,KAAK,CAACnY,IAAI,KAAY,GAAA,IAAI,IAAI,CAACmY,KAAK,CAACpL,KAAK,KAAK,GAAG,EAAE;MAC3D,MAAM0J,QAAQ,GAAG,IAAI,CAAC0B,KAAK,CAAC1B,QAAQ;MACpC,MAAM1W,IAAI,GAAG,IAAI,CAAComC,eAAe,EAAE;MACnC,OAAO,IAAI,CAACkG,oBAAoB,CAAC51B,QAAQ,EAAE1W,IAAI,CAAC;IAClD,CAAC,MAAM;MACL,OAAO,IAAI,CAAC2lC,aAAa,EAAE;IAC7B;EACF;EAEAmC,uBAAuBA,CAAAA,EAAqB;IAC1C,MAAM9nC,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAoB;IAC/C3V,IAAI,CAAC4mC,cAAc,GAAG,IAAI,CAACpB,wBAAwB,EAAE;IACrD,OAAO,IAAI,CAAC1vB,UAAU,CAAC9V,IAAI,EAAE,gBAAgB,CAAC;EAChD;EAEAsnC,kCAAkCA,CAChCqG,sBAAgC,EAClB;IACd,MAAM9D,KAAK,GAAG8D,sBAAsB,GAChC,IAAI,CAACvH,eAAe,CAAA,CAAE,GACtB,IAAI,CAAC+B,6BAA6B,EAAE;IACxC,IAAI,IAAI,CAACpW,KAAK,CAAA,EAAS,CAAC,EAAE;MACxB8X,KAAK,CAACjD,cAAc,GAAG,IAAI,CAACkB,uBAAuB,EAAE;MACrD,IAAI,CAACruB,gBAAgB,CAACowB,KAAK,CAAC;IAC9B;IACA,OAAOA,KAAK;EACd;EAEA+D,mBAAmBA,CAAC5tC,IAA0B,EAAgB;IAC3DA,IAAI,CAACmT,UAAU,CAAkByzB,cAAc,GAAG5mC,IAAI,CAAC4mC,cAAc;IAEtE,IAAI,CAACntB,gBAAgB,CAACzZ,IAAI,CAACmT,UAAU,EAAEnT,IAAI,CAAC4mC,cAAc,CAAC34B,GAAG,CAACpQ,GAAG,CAAC;IAEnE,OAAOmC,IAAI,CAACmT,UAAU;EACxB;EAEAy2B,iBAAiBA,CAAAA,EAAsC;IACrD,IAAID,QAAQ,GAAG,IAAI;IACnB,IAAI,IAAI,CAAC5X,KAAK,CAAA,EAAW,CAAC,EAAE;MAC1B4X,QAAQ,GAAG,IAAI,CAACh0B,SAAS,EAAkB;MAC3C,IAAI,IAAI,CAACyC,KAAK,CAACpL,KAAK,KAAK,GAAG,EAAE;QAC5B28B,QAAQ,CAACtpC,IAAI,GAAG,MAAM;MACxB,CAAC,MAAM;QACLspC,QAAQ,CAACtpC,IAAI,GAAG,OAAO;MACzB;MACA,IAAI,CAAC6nB,IAAI,CAAA,CAAE;MACX,OAAO,IAAI,CAACpS,UAAU,CAAC6zB,QAAQ,EAAE,UAAU,CAAC;IAC9C;IACA,OAAOA,QAAQ;EACjB;EAMAz0B,iBAAiBA,CACflV,IAAgB,EAChB6tC,mBAAoC,EACpCz4B,QAAiB,GAAG,KAAK,EACnB;IACN,IAAIy4B,mBAAmB,EAAE;MACvB,IAAI,CAACC,gCAAgC,CAAC9tC,IAAI,EAAE,MAC1C,KAAK,CAACkV,iBAAiB,CAAClV,IAAI,EAAE,IAAI,EAAEoV,QAAQ,CAC9C,CAAC;MACD;IACF;IAEA,KAAK,CAACF,iBAAiB,CAAClV,IAAI,EAAE,KAAK,EAAEoV,QAAQ,CAAC;EAChD;EAEA24B,0BAA0BA,CAMxB/tC,IAAe,EAAEC,IAAe,EAAEmV,QAAiB,GAAG,KAAK,EAAK;IAChE,IAAI,IAAI,CAAC2c,KAAK,CAAA,EAAS,CAAC,EAAE;MACxB,MAAMsU,QAAQ,GAAG,IAAI,CAAC1wB,SAAS,EAAoB;MAEnD,CACE0wB,QAAQ,CAACO,cAAc,EAEvB5mC,IAAI,CAACgmC,SAAS,CACf,GAAG,IAAI,CAACD,oCAAoC,EAAE;MAE/C/lC,IAAI,CAAC2mC,UAAU,GAAGN,QAAQ,CAACO,cAAc,GACrC,IAAI,CAAC9wB,UAAU,CAACuwB,QAAQ,EAAE,gBAAgB,CAAC,GAC3C,IAAI;IACV;IAEA,OAAO,KAAK,CAAC0H,0BAA0B,CAAC/tC,IAAI,EAAEC,IAAI,EAAEmV,QAAQ,CAAC;EAC/D;EAGA44B,kBAAkBA,CAACj8B,KAAyB,EAAe;IAEzD,IAAI,IAAI,CAACqG,KAAK,CAACgP,MAAM,IAAI,IAAI,CAAC2V,YAAY,CAAc,GAAA,CAAC,EAAE;MACzD,MAAMnI,SAAS,GAAG,IAAI,CAACA,SAAS,EAAE;MAClC,IAAI1P,0BAA0B,CAAC0P,SAAS,CAAC30B,IAAI,CAAC,EAAE;QAC9C,MAAMD,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAmB;QAC9C,IAAI,CAACuS,IAAI,CAAA,CAAE;QACX,OAAO,IAAI,CAAC8gB,kBAAkB,CAAChpC,IAAI,CAAC;MACtC;IACD,CAAA,MAAM,IAAI,IAAI,CAAC+8B,YAAY,CAAA,GAAS,CAAC,EAAE;MACtC,MAAM/8B,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAE;MAC7B,IAAI,CAACuS,IAAI,CAAA,CAAE;MACX,OAAO,IAAI,CAAC+lB,wBAAwB,CAACjuC,IAAI,CAAC;IAC5C;IACA,MAAMuT,IAAI,GAAG,KAAK,CAACy6B,kBAAkB,CAACj8B,KAAK,CAAC;IAE5C,IAAI,IAAI,CAACszB,UAAU,KAAKx1B,SAAS,IAAI,CAAC,IAAI,CAACmE,gBAAgB,CAACT,IAAI,CAAC,EAAE;MACjE,IAAI,CAAC8xB,UAAU,GAAG,IAAI;IACxB;IACA,OAAO9xB,IAAI;EACb;EAGA26B,wBAAwBA,CACtBluC,IAA2B,EAC3BmuC,IAAkB,EAClBj2B,UAAgC,EACT;IACvB,IAAIi2B,IAAI,CAACluC,IAAI,KAAK,YAAY,EAAE;MAC9B,IAAIkuC,IAAI,CAAChoC,IAAI,KAAK,SAAS,EAAE;QAC3B,IACE,IAAI,CAAC4rB,KAAK,CAAA,EAAU,CAAC,IACrB/M,iBAAiB,CAAC,IAAI,CAAC5M,KAAK,CAACnY,IAAI,CAAC,IAClC,IAAI,CAAC8xB,KAAK,CAAa,EAAA,CAAC,IACxB,IAAI,CAACA,KAAK,CAAA,EAAQ,CAAC,IACnB,IAAI,CAACA,KAAK,CAAA,EAAW,CAAC,EACtB;UAEA,OAAO,IAAI,CAAC8U,gBAAgB,CAAC7mC,IAAI,CAAC;QACpC;MACD,CAAA,MAAM,IAAIglB,iBAAiB,CAAC,IAAI,CAAC5M,KAAK,CAACnY,IAAI,CAAC,EAAE;QAC7C,IAAIkuC,IAAI,CAAChoC,IAAI,KAAK,WAAW,EAAE;UAE7B,OAAO,IAAI,CAAC6iC,kBAAkB,CAAChpC,IAAI,CAAC;QACtC,CAAC,MAAM,IAAImuC,IAAI,CAAChoC,IAAI,KAAK,MAAM,EAAE;UAE/B,OAAO,IAAI,CAAC6hC,kBAAkB,CAAChoC,IAAI,CAAC;QACtC,CAAC,MAAM,IAAImuC,IAAI,CAAChoC,IAAI,KAAK,QAAQ,EAAE;UAEjC,OAAO,IAAI,CAAC8hC,mBAAmB,CAACjoC,IAAI,EAAE,KAAK,CAAC;QAC9C;MACF;IACF;IAEA,OAAO,KAAK,CAACkuC,wBAAwB,CAACluC,IAAI,EAAEmuC,IAAI,EAAEj2B,UAAU,CAAC;EAC/D;EAGAk2B,4BAA4BA,CAAAA,EAAY;IACtC,MAAM;MAAEnuC;KAAM,GAAG,IAAI,CAACmY,KAAK;IAC3B,IAAInY,IAAI,KAAa,GAAA,IAAIslB,kCAAkC,CAACtlB,IAAI,CAAC,EAAE;MACjE,OAAO,CAAC,IAAI,CAACmY,KAAK,CAAC0X,WAAW;IAChC;IACA,OAAO,KAAK,CAACse,4BAA4B,EAAE;EAC7C;EAEAC,wBAAwBA,CAAAA,EAAY;IAClC,MAAM;MAAEpuC;KAAM,GAAG,IAAI,CAACmY,KAAK;IAC3B,IAAInY,IAAI,KAAa,GAAA,IAAIslB,kCAAkC,CAACtlB,IAAI,CAAC,EAAE;MACjE,OAAO,IAAI,CAACmY,KAAK,CAAC0X,WAAW;IAC/B;IAEA,OAAO,KAAK,CAACue,wBAAwB,EAAE;EACzC;EAEAC,4BAA4BA,CAAAA,EAAG;IAC7B,IAAI,IAAI,CAACvR,YAAY,CAAA,GAAS,CAAC,EAAE;MAC/B,MAAM/8B,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAE;MAC7B,IAAI,CAACuS,IAAI,CAAA,CAAE;MACX,OAAO,IAAI,CAAC+lB,wBAAwB,CAACjuC,IAAI,CAAC;IAC5C;IACA,OAAO,KAAK,CAACsuC,4BAA4B,EAAE;EAC7C;EAEAC,gBAAgBA,CACdJ,IAAkB,EAElBz3B,QAAkB,EAClBC,mBAA6C,EAC/B;IACd,IAAI,CAAC,IAAI,CAACob,KAAK,GAAY,CAAC,EAAE,OAAOoc,IAAI;IAEzC,IAAI,IAAI,CAAC/1B,KAAK,CAACgX,sBAAsB,EAAE;MACrC,MAAM+N,MAAM,GAAG,IAAI,CAACjI,iBAAiB,EAAE;MAIvC,IACEiI,MAAM,KAAoB,EAAA,IAC1BA,MAAM,KAAA,EAAuB,IAC7BA,MAAM,KAAoB,EAAA,IAC1BA,MAAM,KAAA,EAA+B,EACrC;QAEA,IAAI,CAACqR,0BAA0B,CAAC73B,mBAAmB,CAAC;QACpD,OAAOw3B,IAAI;MACb;IACF;IAEA,IAAI,CAACtQ,MAAM,CAAA,EAAY,CAAC;IACxB,MAAMzlB,KAAK,GAAG,IAAI,CAACA,KAAK,CAAC9J,KAAK,CAAA,CAAE;IAChC,MAAMmgC,iBAAiB,GAAG,IAAI,CAACr2B,KAAK,CAACoW,SAAS;IAC9C,MAAMxuB,IAAI,GAAG,IAAI,CAAC0gC,WAAW,CAA0BhqB,QAAQ,CAAC;IAChE,IAAI;MAAEg4B,UAAU;MAAEC;IAAO,CAAC,GAAG,IAAI,CAACC,6BAA6B,EAAE;IACjE,IAAI,CAACC,KAAK,EAAEhc,OAAO,CAAC,GAAG,IAAI,CAACic,uBAAuB,CAACJ,UAAU,CAAC;IAE/D,IAAIC,MAAM,IAAI9b,OAAO,CAACra,MAAM,GAAG,CAAC,EAAE;MAChC,MAAMgW,SAAS,GAAG,CAAC,GAAGigB,iBAAiB,CAAC;MAExC,IAAI5b,OAAO,CAACra,MAAM,GAAG,CAAC,EAAE;QACtB,IAAI,CAACJ,KAAK,GAAGA,KAAK;QAClB,IAAI,CAACA,KAAK,CAACoW,SAAS,GAAGA,SAAS;QAEhC,KAAK,IAAI1H,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+L,OAAO,CAACra,MAAM,EAAEsO,CAAC,EAAE,EAAE;UACvC0H,SAAS,CAAC3S,IAAI,CAACgX,OAAO,CAAC/L,CAAC,CAAC,CAAClpB,KAAK,CAAC;QAClC;QAEA,CAAC;UAAE8wC,UAAU;UAAEC;QAAO,CAAC,GAAG,IAAI,CAACC,6BAA6B,EAAE;QAC9D,CAACC,KAAK,EAAEhc,OAAO,CAAC,GAAG,IAAI,CAACic,uBAAuB,CAACJ,UAAU,CAAC;MAC7D;MAEA,IAAIC,MAAM,IAAIE,KAAK,CAACr2B,MAAM,GAAG,CAAC,EAAE;QAM9B,IAAI,CAACjB,KAAK,CAACupB,UAAU,CAACC,yBAAyB,EAAE3oB,KAAK,CAAC1B,QAAQ,CAAC;MAClE;MAEA,IAAIi4B,MAAM,IAAIE,KAAK,CAACr2B,MAAM,KAAK,CAAC,EAAE;QAChC,IAAI,CAACJ,KAAK,GAAGA,KAAK;QAClBoW,SAAS,CAAC3S,IAAI,CAACgzB,KAAK,CAAC,CAAC,CAAC,CAACjxC,KAAK,CAAC;QAC9B,IAAI,CAACwa,KAAK,CAACoW,SAAS,GAAGA,SAAS;QAChC,CAAC;UAAEkgB,UAAU;UAAEC;QAAO,CAAC,GAAG,IAAI,CAACC,6BAA6B,EAAE;MAChE;IACF;IAEA,IAAI,CAACE,uBAAuB,CAACJ,UAAU,EAAE,IAAI,CAAC;IAE9C,IAAI,CAACt2B,KAAK,CAACoW,SAAS,GAAGigB,iBAAiB;IACxC,IAAI,CAAC5Q,MAAM,CAAA,EAAS,CAAC;IAErB79B,IAAI,CAACgnB,IAAI,GAAGmnB,IAAI;IAChBnuC,IAAI,CAAC0uC,UAAU,GAAGA,UAAU;IAC5B1uC,IAAI,CAAC+uC,SAAS,GAAG,IAAI,CAACjB,gCAAgC,CAAC9tC,IAAI,EAAE,MAC3D,IAAI,CAACgvC,gBAAgB,CAACn/B,SAAS,EAAEA,SAAS,CAC5C,CAAC;IAED,OAAO,IAAI,CAACiG,UAAU,CAAC9V,IAAI,EAAE,uBAAuB,CAAC;EACvD;EAEA4uC,6BAA6BA,CAAAA,EAG3B;IACA,IAAI,CAACx2B,KAAK,CAACqW,yBAAyB,CAAC5S,IAAI,CAAC,IAAI,CAACzD,KAAK,CAACxa,KAAK,CAAC;IAE3D,MAAM8wC,UAAU,GAAG,IAAI,CAACO,uBAAuB,EAAE;IACjD,MAAMN,MAAM,GAAG,CAAC,IAAI,CAAC5c,KAAK,GAAS,CAAC;IAEpC,IAAI,CAAC3Z,KAAK,CAACqW,yBAAyB,CAACpI,GAAG,EAAE;IAE1C,OAAO;MAAEqoB,UAAU;MAAEC;KAAQ;EAC/B;EASAG,uBAAuBA,CACrB9uC,IAAkB,EAClBkvC,eAAyB,EACmC;IAC5D,MAAM5U,KAAK,GAAG,CAACt6B,IAAI,CAAC;IACpB,MAAMmvC,MAAmC,GAAG,EAAE;IAE9C,OAAO7U,KAAK,CAAC9hB,MAAM,KAAK,CAAC,EAAE;MACzB,MAAMxY,IAAI,GAAGs6B,KAAK,CAACjU,GAAG,EAAE;MACxB,IACErmB,IAAI,CAACC,IAAI,KAAK,yBAAyB,IACvCD,IAAI,CAAC0U,IAAI,CAACzU,IAAI,KAAK,gBAAgB,EACnC;QACA,IAAID,IAAI,CAAC4V,cAAc,IAAI,CAAC5V,IAAI,CAAC2mC,UAAU,EAAE;UAE3C,IAAI,CAACyI,qBAAqB,CAACpvC,IAAI,CAAC;QAClC,CAAC,MAAM;UACLmvC,MAAM,CAACtzB,IAAI,CAAC7b,IAAI,CAAC;QACnB;QACAs6B,KAAK,CAACze,IAAI,CAAC7b,IAAI,CAAC0U,IAAI,CAAC;MACvB,CAAC,MAAM,IAAI1U,IAAI,CAACC,IAAI,KAAK,uBAAuB,EAAE;QAChDq6B,KAAK,CAACze,IAAI,CAAC7b,IAAI,CAAC0uC,UAAU,CAAC;QAC3BpU,KAAK,CAACze,IAAI,CAAC7b,IAAI,CAAC+uC,SAAS,CAAC;MAC5B;IACF;IAEA,IAAIG,eAAe,EAAE;MACnBC,MAAM,CAACzZ,OAAO,CAAC11B,IAAI,IAAI,IAAI,CAACovC,qBAAqB,CAACpvC,IAAI,CAAC,CAAC;MACxD,OAAO,CAACmvC,MAAM,EAAE,EAAE,CAAC;IACrB;IAEA,OAAOrK,SAAS,CAACqK,MAAM,EAAEnvC,IAAI,IAC3BA,IAAI,CAAC+T,MAAM,CAACs7B,KAAK,CAAC7B,KAAK,IAAI,IAAI,CAACz2B,YAAY,CAACy2B,KAAK,EAAE,IAAI,CAAC,CAC3D,CAAC;EACH;EAEA4B,qBAAqBA,CAACpvC,IAA+B,EAAE;IAAA,IAAAsvC,WAAA;IACrD,IAAI,CAACC,gBAAgB,CAGnBvvC,IAAI,CAAC+T,MAAM,GAAAu7B,WAAA,GACXtvC,IAAI,CAACqT,KAAK,KAAVi8B,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,WAAA,CAAYE,gBAAgB,EAChB,KACd,CAAC;IAED,IAAI,CAAC3lB,KAAK,CAACF,KAAK,CAACL,KAAoC,CAAC;IAEtD,KAAK,CAACmmB,WAAW,CAACzvC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC;IACpC,IAAI,CAAC6pB,KAAK,CAACD,IAAI,EAAE;EACnB;EAEAkkB,gCAAgCA,CAC9B9tC,IAAoB,EACpB0R,KAAc,EACX;IACH,IAAIg+B,MAAS;IACb,IACE,IAAI,CAACt3B,KAAK,CAACqW,yBAAyB,CAACgK,QAAQ,CAC3C,IAAI,CAAC1N,iBAAiB,CAAC/qB,IAAI,CAACpC,KAAK,CACnC,CAAC,EACD;MACA,IAAI,CAACwa,KAAK,CAACqW,yBAAyB,CAAC5S,IAAI,CAAC,IAAI,CAACzD,KAAK,CAACxa,KAAK,CAAC;MAC3D8xC,MAAM,GAAGh+B,KAAK,CAAA,CAAE;MAChB,IAAI,CAAC0G,KAAK,CAACqW,yBAAyB,CAACpI,GAAG,EAAE;IAC5C,CAAC,MAAM;MACLqpB,MAAM,GAAGh+B,KAAK,CAAA,CAAE;IAClB;IAEA,OAAOg+B,MAAM;EACf;EAEAC,cAAcA,CACZ3vC,IAAO,EACP0W,QAAkB,EACiC;IACnD,MAAMwpB,OAAO,GAAG,KAAK,CAACyP,cAAc,CAAC3vC,IAAI,EAAE0W,QAAQ,CAAC;IACpD,IAAI,IAAI,CAAC+d,GAAG,CAAA,EAAY,CAAC,EAAE;MACxByL,OAAO,CAAkBxoB,QAAQ,GAAG,IAAI;MAIzC,IAAI,CAAC+B,gBAAgB,CAACzZ,IAAI,CAAC;IAC7B;IAEA,IAAI,IAAI,CAAC+xB,KAAK,CAAA,EAAS,CAAC,EAAE;MACxB,MAAM6d,YAAY,GAAG,IAAI,CAAClP,WAAW,CAAuBhqB,QAAQ,CAAC;MACrEk5B,YAAY,CAACz8B,UAAU,GAAG+sB,OAAuB;MACjD0P,YAAY,CAAChJ,cAAc,GAAG,IAAI,CAACkB,uBAAuB,EAAE;MAE5D,OAAO,IAAI,CAAChyB,UAAU,CAAC85B,YAAY,EAAE,oBAAoB,CAAC;IAC5D;IAEA,OAAO1P,OAAO;EAChB;EAEA2P,uBAAuBA,CAAC7vC,IAAY,EAAE;IACpC,IACGA,IAAI,CAACC,IAAI,KAAK,mBAAmB,KAC/BD,IAAI,CAACykC,UAAU,KAAK,MAAM,IAAIzkC,IAAI,CAACykC,UAAU,KAAK,QAAQ,CAAC,IAC7DzkC,IAAI,CAACC,IAAI,KAAK,wBAAwB,IACrCD,IAAI,CAAC6nC,UAAU,KAAK,MAAO,IAC5B7nC,IAAI,CAACC,IAAI,KAAK,sBAAsB,IAAID,IAAI,CAAC6nC,UAAU,KAAK,MAAO,EACpE;MAGA;IACF;IAEA,KAAK,CAACgI,uBAAuB,CAAC7vC,IAAI,CAAC;EACrC;EAEA8vC,sBAAsBA,CACpB9vC,IAA8B,EACI;IAClC,IAAI,IAAI,CAAC+8B,YAAY,CAAA,GAAS,CAAC,EAAE;MAC/B/8B,IAAI,CAAC6nC,UAAU,GAAG,MAAM;MAExB,MAAMkI,eAAe,GAAG,IAAI,CAACp6B,SAAS,EAAE;MACxC,IAAI,CAACuS,IAAI,CAAA,CAAE;MAEX,IAAI,IAAI,CAAC6J,KAAK,CAAA,CAAU,CAAC,EAAE;QAEzB/xB,IAAI,CAACuY,UAAU,GAAG,IAAI,CAACy3B,qBAAqB,CACrB,IACvB,CAAC;QACD,KAAK,CAACC,eAAe,CAACjwC,IAAI,CAAC;QAC3B,OAAO,IAAI;MACb,CAAC,MAAM;QAGL,OAAO,IAAI,CAACgoC,kBAAkB,CAAC+H,eAAe,CAAC;MACjD;IACD,CAAA,MAAM,IAAI,IAAI,CAAChT,YAAY,CAAA,GAAW,CAAC,EAAE;MACxC/8B,IAAI,CAAC6nC,UAAU,GAAG,MAAM;MAExB,MAAMkI,eAAe,GAAG,IAAI,CAACp6B,SAAS,EAAE;MACxC,IAAI,CAACuS,IAAI,CAAA,CAAE;MAGX,OAAO,IAAI,CAAC+f,mBAAmB,CAAC8H,eAAe,EAAE,KAAK,CAAC;IACxD,CAAA,MAAM,IAAI,IAAI,CAAChT,YAAY,CAAA,GAAc,CAAC,EAAE;MAC3C/8B,IAAI,CAAC6nC,UAAU,GAAG,MAAM;MACxB,MAAMkI,eAAe,GAAG,IAAI,CAACp6B,SAAS,EAAE;MACxC,IAAI,CAACuS,IAAI,CAAA,CAAE;MAEX,OAAO,IAAI,CAAC8gB,kBAAkB,CAAC+G,eAAe,CAAC;IAChD,CAAA,MAAM,IAAI,IAAI,CAAChT,YAAY,CAAA,GAAS,CAAC,EAAE;MACtC/8B,IAAI,CAAC6nC,UAAU,GAAG,OAAO;MACzB,MAAMkI,eAAe,GAAG,IAAI,CAACp6B,SAAS,EAAE;MACxC,IAAI,CAACuS,IAAI,CAAA,CAAE;MAEX,OAAO,IAAI,CAAC+lB,wBAAwB,CAAC8B,eAAe,CAAC;IACvD,CAAC,MAAM;MACL,OAAO,KAAK,CAACD,sBAAsB,CAAC9vC,IAAI,CAAC;IAC3C;EACF;EAEAkwC,aAAaA,CACXlwC,IAAoB,EAC+C;IACnE,IAAI,KAAK,CAACkwC,aAAa,CAAClwC,IAAI,CAAC,EAAE,OAAO,IAAI;IAE1C,IAAI,IAAI,CAAC+8B,YAAY,CAAA,GAAS,CAAC,IAAI,IAAI,CAACnI,SAAS,CAAE,CAAA,CAAC30B,IAAI,OAAY,EAAE;MAElED,IAAI,CACJ6nC,UAAU,GAAG,MAAM;MACrB,IAAI,CAAC3f,IAAI,CAAA,CAAE;MACX,IAAI,CAACA,IAAI,CAAA,CAAE;MACX,OAAO,IAAI;IACb;IAEA,OAAO,KAAK;EACd;EAEAioB,kCAAkCA,CAChCnwC,IAA+D,EACrB;IAC1C,MAAM;MAAE0W;KAAU,GAAG,IAAI,CAAC0B,KAAK;IAC/B,MAAMg4B,YAAY,GAAG,KAAK,CAACD,kCAAkC,CAACnwC,IAAI,CAAC;IACnE,IAAIowC,YAAY,IAAIpwC,IAAI,CAAC6nC,UAAU,KAAK,MAAM,EAAE;MAC9C,IAAI,CAAC3iC,UAAU,CAACwR,QAAQ,CAAC;IAC3B;IACA,OAAO05B,YAAY;EACrB;EAEAC,YAAYA,CACVrwC,IAAa,EACbswC,WAAoB,EACpBC,UAA2B,EAC3B;IACA,KAAK,CAACF,YAAY,CAACrwC,IAAI,EAAEswC,WAAW,EAAEC,UAAU,CAAC;IACjD,IAAI,IAAI,CAACxe,KAAK,CAAA,EAAM,CAAC,EAAE;MACrB/xB,IAAI,CAAC4V,cAAc,GAAG,IAAI,CAAC2wB,iCAAiC,EAAE;IAChE;EACF;EAEAiK,gBAAgBA,CACdC,SAAsB,EACtBC,MAAW,EACXt4B,KAA8B,EACxB;IACN,MAAM;MAAE1B;KAAU,GAAG,IAAI,CAAC0B,KAAK;IAC/B,IAAI,IAAI,CAAC2kB,YAAY,CAAA,GAAY,CAAC,EAAE;MAClC,IAAI,KAAK,CAAC4T,4BAA4B,CAACF,SAAS,EAAEC,MAAM,CAAC,EAAE;QAEzD;MACF;MAEAA,MAAM,CAACrH,OAAO,GAAG,IAAI;IACvB;IAEA,KAAK,CAACmH,gBAAgB,CAACC,SAAS,EAAEC,MAAM,EAAEt4B,KAAK,CAAC;IAEhD,IAAIs4B,MAAM,CAACrH,OAAO,EAAE;MAClB,IACEqH,MAAM,CAACzwC,IAAI,KAAK,eAAe,IAC/BywC,MAAM,CAACzwC,IAAI,KAAK,sBAAsB,IACtCywC,MAAM,CAACzwC,IAAI,KAAK,oBAAoB,EACpC;QACA,IAAI,CAACsX,KAAK,CAACupB,UAAU,CAACK,mBAAmB,EAAEzqB,QAAQ,CAAC;MACtD,CAAC,MAAM,IAAIg6B,MAAM,CAAC1jC,KAAK,EAAE;QACvB,IAAI,CAACuK,KAAK,CAACupB,UAAU,CAACM,4BAA4B,EAAEsP,MAAM,CAAC1jC,KAAK,CAAC;MACnE;IACF;EACF;EAEA4jC,UAAUA,CAACnpB,IAAY,EAAW;IAChC,OAAOA,IAAI,KAAK,UAAU,IAAIA,IAAI,KAAK,eAAe;EACxD;EAEAopB,YAAYA,CAAAA,EAAS;IACnB,MAAMppB,IAAI,GAAG,KAAK,CAACmP,SAAS,EAAE;IAC9B,MAAMka,QAAQ,GAAG,IAAI,GAAGrpB,IAAI;IAG5B,IAAI,CAAC,IAAI,CAACmpB,UAAU,CAACnpB,IAAI,CAAC,IAAI,CAAC,IAAI,CAACrP,KAAK,CAACiX,MAAM,EAAE;MAChD,IAAI,CAAC9X,KAAK,CAAC9H,MAAM,CAAC/K,iBAAiB,EAAE,IAAI,CAAC0T,KAAK,CAAC4X,WAAW,EAAE,EAAE;QAC7DjyB,cAAc,EAAE+yC;MAClB,CAAC,CAAC;IACJ;IAEA,IAAI,CAAChb,WAAW,CAAUgb,GAAAA,EAAAA,QAAQ,CAAC;EACrC;EAGA/a,gBAAgBA,CAAC53B,IAAY,EAAQ;IACnC,MAAM+pB,IAAI,GAAG,IAAI,CAACkF,KAAK,CAACC,UAAU,CAAC,IAAI,CAACjV,KAAK,CAAC/J,GAAG,GAAG,CAAC,CAAC;IACtD,IAAIlQ,IAAI,KAAA,GAA6B,IAAI+pB,IAAI,QAA0B,EAAE;MACvE,IAAI,CAAC2O,QAAQ,CAAe,CAAA,EAAA,CAAC,CAAC;IAChC,CAAC,MAAM,IACL,IAAI,CAACze,KAAK,CAACiX,MAAM,KAChBlxB,IAAI,KAA0B,EAAA,IAAIA,IAAI,KAAA,EAAuB,CAAC,EAC/D;MACA,IAAI,CAAC04B,QAAQ,CAAC14B,IAAI,OAA0B,GAAgB,EAAA,GAAA,EAAA,EAAE,CAAC,CAAC;IACjE,CAAA,MAAM,IAAI,IAAI,CAACia,KAAK,CAACiX,MAAM,IAAIlxB,IAAI,KAAA,EAA2B,EAAE;MAC/D,IAAI+pB,IAAI,OAAkB,EAAE;QAC1B,IAAI,CAAC2O,QAAQ,CAAiB,EAAA,EAAA,CAAC,CAAC;MAClC,CAAC,MAAM;QAEL,IAAI,CAACA,QAAQ,CAAc,EAAA,EAAA,CAAC,CAAC;MAC/B;IACD,CAAA,MAAM,IACL7O,eAAe,CAAC7pB,IAAI,EAAE+pB,IAAI,EAAE,IAAI,CAACkF,KAAK,CAACC,UAAU,CAAC,IAAI,CAACjV,KAAK,CAAC/J,GAAG,GAAG,CAAC,CAAC,CAAC,EACtE;MACA,IAAI,CAAC+J,KAAK,CAAC/J,GAAG,IAAI,CAAC;MACnB,IAAI,CAACwiC,YAAY,CAAA,CAAE;IACrB,CAAC,MAAM;MACL,KAAK,CAAC9a,gBAAgB,CAAC53B,IAAI,CAAC;IAC9B;EACF;EAEA4Y,YAAYA,CAAC/W,IAAY,EAAEgX,SAAmB,EAAW;IACvD,IAAIhX,IAAI,CAACC,IAAI,KAAK,oBAAoB,EAAE;MACtC,OAAO,IAAI,CAAC8W,YAAY,CAAC/W,IAAI,CAACmT,UAAU,EAAE6D,SAAS,CAAC;IACtD,CAAC,MAAM;MACL,OAAO,KAAK,CAACD,YAAY,CAAC/W,IAAI,EAAEgX,SAAS,CAAC;IAC5C;EACF;EAEAC,YAAYA,CAACjX,IAAY,EAAEkX,KAAc,GAAG,KAAK,EAAQ;IACvD,IACE,CAACA,KAAK,IACNlX,IAAI,CAACC,IAAI,KAAK,sBAAsB,IACpCD,IAAI,CAAC+wC,IAAI,CAAC9wC,IAAI,KAAK,oBAAoB,EACvC;MACAD,IAAI,CAAC+wC,IAAI,GAAG,IAAI,CAACnD,mBAAmB,CAAC5tC,IAAI,CAAC+wC,IAAI,CAAiB;IACjE;IACA,KAAK,CAAC95B,YAAY,CAACjX,IAAI,EAAEkX,KAAK,CAAC;EACjC;EAGAq4B,gBAAgBA,CACdyB,QAAwB,EACxBxB,gBAA6C,EAC7Ct4B,KAAc,EACR;IACN,KAAK,IAAI4P,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkqB,QAAQ,CAACx4B,MAAM,EAAEsO,CAAC,EAAE,EAAE;MACxC,MAAMqnB,IAAI,GAAG6C,QAAQ,CAAClqB,CAAC,CAAC;MACxB,IAAI,CAAAqnB,IAAI,IAAJA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,IAAI,CAAEluC,IAAI,MAAK,oBAAoB,EAAE;QACvC+wC,QAAQ,CAAClqB,CAAC,CAAC,GAAG,IAAI,CAAC8mB,mBAAmB,CAACO,IAAI,CAAC;MAC9C;IACF;IACA,KAAK,CAACoB,gBAAgB,CAACyB,QAAQ,EAAExB,gBAAgB,EAAEt4B,KAAK,CAAC;EAC3D;EAIA+5B,gBAAgBA,CACdD,QAE+C,EAC/CE,mBAA6B,EAGiB;IAC9C,KAAK,IAAIpqB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkqB,QAAQ,CAACx4B,MAAM,EAAEsO,CAAC,EAAE,EAAE;MAAA,IAAAqqB,WAAA;MACxC,MAAMhD,IAAI,GAAG6C,QAAQ,CAAClqB,CAAC,CAAC;MACxB,IACEqnB,IAAI,IACJA,IAAI,CAACluC,IAAI,KAAK,oBAAoB,IAClC,EAAAkxC,CAAAA,WAAA,GAAChD,IAAI,CAAC96B,KAAK,KAAV89B,IAAAA,IAAAA,WAAA,CAAYj9B,aAAa,CACzB88B,KAAAA,QAAQ,CAACx4B,MAAM,GAAG,CAAC,IAAI,CAAC04B,mBAAmB,CAAC,EAC7C;QACA,IAAI,CAAC35B,KAAK,CAACupB,UAAU,CAAC2C,iBAAiB,EAAE0K,IAAI,CAACvH,cAAc,CAAC;MAC/D;IACF;IAEA,OAAOoK,QAAQ;EACjB;EAEAI,cAAcA,CACZC,KAAgB,EAChBC,YAAqB,EACrBC,OAAgB,EAChB56B,mBAA6C,EACN;IACvC,MAAM3W,IAAI,GAAG,KAAK,CAACoxC,cAAc,CAC/BC,KAAK,EACLC,YAAY,EACZC,OAAO,EACP56B,mBACF,CAAC;IAOD,IAAI26B,YAAY,IAAI,CAAC,IAAI,CAACl5B,KAAK,CAACgX,sBAAsB,EAAE;MACtD,IAAI,CAAC6hB,gBAAgB,CAACjxC,IAAI,CAACisB,QAAQ,CAAC;IACtC;IAEA,OAAOjsB,IAAI;EACb;EAEA4W,WAAWA,CAAC3W,IAAY,EAAEuxC,eAAwB,EAAE16B,OAAoB,EAAE;IACxE,OACE7W,IAAI,KAAK,oBAAoB,IAC7B,KAAK,CAAC2W,WAAW,CAAC3W,IAAI,EAAEuxC,eAAe,EAAE16B,OAAO,CAAC;EAErD;EAGAd,kBAAkBA,CAAChW,IAAqB,EAAmB;IACzD,IAAI,IAAI,CAAC+xB,KAAK,CAAA,EAAS,CAAC,EAAE;MACxB/xB,IAAI,CAAC4mC,cAAc,GAAG,IAAI,CAACkB,uBAAuB,EAAE;IACtD;IACA,OAAO,KAAK,CAAC9xB,kBAAkB,CAAChW,IAAI,CAAC;EACvC;EAEAmW,yBAAyBA,CACvBnW,IAA4B,EACJ;IACxB,IAAI,IAAI,CAAC+xB,KAAK,CAAA,EAAS,CAAC,EAAE;MACxB/xB,IAAI,CAAC4mC,cAAc,GAAG,IAAI,CAACkB,uBAAuB,EAAE;IACtD;IACA,OAAO,KAAK,CAAC3xB,yBAAyB,CAACnW,IAAI,CAAC;EAC9C;EAGAyxC,aAAaA,CAAAA,EAAY;IACvB,OAAO,IAAI,CAAC1f,KAAK,CAAM,EAAA,CAAC,IAAI,KAAK,CAAC0f,aAAa,CAAA,CAAE;EACnD;EAGAC,eAAeA,CAAAA,EAAY;IACzB,OAAO,IAAI,CAAC3f,KAAK,CAAS,EAAA,CAAC,IAAI,KAAK,CAAC2f,eAAe,CAAA,CAAE;EACxD;EAEAC,sBAAsBA,CAAC79B,MAAuC,EAAW;IACvE,OAAO,CAAC,IAAI,CAACie,KAAK,CAAS,EAAA,CAAC,IAAI,KAAK,CAAC4f,sBAAsB,CAAC79B,MAAM,CAAC;EACtE;EAGA89B,eAAeA,CACbnB,SAAsB,EACtB38B,MAAqB,EACrBwB,WAAoB,EACpB5B,OAAgB,EAChB6B,aAAsB,EACtBs8B,iBAA0B,EACpB;IACN,IAAK/9B,MAAM,CAAS61B,QAAQ,EAAE;MAC5B,IAAI,CAACzkC,UAAU,CAAE4O,MAAM,CAAS61B,QAAQ,CAAC17B,GAAG,CAACrQ,KAAK,CAAC;IACrD;IACA,OAAQkW,MAAM,CAAS61B,QAAQ;IAC/B,IAAI,IAAI,CAAC5X,KAAK,CAAA,EAAM,CAAC,EAAE;MACrBje,MAAM,CAAC8B,cAAc,GAAG,IAAI,CAAC2wB,iCAAiC,EAAE;IAClE;IAEA,KAAK,CAACqL,eAAe,CACnBnB,SAAS,EACT38B,MAAM,EACNwB,WAAW,EACX5B,OAAO,EACP6B,aAAa,EACbs8B,iBACF,CAAC;IAED,IAAI/9B,MAAM,CAACC,MAAM,IAAIwB,aAAa,EAAE;MAClC,MAAMxB,MAAM,GAAGD,MAAM,CAACC,MAAM;MAC5B,IAAIA,MAAM,CAACyE,MAAM,GAAG,CAAC,IAAI,IAAI,CAACs5B,WAAW,CAAC/9B,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;QACpD,IAAI,CAACwD,KAAK,CAACupB,UAAU,CAACsC,4BAA4B,EAAEtvB,MAAM,CAAC;MAC7D;IAEF,CAAC,MAAM,IAELA,MAAM,CAAC7T,IAAI,KAAK,kBAAkB,IAClCsV,aAAa,IAEbzB,MAAM,CAAC9G,KAAK,CAAC+G,MAAM,EACnB;MAEA,MAAMA,MAAM,GAAGD,MAAM,CAAC9G,KAAK,CAAC+G,MAAM;MAClC,IAAIA,MAAM,CAACyE,MAAM,GAAG,CAAC,IAAI,IAAI,CAACs5B,WAAW,CAAC/9B,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;QACpD,IAAI,CAACwD,KAAK,CAACupB,UAAU,CAACsC,4BAA4B,EAAEtvB,MAAM,CAAC;MAC7D;IACF;EACF;EAEAi+B,sBAAsBA,CACpBtB,SAAsB,EACtB38B,MAA4B,EAC5BwB,WAAoB,EACpB5B,OAAgB,EACV;IACN,IAAKI,MAAM,CAAS61B,QAAQ,EAAE;MAC5B,IAAI,CAACzkC,UAAU,CAAE4O,MAAM,CAAS61B,QAAQ,CAAC17B,GAAG,CAACrQ,KAAK,CAAC;IACrD;IACA,OAAQkW,MAAM,CAAS61B,QAAQ;IAC/B,IAAI,IAAI,CAAC5X,KAAK,CAAA,EAAM,CAAC,EAAE;MACrBje,MAAM,CAAC8B,cAAc,GAAG,IAAI,CAAC2wB,iCAAiC,EAAE;IAClE;IAEA,KAAK,CAACwL,sBAAsB,CAACtB,SAAS,EAAE38B,MAAM,EAAEwB,WAAW,EAAE5B,OAAO,CAAC;EACvE;EAGAs+B,eAAeA,CAAChyC,IAAa,EAAQ;IACnC,KAAK,CAACgyC,eAAe,CAAChyC,IAAI,CAAC;IAC3B,IACEA,IAAI,CAACwR,UAAU,KACd,IAAI,CAACugB,KAAK,CAAA,EAAM,CAAC,IAEhB,IAAI,CAACA,KAAK,CAAa,EAAA,CAAC,CAAC,EAC3B;MAIO;QACL/xB,IAAI,CAACiyC,mBAAmB,GACtB,IAAI,CAAC7H,+CAA+C,EAAE;MAC1D;IACF;IACA,IAAI,IAAI,CAACrN,YAAY,CAAA,GAAe,CAAC,EAAE;MACrC,IAAI,CAAC7U,IAAI,CAAA,CAAE;MACX,MAAMgqB,WAAoC,GAAIlyC,IAAI,CAACsoC,UAAU,GAAG,EAAG;MACnE,GAAG;QACD,MAAMtoC,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAyB;QACpD3V,IAAI,CAACgV,EAAE,GAAG,IAAI,CAACmzB,6BAA6B,CAAa,IAAI,CAAC;QAC9D,IAAI,IAAI,CAACpW,KAAK,CAAA,EAAM,CAAC,EAAE;UACrB/xB,IAAI,CAAC4V,cAAc,GAAG,IAAI,CAACmzB,mCAAmC,EAAE;QAClE,CAAC,MAAM;UACL/oC,IAAI,CAAC4V,cAAc,GAAG,IAAI;QAC5B;QACAs8B,WAAW,CAACr2B,IAAI,CAAC,IAAI,CAAC/F,UAAU,CAAC9V,IAAI,EAAE,iBAAiB,CAAC,CAAC;MAC5D,CAAC,QAAQ,IAAI,CAACy0B,GAAG,GAAS,CAAC;IAC7B;EACF;EAEA0d,uBAAuBA,CAACr+B,MAAsC,EAAQ;IACpE,KAAK,CAACq+B,uBAAuB,CAACr+B,MAAM,CAAC;IACrC,MAAMC,MAAM,GAAG,IAAI,CAACF,4BAA4B,CAACC,MAAM,CAAC;IACxD,IAAIC,MAAM,CAACyE,MAAM,GAAG,CAAC,EAAE;MACrB,MAAMg1B,KAAK,GAAGz5B,MAAM,CAAC,CAAC,CAAC;MACvB,IAAI,IAAI,CAAC+9B,WAAW,CAACtE,KAAK,CAAC,IAAI15B,MAAM,CAACzT,IAAI,KAAK,KAAK,EAAE;QACpD,IAAI,CAACkX,KAAK,CAACupB,UAAU,CAACwB,yBAAyB,EAAEkL,KAAK,CAAC;MACxD,CAAA,MAAM,IAAI,IAAI,CAACsE,WAAW,CAACtE,KAAK,CAAC,EAAE;QAClC,IAAI,CAACj2B,KAAK,CAACupB,UAAU,CAACmC,yBAAyB,EAAEuK,KAAK,CAAC;MACzD;IACF;EACF;EAEA4E,+BAA+BA,CAC7BpyC,IAA2C,EACrC;IACNA,IAAI,CAAC2pC,QAAQ,GAAG,IAAI,CAACC,iBAAiB,EAAE;EAC1C;EAGAyI,iBAAiBA,CACfh8B,IAAe,EACfK,QAAqC,EACrCpB,WAAoB,EACpB5B,OAAgB,EAChB4C,SAAkB,EAClBC,UAAmB,EACnBI,mBAA6C,EAC1C;IACH,IAAKN,IAAI,CAASszB,QAAQ,EAAE;MAC1B,IAAI,CAACzkC,UAAU,CAAEmR,IAAI,CAASszB,QAAQ,CAAC17B,GAAG,CAACrQ,KAAK,CAAC;IACnD;IACA,OAAQyY,IAAI,CAASszB,QAAQ;IAE7B,IAAI/zB,cAAc;IAGlB,IAAI,IAAI,CAACmc,KAAK,CAAA,EAAM,CAAC,IAAI,CAACxb,UAAU,EAAE;MACpCX,cAAc,GAAG,IAAI,CAAC2wB,iCAAiC,EAAE;MACzD,IAAI,CAAC,IAAI,CAACxU,KAAK,CAAA,EAAU,CAAC,EAAE,IAAI,CAAC7sB,UAAU,EAAE;IAC/C;IAEA,MAAMwqC,MAAM,GAAG,KAAK,CAAC2C,iBAAiB,CACpCh8B,IAAI,EACJK,QAAQ,EACRpB,WAAW,EACX5B,OAAO,EACP4C,SAAS,EACTC,UAAU,EACVI,mBACF,CAAC;IAGD,IAAIf,cAAc,EAAE;MAElB,CAAC85B,MAAM,CAAC1iC,KAAK,IAAI0iC,MAAM,EAAE95B,cAAc,GAAGA,cAAc;IAC1D;IACA,OAAO85B,MAAM;EACf;EAEA4C,sBAAsBA,CAAC9E,KAAgB,EAAa;IAClD,IAAI,IAAI,CAAC/Y,GAAG,CAAA,EAAY,CAAC,EAAE;MACzB,IAAI+Y,KAAK,CAACvtC,IAAI,KAAK,YAAY,EAAE;QAC/B,IAAI,CAACsX,KAAK,CAACupB,UAAU,CAACkC,iBAAiB,EAAEwK,KAAK,CAAC;MACjD;MACA,IAAI,IAAI,CAACsE,WAAW,CAACtE,KAAK,CAAC,EAAE;QAC3B,IAAI,CAACj2B,KAAK,CAACupB,UAAU,CAACuC,yBAAyB,EAAEmK,KAAK,CAAC;MACzD;MAECA,KAAK,CAAyB91B,QAAQ,GAAG,IAAI;IAChD;IACA,IAAI,IAAI,CAACqa,KAAK,CAAA,EAAS,CAAC,EAAE;MACxByb,KAAK,CAAC5G,cAAc,GAAG,IAAI,CAACkB,uBAAuB,EAAE;IACtD,CAAA,MAAM,IAAI,IAAI,CAACgK,WAAW,CAACtE,KAAK,CAAC,EAAE;MAClC,IAAI,CAACj2B,KAAK,CAACupB,UAAU,CAACqC,2BAA2B,EAAEqK,KAAK,CAAC;IAC3D;IAEA,IAAI,IAAI,CAACzb,KAAK,CAAA,EAAM,CAAC,IAAI,IAAI,CAAC+f,WAAW,CAACtE,KAAK,CAAC,EAAE;MAChD,IAAI,CAACj2B,KAAK,CAACupB,UAAU,CAACyC,kBAAkB,EAAEiK,KAAK,CAAC;IAClD;IAEA,IAAI,CAAC/zB,gBAAgB,CAAC+zB,KAAK,CAAC;IAC5B,OAAOA,KAAK;EACd;EAEA+E,iBAAiBA,CACf77B,QAA0B,EAC1Bq6B,IAAuB,EACZ;IACX,MAAM/wC,IAAI,GAAG,KAAK,CAACuyC,iBAAiB,CAAC77B,QAAQ,EAAEq6B,IAAI,CAAC;IAEpD,IACE/wC,IAAI,CAACC,IAAI,KAAK,mBAAmB,IACjCD,IAAI,CAAC4mC,cAAc,IACnB5mC,IAAI,CAACopC,KAAK,CAACxrC,KAAK,GAAGoC,IAAI,CAAC4mC,cAAc,CAAChpC,KAAK,EAC5C;MACA,IAAI,CAAC2Z,KAAK,CAACupB,UAAU,CAAC0C,qBAAqB,EAAExjC,IAAI,CAAC4mC,cAAc,CAAC;IACnE;IAEA,OAAO5mC,IAAI;EACb;EAEAwyC,qBAAqBA,CAACxyC,IAAiC,EAAE;IACvD,KAAK,CAACwyC,qBAAqB,CAACxyC,IAAI,CAAC;IACjC,IAAIA,IAAI,CAACyyC,MAAM,IAAIzyC,IAAI,CAACykC,UAAU,KAAK,OAAO,EAAE;MAC9C,IAAI,CAACltB,KAAK,CACRupB,UAAU,CAACyB,6BAA6B,EACxCviC,IAAI,CAACuY,UAAU,CAAC,CAAC,CAAC,CAACtK,GAAG,CAACrQ,KACzB,CAAC;IACH;EACF;EAEA80C,yBAAyBA,CAKvB1yC,IAAyB,EAAE2yC,SAAoB,EAAE1yC,IAAe,EAAQ;IACxE0yC,SAAS,CAACC,KAAK,GAAGpO,iBAAiB,CAACxkC,IAAI,CAAC,GACrC,IAAI,CAACmoC,6BAA6B,CAClB,IAAI,EACA,IACpB,CAAC,GACD,IAAI,CAAC/B,eAAe,CAAA,CAAE;IAE1BpmC,IAAI,CAACuY,UAAU,CAACsD,IAAI,CAAC,IAAI,CAACg3B,qBAAqB,CAACF,SAAS,EAAE1yC,IAAI,CAAC,CAAC;EACnE;EAEA6yC,sBAAsBA,CAACC,QAAiB,EAAW;IACjD,IAAI,KAAK,CAACD,sBAAsB,CAACC,QAAQ,CAAC,EAAE,OAAO,IAAI;IACvD,IAAI,IAAI,CAAChW,YAAY,CAAA,GAAS,CAAC,EAAE;MAC/B,IAAI,CAACgW,QAAQ,EAAE,OAAO,IAAI;MAC1B,MAAMviB,EAAE,GAAG,IAAI,CAAC0E,iBAAiB,EAAE;MACnC,OAAO1E,EAAE,KAAA,GAA6B,IAAIA,EAAE,KAAuB,EAAA;IACrE;IACA,OAAO,CAACuiB,QAAQ,IAAI,IAAI,CAAChW,YAAY,GAAW,CAAC;EACnD;EAEAiW,gBAAgBA,CACdhzC,IAA4D,EAC5D+yC,QAAiB,EACjBvwC,KAAoB,EACpByL,GAAc,EACR;IACN,KAAK,CAAC+kC,gBAAgB,CAAChzC,IAAI,EAAE+yC,QAAQ,EAAEvwC,KAAK,EAAEyL,GAAG,CAAC;IAClD,IAAI8kC,QAAQ,EAAE;MACZ,IAAI,CAACvwC,KAAK,IAAI,IAAI,CAACuvB,KAAK,CAAA,EAAY,CAAC,EAAE;QAErC;MACF;MACC/xB,IAAI,CAA8B6nC,UAAU,GAC3CrlC,KAAK,KAAK,MAAM,GAAGA,KAAK,GAAG,OAAO;IACtC,CAAC,MAAM;MACL,IAAIA,KAAK,KAAK,MAAM,IAAI,IAAI,CAACuvB,KAAK,CAAQ,EAAA,CAAC,EAAE,IAAI,CAAC7sB,UAAU,EAAE;MAC7DlF,IAAI,CAAyBykC,UAAU,GACtCjiC,KAAK,KAAK,MAAM,IAAIA,KAAK,KAAK,QAAQ,GAAGA,KAAK,GAAG,OAAO;IAC5D;EACF;EAGAywC,oBAAoBA,CAClBN,SAAc,EACdO,gBAAyB,EACzBC,kBAA2B,EAE3BC,eAAwB,EAExBrpB,WAAoC,EACjB;IACnB,MAAMspB,UAAU,GAAGV,SAAS,CAACW,QAAQ;IAErC,IAAIC,iBAAiB,GAAG,IAAI;IAC5B,IAAIF,UAAU,CAACpzC,IAAI,KAAK,YAAY,EAAE;MACpC,IAAIozC,UAAU,CAACltC,IAAI,KAAK,MAAM,EAAE;QAC9BotC,iBAAiB,GAAG,MAAM;MAC5B,CAAC,MAAM,IAAIF,UAAU,CAACltC,IAAI,KAAK,QAAQ,EAAE;QACvCotC,iBAAiB,GAAG,QAAQ;MAC9B;IACF;IAEA,IAAIv8B,SAAS,GAAG,KAAK;IACrB,IAAI,IAAI,CAAC+lB,YAAY,CAAA,EAAO,CAAC,IAAI,CAAC,IAAI,CAACK,qBAAqB,CAAC,IAAI,CAAC,EAAE;MAClE,MAAMoW,QAAQ,GAAG,IAAI,CAACpN,eAAe,CAAC,IAAI,CAAC;MAC3C,IACEmN,iBAAiB,KAAK,IAAI,IAC1B,CAACruB,0BAA0B,CAAC,IAAI,CAAC9M,KAAK,CAACnY,IAAI,CAAC,EAC5C;QAEA0yC,SAAS,CAACW,QAAQ,GAAGE,QAAQ;QAC7Bb,SAAS,CAAClO,UAAU,GAAG8O,iBAAiB;QACxCZ,SAAS,CAACC,KAAK,GAAGxS,eAAe,CAACoT,QAAQ,CAAC;MAC7C,CAAC,MAAM;QAELb,SAAS,CAACW,QAAQ,GAAGD,UAAU;QAC/BV,SAAS,CAAClO,UAAU,GAAG,IAAI;QAC3BkO,SAAS,CAACC,KAAK,GAAG,IAAI,CAACxM,eAAe,EAAE;MAC1C;IACF,CAAC,MAAM;MACL,IACEmN,iBAAiB,KAAK,IAAI,IAC1BruB,0BAA0B,CAAC,IAAI,CAAC9M,KAAK,CAACnY,IAAI,CAAC,EAC3C;QAEA0yC,SAAS,CAACW,QAAQ,GAAG,IAAI,CAAClN,eAAe,CAAC,IAAI,CAAC;QAC/CuM,SAAS,CAAClO,UAAU,GAAG8O,iBAAiB;MAC1C,CAAC,MAAM;QACL,IAAIL,gBAAgB,EAAE;UAEpB,MAAM,IAAI,CAAC37B,KAAK,CAAC9H,MAAM,CAAClM,qBAAqB,EAAEovC,SAAS,EAAE;YACxDnvC,UAAU,EAAE6vC,UAAU,CAACrmC;UACzB,CAAC,CAAC;QACJ;QAEA2lC,SAAS,CAACW,QAAQ,GAAGD,UAAU;QAC/BV,SAAS,CAAClO,UAAU,GAAG,IAAI;MAC7B;MAEA,IAAI,IAAI,CAACpH,aAAa,CAAA,EAAO,CAAC,EAAE;QAC9BsV,SAAS,CAACC,KAAK,GAAG,IAAI,CAACxM,eAAe,EAAE;MAC1C,CAAC,MAAM;QACLpvB,SAAS,GAAG,IAAI;QAChB27B,SAAS,CAACC,KAAK,GAAGxS,eAAe,CAACuS,SAAS,CAACW,QAAQ,CAAC;MACvD;IACF;IAEA,MAAMG,qBAAqB,GAAGjP,iBAAiB,CAACmO,SAAS,CAAC;IAE1D,IAAIQ,kBAAkB,IAAIM,qBAAqB,EAAE;MAC/C,IAAI,CAACl8B,KAAK,CAACupB,UAAU,CAAC0B,mCAAmC,EAAEmQ,SAAS,CAAC;IACvE;IAEA,IAAIQ,kBAAkB,IAAIM,qBAAqB,EAAE;MAC/C,IAAI,CAACvK,iBAAiB,CACpByJ,SAAS,CAACC,KAAK,CAACzsC,IAAI,EACpBwsC,SAAS,CAACC,KAAK,CAAC3kC,GAAG,CAACrQ,KAAK,EACP,IACpB,CAAC;IACH;IAEA,IAAIoZ,SAAS,IAAI,CAACm8B,kBAAkB,IAAI,CAACM,qBAAqB,EAAE;MAC9D,IAAI,CAACC,iBAAiB,CACpBf,SAAS,CAACC,KAAK,CAACzsC,IAAI,EACpBwsC,SAAS,CAAC1kC,GAAG,CAACrQ,KAAK,EACnB,IAAI,EACJ,IACF,CAAC;IACH;IAEA,OAAO,IAAI,CAACi1C,qBAAqB,CAACF,SAAS,EAAE,iBAAiB,CAAC;EACjE;EAEAgB,gBAAgBA,CAAAA,EAAc;IAC5B,QAAQ,IAAI,CAACv7B,KAAK,CAACnY,IAAI;MACrB,KAAA,EAAA;QAEE,OAAO,IAAI,CAACmmC,eAAe,CAAe,IAAI,CAAC;MACjD;QACE,OAAO,KAAK,CAACuN,gBAAgB,EAAE;IACnC;EACF;EAGAC,mBAAmBA,CACjB5zC,IAAwB,EACxBuV,aAAsB,EAChB;IAEN,MAAMlV,IAAI,GAAGL,IAAI,CAACK,IAAI;IACtB,IAAIA,IAAI,KAAK,KAAK,IAAIA,IAAI,KAAK,KAAK,IAAI,IAAI,CAAC0xB,KAAK,CAAA,EAAM,CAAC,EAAE;MACzD/xB,IAAI,CAAC4V,cAAc,GAAG,IAAI,CAAC2wB,iCAAiC,EAAE;IAChE;IACA,KAAK,CAACqN,mBAAmB,CAAC5zC,IAAI,EAAEuV,aAAa,CAAC;EAChD;EAGAs+B,UAAUA,CACRC,IAA0B,EAC1BzzC,IAA6B,EACvB;IACN,KAAK,CAACwzC,UAAU,CAACC,IAAI,EAAEzzC,IAAI,CAAC;IAC5B,IAAI,IAAI,CAAC0xB,KAAK,CAAA,EAAS,CAAC,EAAE;MACxB+hB,IAAI,CAAC9+B,EAAE,CAAC4xB,cAAc,GAAG,IAAI,CAACkB,uBAAuB,CAAA,CAAE;MACvD,IAAI,CAACruB,gBAAgB,CAACq6B,IAAI,CAAC9+B,EAAE,CAAC;IAChC;EACF;EAGA++B,iCAAiCA,CAC/B/zC,IAA+B,EAC/Bg0C,IAAsB,EACK;IAC3B,IAAI,IAAI,CAACjiB,KAAK,CAAA,EAAS,CAAC,EAAE;MACxB,MAAMuY,qBAAqB,GAAG,IAAI,CAAClyB,KAAK,CAACkX,kBAAkB;MAC3D,IAAI,CAAClX,KAAK,CAACkX,kBAAkB,GAAG,IAAI;MACpCtvB,IAAI,CAAC2mC,UAAU,GAAG,IAAI,CAACmB,uBAAuB,EAAE;MAChD,IAAI,CAAC1vB,KAAK,CAACkX,kBAAkB,GAAGgb,qBAAqB;IACvD;IAEA,OAAO,KAAK,CAACyJ,iCAAiC,CAAC/zC,IAAI,EAAEg0C,IAAI,CAAC;EAC5D;EAGAC,qBAAqBA,CAAAA,EAAY;IAC/B,OAAO,IAAI,CAACliB,KAAK,CAAS,EAAA,CAAC,IAAI,KAAK,CAACkiB,qBAAqB,CAAA,CAAE;EAC9D;EAYAjF,gBAAgBA,CACdr4B,mBAA6C,EAC7Cu9B,cAAyB,EACX;IAAA,IAAAC,IAAA;IACd,IAAI/7B,KAAK,GAAG,IAAI;IAEhB,IAAIg8B,GAAG;IAEP,IACE,IAAI,CAACnpB,SAAS,CAAC,KAAK,CAAC,KACpB,IAAI,CAAC8G,KAAK,CAAe,GAAA,CAAC,IAAI,IAAI,CAACA,KAAK,CAAM,EAAA,CAAC,CAAC,EACjD;MACA3Z,KAAK,GAAG,IAAI,CAACA,KAAK,CAAC9J,KAAK,EAAE;MAE1B8lC,GAAG,GAAG,IAAI,CAACtW,QAAQ,CACjB,MAAM,KAAK,CAACkR,gBAAgB,CAACr4B,mBAAmB,EAAEu9B,cAAc,CAAC,EACjE97B,KACF,CAAC;MAID,IAAI,CAACg8B,GAAG,CAACjmC,KAAK,EAAE,OAAOimC,GAAG,CAACp0C,IAAI;MAK/B,MAAM;QAAEomB;OAAS,GAAG,IAAI,CAAChO,KAAK;MAC9B,MAAMi8B,cAAc,GAAGjuB,OAAO,CAACA,OAAO,CAAC5N,MAAM,GAAG,CAAC,CAAC;MAClD,IAAI67B,cAAc,KAAK/tB,KAAE,CAACvM,MAAM,IAAIs6B,cAAc,KAAK/tB,KAAE,CAACrM,MAAM,EAAE;QAChEmM,OAAO,CAACC,GAAG,CAAA,CAAE;MACf;IACF;IAEA,IAAI,CAAA8tB,IAAA,GAAAC,GAAG,aAAHD,IAAA,CAAKhmC,KAAK,IAAI,IAAI,CAAC4jB,KAAK,CAAA,EAAM,CAAC,EAAE;MAAA,IAAAuiB,KAAA,EAAAC,KAAA;MACnCn8B,KAAK,GAAGA,KAAK,IAAI,IAAI,CAACA,KAAK,CAAC9J,KAAK,CAAA,CAAE;MAEnC,IAAIsH,cAA0C;MAE9C,MAAM2H,KAAK,GAAG,IAAI,CAACugB,QAAQ,CAAE0W,KAAkB,IAAK;QAAA,IAAAC,qBAAA;QAClD7+B,cAAc,GAAG,IAAI,CAAC2wB,iCAAiC,EAAE;QAEzD,MAAMmO,eAAe,GAAG,IAAI,CAAC5G,gCAAgC,CAC3Dl4B,cAAc,EACd,MAAM;UACJ,MAAM85B,MAAM,GAAG,KAAK,CAACV,gBAAgB,CACnCr4B,mBAAmB,EACnBu9B,cACF,CAAC;UAED,IAAI,CAACvT,0BAA0B,CAAC+O,MAAM,EAAE95B,cAAc,CAAC;UAEvD,OAAO85B,MAAM;QACf,CACF,CAAC;QAID,IAAA,CAAA+E,qBAAA,GAAIC,eAAe,CAACrhC,KAAK,KAAA,IAAA,IAArBohC,qBAAA,CAAuBvgC,aAAa,EAAEsgC,KAAK,EAAE;QAKjD,MAAMrG,IAAI,GAAG,IAAI,CAACwG,6BAA6B,CAACD,eAAe,CAAC;QAEhE,IAAIvG,IAAI,CAACluC,IAAI,KAAK,yBAAyB,EAAEu0C,KAAK,CAAA,CAAE;QAEpDrG,IAAI,CAACv4B,cAAc,GAAGA,cAAc;QACpC,IAAI,CAAC+qB,0BAA0B,CAACwN,IAAI,EAAEv4B,cAAc,CAAC;QAErD,OAAO8+B,eAAe;MACvB,CAAA,EAAEt8B,KAAK,CAAC;MAET,IAAIs8B,eAII,GAAG,IAAI;MAEf,IACEn3B,KAAK,CAACvd,IAAI,IACV,IAAI,CAAC20C,6BAA6B,CAACp3B,KAAK,CAACvd,IAAI,CAAC,CAACC,IAAI,KACjD,yBAAyB,EAC3B;QACA,IAAI,CAACsd,KAAK,CAACpP,KAAK,IAAI,CAACoP,KAAK,CAAC6gB,OAAO,EAAE;UAGlC,IAAI7gB,KAAK,CAACvd,IAAI,CAAC40C,KAAK,EAAE;YAEpB,IAAI,CAACr9B,KAAK,CACRupB,UAAU,CAACmD,+CAA+C,EAC1DruB,cACF,CAAC;UACH;UACA,OAAO2H,KAAK,CAACvd,IAAI;QACnB;QAGA00C,eAAe,GAAGn3B,KAAK,CAACvd,IAAI;MAC9B;MAQA,IAAA,CAAAs0C,KAAA,GAAIF,GAAG,aAAHE,KAAA,CAAKt0C,IAAI,EAAE;QAEb,IAAI,CAACoY,KAAK,GAAGg8B,GAAG,CAAClW,SAAS;QAC1B,OAAOkW,GAAG,CAACp0C,IAAI;MACjB;MAEA,IAAI00C,eAAe,EAAE;QAEnB,IAAI,CAACt8B,KAAK,GAAGmF,KAAK,CAAC2gB,SAAS;QAC5B,OAAOwW,eAAe;MACxB;MAEA,IAAAH,CAAAA,KAAA,GAAIH,GAAG,KAAHG,IAAAA,IAAAA,KAAA,CAAKpW,MAAM,EAAE,MAAMiW,GAAG,CAACjmC,KAAK;MAChC,IAAIoP,KAAK,CAAC4gB,MAAM,EAAE,MAAM5gB,KAAK,CAACpP,KAAK;MAGnC,MAAM,IAAI,CAACoJ,KAAK,CACdupB,UAAU,CAACkD,iCAAiC,EAC5CpuB,cACF,CAAC;IACH;IAEA,OAAO,KAAK,CAACo5B,gBAAgB,CAACr4B,mBAAmB,EAAEu9B,cAAc,CAAC;EACpE;EAGAW,UAAUA,CACR70C,IAAuC,EACe;IACtD,IAAI,IAAI,CAAC+xB,KAAK,CAAA,EAAS,CAAC,EAAE;MAExB,MAAM2d,MAAM,GAAG,IAAI,CAAC5R,QAAQ,CAAmB,MAAM;QACnD,MAAMwM,qBAAqB,GAAG,IAAI,CAAClyB,KAAK,CAACkX,kBAAkB;QAC3D,IAAI,CAAClX,KAAK,CAACkX,kBAAkB,GAAG,IAAI;QAEpC,MAAM+W,QAAQ,GAAG,IAAI,CAAC1wB,SAAS,EAAoB;QAEnD,CACE0wB,QAAQ,CAACO,cAAc,EAEvB5mC,IAAI,CAACgmC,SAAS,CACf,GAAG,IAAI,CAACD,oCAAoC,EAAE;QAE/C,IAAI,CAAC3tB,KAAK,CAACkX,kBAAkB,GAAGgb,qBAAqB;QAErD,IAAI,IAAI,CAAC/M,kBAAkB,CAAA,CAAE,EAAE,IAAI,CAACr4B,UAAU,CAAA,CAAE;QAChD,IAAI,CAAC,IAAI,CAAC6sB,KAAK,CAAA,EAAS,CAAC,EAAE,IAAI,CAAC7sB,UAAU,EAAE;QAE5C,OAAOmhC,QAAQ;MACjB,CAAC,CAAC;MAEF,IAAIqJ,MAAM,CAACvR,MAAM,EAAE,OAAO,IAAI;MAG9B,IAAIuR,MAAM,CAACvhC,KAAK,EAAE,IAAI,CAACiK,KAAK,GAAGs3B,MAAM,CAACxR,SAAS;MAI/Cl+B,IAAI,CAAC2mC,UAAU,GAAG+I,MAAM,CAAC1vC,IAAI,CAAC4mC,cAAc,GACxC,IAAI,CAAC9wB,UAAU,CAAC45B,MAAM,CAAC1vC,IAAI,EAAE,gBAAgB,CAAC,GAC9C,IAAI;IACV;IAEA,OAAO,KAAK,CAAC60C,UAAU,CAAC70C,IAAI,CAAC;EAC/B;EAEA80C,gBAAgBA,CAAC/gC,MAAqB,EAAW;IAC/C,OAAO,IAAI,CAACge,KAAK,CAAS,EAAA,CAAC,IAAI,KAAK,CAAC+iB,gBAAgB,CAAC/gC,MAAM,CAAC;EAC/D;EAEAghC,0BAA0BA,CACxB/0C,IAAuC,EACvC+T,MAEuC,EACjC;IACN,IACE,IAAI,CAACqE,KAAK,CAACqW,yBAAyB,CAACgK,QAAQ,CAC3C,IAAI,CAAC1N,iBAAiB,CAAC/qB,IAAI,CAACpC,KAAK,CACnC,CAAC,EACD;MACAoC,IAAI,CAAC+T,MAAM,GAAGA,MAA6C;IAC7D,CAAC,MAAM;MACL,KAAK,CAACghC,0BAA0B,CAAC/0C,IAAI,EAAE+T,MAAM,CAAC;IAChD;EACF;EAEA07B,WAAWA,CACTzvC,IAAgB,EAChBg1C,eAAwB,EACxBC,eAAgC,EAChCC,iBAA0B,GAAG,IAAI,EAC3B;IACN,IACED,eAAe,IACf,IAAI,CAAC78B,KAAK,CAACqW,yBAAyB,CAACgK,QAAQ,CAC3C,IAAI,CAAC1N,iBAAiB,CAAC/qB,IAAI,CAACpC,KAAK,CACnC,CAAC,EACD;MACA;IACF;IAGA,KAAK,IAAIkpB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG9mB,IAAI,CAAC+T,MAAM,CAACyE,MAAM,EAAEsO,CAAC,EAAE,EAAE;MAC3C,IAAI,IAAI,CAACgrB,WAAW,CAAC9xC,IAAI,CAAC+T,MAAM,CAAC+S,CAAC,CAAC,CAAC,IAAIA,CAAC,GAAG,CAAC,EAAE;QAC7C,IAAI,CAACvP,KAAK,CAACupB,UAAU,CAACwC,oBAAoB,EAAEtjC,IAAI,CAAC+T,MAAM,CAAC+S,CAAC,CAAC,CAAC;MAC7D;IACF;IAEA,KAAK,CAAC2oB,WAAW,CACfzvC,IAAI,EACJg1C,eAAe,EACfC,eAAe,EACfC,iBACF,CAAC;EACH;EAEAC,kCAAkCA,CAACC,UAAmB,EAAgB;IACpE,OAAO,KAAK,CAACD,kCAAkC,CAC7CC,UAAU,IACR,CAAC,IAAI,CAACh9B,KAAK,CAACoW,SAAS,CAACiK,QAAQ,CAC5B,IAAI,CAAC5N,iBAAiB,CAAC,IAAI,CAACzS,KAAK,CAACxa,KAAK,CACzC,CACJ,CAAC;EACH;EAEAy3C,eAAeA,CACbx8B,IAAkB,EAClBnC,QAAkB,EAClBoC,OAAwB,EACV;IACd,IACED,IAAI,CAAC5Y,IAAI,KAAK,YAAY,IAC1B4Y,IAAI,CAAC1S,IAAI,KAAK,OAAO,IACrB,IAAI,CAACiS,KAAK,CAACoW,SAAS,CAACiK,QAAQ,CAAC/hB,QAAQ,CAACjZ,KAAK,CAAC,EAC7C;MACA,IAAI,CAACyqB,IAAI,CAAA,CAAE;MAEX,MAAMloB,IAAI,GAAG,IAAI,CAAC0gC,WAAW,CAAmBhqB,QAAQ,CAAC;MACzD1W,IAAI,CAAC2X,MAAM,GAAGkB,IAAI;MAClB7Y,IAAI,CAAC8X,SAAS,GAAG,KAAK,CAACw9B,4BAA4B,GAAU,CAAC;MAC9Dz8B,IAAI,GAAG,IAAI,CAAC/C,UAAU,CAAC9V,IAAI,EAAE,gBAAgB,CAAC;IAC/C,CAAA,MAAM,IACL6Y,IAAI,CAAC5Y,IAAI,KAAK,YAAY,IAC1B4Y,IAAI,CAAC1S,IAAI,KAAK,OAAO,IACrB,IAAI,CAAC4rB,KAAK,CAAA,EAAM,CAAC,EACjB;MACA,MAAM3Z,KAAK,GAAG,IAAI,CAACA,KAAK,CAAC9J,KAAK,CAAA,CAAE;MAChC,MAAMiP,KAAK,GAAG,IAAI,CAACugB,QAAQ,CACzB0W,KAAK,IAAI,IAAI,CAACe,iCAAiC,CAAC7+B,QAAQ,CAAC,IAAI89B,KAAK,CAAE,CAAA,EACpEp8B,KACF,CAAC;MAID,IAAI,CAACmF,KAAK,CAACpP,KAAK,IAAI,CAACoP,KAAK,CAAC6gB,OAAO,EAAE,OAAO7gB,KAAK,CAACvd,IAAI;MAErD,MAAM0vC,MAAM,GAAG,IAAI,CAAC5R,QAAQ,CAC1B,MAAM,KAAK,CAACuX,eAAe,CAACx8B,IAAI,EAAEnC,QAAQ,EAAEoC,OAAO,CAAC,EACpDV,KACF,CAAC;MAED,IAAIs3B,MAAM,CAAC1vC,IAAI,IAAI,CAAC0vC,MAAM,CAACvhC,KAAK,EAAE,OAAOuhC,MAAM,CAAC1vC,IAAI;MAEpD,IAAIud,KAAK,CAACvd,IAAI,EAAE;QACd,IAAI,CAACoY,KAAK,GAAGmF,KAAK,CAAC2gB,SAAS;QAE5B,OAAO3gB,KAAK,CAACvd,IAAI;MACnB;MAEA,IAAI0vC,MAAM,CAAC1vC,IAAI,EAAE;QACf,IAAI,CAACoY,KAAK,GAAGs3B,MAAM,CAACxR,SAAS;QAC7B,OAAOwR,MAAM,CAAC1vC,IAAI;MACpB;MAEA,MAAMud,KAAK,CAACpP,KAAK,IAAIuhC,MAAM,CAACvhC,KAAK;IACnC;IAEA,OAAO,KAAK,CAACknC,eAAe,CAACx8B,IAAI,EAAEnC,QAAQ,EAAEoC,OAAO,CAAC;EACvD;EAEAF,cAAcA,CACZC,IAAkB,EAElBnC,QAAkB,EAClBoC,OAAmC,EACnC08B,cAAqC,EACvB;IACd,IAAI,IAAI,CAACzjB,KAAK,CAAe,EAAA,CAAC,IAAI,IAAI,CAAC0jB,mBAAmB,CAAA,CAAE,EAAE;MAC5DD,cAAc,CAACz8B,mBAAmB,GAAG,IAAI;MACzC,IAAID,OAAO,EAAE;QACX08B,cAAc,CAACv8B,IAAI,GAAG,IAAI;QAC1B,OAAOJ,IAAI;MACb;MACA,IAAI,CAACqP,IAAI,CAAA,CAAE;MACX,MAAMloB,IAAI,GAAG,IAAI,CAAC0gC,WAAW,CAA2BhqB,QAAQ,CAAC;MACjE1W,IAAI,CAAC2X,MAAM,GAAGkB,IAAI;MAClB7Y,IAAI,CAAC01C,aAAa,GAChB,IAAI,CAACtL,+CAA+C,EAAE;MACxD,IAAI,CAACvM,MAAM,CAAA,EAAU,CAAC;MACtB79B,IAAI,CAAC8X,SAAS,GAAG,IAAI,CAACw9B,4BAA4B,GAAU,CAAC;MAC7Dt1C,IAAI,CAAC0X,QAAQ,GAAG,IAAI;MACpB,OAAO,IAAI,CAACF,oBAAoB,CAACxX,IAAI,EAAiB,IAAI,CAAC;IAC5D,CAAA,MAAM,IACL,CAAC8Y,OAAO,IACR,IAAI,CAACwsB,gBAAgB,CAAE,CAAA,KACtB,IAAI,CAACvT,KAAK,CAAM,EAAA,CAAC,IAEhB,IAAI,CAACA,KAAK,CAAA,EAAa,CAAC,CAAC,EAC3B;MACA,MAAM/xB,IAAI,GAAG,IAAI,CAAC0gC,WAAW,CAE3BhqB,QAAQ,CAAC;MACX1W,IAAI,CAAC2X,MAAM,GAAGkB,IAAI;MAElB,MAAM62B,MAAM,GAAG,IAAI,CAAC5R,QAAQ,CAAC,MAAM;QACjC99B,IAAI,CAAC01C,aAAa,GAChB,IAAI,CAAClL,4CAA4C,EAAE;QACrD,IAAI,CAAC3M,MAAM,CAAA,EAAU,CAAC;QACtB79B,IAAI,CAAC8X,SAAS,GAAG,KAAK,CAACw9B,4BAA4B,GAAU,CAAC;QAC9D,IAAIE,cAAc,CAACz8B,mBAAmB,EAAE;UACrC/Y,IAAI,CAAsC0X,QAAQ,GAAG,KAAK;QAC7D;QACA,OAAO,IAAI,CAACF,oBAAoB,CAC9BxX,IAAI,EACJw1C,cAAc,CAACz8B,mBACjB,CAAC;MACH,CAAC,CAAC;MAEF,IAAI22B,MAAM,CAAC1vC,IAAI,EAAE;QACf,IAAI0vC,MAAM,CAACvhC,KAAK,EAAE,IAAI,CAACiK,KAAK,GAAGs3B,MAAM,CAACxR,SAAS;QAC/C,OAAOwR,MAAM,CAAC1vC,IAAI;MACpB;IACF;IAEA,OAAO,KAAK,CAAC4Y,cAAc,CACzBC,IAAI,EAEJnC,QAAQ,EACRoC,OAAO,EACP08B,cACF,CAAC;EACH;EAEAG,cAAcA,CAAC31C,IAAqB,EAAQ;IAC1C,KAAK,CAAC21C,cAAc,CAAC31C,IAAI,CAAC;IAE1B,IAAI41C,KAAK,GAAG,IAAI;IAChB,IAAI,IAAI,CAACtQ,gBAAgB,CAAE,CAAA,IAAI,IAAI,CAACvT,KAAK,CAAM,EAAA,CAAC,EAAE;MAChD6jB,KAAK,GAAG,IAAI,CAAC9X,QAAQ,CAAC,MACpB,IAAI,CAAC0M,4CAA4C,CAAA,CACnD,CAAC,CAACxqC,IAAI;IACR;IACAA,IAAI,CAAC01C,aAAa,GAAGE,KAAK;EAC5B;EAEAL,iCAAiCA,CAC/B7+B,QAAkB,EAC4B;IAC9C,MAAM1W,IAAI,GAAG,IAAI,CAAC0gC,WAAW,CAA4BhqB,QAAQ,CAAC;IAClE,IAAI,CAACk9B,mBAAmB,CAAC5zC,IAAI,EAAE,KAAK,CAAC;IACrC,IAAI,CAAC,IAAI,CAAC60C,UAAU,CAAC70C,IAAI,CAAC,EAAE;IAC5B,OAAO,KAAK,CAAC61C,oBAAoB,CAC/B71C,IAAI,EACS6P,SAAS,EACR,IAChB,CAAC;EACH;EAEAonB,qBAAqBA,CAAC94B,IAAY,EAAQ;IACxC,MAAM+pB,IAAI,GAAG,IAAI,CAACkF,KAAK,CAACC,UAAU,CAAC,IAAI,CAACjV,KAAK,CAAC/J,GAAG,GAAG,CAAC,CAAC;IACtD,IACElQ,IAAI,KAAuB,EAAA,IAC3B+pB,IAAI,KAAA,EAAoB,IACxB,IAAI,CAAC9P,KAAK,CAACmX,cAAc,EACzB;MACA,IAAI,CAACnX,KAAK,CAACmX,cAAc,GAAG,KAAK;MACjC,IAAI,CAACnX,KAAK,CAAC/J,GAAG,IAAI,CAAC;MACnB,IAAI,CAACmmB,SAAS,CAAA,CAAE;MAChB;IACF;IAEA,KAAK,CAACyC,qBAAqB,CAAC94B,IAAI,CAAC;EACnC;EAEAg5B,kBAAkBA,CAACh5B,IAAY,EAAQ;IACrC,MAAM+pB,IAAI,GAAG,IAAI,CAACkF,KAAK,CAACC,UAAU,CAAC,IAAI,CAACjV,KAAK,CAAC/J,GAAG,GAAG,CAAC,CAAC;IACtD,IACElQ,IAAI,KAAA,GAA0B,IAC9B+pB,IAAI,QAA8B,EAClC;MAEA,IAAI,CAAC2O,QAAQ,CAAe,CAAA,EAAA,CAAC,CAAC;MAC9B;IACF;IAEA,KAAK,CAACM,kBAAkB,CAACh5B,IAAI,CAAC;EAChC;EAEA23C,aAAaA,CAACnkC,IAAY,EAAEokC,OAAkB,EAAU;IACtD,MAAMC,QAAQ,GAAG,KAAK,CAACF,aAAa,CAACnkC,IAAI,EAAEokC,OAAO,CAAC;IACnD,IAAI,IAAI,CAAC39B,KAAK,CAACmX,cAAc,EAAE;MAC7B,IAAI,CAAChY,KAAK,CACRupB,UAAU,CAACuD,uBAAuB,EAClC,IAAI,CAACjsB,KAAK,CAAC4X,WAAW,CAAA,CACxB,CAAC;IACH;IACA,OAAOgmB,QAAQ;EACjB;EAEAhgB,gBAAgBA,CAAAA,EAA+B;IAC7C,IAAI,IAAI,CAAC/K,SAAS,CAAC,cAAc,CAAC,IAAI,IAAI,CAACgrB,eAAe,CAAA,CAAE,EAAE;MAC5D,IAAI,IAAI,CAAC79B,KAAK,CAACmX,cAAc,EAAE;QAC7B,MAAM,IAAI,CAAChY,KAAK,CAACupB,UAAU,CAACiC,iBAAiB,EAAE,IAAI,CAAC3qB,KAAK,CAAC1B,QAAQ,CAAC;MACrE;MACA,IAAI,CAACw/B,wBAAwB,CAAA,CAAE;MAC/B,MAAMC,WAAW,GAAG,IAAI,CAACF,eAAe,EAAE;MAC1C,IAAIE,WAAW,EAAE;QACf,IAAI,CAAC/9B,KAAK,CAAC/J,GAAG,IAAI8nC,WAAW;QAC7B,IAAI,CAAC/9B,KAAK,CAACmX,cAAc,GAAG,IAAI;MAClC;MACA;IACF;IAEA,OAAO,KAAK,CAACyG,gBAAgB,CAAC,IAAI,CAAC5d,KAAK,CAACmX,cAAc,GAAG,KAAK,GAAG,IAAI,CAAC;EACzE;EAEA0mB,eAAeA,CAAAA,EAAmB;IAChC,MAAM;MAAE5nC;KAAK,GAAG,IAAI,CAAC+J,KAAK;IAC1B,IAAIg+B,yBAAyB,GAAG,CAAC;IACjC,OACE,CAAgC,EAAA,EAAA,CAAA,CAAA,CAAC3d,QAAQ,CAEvC,IAAI,CAACrL,KAAK,CAACC,UAAU,CAAChf,GAAG,GAAG+nC,yBAAyB,CACvD,CAAC,EACD;MACAA,yBAAyB,EAAE;IAC7B;IAEA,MAAMC,GAAG,GAAG,IAAI,CAACjpB,KAAK,CAACC,UAAU,CAAC+oB,yBAAyB,GAAG/nC,GAAG,CAAC;IAClE,MAAMioC,GAAG,GAAG,IAAI,CAAClpB,KAAK,CAACC,UAAU,CAAC+oB,yBAAyB,GAAG/nC,GAAG,GAAG,CAAC,CAAC;IAEtE,IAAIgoC,GAAG,KAAA,EAAoB,IAAIC,GAAG,OAAoB,EAAE;MACtD,OAAOF,yBAAyB,GAAG,CAAC;IACtC;IACA,IACE,IAAI,CAAChpB,KAAK,CAAC6C,KAAK,CACdmmB,yBAAyB,GAAG/nC,GAAG,EAC/B+nC,yBAAyB,GAAG/nC,GAAG,GAAG,EACpC,CAAC,KAAK,cAAc,EACpB;MACA,OAAO+nC,yBAAyB,GAAG,EAAE;IACvC;IACA,IAAIC,GAAG,KAAA,EAAoB,IAAIC,GAAG,OAAoB,EAAE;MACtD,OAAOF,yBAAyB;IAClC;IACA,OAAO,KAAK;EACd;EAEAF,wBAAwBA,CAAAA,EAAS;IAC/B,MAAMr4C,GAAG,GAAG,IAAI,CAACuvB,KAAK,CAACqG,OAAO,CAAC,IAAI,EAAE,IAAI,CAACrb,KAAK,CAAC/J,GAAG,CAAC;IACpD,IAAIxQ,GAAG,KAAK,CAAC,CAAC,EAAE;MACd,MAAM,IAAI,CAAC0Z,KAAK,CAAC9H,MAAM,CAAC/E,mBAAmB,EAAE,IAAI,CAAC0N,KAAK,CAAC4X,WAAW,CAAA,CAAE,CAAC;IACxE;EACF;EAIAumB,wCAAwCA,CACtCtoC,GAAa,EACb;IACEuzB,QAAQ;IACRD;EAIF,CAAC,EACK;IACN,IAAI,CAAChqB,KAAK,CAACupB,UAAU,CAACQ,+BAA+B,EAAErzB,GAAG,EAAE;MAC1DszB,UAAU;MACVC;IACF,CAAC,CAAC;EACJ;EAEAgV,qCAAqCA,CACnCvoC,GAAa,EACbwoC,WAAwB,EACxB;IACA,OAAO,IAAI,CAACl/B,KAAK,CACf,CAACk/B,WAAW,CAAC1U,YAAY,GACrBjB,UAAU,CAACmB,uCAAuC,GAClDwU,WAAW,CAAC1U,YAAY,KAAK,QAAQ,GACnCjB,UAAU,CAACkB,sCAAsC,GACjDlB,UAAU,CAACgB,uCAAuC,EACxD7zB,GAAG,EACHwoC,WACF,CAAC;EACH;EAEAC,uCAAuCA,CACrCzoC,GAAa,EACbC,OAGC,EACK;IACN,IAAI,CAACqJ,KAAK,CAACupB,UAAU,CAACsB,8BAA8B,EAAEn0B,GAAG,EAAEC,OAAO,CAAC;EACrE;EAEAyoC,kDAAkDA,CAChD32C,IAAY,EACZkO,OAEC,EACK;IACN,IAAI,CAACqJ,KAAK,CACRupB,UAAU,CAACuB,yCAAyC,EACpDriC,IAAI,EACJkO,OACF,CAAC;EACH;EAEA0oC,kBAAkBA,CAAAA,EAAmB;IACnC,MAAMlgC,QAAQ,GAAG,IAAI,CAAC0B,KAAK,CAAC1B,QAAQ;IACpC,MAAMmgC,SAAS,GAAGA,CAAAA,KAAM,IAAI,CAAC9kB,KAAK,CAAS,EAAA,CAAC,IAAI,IAAI,CAACA,KAAK,EAAU,CAAC;IACrE,QAAQ,IAAI,CAAC3Z,KAAK,CAACnY,IAAI;MACrB,KAAA,GAAA;QAAa;UACX,MAAM62C,OAAO,GAAG,IAAI,CAAChkC,mBAAmB,CAAC,IAAI,CAACsF,KAAK,CAACpL,KAAK,CAAC;UAC1D,IAAI6pC,SAAS,CAAA,CAAE,EAAE;YACf,OAAO;cAAE52C,IAAI,EAAE,QAAQ;cAAEgO,GAAG,EAAE6oC,OAAO,CAAC7oC,GAAG,CAACrQ,KAAK;cAAEoP,KAAK,EAAE8pC;aAAS;UACnE;UACA,OAAO;YAAE72C,IAAI,EAAE,SAAS;YAAEgO,GAAG,EAAEyI;WAAU;QAC3C;MACA,KAAA,GAAA;QAAgB;UACd,MAAMogC,OAAO,GAAG,IAAI,CAACjkC,kBAAkB,CAAC,IAAI,CAACuF,KAAK,CAACpL,KAAK,CAAC;UACzD,IAAI6pC,SAAS,CAAA,CAAE,EAAE;YACf,OAAO;cAAE52C,IAAI,EAAE,QAAQ;cAAEgO,GAAG,EAAE6oC,OAAO,CAAC7oC,GAAG,CAACrQ,KAAK;cAAEoP,KAAK,EAAE8pC;aAAS;UACnE;UACA,OAAO;YAAE72C,IAAI,EAAE,SAAS;YAAEgO,GAAG,EAAEyI;WAAU;QAC3C;MACA,KAAA,EAAA;MACA,KAAA,EAAA;QAAgB;UACd,MAAMogC,OAAO,GAAG,IAAI,CAAC9jC,mBAAmB,CAAC,IAAI,CAAC+e,KAAK,CAAS,EAAA,CAAC,CAAC;UAC9D,IAAI8kB,SAAS,CAAA,CAAE,EAAE;YACf,OAAO;cACL52C,IAAI,EAAE,SAAS;cACfgO,GAAG,EAAE6oC,OAAO,CAAC7oC,GAAG,CAACrQ,KAAK;cACtBoP,KAAK,EAAE8pC;aACR;UACH;UACA,OAAO;YAAE72C,IAAI,EAAE,SAAS;YAAEgO,GAAG,EAAEyI;WAAU;QAC3C;MACA;QACE,OAAO;UAAEzW,IAAI,EAAE,SAAS;UAAEgO,GAAG,EAAEyI;SAAU;IAC7C;EACF;EAEAqgC,iBAAiBA,CAAAA,EAGf;IACA,MAAM9oC,GAAG,GAAG,IAAI,CAACmK,KAAK,CAAC1B,QAAQ;IAC/B,MAAM1B,EAAE,GAAG,IAAI,CAACoxB,eAAe,CAAC,IAAI,CAAC;IACrC,MAAMjX,IAAI,GAAG,IAAI,CAACsF,GAAG,CAAA,EAAM,CAAC,GACxB,IAAI,CAACmiB,kBAAkB,EAAE,GACzB;MAAE32C,IAAI,EAAE,MAAe;MAAEgO;KAAK;IAClC,OAAO;MAAE+G,EAAE;MAAEma;KAAM;EACrB;EAEA6nB,iCAAiCA,CAC/B/oC,GAAa,EACbmY,OAAoB,EACpB6wB,YAA8B,EACxB;IACN,MAAM;MAAElV;IAAc,CAAA,GAAG3b,OAAO;IAChC,IAAI2b,YAAY,KAAK,IAAI,EAAE;MACzB;IACF;IACA,IAAIA,YAAY,KAAKkV,YAAY,EAAE;MACjC,IAAI,CAACT,qCAAqC,CAACvoC,GAAG,EAAEmY,OAAO,CAAC;IAC1D;EACF;EAEA8wB,eAAeA,CAAC;IACd1V,QAAQ;IACRO;EAIF,CAAC,EAoBC;IACA,MAAMoV,SAAS,GAAG,IAAIprC,GAAG,EAAE;IAC3B,MAAMwhB,OAAO,GAAG;MAEd6pB,cAAc,EAAE,EAAE;MAElBC,aAAa,EAAE,EAAE;MAEjBC,aAAa,EAAE,EAAE;MAEjBC,gBAAgB,EAAE;KACnB;IACD,IAAIC,iBAAiB,GAAG,KAAK;IAC7B,OAAO,CAAC,IAAI,CAACzlB,KAAK,CAAA,CAAU,CAAC,EAAE;MAC7B,IAAI,IAAI,CAAC0C,GAAG,CAAA,EAAY,CAAC,EAAE;QACzB+iB,iBAAiB,GAAG,IAAI;QACxB;MACF;MACA,MAAMC,UAAU,GAAG,IAAI,CAAC9hC,SAAS,EAAoB;MACrD,MAAM;QAAEX,EAAE;QAAEma;MAAK,CAAC,GAAG,IAAI,CAAC4nB,iBAAiB,EAAE;MAC7C,MAAMxV,UAAU,GAAGvsB,EAAE,CAAC7O,IAAI;MAC1B,IAAIo7B,UAAU,KAAK,EAAE,EAAE;QACrB;MACF;MACA,IAAI,QAAQ,CAACva,IAAI,CAACua,UAAU,CAAC,EAAE;QAC7B,IAAI,CAAChqB,KAAK,CAACupB,UAAU,CAACoB,qBAAqB,EAAEltB,EAAE,EAAE;UAC/CusB,UAAU;UACVY,UAAU,EAAEZ,UAAU,CAAC,CAAC,CAAC,CAACmW,WAAW,CAAA,CAAE,GAAGnW,UAAU,CAACtR,KAAK,CAAC,CAAC,CAAC;UAC7DuR;QACF,CAAC,CAAC;MACJ;MACA,IAAI2V,SAAS,CAACvvB,GAAG,CAAC2Z,UAAU,CAAC,EAAE;QAC7B,IAAI,CAAChqB,KAAK,CAACupB,UAAU,CAACW,uBAAuB,EAAEzsB,EAAE,EAAE;UACjDusB,UAAU;UACVC;QACF,CAAC,CAAC;MACJ;MACA2V,SAAS,CAAC1sB,GAAG,CAAC8W,UAAU,CAAC;MACzB,MAAMnb,OAAO,GAAG;QAAEob,QAAQ;QAAEO,YAAY;QAAER;OAAY;MACtDkW,UAAU,CAACziC,EAAE,GAAGA,EAAE;MAClB,QAAQma,IAAI,CAAClvB,IAAI;QACf,KAAK,SAAS;UAAE;YACd,IAAI,CAAC+2C,iCAAiC,CACpC7nB,IAAI,CAAClhB,GAAG,EACRmY,OAAO,EACP,SACF,CAAC;YACDqxB,UAAU,CAACtoB,IAAI,GAAGA,IAAI,CAACniB,KAAK;YAC5BugB,OAAO,CAAC6pB,cAAc,CAACv7B,IAAI,CACzB,IAAI,CAAC/F,UAAU,CAAC2hC,UAAU,EAAE,mBAAmB,CACjD,CAAC;YACD;UACF;QACA,KAAK,QAAQ;UAAE;YACb,IAAI,CAACT,iCAAiC,CAAC7nB,IAAI,CAAClhB,GAAG,EAAEmY,OAAO,EAAE,QAAQ,CAAC;YACnEqxB,UAAU,CAACtoB,IAAI,GAAGA,IAAI,CAACniB,KAAK;YAC5BugB,OAAO,CAAC8pB,aAAa,CAACx7B,IAAI,CACxB,IAAI,CAAC/F,UAAU,CAAC2hC,UAAU,EAAE,kBAAkB,CAChD,CAAC;YACD;UACF;QACA,KAAK,QAAQ;UAAE;YACb,IAAI,CAACT,iCAAiC,CAAC7nB,IAAI,CAAClhB,GAAG,EAAEmY,OAAO,EAAE,QAAQ,CAAC;YACnEqxB,UAAU,CAACtoB,IAAI,GAAGA,IAAI,CAACniB,KAAK;YAC5BugB,OAAO,CAAC+pB,aAAa,CAACz7B,IAAI,CACxB,IAAI,CAAC/F,UAAU,CAAC2hC,UAAU,EAAE,kBAAkB,CAChD,CAAC;YACD;UACF;QACA,KAAK,SAAS;UAAE;YACd,MAAM,IAAI,CAACjB,qCAAqC,CAACrnB,IAAI,CAAClhB,GAAG,EAAEmY,OAAO,CAAC;UACrE;QACA,KAAK,MAAM;UAAE;YACX,QAAQ2b,YAAY;cAClB,KAAK,SAAS;gBACZ,IAAI,CAACwU,wCAAwC,CAC3CpnB,IAAI,CAAClhB,GAAG,EACRmY,OACF,CAAC;gBACD;cACF,KAAK,QAAQ;gBACX,IAAI,CAACswB,uCAAuC,CAACvnB,IAAI,CAAClhB,GAAG,EAAEmY,OAAO,CAAC;gBAC/D;cACF;gBACEmH,OAAO,CAACgqB,gBAAgB,CAAC17B,IAAI,CAC3B,IAAI,CAAC/F,UAAU,CAAC2hC,UAAU,EAAE,qBAAqB,CACnD,CAAC;YACL;UACF;MACF;MAEA,IAAI,CAAC,IAAI,CAAC1lB,KAAK,CAAA,CAAU,CAAC,EAAE;QAC1B,IAAI,CAAC8L,MAAM,CAAA,EAAS,CAAC;MACvB;IACF;IACA,OAAO;MAAEtQ,OAAO;MAAEiqB;KAAmB;EACvC;EAEAG,qBAAqBA,CACnBC,kBAAiC,EACjCL,gBAA+B,EAC/B;IACE/V;EAGF,CAAC,EACc;IACf,IAAIoW,kBAAkB,CAACp/B,MAAM,KAAK,CAAC,EAAE;MACnC,OAAO++B,gBAAgB;IACzB,CAAC,MAAM,IAAIA,gBAAgB,CAAC/+B,MAAM,KAAK,CAAC,EAAE;MACxC,OAAOo/B,kBAAkB;IAC1B,CAAA,MAAM,IAAIL,gBAAgB,CAAC/+B,MAAM,GAAGo/B,kBAAkB,CAACp/B,MAAM,EAAE;MAC9D,KAAK,MAAMk4B,MAAM,IAAIkH,kBAAkB,EAAE;QACvC,IAAI,CAACjB,kDAAkD,CAACjG,MAAM,EAAE;UAC9DlP;QACF,CAAC,CAAC;MACJ;MACA,OAAO+V,gBAAgB;IACzB,CAAC,MAAM;MACL,KAAK,MAAM7G,MAAM,IAAI6G,gBAAgB,EAAE;QACrC,IAAI,CAACZ,kDAAkD,CAACjG,MAAM,EAAE;UAC9DlP;QACF,CAAC,CAAC;MACJ;MACA,OAAOoW,kBAAkB;IAC3B;EACF;EAEAC,yBAAyBA,CAAC;IACxBrW;EAGF,CAAC,EAAoB;IACnB,IAAI,CAAC,IAAI,CAACnE,aAAa,IAAO,CAAC,EAAE,OAAO,IAAI;IAE5C,IAAI,CAACrY,iBAAiB,CAAC,IAAI,CAAC5M,KAAK,CAACnY,IAAI,CAAC,EAAE;MACvC,MAAM,IAAI,CAACsX,KAAK,CACdupB,UAAU,CAACe,sCAAsC,EACjD,IAAI,CAACzpB,KAAK,CAAC1B,QAAQ,EACnB;QACE8qB;MACF,CACF,CAAC;IACH;IAEA,MAAM;MAAEx0B;KAAO,GAAG,IAAI,CAACoL,KAAK;IAC5B,IAAI,CAAC8P,IAAI,CAAA,CAAE;IAEX,IACElb,KAAK,KAAK,SAAS,IACnBA,KAAK,KAAK,QAAQ,IAClBA,KAAK,KAAK,QAAQ,IAClBA,KAAK,KAAK,QAAQ,EAClB;MACA,IAAI,CAACuK,KAAK,CAACupB,UAAU,CAACa,uBAAuB,EAAE,IAAI,CAACvpB,KAAK,CAAC1B,QAAQ,EAAE;QAClE8qB,QAAQ;QACRI,eAAe,EAAE50B;MACnB,CAAC,CAAC;IACJ;IAEA,OAAOA,KAAK;EACd;EAEA8qC,YAAYA,CAAC93C,IAA4B,EAAEgV,EAAgB,EAAU;IACnE,MAAMwsB,QAAQ,GAAGxsB,EAAE,CAAC7O,IAAI;IACxB,MAAM4xC,OAAO,GAAG/iC,EAAE,CAAC/G,GAAG,CAACrQ,KAAK;IAC5B,MAAMmkC,YAAY,GAAG,IAAI,CAAC8V,yBAAyB,CAAC;MAAErW;IAAS,CAAC,CAAC;IACjE,IAAI,CAAC3D,MAAM,CAAA,CAAU,CAAC;IACtB,MAAM;MAAEtQ,OAAO;MAAEiqB;IAAkB,CAAC,GAAG,IAAI,CAACN,eAAe,CAAC;MAC1D1V,QAAQ;MACRO;IACF,CAAC,CAAC;IACF/hC,IAAI,CAACw3C,iBAAiB,GAAGA,iBAAiB;IAE1C,QAAQzV,YAAY;MAClB,KAAK,SAAS;QACZ/hC,IAAI,CAAC+hC,YAAY,GAAG,IAAI;QACxB/hC,IAAI,CAACutB,OAAO,GAAGA,OAAO,CAAC6pB,cAAc;QACrC,IAAI,CAACvZ,MAAM,CAAA,CAAU,CAAC;QACtB,OAAO,IAAI,CAAC/nB,UAAU,CAAC9V,IAAI,EAAE,iBAAiB,CAAC;MACjD,KAAK,QAAQ;QACXA,IAAI,CAAC+hC,YAAY,GAAG,IAAI;QACxB/hC,IAAI,CAACutB,OAAO,GAAGA,OAAO,CAAC8pB,aAAa;QACpC,IAAI,CAACxZ,MAAM,CAAA,CAAU,CAAC;QACtB,OAAO,IAAI,CAAC/nB,UAAU,CAAC9V,IAAI,EAAE,gBAAgB,CAAC;MAChD,KAAK,QAAQ;QACXA,IAAI,CAAC+hC,YAAY,GAAG,IAAI;QACxB/hC,IAAI,CAACutB,OAAO,GAAG,IAAI,CAACoqB,qBAAqB,CACvCpqB,OAAO,CAAC+pB,aAAa,EACrB/pB,OAAO,CAACgqB,gBAAgB,EACxB;UAAE/V;QAAS,CACb,CAAC;QACD,IAAI,CAAC3D,MAAM,CAAA,CAAU,CAAC;QACtB,OAAO,IAAI,CAAC/nB,UAAU,CAAC9V,IAAI,EAAE,gBAAgB,CAAC;MAChD,KAAK,QAAQ;QACXA,IAAI,CAACutB,OAAO,GAAGA,OAAO,CAACgqB,gBAAgB;QACvC,IAAI,CAAC1Z,MAAM,CAAA,CAAU,CAAC;QACtB,OAAO,IAAI,CAAC/nB,UAAU,CAAC9V,IAAI,EAAE,gBAAgB,CAAC;MAChD;QAAS;UAEP,MAAMg4C,KAAK,GAAGA,CAAAA,KAAM;YAClBh4C,IAAI,CAACutB,OAAO,GAAG,EAAE;YACjB,IAAI,CAACsQ,MAAM,CAAA,CAAU,CAAC;YACtB,OAAO,IAAI,CAAC/nB,UAAU,CAAC9V,IAAI,EAAE,gBAAgB,CAAC;WAC/C;UACDA,IAAI,CAAC+hC,YAAY,GAAG,KAAK;UAEzB,MAAMkW,QAAQ,GAAG1qB,OAAO,CAAC6pB,cAAc,CAAC5+B,MAAM;UAC9C,MAAM0/B,OAAO,GAAG3qB,OAAO,CAAC8pB,aAAa,CAAC7+B,MAAM;UAC5C,MAAM2/B,OAAO,GAAG5qB,OAAO,CAAC+pB,aAAa,CAAC9+B,MAAM;UAC5C,MAAM4/B,YAAY,GAAG7qB,OAAO,CAACgqB,gBAAgB,CAAC/+B,MAAM;UAEpD,IAAI,CAACy/B,QAAQ,IAAI,CAACC,OAAO,IAAI,CAACC,OAAO,IAAI,CAACC,YAAY,EAAE;YACtD,OAAOJ,KAAK,CAAA,CAAE;UAChB,CAAC,MAAM,IAAI,CAACC,QAAQ,IAAI,CAACC,OAAO,EAAE;YAChCl4C,IAAI,CAACutB,OAAO,GAAG,IAAI,CAACoqB,qBAAqB,CACvCpqB,OAAO,CAAC+pB,aAAa,EACrB/pB,OAAO,CAACgqB,gBAAgB,EACxB;cAAE/V;YAAS,CACb,CAAC;YACD,IAAI,CAAC3D,MAAM,CAAA,CAAU,CAAC;YACtB,OAAO,IAAI,CAAC/nB,UAAU,CAAC9V,IAAI,EAAE,gBAAgB,CAAC;UAC/C,CAAA,MAAM,IAAI,CAACk4C,OAAO,IAAI,CAACC,OAAO,IAAIF,QAAQ,IAAIG,YAAY,EAAE;YAC3D,KAAK,MAAM1H,MAAM,IAAInjB,OAAO,CAACgqB,gBAAgB,EAAE;cAC7C,IAAI,CAAChB,wCAAwC,CAAC7F,MAAM,CAACziC,GAAG,CAACrQ,KAAK,EAAE;gBAC9D4jC,QAAQ;gBACRD,UAAU,EAAEmP,MAAM,CAAC17B,EAAE,CAAC7O;cACxB,CAAC,CAAC;YACJ;YACAnG,IAAI,CAACutB,OAAO,GAAGA,OAAO,CAAC6pB,cAAc;YACrC,IAAI,CAACvZ,MAAM,CAAA,CAAU,CAAC;YACtB,OAAO,IAAI,CAAC/nB,UAAU,CAAC9V,IAAI,EAAE,iBAAiB,CAAC;UAChD,CAAA,MAAM,IAAI,CAACi4C,QAAQ,IAAI,CAACE,OAAO,IAAID,OAAO,IAAIE,YAAY,EAAE;YAC3D,KAAK,MAAM1H,MAAM,IAAInjB,OAAO,CAACgqB,gBAAgB,EAAE;cAC7C,IAAI,CAACb,uCAAuC,CAAChG,MAAM,CAACziC,GAAG,CAACrQ,KAAK,EAAE;gBAC7D4jC,QAAQ;gBACRD,UAAU,EAAEmP,MAAM,CAAC17B,EAAE,CAAC7O;cACxB,CAAC,CAAC;YACJ;YACAnG,IAAI,CAACutB,OAAO,GAAGA,OAAO,CAAC8pB,aAAa;YACpC,IAAI,CAACxZ,MAAM,CAAA,CAAU,CAAC;YACtB,OAAO,IAAI,CAAC/nB,UAAU,CAAC9V,IAAI,EAAE,gBAAgB,CAAC;UAChD,CAAC,MAAM;YACL,IAAI,CAACuX,KAAK,CAACupB,UAAU,CAACY,4BAA4B,EAAEqW,OAAO,EAAE;cAC3DvW;YACF,CAAC,CAAC;YACF,OAAOwW,KAAK,CAAA,CAAE;UAChB;QACF;IACF;EACF;EAEA/J,wBAAwBA,CACtBjuC,IAAmC,EACZ;IACvB,MAAMgV,EAAE,GAAG,IAAI,CAACoxB,eAAe,EAAE;IACjCpmC,IAAI,CAACgV,EAAE,GAAGA,EAAE;IACZhV,IAAI,CAAC0U,IAAI,GAAG,IAAI,CAACojC,YAAY,CAAC,IAAI,CAACniC,SAAS,CAAA,CAAE,EAAEX,EAAE,CAAC;IACnD,OAAO,IAAI,CAACc,UAAU,CAAC9V,IAAI,EAAE,iBAAiB,CAAC;EACjD;EAEAq4C,+BAA+BA,CAC7Br4C,IAAyB,EACJ;IACrB,IAAI,IAAI,CAACslC,gBAAgB,EAAE,EAAE;MAC3B,IAAI,IAAI,CAACvT,KAAK,CAAM,EAAA,CAAC,IAAI,IAAI,CAACA,KAAK,CAAa,EAAA,CAAC,EAAE;QACjD/xB,IAAI,CAAC01C,aAAa,GAChB,IAAI,CAACtL,+CAA+C,EAAE;MAC1D;IACF;IAEA,OAAO,KAAK,CAACiO,+BAA+B,CAACr4C,IAAI,CAAC;EACpD;EAGAy1C,mBAAmBA,CAAAA,EAAY;IAC7B,MAAMvtB,IAAI,GAAG,IAAI,CAAC6M,cAAc,EAAE;IAClC,IAAI,IAAI,CAAC3H,KAAK,CAACC,UAAU,CAACnF,IAAI,CAAC,KAAA,EAAuB,EAAE;MACtD,MAAMowB,SAAS,GAAG,IAAI,CAAClrB,KAAK,CAACC,UAAU,CAACnF,IAAI,GAAG,CAAC,CAAC;MACjD,OACEowB,SAAS,KAAA,EAAuB,IAAIA,SAAS,KAAuB,EAAA;IAExE;IACA,OAAO,KAAK;EACd;EAGA/N,YAAYA,CAAAA,EAAG;IACb,MAAM;MAAEtqC;KAAM,GAAG,IAAI,CAACmY,KAAK;IAC3B,IAAInY,IAAI,OAAU,EAAE;MAClB,IAAI,CAACmY,KAAK,CAAC/J,GAAG,IAAI,CAAC;MACnB,IAAI,CAACspB,YAAY,CAAA,CAAE;IACrB,CAAC,MAAM,IAAI13B,IAAI,KAAA,EAAU,EAAE;MACzB,IAAI,CAACmY,KAAK,CAAC/J,GAAG,IAAI,CAAC;MACnB,IAAI,CAACupB,YAAY,CAAA,CAAE;IACrB;EACF;EAEAyS,SAASA,CAAAA,EAAG;IACV,MAAM;MAAEpqC;KAAM,GAAG,IAAI,CAACmY,KAAK;IAC3B,IAAInY,IAAI,OAAiB,EAAE;MACzB,IAAI,CAACmY,KAAK,CAAC/J,GAAG,IAAI,CAAC;MACnB,IAAI,CAACwoB,QAAQ,CAAQ,EAAA,EAAA,CAAC,CAAC;MACvB,OAAA,EAAA;IACF;IACA,OAAO52B,IAAI;EACb;EAEA00C,6BAA6BA,CAAC30C,IAAY,EAAE;IAC1C,OAAOA,IAAI,CAACC,IAAI,KAAK,oBAAoB,GAAGD,IAAI,CAACmT,UAAU,GAAGnT,IAAI;EACpE;AACF,CAAC;AClzHH,MAAMu4C,QAGL,GAAG;EACFC,SAAS,EAAE,IAAI;EACfC,IAAI,EAAE,QAAQ;EACdC,GAAG,EAAE,GAAG;EACRC,IAAI,EAAE,QAAQ;EACd15B,EAAE,EAAE,GAAG;EACPC,EAAE,EAAE,GAAG;EACP05B,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,QAAQ;EAChBC,GAAG,EAAE,QAAQ;EACbC,MAAM,EAAE,QAAQ;EAChBC,IAAI,EAAE,QAAQ;EACdC,GAAG,EAAE,QAAQ;EACbC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfC,GAAG,EAAE,QAAQ;EACbC,GAAG,EAAE,QAAQ;EACbC,GAAG,EAAE,QAAQ;EACbC,IAAI,EAAE,QAAQ;EACdC,GAAG,EAAE,QAAQ;EACbC,MAAM,EAAE,QAAQ;EAChBC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,QAAQ;EACfC,IAAI,EAAE,QAAQ;EACdC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,QAAQ;EACfC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,QAAQ;EAChBC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,QAAQ;EACfC,IAAI,EAAE,QAAQ;EACdC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,QAAQ;EACfC,IAAI,EAAE,QAAQ;EACdC,GAAG,EAAE,QAAQ;EACbC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,QAAQ;EAChBC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,QAAQ;EACfC,IAAI,EAAE,QAAQ;EACdC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,QAAQ;EAChBC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,QAAQ;EACfC,IAAI,EAAE,QAAQ;EACdC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,QAAQ;EACfC,IAAI,EAAE,QAAQ;EACdC,GAAG,EAAE,QAAQ;EACbC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,QAAQ;EAChBC,IAAI,EAAE,QAAQ;EACdC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,QAAQ;EACfC,IAAI,EAAE,QAAQ;EACdC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,QAAQ;EACfC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACd5gC,KAAK,EAAE,QAAQ;EACf6gC,KAAK,EAAE,QAAQ;EACfC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,QAAQ;EACfC,OAAO,EAAE,QAAQ;EACjBC,IAAI,EAAE,QAAQ;EACdC,GAAG,EAAE,QAAQ;EACbC,KAAK,EAAE,QAAQ;EACfC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,QAAQ;EAChBC,EAAE,EAAE,QAAQ;EACZC,EAAE,EAAE,QAAQ;EACZC,EAAE,EAAE,QAAQ;EACZC,OAAO,EAAE,QAAQ;EACjBC,EAAE,EAAE,QAAQ;EACZC,GAAG,EAAE,QAAQ;EACbC,KAAK,EAAE,QAAQ;EACfC,GAAG,EAAE,QAAQ;EACbC,OAAO,EAAE,QAAQ;EACjBC,GAAG,EAAE,QAAQ;EACbC,GAAG,EAAE,QAAQ;EACbC,GAAG,EAAE,QAAQ;EACbC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,QAAQ;EACfC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,QAAQ;EACfC,OAAO,EAAE,QAAQ;EACjBC,IAAI,EAAE,QAAQ;EACdC,GAAG,EAAE,QAAQ;EACbC,KAAK,EAAE,QAAQ;EACfC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,QAAQ;EAChBC,EAAE,EAAE,QAAQ;EACZC,EAAE,EAAE,QAAQ;EACZC,EAAE,EAAE,QAAQ;EACZC,OAAO,EAAE,QAAQ;EACjBC,EAAE,EAAE,QAAQ;EACZC,GAAG,EAAE,QAAQ;EACbC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,QAAQ;EACfC,GAAG,EAAE,QAAQ;EACbC,OAAO,EAAE,QAAQ;EACjBC,GAAG,EAAE,QAAQ;EACbC,GAAG,EAAE,QAAQ;EACbC,GAAG,EAAE,QAAQ;EACbC,KAAK,EAAE,QAAQ;EACfC,QAAQ,EAAE,QAAQ;EAClBC,KAAK,EAAE,QAAQ;EACfC,GAAG,EAAE,QAAQ;EACbC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,MAAM,EAAE,QAAQ;EAChBC,IAAI,EAAE,QAAQ;EACdC,GAAG,EAAE,QAAQ;EACbC,GAAG,EAAE,QAAQ;EACbC,GAAG,EAAE,QAAQ;EACbC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,IAAI,EAAE,QAAQ;EACdC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,QAAQ;EACfC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,QAAQ;EAChBC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfC,OAAO,EAAE,QAAQ;EACjBC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,MAAM,EAAE,QAAQ;EAChBC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfpN,KAAK,EAAE,QAAQ;EACfqN,KAAK,EAAE,QAAQ;EACfC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfC,EAAE,EAAE,QAAQ;EACZC,IAAI,EAAE,QAAQ;EACdC,GAAG,EAAE,QAAQ;EACbC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,QAAQ;EACfxvC,IAAI,EAAE,QAAQ;EACdyvC,KAAK,EAAE,QAAQ;EACfC,GAAG,EAAE,QAAQ;EACbC,GAAG,EAAE,QAAQ;EACbC,EAAE,EAAE,QAAQ;EACZC,GAAG,EAAE,QAAQ;EACbC,GAAG,EAAE,QAAQ;EACbC,GAAG,EAAE,QAAQ;EACbC,MAAM,EAAE,QAAQ;EAChBC,GAAG,EAAE,QAAQ;EACbC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfC,EAAE,EAAE,QAAQ;EACZC,KAAK,EAAE,QAAQ;EACfC,EAAE,EAAE,QAAQ;EACZC,EAAE,EAAE,QAAQ;EACZC,GAAG,EAAE,QAAQ;EACbC,GAAG,EAAE,QAAQ;EACbC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,QAAQ;EAChBC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,GAAG,EAAE,QAAQ;EACbC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE;AACT,CAAU;AC5OV,MAAMC,SAAS,GAAGp5C,cAAc,KAAK,CAAC;EACpCq5C,gBAAgB,EACd,8DAA8D;EAChEC,wBAAwB,EAAEA,CAAC;IAAEC;GAA4C,KACvE,+CAA+CA,cAAc,IAAI;EACnEC,yBAAyB,EAAE,gDAAgD;EAC3EC,4BAA4B,EAC1B,0GAA0G;EAE5G1+C,eAAe,EAAEA,CAAC;IAChB1E,UAAU;IACVqjD;EAIF,CAAC,KACC,sBAAsBrjD,UAAU,sBAAsBqjD,UAAU,aAAarjD,UAAU,OAAO;EAChGsjD,mBAAmB,EACjB,gEAAgE;EAClEC,sBAAsB,EAAE,4BAA4B;EACpDC,4BAA4B,EAC1B;AACJ,CAAC,CAAC;AAIF,SAASC,UAAUA,CAACt3C,MAAwB,EAA8B;EACxE,OAAOA,MAAM,GACTA,MAAM,CAACpR,IAAI,KAAK,oBAAoB,IAClCoR,MAAM,CAACpR,IAAI,KAAK,oBAAoB,GACtC,KAAK;AACX;AAIA,SAAS2oD,mBAAmBA,CAC1Bv3C,MAAqE,EAC7D;EACR,IAAIA,MAAM,CAACpR,IAAI,KAAK,eAAe,EAAE;IACnC,OAAOoR,MAAM,CAAClL,IAAI;EACpB;EAEA,IAAIkL,MAAM,CAACpR,IAAI,KAAK,mBAAmB,EAAE;IACvC,OAAOoR,MAAM,CAACw3C,SAAS,CAAC1iD,IAAI,GAAG,GAAG,GAAGkL,MAAM,CAAClL,IAAI,CAACA,IAAI;EACvD;EAEA,IAAIkL,MAAM,CAACpR,IAAI,KAAK,qBAAqB,EAAE;IACzC,OACE2oD,mBAAmB,CAACv3C,MAAM,CAACA,MAAM,CAAC,GAClC,GAAG,GACHu3C,mBAAmB,CAACv3C,MAAM,CAACwtB,QAAQ,CAAC;EAExC;EAIA,MAAM,IAAI1tB,KAAK,CAAC,4BAA4B,GAAGE,MAAM,CAACpR,IAAI,CAAC;AAC7D;AAeA,IAAAm0C,GAAA,GAAgB5iC,UAAyB,IACvC,MAAMs3C,cAAc,SAASt3C,UAAU,CAAoC;EAGzEu3C,YAAYA,CAAAA,EAAS;IACnB,IAAIh4B,GAAG,GAAG,EAAE;IACZ,IAAIE,UAAU,GAAG,IAAI,CAAC7Y,KAAK,CAAC/J,GAAG;IAC/B,SAAS;MACP,IAAI,IAAI,CAAC+J,KAAK,CAAC/J,GAAG,IAAI,IAAI,CAACmK,MAAM,EAAE;QACjC,MAAM,IAAI,CAACjB,KAAK,CACd0wC,SAAS,CAACQ,sBAAsB,EAChC,IAAI,CAACrwC,KAAK,CAAC1B,QACb,CAAC;MACH;MAEA,MAAM8Z,EAAE,GAAG,IAAI,CAACpD,KAAK,CAACC,UAAU,CAAC,IAAI,CAACjV,KAAK,CAAC/J,GAAG,CAAC;MAEhD,QAAQmiB,EAAE;QACR,KAAA,EAAA;QACA,KAAA,GAAA;UACE,IAAI,IAAI,CAACpY,KAAK,CAAC/J,GAAG,KAAK,IAAI,CAAC+J,KAAK,CAACxa,KAAK,EAAE;YACvC,IAAI4yB,EAAE,OAAuB,IAAI,IAAI,CAACpY,KAAK,CAACyX,kBAAkB,EAAE;cAC9D,EAAE,IAAI,CAACzX,KAAK,CAAC/J,GAAG;cAChB,IAAI,CAACynB,WAAW,CAAA,GAAe,CAAC;YAClC,CAAC,MAAM;cACL,KAAK,CAACC,gBAAgB,CAACvF,EAAE,CAAC;YAC5B;YACA;UACF;UACAO,GAAG,IAAI,IAAI,CAAC3D,KAAK,CAAC6C,KAAK,CAACgB,UAAU,EAAE,IAAI,CAAC7Y,KAAK,CAAC/J,GAAG,CAAC;UACnD,IAAI,CAACynB,WAAW,CAAa/E,GAAAA,EAAAA,GAAG,CAAC;UACjC;QAEF,KAAA,EAAA;UACEA,GAAG,IAAI,IAAI,CAAC3D,KAAK,CAAC6C,KAAK,CAACgB,UAAU,EAAE,IAAI,CAAC7Y,KAAK,CAAC/J,GAAG,CAAC;UACnD0iB,GAAG,IAAI,IAAI,CAACi4B,aAAa,EAAE;UAC3B/3B,UAAU,GAAG,IAAI,CAAC7Y,KAAK,CAAC/J,GAAG;UAC3B;QAEF,KAAA,EAAA;QACA,KAAA,GAAA;QAUA;UACE,IAAIyf,SAAS,CAAC0C,EAAE,CAAC,EAAE;YACjBO,GAAG,IAAI,IAAI,CAAC3D,KAAK,CAAC6C,KAAK,CAACgB,UAAU,EAAE,IAAI,CAAC7Y,KAAK,CAAC/J,GAAG,CAAC;YACnD0iB,GAAG,IAAI,IAAI,CAACk4B,cAAc,CAAC,IAAI,CAAC;YAChCh4B,UAAU,GAAG,IAAI,CAAC7Y,KAAK,CAAC/J,GAAG;UAC7B,CAAC,MAAM;YACL,EAAE,IAAI,CAAC+J,KAAK,CAAC/J,GAAG;UAClB;MACJ;IACF;EACF;EAEA46C,cAAcA,CAACC,aAAsB,EAAU;IAC7C,MAAM14B,EAAE,GAAG,IAAI,CAACpD,KAAK,CAACC,UAAU,CAAC,IAAI,CAACjV,KAAK,CAAC/J,GAAG,CAAC;IAChD,IAAI0iB,GAAG;IACP,EAAE,IAAI,CAAC3Y,KAAK,CAAC/J,GAAG;IAChB,IACEmiB,EAAE,KAA6B,EAAA,IAC/B,IAAI,CAACpD,KAAK,CAACC,UAAU,CAAC,IAAI,CAACjV,KAAK,CAAC/J,GAAG,CAAC,OAAuB,EAC5D;MACA,EAAE,IAAI,CAAC+J,KAAK,CAAC/J,GAAG;MAChB0iB,GAAG,GAAGm4B,aAAa,GAAG,IAAI,GAAG,MAAM;IACrC,CAAC,MAAM;MACLn4B,GAAG,GAAGte,MAAM,CAACwU,YAAY,CAACuJ,EAAE,CAAC;IAC/B;IACA,EAAE,IAAI,CAACpY,KAAK,CAACgW,OAAO;IACpB,IAAI,CAAChW,KAAK,CAACiW,SAAS,GAAG,IAAI,CAACjW,KAAK,CAAC/J,GAAG;IAErC,OAAO0iB,GAAG;EACZ;EAEAo4B,aAAaA,CAAC9vB,KAAa,EAAQ;IACjC,IAAItI,GAAG,GAAG,EAAE;IACZ,IAAIE,UAAU,GAAG,EAAE,IAAI,CAAC7Y,KAAK,CAAC/J,GAAG;IACjC,SAAS;MACP,IAAI,IAAI,CAAC+J,KAAK,CAAC/J,GAAG,IAAI,IAAI,CAACmK,MAAM,EAAE;QACjC,MAAM,IAAI,CAACjB,KAAK,CAAC9H,MAAM,CAAC7E,kBAAkB,EAAE,IAAI,CAACwN,KAAK,CAAC1B,QAAQ,CAAC;MAClE;MAEA,MAAM8Z,EAAE,GAAG,IAAI,CAACpD,KAAK,CAACC,UAAU,CAAC,IAAI,CAACjV,KAAK,CAAC/J,GAAG,CAAC;MAChD,IAAImiB,EAAE,KAAK6I,KAAK,EAAE;MAClB,IAAI7I,EAAE,OAAwB,EAAE;QAC9BO,GAAG,IAAI,IAAI,CAAC3D,KAAK,CAAC6C,KAAK,CAACgB,UAAU,EAAE,IAAI,CAAC7Y,KAAK,CAAC/J,GAAG,CAAC;QACnD0iB,GAAG,IAAI,IAAI,CAACi4B,aAAa,EAAE;QAC3B/3B,UAAU,GAAG,IAAI,CAAC7Y,KAAK,CAAC/J,GAAG;MAC7B,CAAC,MAAM,IAAIyf,SAAS,CAAC0C,EAAE,CAAC,EAAE;QACxBO,GAAG,IAAI,IAAI,CAAC3D,KAAK,CAAC6C,KAAK,CAACgB,UAAU,EAAE,IAAI,CAAC7Y,KAAK,CAAC/J,GAAG,CAAC;QACnD0iB,GAAG,IAAI,IAAI,CAACk4B,cAAc,CAAC,KAAK,CAAC;QACjCh4B,UAAU,GAAG,IAAI,CAAC7Y,KAAK,CAAC/J,GAAG;MAC7B,CAAC,MAAM;QACL,EAAE,IAAI,CAAC+J,KAAK,CAAC/J,GAAG;MAClB;IACF;IACA0iB,GAAG,IAAI,IAAI,CAAC3D,KAAK,CAAC6C,KAAK,CAACgB,UAAU,EAAE,IAAI,CAAC7Y,KAAK,CAAC/J,GAAG,EAAE,CAAC;IACrD,IAAI,CAACynB,WAAW,CAAY/E,GAAAA,EAAAA,GAAG,CAAC;EAClC;EAEAi4B,aAAaA,CAAAA,EAAW;IACtB,MAAMl3B,QAAQ,GAAG,EAAE,IAAI,CAAC1Z,KAAK,CAAC/J,GAAG;IACjC,IAAI,IAAI,CAACinB,cAAc,CAAC,IAAI,CAACld,KAAK,CAAC/J,GAAG,CAAC,KAAA,EAAyB,EAAE;MAChE,EAAE,IAAI,CAAC+J,KAAK,CAAC/J,GAAG;MAEhB,IAAIhK,KAAK,GAAG,EAAE;MACd,IAAI,IAAI,CAACixB,cAAc,CAAC,IAAI,CAACld,KAAK,CAAC/J,GAAG,CAAC,KAAA,GAAyB,EAAE;QAChEhK,KAAK,GAAG,EAAE;QACV,EAAE,IAAI,CAAC+T,KAAK,CAAC/J,GAAG;MAClB;MAEA,MAAM+6C,SAAS,GAAG,IAAI,CAAC72B,OAAO,CAC5BluB,KAAK,EACKwL,SAAS,EACJ,KAAK,EACI,MAC1B,CAAC;MACD,IACEu5C,SAAS,KAAK,IAAI,IAClB,IAAI,CAAC9zB,cAAc,CAAC,IAAI,CAACld,KAAK,CAAC/J,GAAG,CAAC,OAAwB,EAC3D;QACA,EAAE,IAAI,CAAC+J,KAAK,CAAC/J,GAAG;QAChB,OAAOoE,MAAM,CAACmf,aAAa,CAACw3B,SAAS,CAAC;MACxC;IACF,CAAC,MAAM;MACL,IAAIC,KAAK,GAAG,CAAC;MACb,IAAIpsC,IAAI,GAAG,KAAK;MAChB,OACEosC,KAAK,EAAE,GAAG,EAAE,IACZ,IAAI,CAACjxC,KAAK,CAAC/J,GAAG,GAAG,IAAI,CAACmK,MAAM,IAC5B,EAAEyE,IAAI,GAAG,IAAI,CAACqY,cAAc,CAAC,IAAI,CAACld,KAAK,CAAC/J,GAAG,CAAC,KAAA,EAAwB,CAAC,EACrE;QACA,EAAE,IAAI,CAAC+J,KAAK,CAAC/J,GAAG;MAClB;MAEA,IAAI4O,IAAI,EAAE;QACR,MAAMqsC,IAAI,GAAG,IAAI,CAACl8B,KAAK,CAAC6C,KAAK,CAAC6B,QAAQ,EAAE,IAAI,CAAC1Z,KAAK,CAAC/J,GAAG,CAAC;QACvD,MAAMk7C,MAAM,GAAGC,QAAa,CAACF,IAAI,CAAC;QAClC,EAAE,IAAI,CAAClxC,KAAK,CAAC/J,GAAG;QAEhB,IAAIk7C,MAAM,EAAE;UACV,OAAOA,MAAM;QACf;MACF;IACF;IAGA,IAAI,CAACnxC,KAAK,CAAC/J,GAAG,GAAGyjB,QAAQ;IACzB,OAAO,GAAG;EACZ;EASA23B,WAAWA,CAAAA,EAAS;IAClB,IAAIj5B,EAAE;IACN,MAAM5yB,KAAK,GAAG,IAAI,CAACwa,KAAK,CAAC/J,GAAG;IAC5B,GAAG;MACDmiB,EAAE,GAAG,IAAI,CAACpD,KAAK,CAACC,UAAU,CAAC,EAAE,IAAI,CAACjV,KAAK,CAAC/J,GAAG,CAAC;IAC7C,CAAA,QAAQ6Y,gBAAgB,CAACsJ,EAAE,CAAC,IAAIA,EAAE,KAAmB,EAAA;IACtD,IAAI,CAACsF,WAAW,CAAA,GAAA,EAAa,IAAI,CAAC1I,KAAK,CAAC6C,KAAK,CAACryB,KAAK,EAAE,IAAI,CAACwa,KAAK,CAAC/J,GAAG,CAAC,CAAC;EACvE;EAIAq7C,kBAAkBA,CAAAA,EAAoB;IACpC,MAAM1pD,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAmB;IAC9C,IAAI,IAAI,CAACoc,KAAK,CAAA,GAAW,CAAC,EAAE;MAC1B/xB,IAAI,CAACmG,IAAI,GAAG,IAAI,CAACiS,KAAK,CAACpL,KAAK;IAC7B,CAAA,MAAM,IAAIyY,cAAc,CAAC,IAAI,CAACrN,KAAK,CAACnY,IAAI,CAAC,EAAE;MAC1CD,IAAI,CAACmG,IAAI,GAAG4f,cAAc,CAAC,IAAI,CAAC3N,KAAK,CAACnY,IAAI,CAAC;IAC7C,CAAC,MAAM;MACL,IAAI,CAACiF,UAAU,CAAA,CAAE;IACnB;IACA,IAAI,CAACgjB,IAAI,CAAA,CAAE;IACX,OAAO,IAAI,CAACpS,UAAU,CAAC9V,IAAI,EAAE,eAAe,CAAC;EAC/C;EAIA2pD,sBAAsBA,CAAAA,EAA0C;IAC9D,MAAMjzC,QAAQ,GAAG,IAAI,CAAC0B,KAAK,CAAC1B,QAAQ;IACpC,MAAMvQ,IAAI,GAAG,IAAI,CAACujD,kBAAkB,EAAE;IACtC,IAAI,CAAC,IAAI,CAACj1B,GAAG,GAAS,CAAC,EAAE,OAAOtuB,IAAI;IAEpC,MAAMnG,IAAI,GAAG,IAAI,CAAC0gC,WAAW,CAAsBhqB,QAAQ,CAAC;IAC5D1W,IAAI,CAAC6oD,SAAS,GAAG1iD,IAAI;IACrBnG,IAAI,CAACmG,IAAI,GAAG,IAAI,CAACujD,kBAAkB,EAAE;IACrC,OAAO,IAAI,CAAC5zC,UAAU,CAAC9V,IAAI,EAAE,mBAAmB,CAAC;EACnD;EAKA4pD,mBAAmBA,CAAAA,EAGO;IACxB,MAAMlzC,QAAQ,GAAG,IAAI,CAAC0B,KAAK,CAAC1B,QAAQ;IACpC,IAAI1W,IAAmE,GACrE,IAAI,CAAC2pD,sBAAsB,EAAE;IAC/B,IAAI3pD,IAAI,CAACC,IAAI,KAAK,mBAAmB,EAAE;MACrC,OAAOD,IAAI;IACb;IACA,OAAO,IAAI,CAACy0B,GAAG,CAAA,EAAO,CAAC,EAAE;MACvB,MAAMyL,OAAO,GAAG,IAAI,CAACQ,WAAW,CAAwBhqB,QAAQ,CAAC;MACjEwpB,OAAO,CAAC7uB,MAAM,GAAGrR,IAAI;MACrBkgC,OAAO,CAACrB,QAAQ,GAAG,IAAI,CAAC6qB,kBAAkB,EAAE;MAC5C1pD,IAAI,GAAG,IAAI,CAAC8V,UAAU,CAACoqB,OAAO,EAAE,qBAAqB,CAAC;IACxD;IACA,OAAOlgC,IAAI;EACb;EAIA6pD,sBAAsBA,CAAAA,EAGF;IAClB,IAAI7pD,IAAI;IACR,QAAQ,IAAI,CAACoY,KAAK,CAACnY,IAAI;MACrB,KAAA,CAAA;QACED,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAE;QACvB,IAAI,CAACm0C,UAAU,CAACxjC,KAAE,CAACxM,KAAK,CAAC;QACzB,IAAI,CAACoO,IAAI,CAAA,CAAE;QACXloB,IAAI,GAAG,IAAI,CAAC+pD,2BAA2B,CAAC/pD,IAAI,EAAEsmB,KAAE,CAACvM,MAAM,CAAC;QACxD,IAAI/Z,IAAI,CAACmT,UAAU,CAAClT,IAAI,KAAK,oBAAoB,EAAE;UACjD,IAAI,CAACsX,KAAK,CAAC0wC,SAAS,CAACC,gBAAgB,EAAEloD,IAAI,CAAC;QAC9C;QACA,OAAOA,IAAI;MAEb,KAAA,GAAA;MACA,KAAA,GAAA;QACE,OAAO,IAAI,CAACunC,aAAa,EAAE;MAE7B;QACE,MAAM,IAAI,CAAChwB,KAAK,CAAC0wC,SAAS,CAACO,mBAAmB,EAAE,IAAI,CAACpwC,KAAK,CAAC1B,QAAQ,CAAC;IACxE;EACF;EAMAszC,uBAAuBA,CAAAA,EAAyB;IAC9C,MAAMhqD,IAAI,GAAG,IAAI,CAAC0gC,WAAW,CAAC,IAAI,CAACtoB,KAAK,CAACsB,aAAa,CAAC;IACvD,OAAO,IAAI,CAACH,YAAY,CAACvZ,IAAI,EAAE,oBAAoB,EAAE,IAAI,CAACoY,KAAK,CAAC1B,QAAQ,CAAC;EAC3E;EAIAuzC,mBAAmBA,CAACjqD,IAA8B,EAAoB;IACpE,IAAI,CAACkoB,IAAI,CAAA,CAAE;IACXloB,IAAI,CAACmT,UAAU,GAAG,IAAI,CAAC2yB,eAAe,EAAE;IACxC,IAAI,CAACgkB,UAAU,CAACxjC,KAAE,CAACrM,MAAM,CAAC;IAC1B,IAAI,CAAC7B,KAAK,CAACyX,kBAAkB,GAAG,IAAI;IACpC,IAAI,CAACgO,MAAM,CAAA,CAAU,CAAC;IAEtB,OAAO,IAAI,CAAC/nB,UAAU,CAAC9V,IAAI,EAAE,gBAAgB,CAAC;EAChD;EAIA+pD,2BAA2BA,CACzB/pD,IAAsC,EACtCkqD,eAA2B,EACD;IAC1B,IAAI,IAAI,CAACn4B,KAAK,CAAA,CAAU,CAAC,EAAE;MACzB/xB,IAAI,CAACmT,UAAU,GAAG,IAAI,CAAC62C,uBAAuB,EAAE;IAClD,CAAC,MAAM;MACL,MAAM72C,UAAU,GAAG,IAAI,CAAC2yB,eAAe,EAAE;MAczC9lC,IAAI,CAACmT,UAAU,GAAGA,UAAU;IAC9B;IACA,IAAI,CAAC22C,UAAU,CAACI,eAAe,CAAC;IAChC,IAAI,CAAC9xC,KAAK,CAACyX,kBAAkB,GAAG,IAAI;IACpC,IAAI,CAACgO,MAAM,CAAA,CAAU,CAAC;IAEtB,OAAO,IAAI,CAAC/nB,UAAU,CAAC9V,IAAI,EAAE,wBAAwB,CAAC;EACxD;EAIAmqD,iBAAiBA,CAAAA,EAA0C;IACzD,MAAMnqD,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAyC;IACpE,IAAI,IAAI,CAACoc,KAAK,CAAA,CAAU,CAAC,EAAE;MACzB,IAAI,CAAC+3B,UAAU,CAACxjC,KAAE,CAACxM,KAAK,CAAC;MACzB,IAAI,CAACoO,IAAI,CAAA,CAAE;MACX,IAAI,CAAC2V,MAAM,CAAA,EAAY,CAAC;MACxB79B,IAAI,CAAC8O,QAAQ,GAAG,IAAI,CAACmgC,uBAAuB,EAAE;MAC9C,IAAI,CAAC6a,UAAU,CAACxjC,KAAE,CAACvM,MAAM,CAAC;MAC1B,IAAI,CAAC3B,KAAK,CAACyX,kBAAkB,GAAG,IAAI;MACpC,IAAI,CAACgO,MAAM,CAAA,CAAU,CAAC;MACtB,OAAO,IAAI,CAAC/nB,UAAU,CAAC9V,IAAI,EAAE,oBAAoB,CAAC;IACpD;IACAA,IAAI,CAACmG,IAAI,GAAG,IAAI,CAACwjD,sBAAsB,EAAE;IACzC3pD,IAAI,CAACgN,KAAK,GAAG,IAAI,CAACynB,GAAG,CAAA,EAAM,CAAC,GAAG,IAAI,CAACo1B,sBAAsB,CAAE,CAAA,GAAG,IAAI;IACnE,OAAO,IAAI,CAAC/zC,UAAU,CAAC9V,IAAI,EAAE,cAAc,CAAC;EAC9C;EAIAoqD,wBAAwBA,CACtB1zC,QAAkB,EAC0B;IAC5C,MAAM1W,IAAI,GAAG,IAAI,CAAC0gC,WAAW,CAC3BhqB,QACF,CAAC;IACD,IAAI,IAAI,CAAC+d,GAAG,CAAA,GAAa,CAAC,EAAE;MAC1B,OAAO,IAAI,CAAC3e,UAAU,CAAC9V,IAAI,EAAE,oBAAoB,CAAC;IACpD;IACAA,IAAI,CAACmG,IAAI,GAAG,IAAI,CAACyjD,mBAAmB,EAAE;IACtC,OAAO,IAAI,CAACvR,+BAA+B,CACzCr4C,IACF,CAAC;EACH;EAEAq4C,+BAA+BA,CAC7Br4C,IAAiC,EACZ;IACrB,MAAM+X,UAAqD,GAAG,EAAE;IAChE,OAAO,CAAC,IAAI,CAACga,KAAK,CAAS,EAAA,CAAC,IAAI,CAAC,IAAI,CAACA,KAAK,CAAA,GAAa,CAAC,EAAE;MACzDha,UAAU,CAAC8D,IAAI,CAAC,IAAI,CAACsuC,iBAAiB,CAAE,CAAA,CAAC;IAC3C;IACAnqD,IAAI,CAAC+X,UAAU,GAAGA,UAAU;IAC5B/X,IAAI,CAACqqD,WAAW,GAAG,IAAI,CAAC51B,GAAG,GAAS,CAAC;IACrC,IAAI,CAACoJ,MAAM,CAAA,GAAa,CAAC;IACzB,OAAO,IAAI,CAAC/nB,UAAU,CAAC9V,IAAI,EAAE,mBAAmB,CAAC;EACnD;EAIAsqD,wBAAwBA,CACtB5zC,QAAkB,EAC0B;IAC5C,MAAM1W,IAAI,GAAG,IAAI,CAAC0gC,WAAW,CAC3BhqB,QACF,CAAC;IACD,IAAI,IAAI,CAAC+d,GAAG,CAAA,GAAa,CAAC,EAAE;MAC1B,OAAO,IAAI,CAAC3e,UAAU,CAAC9V,IAAI,EAAE,oBAAoB,CAAC;IACpD;IACAA,IAAI,CAACmG,IAAI,GAAG,IAAI,CAACyjD,mBAAmB,EAAE;IACtC,IAAI,CAAC/rB,MAAM,CAAA,GAAa,CAAC;IACzB,OAAO,IAAI,CAAC/nB,UAAU,CAAC9V,IAAI,EAAE,mBAAmB,CAAC;EACnD;EAKAuqD,iBAAiBA,CAAC7zC,QAAkB,EAAgC;IAClE,MAAM1W,IAAI,GAAG,IAAI,CAAC0gC,WAAW,CAA+BhqB,QAAQ,CAAC;IACrE,MAAM8zC,QAAQ,GAAG,EAAE;IACnB,MAAMC,cAAc,GAAG,IAAI,CAACL,wBAAwB,CAAC1zC,QAAQ,CAAC;IAC9D,IAAIg0C,cAAc,GAAG,IAAI;IAEzB,IAAI,CAACD,cAAc,CAACJ,WAAW,EAAE;MAC/BM,QAAQ,EAAE,SAAS;QACjB,QAAQ,IAAI,CAACvyC,KAAK,CAACnY,IAAI;UACrB,KAAA,GAAA;YACEyW,QAAQ,GAAG,IAAI,CAAC0B,KAAK,CAAC1B,QAAQ;YAC9B,IAAI,CAACwR,IAAI,CAAA,CAAE;YACX,IAAI,IAAI,CAACuM,GAAG,CAAA,EAAS,CAAC,EAAE;cACtBi2B,cAAc,GAAG,IAAI,CAACJ,wBAAwB,CAAC5zC,QAAQ,CAAC;cACxD,MAAMi0C,QAAQ;YAChB;YACAH,QAAQ,CAAC3uC,IAAI,CAAC,IAAI,CAAC0uC,iBAAiB,CAAC7zC,QAAQ,CAAC,CAAC;YAC/C;UAEF,KAAA,GAAA;YACE8zC,QAAQ,CAAC3uC,IAAI,CAAC,IAAI,CAACjJ,YAAY,CAAC,IAAI,CAACwF,KAAK,CAACpL,KAAK,EAAE,SAAS,CAAC,CAAC;YAC7D;UAEF,KAAA,CAAA;YAAgB;cACd,MAAMhN,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAExB;cACH,IAAI,CAACm0C,UAAU,CAACxjC,KAAE,CAACxM,KAAK,CAAC;cACzB,IAAI,CAACoO,IAAI,CAAA,CAAE;cACX,IAAI,IAAI,CAAC6J,KAAK,CAAA,EAAY,CAAC,EAAE;gBAC3By4B,QAAQ,CAAC3uC,IAAI,CAAC,IAAI,CAACouC,mBAAmB,CAACjqD,IAAI,CAAC,CAAC;cAC/C,CAAC,MAAM;gBACLwqD,QAAQ,CAAC3uC,IAAI,CACX,IAAI,CAACkuC,2BAA2B,CAAC/pD,IAAI,EAAEsmB,KAAE,CAACrM,MAAM,CAClD,CAAC;cACH;cAEA;YACF;UAEA;YACE,IAAI,CAAC/U,UAAU,CAAA,CAAE;QACrB;MACF;MAEA,IACEyjD,UAAU,CAAC8B,cAAc,CAAC,IAC1B,CAAC9B,UAAU,CAAC+B,cAAc,CAAC,IAC3BA,cAAc,KAAK,IAAI,EACvB;QACA,IAAI,CAACnzC,KAAK,CAAC0wC,SAAS,CAACI,yBAAyB,EAAEqC,cAAc,CAAC;MACjE,CAAC,MAAM,IAAI,CAAC/B,UAAU,CAAC8B,cAAc,CAAC,IAAI9B,UAAU,CAAC+B,cAAc,CAAC,EAAE;QACpE,IAAI,CAACnzC,KAAK,CAAC0wC,SAAS,CAACE,wBAAwB,EAAEuC,cAAc,EAAE;UAC7DtC,cAAc,EAAEQ,mBAAmB,CAAC6B,cAAc,CAACtkD,IAAI;QACzD,CAAC,CAAC;MACJ,CAAC,MAAM,IAAI,CAACwiD,UAAU,CAAC8B,cAAc,CAAC,IAAI,CAAC9B,UAAU,CAAC+B,cAAc,CAAC,EAAE;QACrE,IACE9B,mBAAmB,CAAC8B,cAAc,CAACvkD,IAAI,CAAC,KACxCyiD,mBAAmB,CAAC6B,cAAc,CAACtkD,IAAI,CAAC,EACxC;UACA,IAAI,CAACoR,KAAK,CAAC0wC,SAAS,CAACE,wBAAwB,EAAEuC,cAAc,EAAE;YAC7DtC,cAAc,EAAEQ,mBAAmB,CAAC6B,cAAc,CAACtkD,IAAI;UACzD,CAAC,CAAC;QACJ;MACF;IACF;IAEA,IAAIwiD,UAAU,CAAC8B,cAAc,CAAC,EAAE;MAC9BzqD,IAAI,CAAC4qD,eAAe,GAAGH,cAAc;MACrCzqD,IAAI,CAAC6qD,eAAe,GAAGH,cAAc;IACvC,CAAC,MAAM;MACL1qD,IAAI,CAACyqD,cAAc,GAAGA,cAAc;MACpCzqD,IAAI,CAAC0qD,cAAc,GAAGA,cAAc;IACtC;IACA1qD,IAAI,CAACwqD,QAAQ,GAAGA,QAAQ;IACxB,IAAI,IAAI,CAACz4B,KAAK,CAAA,EAAM,CAAC,EAAE;MACrB,MAAM,IAAI,CAACxa,KAAK,CACd0wC,SAAS,CAACS,4BAA4B,EACtC,IAAI,CAACtwC,KAAK,CAAC1B,QACb,CAAC;IACH;IAEA,OAAOiyC,UAAU,CAAC8B,cAAc,CAAC,GAC7B,IAAI,CAAC30C,UAAU,CAAC9V,IAAI,EAAE,aAAa,CAAC,GACpC,IAAI,CAAC8V,UAAU,CAAC9V,IAAI,EAAE,YAAY,CAAC;EACzC;EAIA8qD,eAAeA,CAAAA,EAAiC;IAC9C,MAAMp0C,QAAQ,GAAG,IAAI,CAAC0B,KAAK,CAAC1B,QAAQ;IACpC,IAAI,CAACwR,IAAI,CAAA,CAAE;IACX,OAAO,IAAI,CAACqiC,iBAAiB,CAAC7zC,QAAQ,CAAC;EACzC;EAEAozC,UAAUA,CAACiB,UAAsB,EAAE;IACjC,MAAM;MAAE3kC;KAAS,GAAG,IAAI,CAAChO,KAAK;IAC9BgO,OAAO,CAACA,OAAO,CAAC5N,MAAM,GAAG,CAAC,CAAC,GAAGuyC,UAAU;EAC1C;EAMAxjB,aAAaA,CAAC5wB,mBAA6C,EAAgB;IACzE,IAAI,IAAI,CAACob,KAAK,CAAA,GAAe,CAAC,EAAE;MAC9B,OAAO,IAAI,CAAC+4B,eAAe,EAAE;IAC9B,CAAA,MAAM,IACL,IAAI,CAAC/4B,KAAK,CAAM,EAAA,CAAC,IACjB,IAAI,CAAC3E,KAAK,CAACC,UAAU,CAAC,IAAI,CAACjV,KAAK,CAAC/J,GAAG,CAAC,KAAA,EAA8B,EACnE;MAGA,IAAI,CAACkoB,YAAY,CAAA,GAAe,CAAC;MACjC,OAAO,IAAI,CAACu0B,eAAe,EAAE;IAC/B,CAAC,MAAM;MACL,OAAO,KAAK,CAACvjB,aAAa,CAAC5wB,mBAAmB,CAAC;IACjD;EACF;EAEAkf,SAASA,CAAAA,EAAG;IACV,MAAMlB,UAAU,GAAG,IAAI,CAACA,UAAU,EAAE;IACpC,IAAI,CAACA,UAAU,CAAC/a,aAAa,EAAE,KAAK,CAACic,SAAS,CAAA,CAAE;EAClD;EAEAE,gBAAgBA,CAAC53B,IAAY,EAAQ;IACnC,MAAMioB,OAAO,GAAG,IAAI,CAACuO,UAAU,EAAE;IAEjC,IAAIvO,OAAO,KAAKE,KAAE,CAACrM,MAAM,EAAE;MACzB,IAAI,CAAC8uC,YAAY,CAAA,CAAE;MACnB;IACF;IAEA,IAAI3iC,OAAO,KAAKE,KAAE,CAACvM,MAAM,IAAIqM,OAAO,KAAKE,KAAE,CAACtM,MAAM,EAAE;MAClD,IAAI+M,iBAAiB,CAAC5oB,IAAI,CAAC,EAAE;QAC3B,IAAI,CAACsrD,WAAW,CAAA,CAAE;QAClB;MACF;MAEA,IAAItrD,IAAI,OAA0B,EAAE;QAClC,EAAE,IAAI,CAACia,KAAK,CAAC/J,GAAG;QAChB,IAAI,CAACynB,WAAW,CAAA,GAAa,CAAC;QAC9B;MACF;MAEA,IACE,CAAC33B,IAAI,KAA4B,EAAA,IAAIA,IAAI,KAAA,EAAyB,KAClEioB,OAAO,KAAKE,KAAE,CAACvM,MAAM,EACrB;QACA,IAAI,CAACovC,aAAa,CAAChrD,IAAI,CAAC;QACxB;MACF;IACF;IAEA,IACEA,IAAI,KAAuB,EAAA,IAC3B,IAAI,CAACia,KAAK,CAACyX,kBAAkB,IAC7B,IAAI,CAACzC,KAAK,CAACC,UAAU,CAAC,IAAI,CAACjV,KAAK,CAAC/J,GAAG,GAAG,CAAC,CAAC,KAAA,EAA8B,EACvE;MACA,EAAE,IAAI,CAAC+J,KAAK,CAAC/J,GAAG;MAChB,IAAI,CAACynB,WAAW,CAAA,GAAe,CAAC;MAChC;IACF;IAEA,KAAK,CAACC,gBAAgB,CAAC53B,IAAI,CAAC;EAC9B;EAEAyc,aAAaA,CAAC0b,QAAmB,EAAQ;IACvC,MAAM;MAAElQ,OAAO;MAAEnmB;KAAM,GAAG,IAAI,CAACmY,KAAK;IACpC,IAAInY,IAAI,KAAA,EAAa,IAAIq2B,QAAQ,QAAmB,EAAE;MAGpDlQ,OAAO,CAAC6G,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE3G,KAAE,CAACtM,MAAM,CAAC;MAChC,IAAI,CAAC5B,KAAK,CAACyX,kBAAkB,GAAG,KAAK;IACvC,CAAC,MAAM,IAAI5vB,IAAI,KAAA,GAAmB,EAAE;MAElCmmB,OAAO,CAACvK,IAAI,CAACyK,KAAE,CAACvM,MAAM,CAAC;IACzB,CAAC,MAAM,IAAI9Z,IAAI,KAAA,GAAiB,EAAE;MAChC,MAAM8wB,GAAG,GAAG3K,OAAO,CAACA,OAAO,CAAC5N,MAAM,GAAG,CAAC,CAAC;MACvC,IAAKuY,GAAG,KAAKzK,KAAE,CAACvM,MAAM,IAAIuc,QAAQ,KAAa,EAAA,IAAKvF,GAAG,KAAKzK,KAAE,CAACtM,MAAM,EAAE;QACrEoM,OAAO,CAACC,GAAG,CAAA,CAAE;QACb,IAAI,CAACjO,KAAK,CAACyX,kBAAkB,GAC3BzJ,OAAO,CAACA,OAAO,CAAC5N,MAAM,GAAG,CAAC,CAAC,KAAK8N,KAAE,CAACrM,MAAM;MAC7C,CAAC,MAAM;QACL,IAAI,CAAC6vC,UAAU,CAACxjC,KAAE,CAACrM,MAAM,CAAC;QAC1B,IAAI,CAAC7B,KAAK,CAACyX,kBAAkB,GAAG,IAAI;MACtC;IACF,CAAC,MAAM;MACL,IAAI,CAACzX,KAAK,CAACyX,kBAAkB,GAAGzK,0BAA0B,CAACnlB,IAAI,CAAC;IAClE;EACF;AACF,CAAC;AC5nBH,MAAM+qD,eAAe,SAAS1iC,KAAK,CAAC;EAAAhrB,WAAAA,CAAA,GAAA2Y,IAAA,EAAA;IAAA,KAAA,CAAA,GAAAA,IAAA,CAAA;IAAA,IAAA,CAClCg1C,OAAO,GAA4B,IAAInwC,GAAG,EAAE;EAAA;AAC9C;AAKe,MAAMowC,sBAAsB,SAASziC,YAAY,CAAkB;EAAAnrB,WAAAA,CAAA,GAAA2Y,IAAA,EAAA;IAAA,KAAA,CAAA,GAAAA,IAAA,CAAA;IAAA,IAChFk1C,CAAAA,YAAY,GAAkB,EAAE;EAAA;EAEhCzhC,WAAWA,CAAC3X,KAAgB,EAAmB;IAC7C,IAAI,CAACo5C,YAAY,CAACtvC,IAAI,CAAC,IAAI9P,GAAG,CAAE,CAAA,CAAC;IAEjC,OAAO,IAAIi/C,eAAe,CAACj5C,KAAK,CAAC;EACnC;EAEA4X,KAAKA,CAAC5X,KAAgB,EAAQ;IAC5B,IAAIA,KAAK,QAAwB,EAAE;MACjC,IAAI,CAACo5C,YAAY,CAACtvC,IAAI,CAAC,IAAI9P,GAAG,CAAE,CAAA,CAAC;IACnC;IAEA,KAAK,CAAC4d,KAAK,CAAC5X,KAAK,CAAC;EACpB;EAEA6X,IAAIA,CAAAA,EAAG;IACL,MAAM7X,KAAK,GAAG,KAAK,CAAC6X,IAAI,EAAE;IAE1B,IAAI7X,KAAK,QAAwB,EAAE;MACjC,IAAI,CAACo5C,YAAY,CAAC9kC,GAAG,EAAE;IACzB;IAEA,OAAOtU,KAAK;EACd;EAEAq5C,SAASA,CAACjlD,IAAY,EAAEklD,WAAqB,EAAE;IAC7C,MAAMj5B,GAAG,GAAG,IAAI,CAAC+4B,YAAY,CAAC3yC,MAAM;IACpC,IAAI,IAAI,CAAC2yC,YAAY,CAAC/4B,GAAG,GAAG,CAAC,CAAC,CAACxK,GAAG,CAACzhB,IAAI,CAAC,EAAE;MACxC,OAAO,IAAI;IACb;IACA,IAAI,CAACklD,WAAW,IAAIj5B,GAAG,GAAG,CAAC,EAAE;MAC3B,KAAK,IAAItL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGsL,GAAG,GAAG,CAAC,EAAEtL,CAAC,EAAE,EAAE;QAChC,IAAI,IAAI,CAACqkC,YAAY,CAACrkC,CAAC,CAAC,CAACc,GAAG,CAACzhB,IAAI,CAAC,EAAE,OAAO,IAAI;MACjD;IACF;IACA,OAAO,KAAK;EACd;EAEA2jB,WAAWA,CAAC3jB,IAAY,EAAE4jB,WAAwB,EAAE9b,GAAa,EAAE;IACjE,IAAI8b,WAAW,OAA6B,EAAE;MAC5C,IAAI,IAAI,CAACqhC,SAAS,CAACjlD,IAAI,EAAE,IAAI,CAAC,EAAE;QAC9B,IAAI,CAACuiB,MAAM,CAACnR,KAAK,CAAC9H,MAAM,CAACzE,gBAAgB,EAAEiD,GAAG,EAAE;UAC9ClQ,cAAc,EAAEoI;QAClB,CAAC,CAAC;MACJ;MACA,IAAI,CAACglD,YAAY,CAAC,IAAI,CAACA,YAAY,CAAC3yC,MAAM,GAAG,CAAC,CAAC,CAACiS,GAAG,CAACtkB,IAAI,CAAC;MACzD;IACF;IAEA,MAAM0jB,KAAK,GAAG,IAAI,CAACf,YAAY,EAAE;IACjC,IAAI7oB,IAAI,GAAG4pB,KAAK,CAACohC,OAAO,CAACv8C,GAAG,CAACvI,IAAI,CAAC,IAAI,CAAC;IAEvC,IAAI4jB,WAAW,OAAkC,EAAE;MACjD,IAAI,CAACE,kBAAkB,CAACJ,KAAK,EAAE1jB,IAAI,CAAC;MACpC0jB,KAAK,CAACohC,OAAO,CAACt8C,GAAG,CAACxI,IAAI,EAAElG,IAAI,GAAA,EAAgC,CAAC;MAC7D;IACF;IAEA,KAAK,CAAC6pB,WAAW,CAAC3jB,IAAI,EAAE4jB,WAAW,EAAE9b,GAAG,CAAC;IAEzC,IAAI8b,WAAW,IAAwB,EAAE;MACvC,IAAI,EAAEA,WAAW,IAAyB,CAAC,EAAE;QAE3C,IAAI,CAACC,yBAAyB,CAACH,KAAK,EAAE1jB,IAAI,EAAE4jB,WAAW,EAAE9b,GAAG,CAAC;QAC7D,IAAI,CAACgc,kBAAkB,CAACJ,KAAK,EAAE1jB,IAAI,CAAC;MACtC;MACAlG,IAAI,GAAGA,IAAI,GAAmB,CAAA;IAChC;IACA,IAAI8pB,WAAW,MAA2B,EAAE;MAC1C9pB,IAAI,GAAGA,IAAI,GAAmB,CAAA;IAChC;IACA,IAAI8pB,WAAW,MAAiC,EAAE;MAChD9pB,IAAI,GAAGA,IAAI,GAAwB,CAAA;IACrC;IACA,IAAI8pB,WAAW,MAAyB,EAAE;MACxC9pB,IAAI,GAAGA,IAAI,GAAqB,CAAA;IAClC;IACA,IAAIA,IAAI,EAAE4pB,KAAK,CAACohC,OAAO,CAACt8C,GAAG,CAACxI,IAAI,EAAElG,IAAI,CAAC;EACzC;EAEAkqB,mBAAmBA,CACjBN,KAAsB,EACtB1jB,IAAY,EACZ4jB,WAAwB,EACf;IACT,MAAM9pB,IAAI,GAAG4pB,KAAK,CAACohC,OAAO,CAACv8C,GAAG,CAACvI,IAAI,CAAC;IACpC,IAAI,CAAClG,IAAI,GAAmB,CAAA,IAAI,CAAC,EAAE;MACjC,IAAI8pB,WAAW,MAA2B,EAAE;QAG1C,MAAMuhC,OAAO,GAAG,CAAC,EAAEvhC,WAAW,MAAiC,CAAC;QAChE,MAAMwhC,QAAQ,GAAG,CAACtrD,IAAI,GAAA,CAAwB,IAAI,CAAC;QACnD,OAAOqrD,OAAO,KAAKC,QAAQ;MAC7B;MACA,OAAO,IAAI;IACb;IACA,IACExhC,WAAW,MAAyB,IACpC,CAAC9pB,IAAI,GAAA,CAAqB,IAAI,CAAC,EAC/B;MACA,IAAI4pB,KAAK,CAACtB,KAAK,CAAC7Z,GAAG,CAACvI,IAAI,CAAC,IAAmB,EAAE;QAE5C,OAAO,CAAC,EAAE4jB,WAAW,IAAyB,CAAC;MACjD,CAAC,MAAM;QAEL,OAAO,KAAK;MACd;IACF;IACA,IAAIA,WAAW,IAAwB,IAAI,CAAC9pB,IAAI,GAAA,CAAmB,IAAI,CAAC,EAAE;MACxE,OAAO,IAAI;IACb;IAEA,OAAO,KAAK,CAACkqB,mBAAmB,CAACN,KAAK,EAAE1jB,IAAI,EAAE4jB,WAAW,CAAC;EAC5D;EAEAK,gBAAgBA,CAACpV,EAAgB,EAAE;IACjC,MAAM;MAAE7O;IAAM,CAAA,GAAG6O,EAAE;IAEnB,IAAI,IAAI,CAACo2C,SAAS,CAACjlD,IAAI,CAAC,EAAE;IAE1B,MAAMisB,GAAG,GAAG,IAAI,CAACzJ,UAAU,CAACnQ,MAAM;IAClC,KAAK,IAAIsO,CAAC,GAAGsL,GAAG,GAAG,CAAC,EAAEtL,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MACjC,MAAM+C,KAAK,GAAG,IAAI,CAAClB,UAAU,CAAC7B,CAAC,CAAC;MAChC,MAAM7mB,IAAI,GAAG4pB,KAAK,CAACohC,OAAO,CAACv8C,GAAG,CAACvI,IAAI,CAAC;MACpC,IACE,CAAClG,IAAI,GAAA,CAAmB,IAAI,CAAC,IAC7B,CAACA,IAAI,GAAA,EAAgC,IAAI,CAAC,EAC1C;QACA;MACF;IACF;IAEA,KAAK,CAACmqB,gBAAgB,CAACpV,EAAE,CAAC;EAC5B;AACF;AClIA,MAAMw2C,6BAA6B,GAAIxrD,IAAU,IAAW;EAC1D,OAAOA,IAAI,CAACC,IAAI,KAAK,yBAAyB,GAC1CurD,6BAA6B,CAACxrD,IAAI,CAACmT,UAAU,CAAC,GAC9CnT,IAAI;AACV,CAAC;AAQc,MAAeyrD,UAAU,SAAShrB,SAAS,CAAC;EAqDzDxpB,YAAYA,CAACjX,IAAU,EAAEkX,KAAc,GAAG,KAAK,EAA8B;IAAA,IAAAo4B,WAAA,EAAAoc,YAAA;IAC3E,IAAIx3C,aAAa,GAAGrE,SAAS;IAC7B,IAAI7P,IAAI,CAACC,IAAI,KAAK,yBAAyB,IAAAqvC,CAAAA,WAAA,GAAItvC,IAAI,CAACqT,KAAK,KAAA,IAAA,IAAVi8B,WAAA,CAAYp7B,aAAa,EAAE;MACxEA,aAAa,GAAGs3C,6BAA6B,CAACxrD,IAAI,CAAC;MACnD,IAAIkX,KAAK,EAAE;QAKT,IAAIhD,aAAa,CAACjU,IAAI,KAAK,YAAY,EAAE;UACvC,IAAI,CAACu/B,eAAe,CAAC1D,gCAAgC,CACnDrsB,MAAM,CAACtK,8BAA8B,EACrCnF,IACF,CAAC;QACH,CAAC,MAAM,IACLkU,aAAa,CAACjU,IAAI,KAAK,kBAAkB,IACzC,CAAC,IAAI,CAACmZ,0BAA0B,CAAClF,aAAa,CAAC,EAC/C;UAIA,IAAI,CAACqD,KAAK,CAAC9H,MAAM,CAACtK,8BAA8B,EAAEnF,IAAI,CAAC;QACzD;MACF,CAAC,MAAM;QACL,IAAI,CAACuX,KAAK,CAAC9H,MAAM,CAACtK,8BAA8B,EAAEnF,IAAI,CAAC;MACzD;IACF;IAEA,QAAQA,IAAI,CAACC,IAAI;MACf,KAAK,YAAY;MACjB,KAAK,eAAe;MACpB,KAAK,cAAc;MACnB,KAAK,mBAAmB;MACxB,KAAK,aAAa;QAChB;MAEF,KAAK,kBAAkB;QACpBD,IAAI,CAAUC,IAAI,GAAG,eAAe;QACrC,KACE,IAAI6mB,CAAC,GAAG,CAAC,EAAEtO,MAAM,GAAGxY,IAAI,CAACstB,UAAU,CAAC9U,MAAM,EAAEmzC,IAAI,GAAGnzC,MAAM,GAAG,CAAC,EAC7DsO,CAAC,GAAGtO,MAAM,EACVsO,CAAC,EAAE,EACH;UAAA,IAAA8kC,YAAA;UACA,MAAMv1C,IAAI,GAAGrW,IAAI,CAACstB,UAAU,CAACxG,CAAC,CAAC;UAC/B,MAAMxP,MAAM,GAAGwP,CAAC,KAAK6kC,IAAI;UACzB,IAAI,CAACt0C,gCAAgC,CAAChB,IAAI,EAAEiB,MAAM,EAAEJ,KAAK,CAAC;UAE1D,IACEI,MAAM,IACLjB,IAAI,CAAUpW,IAAI,KAAK,aAAa,IAAA,CAAA2rD,YAAA,GACrC5rD,IAAI,CAACqT,KAAK,aAAVu4C,YAAA,CAAYpc,gBAAgB,EAC5B;YACA,IAAI,CAACj4B,KAAK,CAAC9H,MAAM,CAACrH,iBAAiB,EAAEpI,IAAI,CAACqT,KAAK,CAACm8B,gBAAgB,CAAC;UACnE;QACF;QACA;MAEF,KAAK,gBAAgB;QAAE;UACrB,MAAM;YAAE3oC,GAAG;YAAEmG;UAAO,CAAA,GAAGhN,IAAI;UAC3B,IAAI,IAAI,CAACiV,aAAa,CAACpO,GAAG,CAAC,EAAE;YAC3B,IAAI,CAACsQ,UAAU,CAACC,cAAc,CAC5B,IAAI,CAACrC,gBAAgB,CAAClO,GAAG,CAAC,EAC1BA,GAAG,CAACoH,GAAG,CAACrQ,KACV,CAAC;UACH;UACA,IAAI,CAACqZ,YAAY,CAACjK,KAAK,EAAEkK,KAAK,CAAC;UAC/B;QACF;MAEA,KAAK,eAAe;QAAE;UACpB,MAAM,IAAI/F,KAAK,CACb,iEAAiE,GAC/D,+DACJ,CAAC;QACH;MAEA,KAAK,iBAAiB;QACnBnR,IAAI,CAAUC,IAAI,GAAG,cAAc;QACpC,IAAI,CAACsvC,gBAAgB,CACnBvvC,IAAI,CAACisB,QAAQ,GAAAy/B,YAAA,GACb1rD,IAAI,CAACqT,KAAK,KAAVq4C,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,YAAA,CAAYlc,gBAAgB,EAC5Bt4B,KACF,CAAC;QACD;MAEF,KAAK,sBAAsB;QACzB,IAAIlX,IAAI,CAAC6rD,QAAQ,KAAK,GAAG,EAAE;UACzB,IAAI,CAACt0C,KAAK,CAAC9H,MAAM,CAAC3J,qBAAqB,EAAE9F,IAAI,CAAC+wC,IAAI,CAAC9iC,GAAG,CAACpQ,GAAG,CAAC;QAC7D;QAECmC,IAAI,CAAUC,IAAI,GAAG,mBAAmB;QACzC,OAAOD,IAAI,CAAC6rD,QAAQ;QACpB,IAAI,CAAC50C,YAAY,CAACjX,IAAI,CAAC+wC,IAAI,EAAE75B,KAAK,CAAC;QACnC;MAEF,KAAK,yBAAyB;QAE5B,IAAI,CAACD,YAAY,CAAC/C,aAAa,EAAEgD,KAAK,CAAC;QACvC;IAKJ;EACF;EAEAG,gCAAgCA,CAC9BhB,IAAU,EACViB,MAAe,EACfJ,KAAc,EACd;IACA,IAAIb,IAAI,CAACpW,IAAI,KAAK,cAAc,EAAE;MAChC,IAAI,CAACsX,KAAK,CACRlB,IAAI,CAAChW,IAAI,KAAK,KAAK,IAAIgW,IAAI,CAAChW,IAAI,KAAK,KAAK,GACtCoP,MAAM,CAAC7H,kBAAkB,GACzB6H,MAAM,CAAC5H,gBAAgB,EAC3BwO,IAAI,CAACxP,GACP,CAAC;IACH,CAAC,MAAM,IAAIwP,IAAI,CAACpW,IAAI,KAAK,eAAe,EAAE;MACvCoW,IAAI,CAAUpW,IAAI,GAAG,aAAa;MACnC,MAAM6rD,GAAG,GAAGz1C,IAAI,CAACvH,QAAQ;MACzB,IAAI,CAACi9C,qBAAqB,CAACD,GAAG,EAAqB,KAAK,CAAC;MACzD,IAAI,CAAC70C,YAAY,CAAC60C,GAAG,EAAE50C,KAAK,CAAC;MAE7B,IAAI,CAACI,MAAM,EAAE;QACX,IAAI,CAACC,KAAK,CAAC9H,MAAM,CAACrH,iBAAiB,EAAEiO,IAAI,CAAC;MAC5C;IACF,CAAC,MAAM;MACL,IAAI,CAACY,YAAY,CAACZ,IAAI,EAAEa,KAAK,CAAC;IAChC;EACF;EAIAq4B,gBAAgBA,CACdyB,QAAsD,EACtDxB,gBAA6C,EAC7Ct4B,KAAc,EACR;IACN,MAAMrZ,GAAG,GAAGmzC,QAAQ,CAACx4B,MAAM,GAAG,CAAC;IAE/B,KAAK,IAAIsO,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIjpB,GAAG,EAAEipB,CAAC,EAAE,EAAE;MAC7B,MAAMklC,GAAG,GAAGhb,QAAQ,CAAClqB,CAAC,CAAC;MACvB,IAAI,CAACklC,GAAG,EAAE;MAEV,IAAIA,GAAG,CAAC/rD,IAAI,KAAK,eAAe,EAAE;QAC/B+rD,GAAG,CAA4B/rD,IAAI,GAAG,aAAa;QACpD,MAAM6rD,GAAG,GAAGE,GAAG,CAACl9C,QAAQ;QACxB,IAAI,CAACi9C,qBAAqB,CAACD,GAAG,EAAqB,IAAI,CAAC;QACxD,IAAI,CAAC70C,YAAY,CAAC60C,GAAG,EAAE50C,KAAK,CAAC;MAC/B,CAAC,MAAM;QACL,IAAI,CAACD,YAAY,CAAC+0C,GAAG,EAAE90C,KAAK,CAAC;MAC/B;MAEA,IAAI80C,GAAG,CAAC/rD,IAAI,KAAK,aAAa,EAAE;QAC9B,IAAI6mB,CAAC,GAAGjpB,GAAG,EAAE;UACX,IAAI,CAAC0Z,KAAK,CAAC9H,MAAM,CAACrH,iBAAiB,EAAE4jD,GAAG,CAAC;QAC1C,CAAA,MAAM,IAAIxc,gBAAgB,EAAE;UAC3B,IAAI,CAACj4B,KAAK,CAAC9H,MAAM,CAACrH,iBAAiB,EAAEonC,gBAAgB,CAAC;QACxD;MACF;IACF;EACF;EAEAz4B,YAAYA,CAAC/W,IAAU,EAAEgX,SAAmB,EAAW;IACrD,QAAQhX,IAAI,CAACC,IAAI;MACf,KAAK,YAAY;MACjB,KAAK,eAAe;MACpB,KAAK,cAAc;MACnB,KAAK,mBAAmB;MACxB,KAAK,aAAa;QAChB,OAAO,IAAI;MAEb,KAAK,kBAAkB;QAAE;UACvB,MAAM0rD,IAAI,GAAG3rD,IAAI,CAACstB,UAAU,CAAC9U,MAAM,GAAG,CAAC;UACvC,OAAOxY,IAAI,CAACstB,UAAU,CAAC+hB,KAAK,CAAC,CAACh5B,IAAI,EAAEyQ,CAAC,KAAK;YACxC,OACEzQ,IAAI,CAACpW,IAAI,KAAK,cAAc,KAC3B6mB,CAAC,KAAK6kC,IAAI,IAAIt1C,IAAI,CAACpW,IAAI,KAAK,eAAe,CAAC,IAC7C,IAAI,CAAC8W,YAAY,CAACV,IAAI,CAAC;UAE3B,CAAC,CAAC;QACJ;MAEA,KAAK,gBAAgB;QACnB,OAAO,IAAI,CAACU,YAAY,CAAC/W,IAAI,CAACgN,KAAK,CAAC;MAEtC,KAAK,eAAe;QAClB,OAAO,IAAI,CAAC+J,YAAY,CAAC/W,IAAI,CAAC8O,QAAQ,CAAC;MAEzC,KAAK,iBAAiB;QACpB,OAAO9O,IAAI,CAACisB,QAAQ,CAACojB,KAAK,CACxB4c,OAAO,IAAIA,OAAO,KAAK,IAAI,IAAI,IAAI,CAACl1C,YAAY,CAACk1C,OAAO,CAC1D,CAAC;MAEH,KAAK,sBAAsB;QACzB,OAAOjsD,IAAI,CAAC6rD,QAAQ,KAAK,GAAG;MAE9B,KAAK,yBAAyB;QAC5B,OAAO,IAAI,CAAC90C,YAAY,CAAC/W,IAAI,CAACmT,UAAU,CAAC;MAE3C,KAAK,kBAAkB;MACvB,KAAK,0BAA0B;QAC7B,OAAO,CAAC6D,SAAS;MAEnB;QACE,OAAO,KAAK;IAChB;EACF;EAIAi6B,gBAAgBA,CACdD,QAE2C,EAE3CE,mBAA6B,EAGa;IAC1C,OAAOF,QAAQ;EACjB;EAEAkb,oBAAoBA,CAClBlb,QAE2C,EAC3CE,mBAA6B,EACvB;IACN,IAAI,CAACD,gBAAgB,CAACD,QAAQ,EAAEE,mBAAmB,CAAC;IAEpD,KAAK,MAAM/C,IAAI,IAAI6C,QAAQ,EAAE;MAC3B,IAAI,CAAA7C,IAAI,IAAJA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,IAAI,CAAEluC,IAAI,MAAK,iBAAiB,EAAE;QACpC,IAAI,CAACisD,oBAAoB,CAAC/d,IAAI,CAACliB,QAAQ,CAAC;MAC1C;IACF;EACF;EAIAkgC,WAAWA,CAETx1C,mBAA6C,EAC9B;IACf,MAAM3W,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAiB;IAC5C,IAAI,CAACuS,IAAI,CAAA,CAAE;IACXloB,IAAI,CAAC8O,QAAQ,GAAG,IAAI,CAACmgC,uBAAuB,CAC1Ct4B,mBAAmB,EACnB9G,SACF,CAAC;IACD,OAAO,IAAI,CAACiG,UAAU,CAAC9V,IAAI,EAAE,eAAe,CAAC;EAC/C;EAIAosD,gBAAgBA,CAAAA,EAA4B;IAC1C,MAAMpsD,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAe;IAC1C,IAAI,CAACuS,IAAI,CAAA,CAAE;IACXloB,IAAI,CAAC8O,QAAQ,GAAG,IAAI,CAAC6kC,gBAAgB,EAAE;IACvC,OAAO,IAAI,CAAC79B,UAAU,CAAC9V,IAAI,EAAE,aAAa,CAAC;EAC7C;EAGA2zC,gBAAgBA,CAAAA,EAAwB;IAEtC,QAAQ,IAAI,CAACv7B,KAAK,CAACnY,IAAI;MACrB,KAAA,CAAA;QAAkB;UAChB,MAAMD,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAgB;UAC3C,IAAI,CAACuS,IAAI,CAAA,CAAE;UAEXloB,IAAI,CAACisB,QAAQ,GAAG,IAAI,CAACogC,gBAAgB,CAGnCC,CAAAA,EAAAA,EAAAA,GACF,CAAC;UACD,OAAO,IAAI,CAACx2C,UAAU,CAAC9V,IAAI,EAAE,cAAc,CAAC;QAC9C;MAEA,KAAA,CAAA;QACE,OAAO,IAAI,CAACusD,eAAe,CAAA,CAAA,EAAY,IAAI,CAAC;IAChD;IAGA,OAAO,IAAI,CAACnmB,eAAe,EAAE;EAC/B;EAGAimB,gBAAgBA,CAEdhb,KAAgB,EAChBmb,aAAyD,EACzDz6C,KAA4B,EACU;IACtC,MAAM06C,UAAU,GAAG16C,KAAK,IAAoC;IAE5D,MAAM26C,IAA0C,GAAG,EAAE;IACrD,IAAIhgB,KAAK,GAAG,IAAI;IAChB,OAAO,CAAC,IAAI,CAACjY,GAAG,CAAC4c,KAAK,CAAC,EAAE;MACvB,IAAI3E,KAAK,EAAE;QACTA,KAAK,GAAG,KAAK;MACf,CAAC,MAAM;QACL,IAAI,CAAC7O,MAAM,CAAA,EAAS,CAAC;MACvB;MACA,IAAI4uB,UAAU,IAAI,IAAI,CAAC16B,KAAK,CAAA,EAAS,CAAC,EAAE;QACtC26B,IAAI,CAAC7wC,IAAI,CAAC,IAAI,CAAC;MAChB,CAAA,MAAM,IAAI,IAAI,CAAC4Y,GAAG,CAAC4c,KAAK,CAAC,EAAE;QAC1B;MACD,CAAA,MAAM,IAAI,IAAI,CAACtf,KAAK,CAAA,EAAY,CAAC,EAAE;QAClC,IAAIziB,IAAa,GAAG,IAAI,CAAC88C,gBAAgB,EAAE;QAC3C,IACoC,IAAI,CAACnhC,SAAS,CAAC,MAAM,CAAC,IACxDlZ,KAAK,IAA2C,EAChD;UACAzC,IAAI,GAAG,IAAI,CAACgjC,sBAAsB,CAAChjC,IAAI,CAAC;QAC1C;QACAo9C,IAAI,CAAC7wC,IAAI,CAACvM,IAAI,CAAC;QACf,IAAI,CAAC,IAAI,CAACq9C,mBAAmB,CAACH,aAAa,CAAC,EAAE;UAC5C,IAAI,CAAC3uB,MAAM,CAACwT,KAAK,CAAC;UAClB;QACF;MACF,CAAC,MAAM;QACL,MAAMn5B,UAAU,GAAG,EAAE;QACrB,IAAI,IAAI,CAAC6Z,KAAK,CAAA,EAAM,CAAC,IAAI,IAAI,CAAC9G,SAAS,CAAC,YAAY,CAAC,EAAE;UACrD,IAAI,CAAC1T,KAAK,CAAC9H,MAAM,CAAClF,6BAA6B,EAAE,IAAI,CAAC6N,KAAK,CAAC1B,QAAQ,CAAC;QACvE;QAEA,OAAO,IAAI,CAACqb,KAAK,CAAA,EAAM,CAAC,EAAE;UACxB7Z,UAAU,CAAC2D,IAAI,CAAC,IAAI,CAAC+wC,cAAc,CAAE,CAAA,CAAC;QACxC;QACAF,IAAI,CAAC7wC,IAAI,CAAC,IAAI,CAACgxC,uBAAuB,CAAC96C,KAAK,EAAEmG,UAAU,CAAC,CAAC;MAC5D;IACF;IACA,OAAOw0C,IAAI;EACb;EAGAI,wBAAwBA,CAEtBz2C,IAAyB,EACZ;IACb,IAAI,CAAC6R,IAAI,CAAA,CAAE;IAEX7R,IAAI,CAACvH,QAAQ,GAAG,IAAI,CAACs3B,eAAe,EAAE;IACtC,IAAI,CAACumB,mBAAmB,CAAA,GAA0B,CAAC;IACnD,OAAO,IAAI,CAAC72C,UAAU,CAACO,IAAI,EAAE,aAAa,CAAC;EAC7C;EAGA02C,oBAAoBA,CAAAA,EAAiD;IACnE,MAAM;MAAE9sD,IAAI;MAAEyW;KAAU,GAAG,IAAI,CAAC0B,KAAK;IACrC,IAAInY,IAAI,OAAgB,EAAE;MACxB,OAAO,IAAI,CAAC6sD,wBAAwB,CAAC,IAAI,CAACn3C,SAAS,CAAE,CAAA,CAAC;IACxD;IAEA,MAAMU,IAAI,GAAG,IAAI,CAACV,SAAS,EAAsB;IACjD,IAAI1V,IAAI,QAAmB,EAAE;MAC3B,IAAI,CAAC02B,YAAY,CAAC,sBAAsB,EAAEjgB,QAAQ,CAAC;MACnD,IAAI,CAACS,UAAU,CAACC,cAAc,CAAC,IAAI,CAACgB,KAAK,CAACpL,KAAK,EAAE0J,QAAQ,CAAC;MAC1DL,IAAI,CAACxP,GAAG,GAAG,IAAI,CAAC+N,gBAAgB,EAAE;IACpC,CAAC,MAAM;MACL,IAAI,CAACo4C,iBAAiB,CAAC32C,IAAI,CAAC;IAC9B;IACAA,IAAI,CAACvC,MAAM,GAAG,KAAK;IACnB,OAAO,IAAI,CAACu+B,iBAAiB,CAC3Bh8B,IAAI,EACJK,QAAQ,EACR,KAAK,EACL,KAAK,EACL,IAAI,EACJ,KACF,CAAC;EACH;EAEAm2C,uBAAuBA,CAErB96C,KAA4B,EAC5BmG,UAAuB,EACQ;IAC/B,MAAM64B,IAAI,GAAG,IAAI,CAACwB,iBAAiB,EAAE;IACrC,IACoC,IAAI,CAACtnB,SAAS,CAAC,MAAM,CAAC,IACxDlZ,KAAK,IAA2C,EAChD;MACA,IAAI,CAACugC,sBAAsB,CAACvB,IAAI,CAAC;IACnC;IACA,MAAMib,GAAG,GAAG,IAAI,CAACzZ,iBAAiB,CAACxB,IAAI,CAAC9iC,GAAG,CAACrQ,KAAK,EAAEmzC,IAAI,CAAC;IACxD,IAAI74B,UAAU,CAACM,MAAM,EAAE;MACrBu4B,IAAI,CAAC74B,UAAU,GAAGA,UAAU;IAC9B;IACA,OAAO8zC,GAAG;EACZ;EAGA1Z,sBAAsBA,CAAC9E,KAAc,EAAW;IAC9C,OAAOA,KAAK;EACd;EAIA+E,iBAAiBA,CAEf77B,QAA0B,EAC1Bq6B,IAAqB,EACZ;IAAA,IAAA5E,SAAA,EAAA8gB,KAAA;IACT,CAAA9gB,SAAA,GAAAz1B,QAAQ,KAAA,IAAA,GAAAy1B,SAAA,GAARz1B,QAAQ,GAAK,IAAI,CAAC0B,KAAK,CAAC1B,QAAQ;IAChCq6B,IAAI,GAAA,CAAAkc,KAAA,GAAGlc,IAAI,KAAA,IAAA,GAAAkc,KAAA,GAAI,IAAI,CAACtZ,gBAAgB,EAAE;IACtC,IAAI,CAAC,IAAI,CAAClf,GAAG,GAAM,CAAC,EAAE,OAAOsc,IAAI;IAEjC,MAAM/wC,IAAI,GAAG,IAAI,CAAC0gC,WAAW,CAAoBhqB,QAAQ,CAAC;IAC1D1W,IAAI,CAAC+wC,IAAI,GAAGA,IAAI;IAChB/wC,IAAI,CAACopC,KAAK,GAAG,IAAI,CAAC6F,uBAAuB,EAAE;IAC3C,OAAO,IAAI,CAACn5B,UAAU,CAAC9V,IAAI,EAAE,mBAAmB,CAAC;EACnD;EA8BA4W,WAAWA,CACT3W,IAAY,EAEZ4W,yBAAkC,EAElCC,OAAoB,EACkB;IACtC,QAAQ7W,IAAI;MACV,KAAK,mBAAmB;QACtB,OAAO,MAAM;MACf,KAAK,aAAa;QAChB,OAAO,UAAU;MACnB,KAAK,gBAAgB;QACnB,OAAO,OAAO;MAChB,KAAK,yBAAyB;QAC5B,OAAO,YAAY;MACrB,KAAK,cAAc;QACjB,OAAO,UAAU;MACnB,KAAK,eAAe;QAClB,OAAO,YAAY;IACvB;IACA,OAAO,KAAK;EACd;EAGAmZ,0BAA0BA,CAACjG,UAAgB,EAAW;IACpD,OAAOA,UAAU,CAAClT,IAAI,KAAK,0BAA0B;EACvD;EA0BAitD,SAASA,CACP/5C,UAKuB,EACvBvO,QAAsB,EACtBkS,OAAoB,KAAwB,EAC5Cq2C,YAAiC,GAAG,KAAK,EACzCjY,iBAA0B,GAAG,KAAK,EAClCkY,wBAAiC,GAAG,KAAK,EACnC;IAAA,IAAAC,iBAAA;IACN,MAAMptD,IAAI,GAAGkT,UAAU,CAAClT,IAAI;IAK5B,IAAI,IAAI,CAACqZ,cAAc,CAACnG,UAAU,CAAC,EAAE;IAErC,MAAMiG,0BAA0B,GAC9B,IAAI,CAACA,0BAA0B,CAACjG,UAAU,CAAC;IAE7C,IAAIiG,0BAA0B,IAAInZ,IAAI,KAAK,kBAAkB,EAAE;MAC7D,IAAImZ,0BAA0B,EAAE;QAC9B,IAAI,CAACud,YAAY,CAAC,wBAAwB,EAAExjB,UAAU,CAAClF,GAAG,CAACrQ,KAAK,CAAC;QACjE,IAAIgH,QAAQ,CAAC3E,IAAI,KAAK,sBAAsB,EAAE;UAC5C,IAAI,CAACsX,KAAK,CAAC9H,MAAM,CAAC3K,0BAA0B,EAAEqO,UAAU,EAAE;YACxDvO;UACF,CAAC,CAAC;QACJ;MACF;MAEA,IAAIkS,OAAO,OAA0B,EAAE;QACrC,IAAI,CAACS,KAAK,CAAC9H,MAAM,CAACpK,6BAA6B,EAAE8N,UAAU,CAAC;MAC9D;MACA;IACF;IAEA,IAAIlT,IAAI,KAAK,YAAY,EAAE;MACzB,IAAI,CAACqtD,eAAe,CAACn6C,UAAU,EAAE2D,OAAO,EAAEo+B,iBAAiB,CAAC;MAE5D,MAAM;QAAE/uC;MAAM,CAAA,GAAGgN,UAAU;MAE3B,IAAIg6C,YAAY,EAAE;QAChB,IAAIA,YAAY,CAACvlC,GAAG,CAACzhB,IAAI,CAAC,EAAE;UAC1B,IAAI,CAACoR,KAAK,CAAC9H,MAAM,CAAC9H,SAAS,EAAEwL,UAAU,CAAC;QAC1C,CAAC,MAAM;UACLg6C,YAAY,CAAC1iC,GAAG,CAACtkB,IAAI,CAAC;QACxB;MACF;MAEA;IACF;IAEA,MAAMonD,QAAQ,GAAG,IAAI,CAAC32C,WAAW,CAC/B3W,IAAI,EACJ,EAAEmtD,wBAAwB,IAAAC,CAAAA,iBAAA,GAAIl6C,UAAU,CAACE,KAAK,KAAhBg6C,IAAAA,IAAAA,iBAAA,CAAkBn5C,aAAa,CAAC,IAC5DtP,QAAQ,CAAC3E,IAAI,KAAK,sBAAsB,EAC1C6W,OACF,CAAC;IAED,IAAIy2C,QAAQ,KAAK,IAAI,EAAE;IACvB,IAAIA,QAAQ,KAAK,KAAK,EAAE;MACtB,MAAMC,eAAe,GACnB12C,OAAO,OAA0B,GAC7BrH,MAAM,CAAC9K,UAAU,GACjB8K,MAAM,CAAC5K,iBAAiB;MAE9B,IAAI,CAAC0S,KAAK,CAACi2C,eAAe,EAAEr6C,UAAU,EAAE;QAAEvO;MAAS,CAAC,CAAC;MACrD;IACF;IAEA,IAAIiC,GAAW,EAAE4mD,yBAAkC;IACnD,IAAI,OAAOF,QAAQ,KAAK,QAAQ,EAAE;MAChC1mD,GAAG,GAAG0mD,QAAQ;MACdE,yBAAyB,GAAGxtD,IAAI,KAAK,yBAAyB;IAChE,CAAC,MAAM;MACL,CAAC4G,GAAG,EAAE4mD,yBAAyB,CAAC,GAAGF,QAAQ;IAC7C;IAEA,MAAMG,YAAY,GAChBztD,IAAI,KAAK,cAAc,IAAIA,IAAI,KAAK,eAAe,GAC9C;MAAEA;IAAM,CAAA,GACT2E,QAAQ;IAGd,MAAMquB,GAAG,GAAG9f,UAAU,CAACtM,GAAG,CAAC;IAC3B,IAAIkI,KAAK,CAACC,OAAO,CAACikB,GAAG,CAAC,EAAE;MACtB,KAAK,MAAM06B,KAAK,IAAI16B,GAAG,EAAE;QACvB,IAAI06B,KAAK,EAAE;UACT,IAAI,CAACT,SAAS,CACZS,KAAK,EACLD,YAAY,EACZ52C,OAAO,EACPq2C,YAAY,EACZjY,iBAAiB,EACjBuY,yBACF,CAAC;QACH;MACF;IACD,CAAA,MAAM,IAAIx6B,GAAG,EAAE;MACd,IAAI,CAACi6B,SAAS,CACZj6B,GAAG,EACHy6B,YAAY,EACZ52C,OAAO,EACPq2C,YAAY,EACZjY,iBAAiB,EACjBuY,yBACF,CAAC;IACH;EACF;EAEAH,eAAeA,CACbzvC,EAAc,EACdkM,WAAwB,EACxBmrB,iBAA0B,GAAG,KAAK,EAClC;IACA,IACE,IAAI,CAAC98B,KAAK,CAACgP,MAAM,KAChB8tB,iBAAiB,GACdptB,wBAAwB,CAACjK,EAAE,CAAC1X,IAAI,EAAE,IAAI,CAACuhB,QAAQ,CAAC,GAChDG,4BAA4B,CAAChK,EAAE,CAAC1X,IAAI,CAAC,CAAC,EAC1C;MACA,IAAI4jB,WAAW,OAA0B,EAAE;QACzC,IAAI,CAACxS,KAAK,CAAC9H,MAAM,CAACnE,mBAAmB,EAAEuS,EAAE,EAAE;UAAEtS,aAAa,EAAEsS,EAAE,CAAC1X;QAAK,CAAC,CAAC;MACxE,CAAC,MAAM;QACL,IAAI,CAACoR,KAAK,CAAC9H,MAAM,CAACjE,0BAA0B,EAAEqS,EAAE,EAAE;UAChDpS,WAAW,EAAEoS,EAAE,CAAC1X;QAClB,CAAC,CAAC;MACJ;IACF;IAEA,IAAI4jB,WAAW,OAAqC,IAAIlM,EAAE,CAAC1X,IAAI,KAAK,KAAK,EAAE;MACzE,IAAI,CAACoR,KAAK,CAAC9H,MAAM,CAAC/J,mBAAmB,EAAEmY,EAAE,CAAC;IAC5C;IAEA,IAAI,EAAEkM,WAAW,KAAwB,CAAC,EAAE;MAC1C,IAAI,CAAC6jC,yBAAyB,CAAC/vC,EAAE,EAAEkM,WAAW,CAAC;IACjD;EACF;EAEA6jC,yBAAyBA,CAACC,UAAsB,EAAE/2C,OAAoB,EAAE;IACtE,IAAI,CAAC+S,KAAK,CAACC,WAAW,CAAC+jC,UAAU,CAAC1nD,IAAI,EAAE2Q,OAAO,EAAE+2C,UAAU,CAAC5/C,GAAG,CAACrQ,KAAK,CAAC;EACxE;EAEAmuD,qBAAqBA,CAAC/rD,IAAU,EAAE8tD,YAAqB,EAAQ;IAC7D,QAAQ9tD,IAAI,CAACC,IAAI;MACf,KAAK,yBAAyB;QAC5B,IAAI,CAAC8rD,qBAAqB,CAAC/rD,IAAI,CAACmT,UAAU,EAAE26C,YAAY,CAAC;QACzD;MACF,KAAK,YAAY;MACjB,KAAK,kBAAkB;QACrB;MACF,KAAK,iBAAiB;MACtB,KAAK,kBAAkB;QACrB,IAAIA,YAAY,EAAE;MAEpB;QACE,IAAI,CAACv2C,KAAK,CAAC9H,MAAM,CAAClK,4BAA4B,EAAEvF,IAAI,CAAC;IACzD;EACF;EAEA2sD,mBAAmBA,CACjBtb,KAAiD,EACxC;IACT,IAAI,CAAC,IAAI,CAACtf,KAAK,CAAA,EAAS,CAAC,EAAE;MACzB,OAAO,KAAK;IACd;IAEA,IAAI,CAACxa,KAAK,CACR,IAAI,CAAC2d,iBAAiB,CAAA,CAAE,KAAKmc,KAAK,GAC9B5hC,MAAM,CAACrH,iBAAiB,GACxBqH,MAAM,CAAChN,gBAAgB,EAC3B,IAAI,CAAC2V,KAAK,CAAC1B,QACb,CAAC;IAED,OAAO,IAAI;EACb;AACF;AC7tBA,SAASq3C,OAAOA,CAAIC,CAAY,EAAK;EACnC,IAAIA,CAAC,IAAI,IAAI,EAAE;IACb,MAAM,IAAI78C,KAAK,CAAC,cAAc68C,CAAC,SAAS,CAAC;EAC3C;EACA,OAAOA,CAAC;AACV;AAEA,SAASC,MAAMA,CAACD,CAAU,EAAQ;EAChC,IAAI,CAACA,CAAC,EAAE;IACN,MAAM,IAAI78C,KAAK,CAAC,aAAa,CAAC;EAChC;AACF;AAgBA,MAAM+8C,QAAQ,GAAGr/C,cAAc,YAAY,CAAC;EAC1Cs/C,+BAA+B,EAAEA,CAAC;IAAEC;GAAoC,KACtE,WAAWA,UAAU,gEAAgE;EACvFC,8BAA8B,EAAEA,CAAC;IAC/BC;GAGD,KACC,aAAaA,YAAY,6DAA6D;EACxFC,wBAAwB,EACtB,qDAAqD;EACvD5gD,kCAAkC,EAChC,6DAA6D;EAC/DC,gCAAgC,EAAE,0CAA0C;EAC5E4gD,qBAAqB,EAAE,mDAAmD;EAC1EC,sBAAsB,EAAE,oDAAoD;EAC5E5gD,kEAAkE,EAChE,4GAA4G;EAC9G6gD,4BAA4B,EAC1B,6DAA6D;EAC/DC,eAAe,EAAEA,CAAC;IAAEtuD;GAA+B,KACjD,+BAA+BA,IAAI,OAAO;EAC5CuuD,+BAA+B,EAC7B,mDAAmD;EACrDC,gCAAgC,EAC9B,2DAA2D;EAC7DC,8BAA8B,EAG5BA,CAAC;IAAEC;EAAyC,CAAA,KAC1C,sCAAsC;EAC1CC,iBAAiB,EAAEA,CAAC;IAAED;GAAoC,KACxD,wBAAwBA,QAAQ,IAAI;EAGtCE,uBAAuB,EAAEA,CAAC;IAAE5iD;GAA4C,KACtE,IAAIA,KAAK,yBAAyB;EACpC6iD,kBAAkB,EAAE,qCAAqC;EACzDC,mBAAmB,EAAE,sCAAsC;EAC3DC,iCAAiC,EAC/B,8DAA8D;EAChEC,wBAAwB,EAAE,4CAA4C;EACtE9sB,6BAA6B,EAC3B,4DAA4D;EAC9D+sB,qBAAqB,EAAEA,CAAC;IACtBC;GAGD,KACC,IAAIA,SAAS,CAAC,CAAC,CAAC,mCAAmCA,SAAS,CAAC,CAAC,CAAC,aAAa;EAC9EC,yBAAyB,EACvB,uDAAuD;EACzDC,8BAA8B,EAAEA,CAAC;IAC/BV;GAGD,KACC,4DAA4DA,QAAQ,KAAK;EAC3EW,wBAAwB,EACtB,sDAAsD;EACxDC,yBAAyB,EACvB,0DAA0D;EAC5DC,uBAAuB,EACrB,qDAAqD;EACvDC,qCAAqC,EACnC,mDAAmD;EACrDC,2BAA2B,EAAEA,CAAC;IAAEf;GAAoC,KAClE,IAAIA,QAAQ,4CAA4C;EAC1DgB,8BAA8B,EAAEA,CAAC;IAAEhB;GAAoC,KACrE,IAAIA,QAAQ,+CAA+C;EAC7DiB,uCAAuC,EAAEA,CAAC;IACxCjB;GAGD,KACC,IAAIA,QAAQ,qFAAqF;EACnGkB,qBAAqB,EAAEA,CAAC;IACtBC;GAGD,KACC,IAAIA,gBAAgB,CAAC,CAAC,CAAC,4BAA4BA,gBAAgB,CAAC,CAAC,CAAC,aAAa;EACrFC,iDAAiD,EAC/C,6DAA6D,GAC7D,gGAAgG;EAClGC,uBAAuB,EACrB,yDAAyD;EAC3DC,oBAAoB,EAClB,6DAA6D;EAC/DC,iCAAiC,EAC/B,4DAA4D;EAC9DC,wCAAwC,EACtC,kFAAkF;EACpFC,0BAA0B,EACxB,uDAAuD;EACzDC,qBAAqB,EACnB,4GAA4G;EAC9GztB,iBAAiB,EACf,gFAAgF;EAClF0tB,yBAAyB,EACvB,uDAAuD;EACzDC,8BAA8B,EAAEA,CAAC;IAC/B5B;GAGD,KACC,4DAA4DA,QAAQ,KAAK;EAC3E6B,0BAA0B,EACxB,mFAAmF;EACrFC,sBAAsB,EACpB,gHAAgH;EAClHC,qBAAqB,EACnB,mGAAmG;EACrGhjD,sCAAsC,EACpC,qDAAqD;EACvDC,kCAAkC,EAChC,8CAA8C;EAChDC,+BAA+B,EAC7B,wDAAwD;EAC1D+iD,uCAAuC,EAAEA,CAAC;IACxCC;EAGD,CAAA,KACC,yBAAyBA,iBAAiB,kDAAkDA,iBAAiB,KAAK;EACpHC,6BAA6B,EAC3B,+CAA+C;EACjDC,sBAAsB,EACpB,0KAA0K;EAC5KC,yBAAyB,EACvB,mHAAmH;EACrHC,sCAAsC,EACpC,kFAAkF;EACpFC,+BAA+B,EAC7B,0GAA0G;EAC5GC,+BAA+B,EAC7B,0GAA0G;EAC5GC,2BAA2B,EACzB,uEAAuE;EACzEC,kBAAkB,EAChB,8EAA8E;EAChFC,wBAAwB,EAAE,wCAAwC;EAClEC,6BAA6B,EAAE,6CAA6C;EAC5EC,6BAA6B,EAC3B,qDAAqD;EACvDC,gCAAgC,EAC9B,mEAAmE;EACrEC,iCAAiC,EAAEA,CAAC;IAAE5xD;GAAwB,KAC5D,yFAAyFA,IAAI;AACjG,CAAC,CAAC;AAMF,SAAS6xD,mBAAmBA,CAAC9kD,KAAa,EAAmC;EAC3E,QAAQA,KAAK;IACX,KAAK,KAAK;MACR,OAAO,cAAc;IACvB,KAAK,SAAS;MACZ,OAAO,kBAAkB;IAC3B,KAAK,QAAQ;MACX,OAAO,iBAAiB;IAC1B,KAAK,OAAO;MACV,OAAO,gBAAgB;IACzB,KAAK,QAAQ;MACX,OAAO,iBAAiB;IAC1B,KAAK,QAAQ;MACX,OAAO,iBAAiB;IAC1B,KAAK,QAAQ;MACX,OAAO,iBAAiB;IAC1B,KAAK,QAAQ;MACX,OAAO,iBAAiB;IAC1B,KAAK,WAAW;MACd,OAAO,oBAAoB;IAC7B,KAAK,SAAS;MACZ,OAAO,kBAAkB;IAC3B;MACE,OAAO6C,SAAS;EACpB;AACF;AAEA,SAASkiD,kBAAkBA,CAAChD,QAAgB,EAA+B;EACzE,OACEA,QAAQ,KAAK,SAAS,IAAIA,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,KAAK,WAAW;AAE/E;AAEA,SAASiD,uBAAuBA,CAC9BjD,QAAgB,EACmB;EACnC,OAAOA,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,KAAK;AAChD;AAEA,IAAAkD,UAAA,GAAgBzgD,UAA0D,IACxE,MAAM0gD,qBAAqB,SAAS1gD,UAAU,CAAmB;EAAAlU,WAAAA,CAAA,GAAA2Y,IAAA,EAAA;IAAA,KAAA,CAAA,GAAAA,IAAA,CAAA;IAAA,IAsY/Dk8C,CAAAA,qBAAqB,GAAG,IAAI,CAACC,gBAAgB,CAACC,IAAI,CAAC,IAAI,EAAE;MACvDC,gBAAgB,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC;MAC/BC,mBAAmB,EAAE,CACnB,OAAO,EACP,QAAQ,EACR,SAAS,EACT,WAAW,EACX,UAAU,EACV,SAAS,EACT,UAAU,EACV,UAAU,CACX;MACDC,aAAa,EAAEtE,QAAQ,CAAC6B;IAC1B,CAAC,CAAC;IAAA,IAEF0C,CAAAA,oBAAoB,GAAG,IAAI,CAACL,gBAAgB,CAACC,IAAI,CAAC,IAAI,EAAE;MACtDC,gBAAgB,EAAE,CAAC,OAAO,CAAC;MAE3BC,mBAAmB,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC;MAClCC,aAAa,EAAEtE,QAAQ,CAAC8B;IAC1B,CAAC,CAAC;IAAA,IAEF0C,CAAAA,0BAA0B,GAAG,IAAI,CAACN,gBAAgB,CAACC,IAAI,CAAC,IAAI,EAAE;MAC5DC,gBAAgB,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,OAAO,CAAC;MACxCC,mBAAmB,EAAE,CACnB,QAAQ,EACR,SAAS,EACT,WAAW,EACX,UAAU,EACV,SAAS,EACT,UAAU,EACV,UAAU,CACX;MACDC,aAAa,EAAEtE,QAAQ,CAAC6B;IAC1B,CAAC,CAAC;EAAA;EAvaF3wB,eAAeA,CAAAA,EAAiD;IAC9D,OAAO8rB,sBAAsB;EAC/B;EAEAyH,cAAcA,CAAAA,EAAY;IAGxB,OAAO3tC,iBAAiB,CAAC,IAAI,CAAC5M,KAAK,CAACnY,IAAI,CAAC;EAC3C;EAEA2yD,wBAAwBA,CAAAA,EAAG;IACzB,OACE,IAAI,CAAC7gC,KAAK,CAAA,CAAY,CAAC,IACvB,IAAI,CAACA,KAAK,EAAU,CAAC,IACrB,IAAI,CAACA,KAAK,CAAQ,EAAA,CAAC,IACnB,IAAI,CAACA,KAAK,CAAY,EAAA,CAAC,IACvB,IAAI,CAACA,KAAK,CAAA,GAAe,CAAC,IAC1B,IAAI,CAAC6M,qBAAqB,EAAE;EAEhC;EAEAi0B,yCAAyCA,CAAAA,EAAG;IAC1C,IAAI,CAAC3qC,IAAI,CAAA,CAAE;IACX,IAAI,IAAI,CAACsV,qBAAqB,EAAE,EAAE;MAChC,OAAO,KAAK;IACd;IACA,OAAO,IAAI,CAACo1B,wBAAwB,EAAE;EACxC;EAEAE,4BAA4BA,CAAAA,EAAG;IAI7B,IAAI,IAAI,CAAC/gC,KAAK,CAAA,GAAW,CAAC,EAAE;MAC1B,IAAI,CAAC7J,IAAI,CAAA,CAAE;MACX,OAAO,IAAI,CAAC0qC,wBAAwB,EAAE;IACxC;IACA,OAAO,IAAI,CAACC,yCAAyC,EAAE;EACzD;EAGAE,eAAeA,CACbT,gBAAqB,EACrBU,6BAAuC,EACjB;IACtB,IACE,CAAChuC,iBAAiB,CAAC,IAAI,CAAC5M,KAAK,CAACnY,IAAI,CAAC,IACnC,IAAI,CAACmY,KAAK,CAACnY,IAAI,KAAA,EAAW,IAC1B,IAAI,CAACmY,KAAK,CAACnY,IAAI,KAAA,EAAc,EAC7B;MACA,OAAO4P,SAAS;IAClB;IAEA,MAAMk/C,QAAQ,GAAG,IAAI,CAAC32C,KAAK,CAACpL,KAAK;IACjC,IAAIslD,gBAAgB,CAAC75B,QAAQ,CAACs2B,QAAQ,CAAC,EAAE;MACvC,IAAIiE,6BAA6B,IAAI,IAAI,CAACC,uBAAuB,EAAE,EAAE;QACnE,OAAOpjD,SAAS;MAClB;MACA,IAAI,IAAI,CAACqjD,UAAU,CAAC,IAAI,CAACJ,4BAA4B,CAACT,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE;QACjE,OAAOtD,QAAQ;MACjB;IACF;IACA,OAAOl/C,SAAS;EAClB;EAOAuiD,gBAAgBA,CACd;IACEE,gBAAgB;IAChBC,mBAAmB;IACnBS,6BAA6B;IAC7BR,aAAa,GAAGtE,QAAQ,CAAC4B;EAM1B,CAAA,EACDqD,QAAW,EACL;IACN,MAAMC,YAAY,GAAGA,CACnBnlD,GAAa,EACb8gD,QAAoB,EACpBsE,MAAkB,EAClBC,KAAiB,KACd;MACH,IAAIvE,QAAQ,KAAKsE,MAAM,IAAIF,QAAQ,CAACG,KAAK,CAAC,EAAE;QAC1C,IAAI,CAAC/7C,KAAK,CAAC22C,QAAQ,CAAC+B,qBAAqB,EAAEhiD,GAAG,EAAE;UAC9CiiD,gBAAgB,EAAE,CAACmD,MAAM,EAAEC,KAAK;QAClC,CAAC,CAAC;MACJ;KACD;IACD,MAAMC,YAAY,GAAGA,CACnBtlD,GAAa,EACb8gD,QAAoB,EACpByE,IAAgB,EAChBC,IAAgB,KACb;MACH,IACGN,QAAQ,CAACK,IAAI,CAAC,IAAIzE,QAAQ,KAAK0E,IAAI,IACnCN,QAAQ,CAACM,IAAI,CAAC,IAAI1E,QAAQ,KAAKyE,IAAK,EACrC;QACA,IAAI,CAACj8C,KAAK,CAAC22C,QAAQ,CAACoB,qBAAqB,EAAErhD,GAAG,EAAE;UAC9CshD,SAAS,EAAE,CAACiE,IAAI,EAAEC,IAAI;QACxB,CAAC,CAAC;MACJ;KACD;IAED,SAAS;MACP,MAAM;QAAE/8C;OAAU,GAAG,IAAI,CAAC0B,KAAK;MAC/B,MAAM22C,QAAuC,GAAG,IAAI,CAACgE,eAAe,CAClET,gBAAgB,CAAC39C,MAAM,CAAC49C,mBAAmB,WAAnBA,mBAAmB,GAAI,EAAE,CAAC,EAClDS,6BACF,CAAC;MAED,IAAI,CAACjE,QAAQ,EAAE;MAEf,IAAIgD,kBAAkB,CAAChD,QAAQ,CAAC,EAAE;QAChC,IAAIoE,QAAQ,CAACO,aAAa,EAAE;UAC1B,IAAI,CAACn8C,KAAK,CAAC22C,QAAQ,CAACY,8BAA8B,EAAEp4C,QAAQ,EAAE;YAC5Dq4C;UACF,CAAC,CAAC;QACJ,CAAC,MAAM;UACLqE,YAAY,CAAC18C,QAAQ,EAAEq4C,QAAQ,EAAEA,QAAQ,EAAE,UAAU,CAAC;UACtDqE,YAAY,CAAC18C,QAAQ,EAAEq4C,QAAQ,EAAEA,QAAQ,EAAE,QAAQ,CAAC;UACpDqE,YAAY,CAAC18C,QAAQ,EAAEq4C,QAAQ,EAAEA,QAAQ,EAAE,UAAU,CAAC;UAEtDoE,QAAQ,CAACO,aAAa,GAAG3E,QAAQ;QACnC;MACF,CAAC,MAAM,IAAIiD,uBAAuB,CAACjD,QAAQ,CAAC,EAAE;QAC5C,IAAIoE,QAAQ,CAACpE,QAAQ,CAAC,EAAE;UACtB,IAAI,CAACx3C,KAAK,CAAC22C,QAAQ,CAACc,iBAAiB,EAAEt4C,QAAQ,EAAE;YAAEq4C;UAAS,CAAC,CAAC;QAChE;QACAoE,QAAQ,CAACpE,QAAQ,CAAC,GAAG,IAAI;QAEzBqE,YAAY,CAAC18C,QAAQ,EAAEq4C,QAAQ,EAAE,IAAI,EAAE,KAAK,CAAC;MAC/C,CAAC,MAAM;QACL,IAAI4E,cAAA,CAAA3f,IAAA,CAAcmf,QAAQ,EAAEpE,QAAQ,CAAC,EAAE;UACrC,IAAI,CAACx3C,KAAK,CAAC22C,QAAQ,CAACc,iBAAiB,EAAEt4C,QAAQ,EAAE;YAAEq4C;UAAS,CAAC,CAAC;QAChE,CAAC,MAAM;UACLqE,YAAY,CAAC18C,QAAQ,EAAEq4C,QAAQ,EAAE,QAAQ,EAAE,UAAU,CAAC;UACtDqE,YAAY,CAAC18C,QAAQ,EAAEq4C,QAAQ,EAAE,QAAQ,EAAE,UAAU,CAAC;UACtDqE,YAAY,CAAC18C,QAAQ,EAAEq4C,QAAQ,EAAE,UAAU,EAAE,UAAU,CAAC;UACxDqE,YAAY,CAAC18C,QAAQ,EAAEq4C,QAAQ,EAAE,UAAU,EAAE,UAAU,CAAC;UAExDwE,YAAY,CAAC78C,QAAQ,EAAEq4C,QAAQ,EAAE,SAAS,EAAE,UAAU,CAAC;UACvDwE,YAAY,CAAC78C,QAAQ,EAAEq4C,QAAQ,EAAE,QAAQ,EAAE,UAAU,CAAC;QACxD;QACAoE,QAAQ,CAACpE,QAAQ,CAAC,GAAG,IAAI;MAC3B;MAEA,IAAIwD,mBAAmB,YAAnBA,mBAAmB,CAAE95B,QAAQ,CAACs2B,QAAQ,CAAC,EAAE;QAC3C,IAAI,CAACx3C,KAAK,CAACi7C,aAAa,EAAE97C,QAAQ,EAAE;UAClCq4C;QACF,CAAC,CAAC;MACJ;IACF;EACF;EAEA6E,kBAAkBA,CAACvzD,IAAoB,EAAW;IAChD,QAAQA,IAAI;MACV,KAAK,aAAa;MAClB,KAAK,aAAa;QAChB,OAAO,IAAI,CAAC0xB,KAAK,CAAA,CAAU,CAAC;MAC9B,KAAK,uBAAuB;QAC1B,OAAO,IAAI,CAACA,KAAK,CAAA,CAAU,CAAC;MAC9B,KAAK,mBAAmB;QACtB,OAAO,IAAI,CAACA,KAAK,CAAA,CAAY,CAAC;MAChC,KAAK,2BAA2B;QAC9B,OAAO,IAAI,CAACA,KAAK,CAAA,EAAM,CAAC;IAC5B;EACF;EAEA8hC,WAAWA,CACTxzD,IAAoB,EACpByzD,YAAqB,EAChB;IACL,MAAMpkB,MAAW,GAAG,EAAE;IACtB,OAAO,CAAC,IAAI,CAACkkB,kBAAkB,CAACvzD,IAAI,CAAC,EAAE;MAErCqvC,MAAM,CAAC7zB,IAAI,CAACi4C,YAAY,CAAA,CAAE,CAAC;IAC7B;IACA,OAAOpkB,MAAM;EACf;EAEAqkB,oBAAoBA,CAClB1zD,IAAoB,EACpByzD,YAAqB,EACrBE,mBAEC,EACI;IACL,OAAOjG,OAAO,CACZ,IAAI,CAACkG,0BAA0B,CAC7B5zD,IAAI,EACJyzD,YAAY,EACQ,IAAI,EACxBE,mBACF,CACF,CAAC;EACH;EAMAC,0BAA0BA,CACxB5zD,IAAoB,EACpByzD,YAAiC,EACjCI,aAAsB,EACtBF,mBAEC,EACgB;IACjB,MAAMtkB,MAAW,GAAG,EAAE;IACtB,IAAIykB,gBAAgB,GAAG,CAAC,CAAC;IAEzB,SAAS;MACP,IAAI,IAAI,CAACP,kBAAkB,CAACvzD,IAAI,CAAC,EAAE;QACjC;MACF;MACA8zD,gBAAgB,GAAG,CAAC,CAAC;MAErB,MAAMlI,OAAO,GAAG6H,YAAY,EAAE;MAC9B,IAAI7H,OAAO,IAAI,IAAI,EAAE;QACnB,OAAOp8C,SAAS;MAClB;MACA6/B,MAAM,CAAC7zB,IAAI,CAACowC,OAAO,CAAC;MAEpB,IAAI,IAAI,CAACx3B,GAAG,CAAA,EAAS,CAAC,EAAE;QACtB0/B,gBAAgB,GAAG,IAAI,CAAC/7C,KAAK,CAACC,eAAe,CAAC5a,KAAK;QACnD;MACF;MAEA,IAAI,IAAI,CAACm2D,kBAAkB,CAACvzD,IAAI,CAAC,EAAE;QACjC;MACF;MAEA,IAAI6zD,aAAa,EAAE;QAEjB,IAAI,CAACr2B,MAAM,CAAA,EAAS,CAAC;MACvB;MACA,OAAOhuB,SAAS;IAClB;IAEA,IAAImkD,mBAAmB,EAAE;MACvBA,mBAAmB,CAAChnD,KAAK,GAAGmnD,gBAAgB;IAC9C;IAEA,OAAOzkB,MAAM;EACf;EAEA0kB,oBAAoBA,CAClB/zD,IAAoB,EACpByzD,YAAqB,EACrBO,OAAgB,EAChBC,cAAuB,EACvBN,mBAEC,EACI;IACL,IAAI,CAACM,cAAc,EAAE;MACnB,IAAID,OAAO,EAAE;QACX,IAAI,CAACx2B,MAAM,CAAA,CAAY,CAAC;MAC1B,CAAC,MAAM;QACL,IAAI,CAACA,MAAM,CAAA,EAAM,CAAC;MACpB;IACF;IAEA,MAAM6R,MAAM,GAAG,IAAI,CAACqkB,oBAAoB,CACtC1zD,IAAI,EACJyzD,YAAY,EACZE,mBACF,CAAC;IAED,IAAIK,OAAO,EAAE;MACX,IAAI,CAACx2B,MAAM,CAAA,CAAY,CAAC;IAC1B,CAAC,MAAM;MACL,IAAI,CAACA,MAAM,CAAA,EAAM,CAAC;IACpB;IAEA,OAAO6R,MAAM;EACf;EAEA6kB,iBAAiBA,CAAAA,EAAmB;IAClC,MAAMv0D,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAkB;IAC7C,IAAI,CAACkoB,MAAM,CAAA,EAAW,CAAC;IACvB,IAAI,CAACA,MAAM,CAAA,EAAU,CAAC;IACtB,IAAI,CAAC,IAAI,CAAC9L,KAAK,CAAA,GAAU,CAAC,EAAE;MAC1B,IAAI,CAACxa,KAAK,CAAC22C,QAAQ,CAACyD,6BAA6B,EAAE,IAAI,CAACv5C,KAAK,CAAC1B,QAAQ,CAAC;MAIhE;QACL1W,IAAI,CAAC8O,QAAQ,GAAG,KAAK,CAACy4B,aAAa,EAAS;MAC9C;IACF,CAAC,MAAM;MAGE;QAELvnC,IAAI,CAAC8O,QAAQ,GAAG,IAAI,CAAC+D,kBAAkB,CAAC,IAAI,CAACuF,KAAK,CAACpL,KAAK,CAAC;MAC3D;IACF;IACA,IAAI,IAAI,CAACynB,GAAG,CAAA,EAAS,CAAC,IAAI,CAAC,IAAI,CAAC1C,KAAK,CAAU,EAAA,CAAC,EAAE;MAChD/xB,IAAI,CAACkR,OAAO,GAAG,KAAK,CAAC+9B,uBAAuB,EAAE;MAC9C,IAAI,CAACxa,GAAG,CAAA,EAAS,CAAC;IACpB,CAAC,MAAM;MACLz0B,IAAI,CAACkR,OAAO,GAAG,IAAI;IACrB;IACA,IAAI,CAAC2sB,MAAM,CAAA,EAAU,CAAC;IAEtB,IAAI,IAAI,CAACpJ,GAAG,CAAA,EAAO,CAAC,EAAE;MAGpBz0B,IAAI,CAACw0D,SAAS,GAAG,IAAI,CAACC,iBAAiB,EAAE;IAC3C;IACA,IAAI,IAAI,CAAC1iC,KAAK,CAAA,EAAM,CAAC,EAAE;MAGd;QACL/xB,IAAI,CAAC4V,cAAc,GAAG,IAAI,CAAC8+C,oBAAoB,EAAE;MACnD;IACF;IACA,OAAO,IAAI,CAAC5+C,UAAU,CAAC9V,IAAI,EAAE,cAAc,CAAC;EAC9C;EAEAy0D,iBAAiBA,CAACE,kBAA2B,GAAG,IAAI,EAAkB;IACpE,IAAIpL,MAAsB,GAAG,IAAI,CAACnjB,eAAe,CAACuuB,kBAAkB,CAAC;IACrE,OAAO,IAAI,CAAClgC,GAAG,CAAA,EAAO,CAAC,EAAE;MACvB,MAAMz0B,IAA+B,GACnC,IAAI,CAACmZ,eAAe,CAAoBowC,MAAM,CAAC;MACjDvpD,IAAI,CAAC+wC,IAAI,GAAGwY,MAAM;MAClBvpD,IAAI,CAACopC,KAAK,GAAG,IAAI,CAAChD,eAAe,CAACuuB,kBAAkB,CAAC;MACrDpL,MAAM,GAAG,IAAI,CAACzzC,UAAU,CAAC9V,IAAI,EAAE,iBAAiB,CAAC;IACnD;IACA,OAAOupD,MAAM;EACf;EAEAqL,oBAAoBA,CAAAA,EAAsB;IACxC,MAAM50D,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAqB;IAChD3V,IAAI,CAAC60D,QAAQ,GAAG,IAAI,CAACJ,iBAAiB,EAAE;IACxC,IAAI,CAAC,IAAI,CAACj3B,qBAAqB,CAAA,CAAE,IAAI,IAAI,CAACzL,KAAK,CAAM,EAAA,CAAC,EAAE;MAG/C;QACL/xB,IAAI,CAAC4V,cAAc,GAAG,IAAI,CAAC8+C,oBAAoB,EAAE;MACnD;IACF;IACA,OAAO,IAAI,CAAC5+C,UAAU,CAAC9V,IAAI,EAAE,iBAAiB,CAAC;EACjD;EAEA80D,wBAAwBA,CAACC,GAAiB,EAAqB;IAC7D,IAAI,CAAC7sC,IAAI,CAAA,CAAE;IACX,MAAMloB,IAAI,GAAG,IAAI,CAACmZ,eAAe,CAAoB47C,GAAG,CAAC;IACzD/0D,IAAI,CAACg1D,aAAa,GAAGD,GAAG;IACxB/0D,IAAI,CAAC4mC,cAAc,GAAG,IAAI,CAACquB,qBAAqB,CAAgB,KAAK,CAAC;IACtEj1D,IAAI,CAACk1D,OAAO,GAAG,KAAK;IACpB,OAAO,IAAI,CAACp/C,UAAU,CAAC9V,IAAI,EAAE,iBAAiB,CAAC;EACjD;EAEAm1D,mBAAmBA,CAAAA,EAAiB;IAClC,MAAMn1D,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAgB;IAC3C,IAAI,CAACuS,IAAI,CAAA,CAAE;IACX,OAAO,IAAI,CAACpS,UAAU,CAAC9V,IAAI,EAAE,YAAY,CAAC;EAC5C;EAEAo1D,gBAAgBA,CAAAA,EAAkB;IAChC,MAAMp1D,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAiB;IAC5C,IAAI,CAACkoB,MAAM,CAAA,EAAW,CAAC;IACvB,IAAI,IAAI,CAAC9L,KAAK,CAAA,EAAW,CAAC,EAAE;MAC1B/xB,IAAI,CAACq1D,QAAQ,GAAG,IAAI,CAACd,iBAAiB,EAAE;IAC1C,CAAC,MAAM;MACLv0D,IAAI,CAACq1D,QAAQ,GAAG,IAAI,CAACZ,iBAAiB,EAAE;IAC1C;IACA,IAAI,CAAC,IAAI,CAACj3B,qBAAqB,CAAA,CAAE,IAAI,IAAI,CAACzL,KAAK,CAAM,EAAA,CAAC,EAAE;MAG/C;QACL/xB,IAAI,CAAC4V,cAAc,GAAG,IAAI,CAAC8+C,oBAAoB,EAAE;MACnD;IACF;IACA,OAAO,IAAI,CAAC5+C,UAAU,CAAC9V,IAAI,EAAE,aAAa,CAAC;EAC7C;EAsCAs1D,oBAAoBA,CAClBC,cAAyD,EACtC;IACnB,MAAMv1D,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAqB;IAEhD4/C,cAAc,CAACv1D,IAAI,CAAC;IAEpBA,IAAI,CAACmG,IAAI,GAAG,IAAI,CAACqvD,wBAAwB,EAAE;IAC3Cx1D,IAAI,CAACy1D,UAAU,GAAG,IAAI,CAACC,kBAAkB,GAAY,CAAC;IACtD11D,IAAI,CAAC2nC,OAAO,GAAG,IAAI,CAAC+tB,kBAAkB,GAAM,CAAC;IAC7C,OAAO,IAAI,CAAC5/C,UAAU,CAAC9V,IAAI,EAAE,iBAAiB,CAAC;EACjD;EAEA21D,wBAAwBA,CACtBJ,cAAiD,EACA;IACjD,IAAI,IAAI,CAACxjC,KAAK,CAAA,EAAM,CAAC,EAAE;MACrB,OAAO,IAAI,CAAC6jC,qBAAqB,CAACL,cAAc,CAAC;IACnD;EACF;EAEAK,qBAAqBA,CAACL,cAAiD,EAAE;IACvE,MAAMv1D,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAgC;IAE3D,IAAI,IAAI,CAACoc,KAAK,CAAM,EAAA,CAAC,IAAI,IAAI,CAACA,KAAK,CAAe,GAAA,CAAC,EAAE;MACnD,IAAI,CAAC7J,IAAI,CAAA,CAAE;IACb,CAAC,MAAM;MACL,IAAI,CAAChjB,UAAU,CAAA,CAAE;IACnB;IAEA,MAAM8uD,mBAAmB,GAAG;MAAEhnD,KAAK,EAAE,CAAC;KAAG;IAEzChN,IAAI,CAAC+T,MAAM,GAAG,IAAI,CAACqgD,oBAAoB,CACrC,2BAA2B,EAC3B,IAAI,CAACkB,oBAAoB,CAACjD,IAAI,CAAC,IAAI,EAAEkD,cAAc,CAAC,EACtC,KAAK,EACE,IAAI,EACzBvB,mBACF,CAAC;IACD,IAAIh0D,IAAI,CAAC+T,MAAM,CAACyE,MAAM,KAAK,CAAC,EAAE;MAC5B,IAAI,CAACjB,KAAK,CAAC22C,QAAQ,CAACiB,mBAAmB,EAAEnvD,IAAI,CAAC;IAChD;IACA,IAAIg0D,mBAAmB,CAAChnD,KAAK,KAAK,CAAC,CAAC,EAAE;MACpC,IAAI,CAAC8vB,QAAQ,CAAC98B,IAAI,EAAE,eAAe,EAAEg0D,mBAAmB,CAAChnD,KAAK,CAAC;IACjE;IACA,OAAO,IAAI,CAAC8I,UAAU,CAAC9V,IAAI,EAAE,4BAA4B,CAAC;EAC5D;EAIA61D,eAAeA,CACbC,WAAsB,EACtBC,SAA2C,EACrC;IAEN,MAAMC,mBAAmB,GAAGF,WAAW,KAAa,EAAA;IAGpD,MAAMG,SAAS,GAA6C,YAAY;IACxE,MAAMC,aAAa,GAEf,gBAAgB;IAEpBH,SAAS,CAACngD,cAAc,GAAG,IAAI,CAAC+/C,wBAAwB,CACtD,IAAI,CAAClD,oBACP,CAAC;IACD,IAAI,CAAC50B,MAAM,CAAA,EAAU,CAAC;IACtBk4B,SAAS,CAACE,SAAS,CAAC,GAAG,IAAI,CAACE,8BAA8B,CAAA,CAAE;IAC5D,IAAIH,mBAAmB,EAAE;MACvBD,SAAS,CAACG,aAAa,CAAC,GACtB,IAAI,CAACE,oCAAoC,CAACN,WAAW,CAAC;IACzD,CAAA,MAAM,IAAI,IAAI,CAAC/jC,KAAK,CAAC+jC,WAAW,CAAC,EAAE;MAClCC,SAAS,CAACG,aAAa,CAAC,GACtB,IAAI,CAACE,oCAAoC,CAACN,WAAW,CAAC;IAC1D;EACF;EAEAK,8BAA8BA,CAAAA,EAE5B;IACA,MAAMpxB,IAAI,GAAG,KAAK,CAACsnB,gBAAgB,CAGjCC,EAAAA,EAAAA,EAAAA,GACF,CAAC;IACD,KAAK,MAAMx6C,OAAO,IAAIizB,IAAI,EAAE;MAC1B,MAAM;QAAE9kC;MAAM,CAAA,GAAG6R,OAAO;MACxB,IAAI7R,IAAI,KAAK,mBAAmB,IAAIA,IAAI,KAAK,qBAAqB,EAAE;QAClE,IAAI,CAACsX,KAAK,CAAC22C,QAAQ,CAAC2D,iCAAiC,EAAE//C,OAAO,EAAE;UAC9D7R;QACF,CAAC,CAAC;MACJ;IACF;IACA,OAAO8kC,IAAI;EAIb;EAEAsxB,0BAA0BA,CAAAA,EAAS;IACjC,IAAI,CAAC,IAAI,CAAC5hC,GAAG,CAAS,EAAA,CAAC,IAAI,CAAC,IAAI,CAACiJ,gBAAgB,EAAE,EAAE;MACnD,IAAI,CAACG,MAAM,CAAA,EAAQ,CAAC;IACtB;EACF;EAEAy4B,sBAAsBA,CACpBj2D,IAAsE,EACtEL,IAEC,EACiE;IAClE,IAAI,CAAC61D,eAAe,CAAW71D,EAAAA,EAAAA,IAAI,CAAC;IACpC,IAAI,CAACq2D,0BAA0B,CAAA,CAAE;IACjC,OAAO,IAAI,CAACvgD,UAAU,CAAC9V,IAAI,EAAEK,IAAI,CAAC;EACpC;EAEAk2D,+BAA+BA,CAAAA,EAAG;IAChC,IAAI,CAACruC,IAAI,CAAA,CAAE;IACX,IAAIlD,iBAAiB,CAAC,IAAI,CAAC5M,KAAK,CAACnY,IAAI,CAAC,EAAE;MACtC,IAAI,CAACioB,IAAI,CAAA,CAAE;MACX,OAAO,IAAI,CAAC6J,KAAK,CAAA,EAAS,CAAC;IAC7B;IACA,OAAO,KAAK;EACd;EAEAykC,wBAAwBA,CACtBx2D,IAAgC,EACA;IAChC,IACE,EACE,IAAI,CAAC+xB,KAAK,EAAY,CAAC,IACvB,IAAI,CAAC0kC,WAAW,CAAC,IAAI,CAACF,+BAA+B,CAAClE,IAAI,CAAC,IAAI,CAAC,CAAC,CAClE,EACD;MACA;IACF;IAEA,IAAI,CAACx0B,MAAM,CAAA,CAAY,CAAC;IACxB,MAAM7oB,EAAE,GAAG,IAAI,CAACoxB,eAAe,EAAE;IACjCpxB,EAAE,CAAC4xB,cAAc,GAAG,IAAI,CAACquB,qBAAqB,EAAE;IAChD,IAAI,CAACx7C,gBAAgB,CAACzE,EAAE,CAAC;IAEzB,IAAI,CAAC6oB,MAAM,CAAA,CAAY,CAAC;IACxB79B,IAAI,CAAC02D,UAAU,GAAG,CAAC1hD,EAAE,CAAC;IAEtB,MAAM/U,IAAI,GAAG,IAAI,CAAC02D,wBAAwB,EAAE;IAC5C,IAAI12D,IAAI,EAAED,IAAI,CAAC4mC,cAAc,GAAG3mC,IAAI;IACpC,IAAI,CAACo2D,0BAA0B,CAAA,CAAE;IACjC,OAAO,IAAI,CAACvgD,UAAU,CAAC9V,IAAI,EAAE,kBAAkB,CAAC;EAClD;EAEA42D,gCAAgCA,CAC9B52D,IAAiD,EACjD62D,QAAiB,EAC4B;IAC7C,IAAI,IAAI,CAACpiC,GAAG,CAAY,EAAA,CAAC,EAAEz0B,IAAI,CAAC0X,QAAQ,GAAG,IAAI;IAC/C,MAAMo/C,OAAY,GAAG92D,IAAI;IAEzB,IAAI,IAAI,CAAC+xB,KAAK,CAAU,EAAA,CAAC,IAAI,IAAI,CAACA,KAAK,CAAM,EAAA,CAAC,EAAE;MAC9C,IAAI8kC,QAAQ,EAAE;QACZ,IAAI,CAACt/C,KAAK,CAAC22C,QAAQ,CAAC0C,0BAA0B,EAAE5wD,IAAI,CAAC;MACvD;MACA,MAAM8T,MAA2B,GAAGgjD,OAAO;MAC3C,IAAIhjD,MAAM,CAACzT,IAAI,IAAI,IAAI,CAAC0xB,KAAK,CAAM,EAAA,CAAC,EAAE;QACpC,IAAI,CAACxa,KAAK,CACR22C,QAAQ,CAACtgD,gCAAgC,EACzC,IAAI,CAACwK,KAAK,CAAC4X,WAAW,CAAA,CACxB,CAAC;MACH;MACA,IAAI,CAAC6lC,eAAe,CAAW/hD,EAAAA,EAAAA,MAAM,CAAC;MACtC,IAAI,CAACuiD,0BAA0B,CAAA,CAAE;MACjC,MAAMJ,SAAS,GAEX,YAAY;MAChB,MAAMC,aAAa,GAEf,gBAAgB;MACpB,IAAIpiD,MAAM,CAACzT,IAAI,KAAK,KAAK,EAAE;QACzB,IAAIyT,MAAM,CAACmiD,SAAS,CAAC,CAACz9C,MAAM,GAAG,CAAC,EAAE;UAChC,IAAI,CAACjB,KAAK,CAAC9H,MAAM,CAAC3O,cAAc,EAAE,IAAI,CAACsX,KAAK,CAAC4X,WAAW,CAAA,CAAE,CAAC;UAC3D,IAAI,IAAI,CAAC8hB,WAAW,CAACh+B,MAAM,CAACmiD,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;YAC1C,IAAI,CAAC1+C,KAAK,CACR22C,QAAQ,CAACvgD,kCAAkC,EAC3C,IAAI,CAACyK,KAAK,CAAC4X,WAAW,CAAA,CACxB,CAAC;UACH;QACF;MACF,CAAC,MAAM,IAAIlc,MAAM,CAACzT,IAAI,KAAK,KAAK,EAAE;QAChC,IAAIyT,MAAM,CAACmiD,SAAS,CAAC,CAACz9C,MAAM,KAAK,CAAC,EAAE;UAClC,IAAI,CAACjB,KAAK,CAAC9H,MAAM,CAAC1O,cAAc,EAAE,IAAI,CAACqX,KAAK,CAAC4X,WAAW,CAAA,CAAE,CAAC;QAC7D,CAAC,MAAM;UACL,MAAM+mC,cAAc,GAAGjjD,MAAM,CAACmiD,SAAS,CAAC,CAAC,CAAC,CAAC;UAC3C,IAAI,IAAI,CAACnkB,WAAW,CAACilB,cAAc,CAAC,EAAE;YACpC,IAAI,CAACx/C,KAAK,CACR22C,QAAQ,CAACvgD,kCAAkC,EAC3C,IAAI,CAACyK,KAAK,CAAC4X,WAAW,CAAA,CACxB,CAAC;UACH;UACA,IACE+mC,cAAc,CAAC92D,IAAI,KAAK,YAAY,IACpC82D,cAAc,CAACr/C,QAAQ,EACvB;YACA,IAAI,CAACH,KAAK,CACR22C,QAAQ,CAACpgD,sCAAsC,EAC/C,IAAI,CAACsK,KAAK,CAAC4X,WAAW,CAAA,CACxB,CAAC;UACH;UACA,IAAI+mC,cAAc,CAAC92D,IAAI,KAAK,aAAa,EAAE;YACzC,IAAI,CAACsX,KAAK,CACR22C,QAAQ,CAACngD,kCAAkC,EAC3C,IAAI,CAACqK,KAAK,CAAC4X,WAAW,CAAA,CACxB,CAAC;UACH;QACF;QACA,IAAIlc,MAAM,CAACoiD,aAAa,CAAC,EAAE;UACzB,IAAI,CAAC3+C,KAAK,CACR22C,QAAQ,CAAClgD,+BAA+B,EACxC8F,MAAM,CAACoiD,aAAa,CACtB,CAAC;QACH;MACF,CAAC,MAAM;QACLpiD,MAAM,CAACzT,IAAI,GAAG,QAAQ;MACxB;MACA,OAAO,IAAI,CAACyV,UAAU,CAAChC,MAAM,EAAE,mBAAmB,CAAC;IACrD,CAAC,MAAM;MACL,MAAM+qB,QAA+B,GAAGi4B,OAAO;MAC/C,IAAID,QAAQ,EAAEh4B,QAAQ,CAACg4B,QAAQ,GAAG,IAAI;MACtC,MAAM52D,IAAI,GAAG,IAAI,CAAC02D,wBAAwB,EAAE;MAC5C,IAAI12D,IAAI,EAAE4+B,QAAQ,CAAC+H,cAAc,GAAG3mC,IAAI;MACxC,IAAI,CAACo2D,0BAA0B,CAAA,CAAE;MACjC,OAAO,IAAI,CAACvgD,UAAU,CAAC+oB,QAAQ,EAAE,qBAAqB,CAAC;IACzD;EACF;EAEAm4B,iBAAiBA,CAAAA,EAAoB;IACnC,MAAMh3D,IAAS,GAAG,IAAI,CAAC2V,SAAS,EAAE;IAElC,IAAI,IAAI,CAACoc,KAAK,CAAU,EAAA,CAAC,IAAI,IAAI,CAACA,KAAK,CAAM,EAAA,CAAC,EAAE;MAC9C,OAAO,IAAI,CAACukC,sBAAsB,CAAC,4BAA4B,EAAEt2D,IAAI,CAAC;IACxE;IAEA,IAAI,IAAI,CAAC+xB,KAAK,CAAA,EAAQ,CAAC,EAAE;MACvB,MAAM/c,EAAE,GAAG,IAAI,CAACW,SAAS,EAAgB;MACzC,IAAI,CAACuS,IAAI,CAAA,CAAE;MACX,IAAI,IAAI,CAAC6J,KAAK,CAAU,EAAA,CAAC,IAAI,IAAI,CAACA,KAAK,CAAM,EAAA,CAAC,EAAE;QAC9C,OAAO,IAAI,CAACukC,sBAAsB,CAChC,iCAAiC,EACjCt2D,IACF,CAAC;MACH,CAAC,MAAM;QACLA,IAAI,CAAC6G,GAAG,GAAG,IAAI,CAAComC,gBAAgB,CAACj4B,EAAE,EAAE,KAAK,CAAC;QAC3C,OAAO,IAAI,CAAC4hD,gCAAgC,CAAC52D,IAAI,EAAE,KAAK,CAAC;MAC3D;IACF;IAEA,IAAI,CAACoyD,gBAAgB,CACnB;MACEE,gBAAgB,EAAE,CAAC,UAAU,CAAC;MAC9BC,mBAAmB,EAAE,CACnB,SAAS,EACT,UAAU,EACV,SAAS,EACT,WAAW,EACX,QAAQ,EACR,QAAQ,EACR,UAAU;IAEb,CAAA,EACDvyD,IACF,CAAC;IAED,MAAMi3D,GAAG,GAAG,IAAI,CAACT,wBAAwB,CAACx2D,IAAI,CAAC;IAC/C,IAAIi3D,GAAG,EAAE;MACP,OAAOA,GAAG;IACZ;IAEA,KAAK,CAACjK,iBAAiB,CAAChtD,IAAI,CAAC;IAC7B,IACE,CAACA,IAAI,CAAC6V,QAAQ,IACd7V,IAAI,CAAC6G,GAAG,CAAC5G,IAAI,KAAK,YAAY,KAC7BD,IAAI,CAAC6G,GAAG,CAACV,IAAI,KAAK,KAAK,IAAInG,IAAI,CAAC6G,GAAG,CAACV,IAAI,KAAK,KAAK,CAAC,IACpD,IAAI,CAACysD,wBAAwB,EAAE,EAC/B;MACA5yD,IAAI,CAACK,IAAI,GAAGL,IAAI,CAAC6G,GAAG,CAACV,IAAI;MACzB,KAAK,CAAC6mD,iBAAiB,CAAChtD,IAAI,CAAC;IAC/B;IACA,OAAO,IAAI,CAAC42D,gCAAgC,CAAC52D,IAAI,EAAE,CAAC,CAACA,IAAI,CAAC62D,QAAQ,CAAC;EACrE;EAEAK,kBAAkBA,CAAAA,EAAoB;IACpC,MAAMl3D,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAmB;IAC9C3V,IAAI,CAACutB,OAAO,GAAG,IAAI,CAAC4pC,wBAAwB,EAAE;IAC9C,OAAO,IAAI,CAACrhD,UAAU,CAAC9V,IAAI,EAAE,eAAe,CAAC;EAC/C;EAEAm3D,wBAAwBA,CAAAA,EAA2B;IACjD,IAAI,CAACt5B,MAAM,CAAA,CAAU,CAAC;IACtB,MAAMtQ,OAAO,GAAG,IAAI,CAACsmC,WAAW,CAC9B,aAAa,EACb,IAAI,CAACmD,iBAAiB,CAAC3E,IAAI,CAAC,IAAI,CAClC,CAAC;IACD,IAAI,CAACx0B,MAAM,CAAA,CAAU,CAAC;IACtB,OAAOtQ,OAAO;EAChB;EAEA6pC,qBAAqBA,CAAAA,EAAY;IAC/B,IAAI,CAAClvC,IAAI,CAAA,CAAE;IACX,IAAI,IAAI,CAACuM,GAAG,CAAA,EAAW,CAAC,EAAE;MACxB,OAAO,IAAI,CAACsI,YAAY,CAAA,GAAa,CAAC;IACxC;IACA,IAAI,IAAI,CAACA,YAAY,CAAA,GAAa,CAAC,EAAE;MACnC,IAAI,CAAC7U,IAAI,CAAA,CAAE;IACb;IACA,IAAI,CAAC,IAAI,CAAC6J,KAAK,CAAA,CAAY,CAAC,EAAE;MAC5B,OAAO,KAAK;IACd;IACA,IAAI,CAAC7J,IAAI,CAAA,CAAE;IACX,IAAI,CAAC,IAAI,CAACyqC,cAAc,EAAE,EAAE;MAC1B,OAAO,KAAK;IACd;IACA,IAAI,CAACzqC,IAAI,CAAA,CAAE;IACX,OAAO,IAAI,CAAC6J,KAAK,CAAA,EAAO,CAAC;EAC3B;EAEAslC,iBAAiBA,CAAAA,EAAmB;IAClC,MAAMr3D,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAkB;IAE7C,IAAI,CAACkoB,MAAM,CAAA,CAAU,CAAC;IAEtB,IAAI,IAAI,CAAC9L,KAAK,CAAA,EAAW,CAAC,EAAE;MAC1B/xB,IAAI,CAAC62D,QAAQ,GAAG,IAAI,CAACz+C,KAAK,CAACpL,KAAK;MAChC,IAAI,CAACkb,IAAI,CAAA,CAAE;MACX,IAAI,CAACoV,gBAAgB,CAAA,GAAa,CAAC;IACpC,CAAA,MAAM,IAAI,IAAI,CAACD,aAAa,CAAA,GAAa,CAAC,EAAE;MAC3Cr9B,IAAI,CAAC62D,QAAQ,GAAG,IAAI;IACtB;IAEA,IAAI,CAACh5B,MAAM,CAAA,CAAY,CAAC;IAIjB;MACL,MAAMmM,aAAa,GAAG,IAAI,CAACr0B,SAAS,EAAqB;MACzDq0B,aAAa,CAAC7jC,IAAI,GAAG,IAAI,CAACqvD,wBAAwB,EAAE;MACpDxrB,aAAa,CAACyrB,UAAU,GAAG,IAAI,CAAC6B,qBAAqB,GAAO,CAAC;MAE7Dt3D,IAAI,CAACgqC,aAAa,GAAG,IAAI,CAACl0B,UAAU,CAACk0B,aAAa,EAAE,iBAAiB,CAAC;IACxE;IACAhqC,IAAI,CAACu3D,QAAQ,GAAG,IAAI,CAACl6B,aAAa,CAAA,EAAO,CAAC,GAAG,IAAI,CAACm6B,WAAW,CAAE,CAAA,GAAG,IAAI;IAEtE,IAAI,CAAC35B,MAAM,CAAA,CAAY,CAAC;IAExB,IAAI,IAAI,CAAC9L,KAAK,CAAA,EAAW,CAAC,EAAE;MAC1B/xB,IAAI,CAAC0X,QAAQ,GAAG,IAAI,CAACU,KAAK,CAACpL,KAAK;MAChC,IAAI,CAACkb,IAAI,CAAA,CAAE;MACX,IAAI,CAAC2V,MAAM,CAAA,EAAY,CAAC;IACzB,CAAA,MAAM,IAAI,IAAI,CAACpJ,GAAG,CAAA,EAAY,CAAC,EAAE;MAChCz0B,IAAI,CAAC0X,QAAQ,GAAG,IAAI;IACtB;IAEA1X,IAAI,CAAC4mC,cAAc,GAAG,IAAI,CAAC6wB,cAAc,EAAE;IAC3C,IAAI,CAAC95B,SAAS,CAAA,CAAE;IAChB,IAAI,CAACE,MAAM,CAAA,CAAU,CAAC;IAEtB,OAAO,IAAI,CAAC/nB,UAAU,CAAC9V,IAAI,EAAE,cAAc,CAAC;EAC9C;EAEA03D,gBAAgBA,CAAAA,EAAkB;IAChC,MAAM13D,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAiB;IAC5C3V,IAAI,CAAC23D,YAAY,GAAG,IAAI,CAACvD,oBAAoB,CAC3C,mBAAmB,EACnB,IAAI,CAACwD,uBAAuB,CAACvF,IAAI,CAAC,IAAI,CAAC,EACzB,IAAI,EACG,KACvB,CAAC;IAID,IAAIwF,mBAAmB,GAAG,KAAK;IAC/B73D,IAAI,CAAC23D,YAAY,CAACjiC,OAAO,CAACoiC,WAAW,IAAI;MACvC,MAAM;QAAE73D;MAAM,CAAA,GAAG63D,WAAW;MAE5B,IACED,mBAAmB,IACnB53D,IAAI,KAAK,YAAY,IACrBA,IAAI,KAAK,gBAAgB,IACzB,EAAEA,IAAI,KAAK,oBAAoB,IAAI63D,WAAW,CAACpgD,QAAQ,CAAC,EACxD;QACA,IAAI,CAACH,KAAK,CAAC22C,QAAQ,CAACsC,0BAA0B,EAAEsH,WAAW,CAAC;MAC9D;MAEAD,mBAAmB,KAAnBA,mBAAmB,GAChB53D,IAAI,KAAK,oBAAoB,IAAI63D,WAAW,CAACpgD,QAAQ,IACtDzX,IAAI,KAAK,gBAAgB,CAAA;IAC7B,CAAC,CAAC;IAEF,OAAO,IAAI,CAAC6V,UAAU,CAAC9V,IAAI,EAAE,aAAa,CAAC;EAC7C;EAEA43D,uBAAuBA,CAAAA,EAAoC;IAGzD,MAAM;MAAElhD;KAAU,GAAG,IAAI,CAAC0B,KAAK;IAE/B,MAAM9I,IAAI,GAAG,IAAI,CAACmlB,GAAG,GAAY,CAAC;IAElC,IAAIsjC,OAAgB;IACpB,IAAIv9C,KAAmB;IACvB,IAAI9C,QAAiB;IACrB,IAAIzX,IAAqC;IAEzC,MAAM+3D,MAAM,GAAG9yC,0BAA0B,CAAC,IAAI,CAAC9M,KAAK,CAACnY,IAAI,CAAC;IAC1D,MAAMg4D,WAAW,GAAGD,MAAM,GAAG,IAAI,CAAC9iC,iBAAiB,CAAA,CAAE,GAAG,IAAI;IAC5D,IAAI+iC,WAAW,OAAoB,EAAE;MACnCF,OAAO,GAAG,IAAI;MACdrgD,QAAQ,GAAG,KAAK;MAChB8C,KAAK,GAAG,IAAI,CAAC4rB,eAAe,CAAC,IAAI,CAAC;MAClC,IAAI,CAACvI,MAAM,CAAA,EAAS,CAAC;MACrB59B,IAAI,GAAG,IAAI,CAACu3D,WAAW,EAAE;IAC3B,CAAC,MAAM,IAAIS,WAAW,KAAA,EAA2B,EAAE;MACjDvgD,QAAQ,GAAG,IAAI;MACf,MAAMhB,QAAQ,GAAG,IAAI,CAAC0B,KAAK,CAAC1B,QAAQ;MACpC,MAAMwhD,QAAQ,GAAG,IAAI,CAAC9/C,KAAK,CAACpL,KAAK;MACjC,MAAMmrD,WAAW,GAAG,IAAI,CAACC,mBAAmB,EAAE;MAE9C,IAAI,IAAI,CAACljC,iBAAiB,CAAE,CAAA,OAAoB,EAAE;QAChD6iC,OAAO,GAAG,IAAI;QACdv9C,KAAK,GAAG,IAAI,CAACyyB,gBAAgB,CAC3B,IAAI,CAACvM,WAAW,CAAehqB,QAAQ,CAAC,EACxCwhD,QACF,CAAC;QACD,IAAI,CAACr6B,MAAM,CAAA,EAAY,CAAC;QACxB,IAAI,CAACA,MAAM,CAAA,EAAS,CAAC;QACrB59B,IAAI,GAAG,IAAI,CAACu3D,WAAW,EAAE;MAC3B,CAAC,MAAM;QACLO,OAAO,GAAG,KAAK;QACf93D,IAAI,GAAGk4D,WAAW;QAClB,IAAI,CAACt6B,MAAM,CAAA,EAAY,CAAC;MAC1B;IACF,CAAC,MAAM;MACL59B,IAAI,GAAG,IAAI,CAACu3D,WAAW,EAAE;MACzB9/C,QAAQ,GAAG,IAAI,CAAC+c,GAAG,GAAY,CAAC;MAIhCsjC,OAAO,GAAG,IAAI,CAACtjC,GAAG,GAAS,CAAC;IAC9B;IAEA,IAAIsjC,OAAO,EAAE;MACX,IAAIM,WAAyC;MAC7C,IAAI79C,KAAK,EAAE;QACT69C,WAAW,GAAG,IAAI,CAACl/C,eAAe,CAAuBqB,KAAK,CAAC;QAC/D69C,WAAW,CAAC3gD,QAAQ,GAAGA,QAAQ;QAC/B2gD,WAAW,CAAC79C,KAAK,GAAGA,KAAK;QACzB69C,WAAW,CAAC39B,WAAW,GAAGz6B,IAAI;QAE9B,IAAI,IAAI,CAACw0B,GAAG,CAAA,EAAY,CAAC,EAAE;UACzB4jC,WAAW,CAAC3gD,QAAQ,GAAG,IAAI;UAC3B,IAAI,CAACH,KAAK,CACR22C,QAAQ,CAACgD,sBAAsB,EAC/B,IAAI,CAAC94C,KAAK,CAACC,eACb,CAAC;QACH;MACF,CAAC,MAAM;QACLggD,WAAW,GAAG,IAAI,CAACl/C,eAAe,CAAuBlZ,IAAI,CAAC;QAC9Do4D,WAAW,CAAC3gD,QAAQ,GAAGA,QAAQ;QAC/B,IAAI,CAACH,KAAK,CAAC22C,QAAQ,CAACkC,uBAAuB,EAAEnwD,IAAI,CAAC;QAGlDo4D,WAAW,CAAC79C,KAAK,GAAGva,IAAI;QACxBo4D,WAAW,CAAC39B,WAAW,GAAG,IAAI,CAAC88B,WAAW,EAAE;MAC9C;MACAv3D,IAAI,GAAG,IAAI,CAAC6V,UAAU,CAACuiD,WAAW,EAAE,oBAAoB,CAAC;IAC1D,CAAA,MAAM,IAAI3gD,QAAQ,EAAE;MACnB,MAAM4gD,gBAAgB,GAAG,IAAI,CAACn/C,eAAe,CAAmBlZ,IAAI,CAAC;MACrEq4D,gBAAgB,CAAC1xB,cAAc,GAAG3mC,IAAI;MACtCA,IAAI,GAAG,IAAI,CAAC6V,UAAU,CAACwiD,gBAAgB,EAAE,gBAAgB,CAAC;IAC5D;IAEA,IAAIhpD,IAAI,EAAE;MACR,MAAMipD,QAAQ,GAAG,IAAI,CAAC73B,WAAW,CAAehqB,QAAQ,CAAC;MACzD6hD,QAAQ,CAAC3xB,cAAc,GAAG3mC,IAAI;MAC9BA,IAAI,GAAG,IAAI,CAAC6V,UAAU,CAACyiD,QAAQ,EAAE,YAAY,CAAC;IAChD;IAEA,OAAOt4D,IAAI;EACb;EAEAu4D,wBAAwBA,CAAAA,EAA0B;IAChD,MAAMx4D,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAyB;IACpD,IAAI,CAACkoB,MAAM,CAAA,EAAU,CAAC;IACtB79B,IAAI,CAAC4mC,cAAc,GAAG,IAAI,CAAC4wB,WAAW,EAAE;IACxC,IAAI,CAAC35B,MAAM,CAAA,EAAU,CAAC;IACtB,OAAO,IAAI,CAAC/nB,UAAU,CAAC9V,IAAI,EAAE,qBAAqB,CAAC;EACrD;EAEAy4D,gCAAgCA,CAC9Bx4D,IAA4C,EAC5Cy4D,QAAkB,EACa;IAC/B,MAAM14D,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAExB;IACH,IAAI1V,IAAI,KAAK,mBAAmB,EAAE;MAC/BD,IAAI,CAAiC04D,QAAQ,GAAG,CAAC,CAACA,QAAQ;MAC3D,IAAIA,QAAQ,EAAE,IAAI,CAACxwC,IAAI,EAAE;MACzB,IAAI,CAACA,IAAI,CAAA,CAAE;IACb;IACA,IAAI,CAACywC,gCAAgC,CAAC,MACpC,IAAI,CAAC9C,eAAe,CAAA,EAAA,EAAW71D,IAAI,CACrC,CAAC;IACD,OAAO,IAAI,CAAC8V,UAAU,CAAC9V,IAAI,EAAEC,IAAI,CAAC;EACpC;EAEA24D,sBAAsBA,CAAAA,EAAoB;IACxC,MAAM54D,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAmB;IAC9C,QAAQ,IAAI,CAACyC,KAAK,CAACnY,IAAI;MACrB,KAAA,GAAA;MACA,KAAA,GAAA;MACA,KAAA,GAAA;MACA,KAAA,EAAA;MACA,KAAA,EAAA;QAGED,IAAI,CAAC82C,OAAO,GAAG,KAAK,CAACvP,aAAa,EAAE;QACpC;MACF;QACE,IAAI,CAACriC,UAAU,CAAA,CAAE;IACrB;IACA,OAAO,IAAI,CAAC4Q,UAAU,CAAC9V,IAAI,EAAE,eAAe,CAAC;EAC/C;EAEA64D,0BAA0BA,CAAAA,EAAoB;IAC5C,MAAM74D,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAmB;IAC9C3V,IAAI,CAAC82C,OAAO,GAAG,KAAK,CAACgiB,aAAa,CAAC,KAAK,CAAC;IACzC,OAAO,IAAI,CAAChjD,UAAU,CAAC9V,IAAI,EAAE,eAAe,CAAC;EAC/C;EAEA+4D,yBAAyBA,CAAAA,EAA4B;IACnD,IAAI,IAAI,CAAC3gD,KAAK,CAACiX,MAAM,EAAE,OAAO,IAAI,CAACmoC,WAAW,CAAA,CAAE;IAChD,OAAO,KAAK,CAACuB,yBAAyB,EAAE;EAC1C;EAEAC,kCAAkCA,CAAAA,EAAqC;IACrE,MAAMC,WAAW,GAAG,IAAI,CAAC9D,mBAAmB,EAAE;IAC9C,IAAI,IAAI,CAACp4B,YAAY,CAAA,GAAO,CAAC,IAAI,CAAC,IAAI,CAACS,qBAAqB,EAAE,EAAE;MAC9D,OAAO,IAAI,CAACs3B,wBAAwB,CAACmE,WAAW,CAAC;IACnD,CAAC,MAAM;MACL,OAAOA,WAAW;IACpB;EACF;EAEAb,mBAAmBA,CAAAA,EAAa;IAC9B,QAAQ,IAAI,CAAChgD,KAAK,CAACnY,IAAI;MACrB,KAAA,GAAA;MACA,KAAA,GAAA;MACA,KAAA,GAAA;MACA,KAAA,EAAA;MACA,KAAA,EAAA;QACE,OAAO,IAAI,CAAC24D,sBAAsB,EAAE;MACtC,KAAA,EAAA;QACE,IAAI,IAAI,CAACxgD,KAAK,CAACpL,KAAK,KAAK,GAAG,EAAE;UAC5B,MAAMhN,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAmB;UAC9C,MAAM6e,SAAS,GAAG,IAAI,CAACI,SAAS,EAAE;UAClC,IAAIJ,SAAS,CAACv0B,IAAI,KAAA,GAAW,IAAIu0B,SAAS,CAACv0B,IAAI,KAAA,GAAc,EAAE;YAC7D,IAAI,CAACiF,UAAU,CAAA,CAAE;UACnB;UAEAlF,IAAI,CAAC82C,OAAO,GAAG,IAAI,CAACoiB,eAAe,EAAE;UACrC,OAAO,IAAI,CAACpjD,UAAU,CAAC9V,IAAI,EAAE,eAAe,CAAC;QAC/C;QACA;MACF,KAAA,EAAA;QACE,OAAO,IAAI,CAACg5D,kCAAkC,EAAE;MAClD,KAAA,EAAA;QACE,OAAO,IAAI,CAAC5D,gBAAgB,EAAE;MAChC,KAAA,EAAA;QACE,OAAO,IAAI,CAACb,iBAAiB,EAAE;MACjC,KAAA,CAAA;QACE,OAAO,IAAI,CAACkC,WAAW,CAAC,IAAI,CAACW,qBAAqB,CAAC/E,IAAI,CAAC,IAAI,CAAC,CAAC,GAC1D,IAAI,CAACgF,iBAAiB,CAAA,CAAE,GACxB,IAAI,CAACH,kBAAkB,CAAA,CAAE;MAC/B,KAAA,CAAA;QACE,OAAO,IAAI,CAACQ,gBAAgB,EAAE;MAChC,KAAA,EAAA;QAeE,OAAO,IAAI,CAACc,wBAAwB,EAAE;MACxC,KAAA,EAAA;MACA,KAAA,EAAA;QACE,OAAO,IAAI,CAACK,0BAA0B,EAAE;MAC1C;QAAS;UACP,MAAM;YAAE54D;WAAM,GAAG,IAAI,CAACmY,KAAK;UAC3B,IACE4M,iBAAiB,CAAC/kB,IAAI,CAAC,IACvBA,IAAI,KAAa,EAAA,IACjBA,IAAI,KAAA,EAAa,EACjB;YACA,MAAMk5D,QAAQ,GACZl5D,IAAI,OAAa,GACb,eAAe,GACfA,IAAI,KAAA,EAAa,GACf,eAAe,GACf6xD,mBAAmB,CAAC,IAAI,CAAC15C,KAAK,CAACpL,KAAK,CAAC;YAC7C,IACEmsD,QAAQ,KAAKtpD,SAAS,IACtB,IAAI,CAACqlB,iBAAiB,CAAA,CAAE,KAAA,EAAkB,EAC1C;cACA,MAAMl1B,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAmB;cAC9C,IAAI,CAACuS,IAAI,CAAA,CAAE;cACX,OAAO,IAAI,CAACpS,UAAU,CAAC9V,IAAI,EAAEm5D,QAAQ,CAAC;YACxC;YACA,OAAO,IAAI,CAACvE,oBAAoB,EAAE;UACpC;QACF;IACF;IAEA,IAAI,CAAC1vD,UAAU,CAAA,CAAE;EACnB;EAEAk0D,wBAAwBA,CAAAA,EAAa;IACnC,IAAIn5D,IAAI,GAAG,IAAI,CAACm4D,mBAAmB,EAAE;IACrC,OAAO,CAAC,IAAI,CAAC56B,qBAAqB,CAAA,CAAE,IAAI,IAAI,CAAC/I,GAAG,CAAY,CAAA,CAAC,EAAE;MAC7D,IAAI,IAAI,CAAC1C,KAAK,CAAA,CAAY,CAAC,EAAE;QAC3B,MAAM/xB,IAAI,GAAG,IAAI,CAACmZ,eAAe,CAAgBlZ,IAAI,CAAC;QACtDD,IAAI,CAAC06B,WAAW,GAAGz6B,IAAI;QACvB,IAAI,CAAC49B,MAAM,CAAA,CAAY,CAAC;QACxB59B,IAAI,GAAG,IAAI,CAAC6V,UAAU,CAAC9V,IAAI,EAAE,aAAa,CAAC;MAC7C,CAAC,MAAM;QACL,MAAMA,IAAI,GAAG,IAAI,CAACmZ,eAAe,CAAwBlZ,IAAI,CAAC;QAC9DD,IAAI,CAACotC,UAAU,GAAGntC,IAAI;QACtBD,IAAI,CAACqtC,SAAS,GAAG,IAAI,CAACmqB,WAAW,EAAE;QACnC,IAAI,CAAC35B,MAAM,CAAA,CAAY,CAAC;QACxB59B,IAAI,GAAG,IAAI,CAAC6V,UAAU,CAAC9V,IAAI,EAAE,qBAAqB,CAAC;MACrD;IACF;IACA,OAAOC,IAAI;EACb;EAEAo5D,mBAAmBA,CAAAA,EAAqB;IACtC,MAAMr5D,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAoB;IAC/C,MAAMk2C,QAAQ,GAAG,IAAI,CAACzzC,KAAK,CAACpL,KAAK;IACjC,IAAI,CAACkb,IAAI,CAAA,CAAE;IACXloB,IAAI,CAAC6rD,QAAQ,GAAGA,QAAQ;IACxB7rD,IAAI,CAAC4mC,cAAc,GAAG,IAAI,CAAC0yB,2BAA2B,EAAE;IAExD,IAAIzN,QAAQ,KAAK,UAAU,EAAE;MAC3B,IAAI,CAAC0N,gCAAgC,CAACv5D,IAAI,CAAC;IAC7C;IAEA,OAAO,IAAI,CAAC8V,UAAU,CAAC9V,IAAI,EAAE,gBAAgB,CAAC;EAChD;EAEAu5D,gCAAgCA,CAACv5D,IAA8B,EAAE;IAC/D,QAAQA,IAAI,CAAC4mC,cAAc,CAAC3mC,IAAI;MAC9B,KAAK,aAAa;MAClB,KAAK,aAAa;QAChB;MACF;QACE,IAAI,CAACsX,KAAK,CAAC22C,QAAQ,CAACsD,kBAAkB,EAAExxD,IAAI,CAAC;IACjD;EACF;EAEAw5D,gBAAgBA,CAAAA,EAAkB;IAChC,MAAMx5D,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAiB;IAC5C,IAAI,CAAC2nB,gBAAgB,CAAA,GAAU,CAAC;IAChC,MAAM0M,aAAa,GAAG,IAAI,CAACr0B,SAAS,EAAqB;IACzDq0B,aAAa,CAAC7jC,IAAI,GAAG,IAAI,CAACqvD,wBAAwB,EAAE;IACpDxrB,aAAa,CAACyrB,UAAU,GAAG,IAAI,CAACvC,UAAU,CAAC,MACzC,IAAI,CAACuG,6BAA6B,CAAA,CACpC,CAAC;IACDz5D,IAAI,CAACgqC,aAAa,GAAG,IAAI,CAACl0B,UAAU,CAACk0B,aAAa,EAAE,iBAAiB,CAAC;IACtE,OAAO,IAAI,CAACl0B,UAAU,CAAC9V,IAAI,EAAE,aAAa,CAAC;EAC7C;EAEAy5D,6BAA6BA,CAAAA,EAAG;IAC9B,IAAI,IAAI,CAAChlC,GAAG,CAAA,EAAY,CAAC,EAAE;MACzB,MAAMghC,UAAU,GAAG,IAAI,CAACiE,mCAAmC,CAAC,MAC1D,IAAI,CAAClC,WAAW,CAAA,CAClB,CAAC;MACD,IACE,IAAI,CAACp/C,KAAK,CAACsX,iCAAiC,IAC5C,CAAC,IAAI,CAACqC,KAAK,CAAY,EAAA,CAAC,EACxB;QACA,OAAO0jC,UAAU;MACnB;IACF;EACF;EAEA6D,2BAA2BA,CAAAA,EAAa;IACtC,MAAMK,cAAc,GAClB9zC,qBAAqB,CAAC,IAAI,CAACzN,KAAK,CAACnY,IAAI,CAAC,IAAI,CAAC,IAAI,CAACmY,KAAK,CAAC0X,WAAW;IACnE,OAAO6pC,cAAc,GACjB,IAAI,CAACN,mBAAmB,CAAE,CAAA,GAC1B,IAAI,CAACt8B,YAAY,CAAA,GAAU,CAAC,GAC1B,IAAI,CAACy8B,gBAAgB,CAAA,CAAE,GACvB,IAAI,CAACb,gCAAgC,CAAC,MACpC,IAAI,CAACS,wBAAwB,CAAA,CAC/B,CAAC;EACT;EAEAQ,8BAA8BA,CAC5Bv5D,IAA0C,EAC1Cw5D,oBAAoC,EACpChO,QAAmB,EACT;IACV,MAAM7rD,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAwC;IACnE,MAAMmkD,kBAAkB,GAAG,IAAI,CAACrlC,GAAG,CAACo3B,QAAQ,CAAC;IAC7C,MAAMhyC,KAAK,GAAG,EAAE;IAChB,GAAG;MACDA,KAAK,CAACgC,IAAI,CAACg+C,oBAAoB,CAAA,CAAE,CAAC;IACpC,CAAC,QAAQ,IAAI,CAACplC,GAAG,CAACo3B,QAAQ,CAAC;IAC3B,IAAIhyC,KAAK,CAACrB,MAAM,KAAK,CAAC,IAAI,CAACshD,kBAAkB,EAAE;MAC7C,OAAOjgD,KAAK,CAAC,CAAC,CAAC;IACjB;IACA7Z,IAAI,CAAC6Z,KAAK,GAAGA,KAAK;IAClB,OAAO,IAAI,CAAC/D,UAAU,CAAC9V,IAAI,EAAEK,IAAI,CAAC;EACpC;EAEA05D,+BAA+BA,CAAAA,EAAa;IAC1C,OAAO,IAAI,CAACH,8BAA8B,CACxC,oBAAoB,EACpB,IAAI,CAACN,2BAA2B,CAACjH,IAAI,CAAC,IAAI,CAAC,IAE7C,CAAC;EACH;EAEA2H,wBAAwBA,CAAAA,EAAG;IACzB,OAAO,IAAI,CAACJ,8BAA8B,CACxC,aAAa,EACb,IAAI,CAACG,+BAA+B,CAAC1H,IAAI,CAAC,IAAI,CAAC,IAEjD,CAAC;EACH;EAEA4H,uBAAuBA,CAAAA,EAAG;IACxB,IAAI,IAAI,CAACloC,KAAK,CAAA,EAAM,CAAC,EAAE;MACrB,OAAO,IAAI;IACb;IACA,OACE,IAAI,CAACA,KAAK,GAAU,CAAC,IACrB,IAAI,CAAC0kC,WAAW,CAAC,IAAI,CAACyD,oCAAoC,CAAC7H,IAAI,CAAC,IAAI,CAAC,CAAC;EAE1E;EAEA8H,oBAAoBA,CAAAA,EAAY;IAC9B,IAAIn1C,iBAAiB,CAAC,IAAI,CAAC5M,KAAK,CAACnY,IAAI,CAAC,IAAI,IAAI,CAAC8xB,KAAK,CAAA,EAAS,CAAC,EAAE;MAC9D,IAAI,CAAC7J,IAAI,CAAA,CAAE;MACX,OAAO,IAAI;IACb;IAEA,IAAI,IAAI,CAAC6J,KAAK,CAAA,CAAU,CAAC,EAAE;MAEzB,MAAM;QAAEzD;OAAQ,GAAG,IAAI,CAAClW,KAAK;MAC7B,MAAMgiD,kBAAkB,GAAG9rC,MAAM,CAAC9V,MAAM;MACxC,IAAI;QACF,IAAI,CAAC+zC,eAAe,CAAY,CAAA,EAAA,IAAI,CAAC;QACrC,OAAOj+B,MAAM,CAAC9V,MAAM,KAAK4hD,kBAAkB;MAC5C,CAAA,CAAC,OAAA7nD,OAAA,EAAM;QACN,OAAO,KAAK;MACd;IACF;IAEA,IAAI,IAAI,CAACwf,KAAK,CAAA,CAAY,CAAC,EAAE;MAC3B,IAAI,CAAC7J,IAAI,CAAA,CAAE;MAEX,MAAM;QAAEoG;OAAQ,GAAG,IAAI,CAAClW,KAAK;MAC7B,MAAMgiD,kBAAkB,GAAG9rC,MAAM,CAAC9V,MAAM;MACxC,IAAI;QACF,KAAK,CAAC6zC,gBAAgB,CAAA,CAAA,EAAA,EAAA,GAItB,CAAC;QACD,OAAO/9B,MAAM,CAAC9V,MAAM,KAAK4hD,kBAAkB;MAC5C,CAAA,CAAC,OAAAC,QAAA,EAAM;QACN,OAAO,KAAK;MACd;IACF;IAEA,OAAO,KAAK;EACd;EAEAH,oCAAoCA,CAAAA,EAAY;IAC9C,IAAI,CAAChyC,IAAI,CAAA,CAAE;IACX,IAAI,IAAI,CAAC6J,KAAK,CAAU,EAAA,CAAC,IAAI,IAAI,CAACA,KAAK,CAAY,EAAA,CAAC,EAAE;MAGpD,OAAO,IAAI;IACb;IACA,IAAI,IAAI,CAACooC,oBAAoB,EAAE,EAAE;MAC/B,IACE,IAAI,CAACpoC,KAAK,CAAA,EAAS,CAAC,IACpB,IAAI,CAACA,KAAK,CAAS,EAAA,CAAC,IACpB,IAAI,CAACA,KAAK,CAAA,EAAY,CAAC,IACvB,IAAI,CAACA,KAAK,CAAM,EAAA,CAAC,EACjB;QAKA,OAAO,IAAI;MACb;MACA,IAAI,IAAI,CAACA,KAAK,CAAA,EAAU,CAAC,EAAE;QACzB,IAAI,CAAC7J,IAAI,CAAA,CAAE;QACX,IAAI,IAAI,CAAC6J,KAAK,CAAA,EAAS,CAAC,EAAE;UAExB,OAAO,IAAI;QACb;MACF;IACF;IACA,OAAO,KAAK;EACd;EAEAqkC,oCAAoCA,CAClCN,WAAsB,EACF;IACpB,OAAO,IAAI,CAACwE,QAAQ,CAAC,MAAM;MACzB,MAAMC,CAAC,GAAG,IAAI,CAAC5kD,SAAS,EAAsB;MAC9C,IAAI,CAACkoB,MAAM,CAACi4B,WAAW,CAAC;MAExB,MAAM91D,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAqB;MAEhD,MAAMu/C,OAAO,GAAG,CAAC,CAAC,IAAI,CAAChC,UAAU,CAC/B,IAAI,CAACsH,2BAA2B,CAACnI,IAAI,CAAC,IAAI,CAC5C,CAAC;MAED,IAAI6C,OAAO,IAAI,IAAI,CAACnjC,KAAK,CAAA,EAAS,CAAC,EAAE;QAGnC,IAAI0oC,iBAAiB,GAAG,IAAI,CAACzB,kCAAkC,EAAE;QAGjE,IAAIyB,iBAAiB,CAACx6D,IAAI,KAAK,YAAY,EAAE;UAC3CD,IAAI,CAACg1D,aAAa,GAAGyF,iBAAiB;UACtCz6D,IAAI,CAACk1D,OAAO,GAAG,IAAI;UAClBl1D,IAAI,CAAuB4mC,cAAc,GAAG,IAAI;UACjD6zB,iBAAiB,GAAG,IAAI,CAAC3kD,UAAU,CAAC9V,IAAI,EAAE,iBAAiB,CAAC;QAC9D,CAAC,MAAM;UACL,IAAI,CAAC2gC,0BAA0B,CAAC85B,iBAAiB,EAAEz6D,IAAI,CAAC;UACxDy6D,iBAAiB,CAACvF,OAAO,GAAG,IAAI;QAClC;QACAqF,CAAC,CAAC3zB,cAAc,GAAG6zB,iBAAiB;QACpC,OAAO,IAAI,CAAC3kD,UAAU,CAACykD,CAAC,EAAE,kBAAkB,CAAC;MAC/C;MAEA,MAAMG,qBAAqB,GACzB,IAAI,CAAC/H,cAAc,CAAA,CAAE,IACrB,IAAI,CAACO,UAAU,CAAC,IAAI,CAACyH,0BAA0B,CAACtI,IAAI,CAAC,IAAI,CAAC,CAAC;MAE7D,IAAI,CAACqI,qBAAqB,EAAE;QAC1B,IAAI,CAACxF,OAAO,EAAE;UAEZ,OAAO,IAAI,CAACD,qBAAqB,CAAgB,KAAK,EAAEsF,CAAC,CAAC;QAC5D;QAGAv6D,IAAI,CAACg1D,aAAa,GAAG,IAAI,CAAC5uB,eAAe,EAAE;QAC3CpmC,IAAI,CAACk1D,OAAO,GAAGA,OAAO;QACrBl1D,IAAI,CAAuB4mC,cAAc,GAAG,IAAI;QACjD2zB,CAAC,CAAC3zB,cAAc,GAAG,IAAI,CAAC9wB,UAAU,CAAC9V,IAAI,EAAE,iBAAiB,CAAC;QAC3D,OAAO,IAAI,CAAC8V,UAAU,CAACykD,CAAC,EAAE,kBAAkB,CAAC;MAC/C;MAGA,MAAMt6D,IAAI,GAAG,IAAI,CAACg1D,qBAAqB,CAAgB,KAAK,CAAC;MAC7Dj1D,IAAI,CAACg1D,aAAa,GAAG0F,qBAAqB;MAC1C16D,IAAI,CAAC4mC,cAAc,GAAG3mC,IAAI;MAC1BD,IAAI,CAACk1D,OAAO,GAAGA,OAAO;MACtBqF,CAAC,CAAC3zB,cAAc,GAAG,IAAI,CAAC9wB,UAAU,CAAC9V,IAAI,EAAE,iBAAiB,CAAC;MAC3D,OAAO,IAAI,CAAC8V,UAAU,CAACykD,CAAC,EAAE,kBAAkB,CAAC;IAC/C,CAAC,CAAC;EACJ;EAEAK,uCAAuCA,CAAAA,EAAmC;IACxE,IAAI,IAAI,CAAC7oC,KAAK,CAAA,EAAS,CAAC,EAAE;MACxB,OAAO,IAAI,CAACqkC,oCAAoC,CAAA,EAAS,CAAC;IAC5D;EACF;EAEAO,wBAAwBA,CAAAA,EAAmC;IACzD,IAAI,IAAI,CAAC5kC,KAAK,CAAA,EAAS,CAAC,EAAE;MACxB,OAAO,IAAI,CAACkjC,qBAAqB,EAAE;IACrC;EACF;EAEAwC,cAAcA,CAAAA,EAAyB;IACrC,OAAO,IAAI,CAAC/B,kBAAkB,CAAA,EAAS,CAAC;EAC1C;EAEAiF,0BAA0BA,CAAAA,EAA6B;IACrD,MAAM3lD,EAAE,GAAG,IAAI,CAACoxB,eAAe,EAAE;IACjC,IAAI,IAAI,CAACrJ,YAAY,CAAA,GAAO,CAAC,IAAI,CAAC,IAAI,CAACS,qBAAqB,EAAE,EAAE;MAC9D,IAAI,CAACtV,IAAI,CAAA,CAAE;MACX,OAAOlT,EAAE;IACX;EACF;EAEAwlD,2BAA2BA,CAAAA,EAAY;IACrC,IAAI,IAAI,CAACpiD,KAAK,CAACnY,IAAI,QAAgB,EAAE;MACnC,OAAO,KAAK;IACd;IACA,MAAM6vB,WAAW,GAAG,IAAI,CAAC1X,KAAK,CAAC0X,WAAW;IAC1C,IAAI,CAAC5H,IAAI,CAAA,CAAE;IACX,IAAI,CAAClD,iBAAiB,CAAC,IAAI,CAAC5M,KAAK,CAACnY,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC8xB,KAAK,CAAA,EAAS,CAAC,EAAE;MAChE,OAAO,KAAK;IACd;IAEA,IAAIjC,WAAW,EAAE;MACf,IAAI,CAACvY,KAAK,CACR9H,MAAM,CAACjL,0BAA0B,EACjC,IAAI,CAAC4T,KAAK,CAACC,eAAe,EAC1B;QACE5T,YAAY,EAAE;MAChB,CACF,CAAC;IACH;IAEA,OAAO,IAAI;EACb;EAEAwwD,qBAAqBA,CACnB4F,QAAQ,GAAG,IAAI,EACfN,CAA6B,GAAG,IAAI,CAAC5kD,SAAS,CAAA,CAAsB,EAChD;IACpB,IAAI,CAAC2kD,QAAQ,CAAC,MAAM;MAClB,IAAIO,QAAQ,EAAE,IAAI,CAACh9B,MAAM,GAAS,CAAC;MACnC08B,CAAC,CAAC3zB,cAAc,GAAG,IAAI,CAAC4wB,WAAW,EAAE;IACvC,CAAC,CAAC;IACF,OAAO,IAAI,CAAC1hD,UAAU,CAACykD,CAAC,EAAE,kBAAkB,CAAC;EAC/C;EAGA/C,WAAWA,CAAAA,EAAa;IAEtBvJ,MAAM,CAAC,IAAI,CAAC71C,KAAK,CAACiX,MAAM,CAAC;IACzB,MAAMpvB,IAAI,GAAG,IAAI,CAAC66D,yBAAyB,EAAE;IAE7C,IACE,IAAI,CAAC1iD,KAAK,CAACsX,iCAAiC,IAC5C,IAAI,CAAC8N,qBAAqB,CAAE,CAAA,IAC5B,CAAC,IAAI,CAAC/I,GAAG,CAAA,EAAY,CAAC,EACtB;MACA,OAAOx0B,IAAI;IACb;IACA,MAAMD,IAAI,GAAG,IAAI,CAACmZ,eAAe,CAAsBlZ,IAAI,CAAC;IAC5DD,IAAI,CAAC+6D,SAAS,GAAG96D,IAAI;IAErBD,IAAI,CAACg7D,WAAW,GAAG,IAAI,CAACtB,mCAAmC,CAAC,MAC1D,IAAI,CAACoB,yBAAyB,CAAA,CAChC,CAAC;IAED,IAAI,CAACj9B,MAAM,CAAA,EAAY,CAAC;IACxB79B,IAAI,CAACi7D,QAAQ,GAAG,IAAI,CAACtC,gCAAgC,CAAC,MACpD,IAAI,CAACnB,WAAW,CAAA,CAClB,CAAC;IAED,IAAI,CAAC35B,MAAM,CAAA,EAAS,CAAC;IACrB79B,IAAI,CAACk7D,SAAS,GAAG,IAAI,CAACvC,gCAAgC,CAAC,MACrD,IAAI,CAACnB,WAAW,CAAA,CAClB,CAAC;IAED,OAAO,IAAI,CAAC1hD,UAAU,CAAC9V,IAAI,EAAE,mBAAmB,CAAC;EACnD;EAEAm7D,8BAA8BA,CAAAA,EAAY;IACxC,OACE,IAAI,CAACp+B,YAAY,CAAA,GAAa,CAAC,IAAI,IAAI,CAACnI,SAAS,CAAE,CAAA,CAAC30B,IAAI,KAAY,EAAA;EAExE;EAEA66D,yBAAyBA,CAAAA,EAAa;IACpC,IAAI,IAAI,CAACb,uBAAuB,EAAE,EAAE;MAClC,OAAO,IAAI,CAACxB,gCAAgC,CAAC,gBAAgB,CAAC;IAChE;IACA,IAAI,IAAI,CAAC1mC,KAAK,CAAA,EAAQ,CAAC,EAAE;MAEvB,OAAO,IAAI,CAAC0mC,gCAAgC,CAAC,mBAAmB,CAAC;IACnE,CAAC,MAAM,IAAI,IAAI,CAAC0C,8BAA8B,EAAE,EAAE;MAEhD,OAAO,IAAI,CAAC1C,gCAAgC,CAC1C,mBAAmB,EACJ,IACjB,CAAC;IACH;IACA,OAAO,IAAI,CAACuB,wBAAwB,EAAE;EACxC;EAEAoB,oBAAoBA,CAAAA,EAAsB;IACxC,IAAI,IAAI,CAACvmD,eAAe,CAAC,YAAY,EAAE,0BAA0B,CAAC,EAAE;MAClE,IAAI,CAAC0C,KAAK,CAAC22C,QAAQ,CAAC4C,qBAAqB,EAAE,IAAI,CAAC14C,KAAK,CAAC1B,QAAQ,CAAC;IACjE;IAEA,MAAM1W,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAqB;IAChD3V,IAAI,CAAC4mC,cAAc,GAAG,IAAI,CAAC0zB,QAAQ,CAAC,MAAM;MACxC,IAAI,CAACpyC,IAAI,CAAA,CAAE;MACX,OAAO,IAAI,CAAC6J,KAAK,CAAU,EAAA,CAAC,GACxB,IAAI,CAAC6iC,oBAAoB,CAAE,CAAA,GAC3B,IAAI,CAAC4C,WAAW,EAAE;IACxB,CAAC,CAAC;IACF,IAAI,CAAC35B,MAAM,CAAA,EAAM,CAAC;IAClB79B,IAAI,CAACmT,UAAU,GAAG,IAAI,CAAC+lD,eAAe,EAAE;IACxC,OAAO,IAAI,CAACpjD,UAAU,CAAC9V,IAAI,EAAE,iBAAiB,CAAC;EACjD;EAIAq7D,qBAAqBA,CACnBhvD,KAA+B,EAC4B;IAC3D,MAAMivD,gBAAgB,GAAG,IAAI,CAACljD,KAAK,CAAC1B,QAAQ;IAE5C,MAAM6kD,aAAa,GAAG,IAAI,CAACxH,oBAAoB,CAC7C,uBAAuB,EACvB,MAAM;MACJ,MAAM/zD,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAExB;MACH3V,IAAI,CAACmT,UAAU,GAAG,IAAI,CAACshD,iBAAiB,EAAE;MASnC;QACL,IAAI,IAAI,CAAC1iC,KAAK,CAAA,EAAM,CAAC,EAAE;UAErB/xB,IAAI,CAAC4V,cAAc,GAAG,IAAI,CAAC8+C,oBAAoB,EAAE;QACnD;QAEA,OAAO,IAAI,CAAC5+C,UAAU,CACpB9V,IAAI,EAEJ,+BACF,CAAC;MACH;IACF,CACF,CAAC;IAED,IAAI,CAACu7D,aAAa,CAAC/iD,MAAM,EAAE;MACzB,IAAI,CAACjB,KAAK,CAAC22C,QAAQ,CAACe,uBAAuB,EAAEqM,gBAAgB,EAAE;QAC7DjvD;MACF,CAAC,CAAC;IACJ;IAEA,OAAOkvD,aAAa;EAGtB;EAEAC,2BAA2BA,CACzBx7D,IAAsC,EACtCstB,UAEC,GAAG,EAAE,EAC2B;IACjC,IAAI,IAAI,CAACmQ,qBAAqB,EAAE,EAAE,OAAO,IAAI;IAC7C,IAAI,CAACH,gBAAgB,CAAA,GAAc,CAAC;IACpC,IAAIhQ,UAAU,CAAC+b,OAAO,EAAErpC,IAAI,CAACqpC,OAAO,GAAG,IAAI;IAC3C,IAAIrkB,iBAAiB,CAAC,IAAI,CAAC5M,KAAK,CAACnY,IAAI,CAAC,EAAE;MACtCD,IAAI,CAACgV,EAAE,GAAG,IAAI,CAACoxB,eAAe,EAAE;MAChC,IAAI,CAACknB,eAAe,CAACttD,IAAI,CAACgV,EAAE,KAA+B,CAAC;IAC9D,CAAC,MAAM;MACLhV,IAAI,CAACgV,EAAE,GAAG,IAAI;MACd,IAAI,CAACuC,KAAK,CAAC22C,QAAQ,CAACmC,oBAAoB,EAAE,IAAI,CAACj4C,KAAK,CAAC1B,QAAQ,CAAC;IAChE;IAEA1W,IAAI,CAAC4V,cAAc,GAAG,IAAI,CAAC+/C,wBAAwB,CACjD,IAAI,CAACjD,0BACP,CAAC;IACD,IAAI,IAAI,CAACj+B,GAAG,CAAA,EAAY,CAAC,EAAE;MACzBz0B,IAAI,CAACooC,OAAO,GAAG,IAAI,CAACizB,qBAAqB,CAAC,SAAS,CAAC;IACtD;IACA,MAAM3mD,IAAI,GAAG,IAAI,CAACiB,SAAS,EAAqB;IAChDjB,IAAI,CAACA,IAAI,GAAG,IAAI,CAAC4lD,QAAQ,CAAC,IAAI,CAACnD,wBAAwB,CAAC9E,IAAI,CAAC,IAAI,CAAC,CAAC;IACnEryD,IAAI,CAAC0U,IAAI,GAAG,IAAI,CAACoB,UAAU,CAACpB,IAAI,EAAE,iBAAiB,CAAC;IACpD,OAAO,IAAI,CAACoB,UAAU,CAAC9V,IAAI,EAAE,wBAAwB,CAAC;EACxD;EAEAy7D,2BAA2BA,CACzBz7D,IAA8B,EACJ;IAC1BA,IAAI,CAACgV,EAAE,GAAG,IAAI,CAACoxB,eAAe,EAAE;IAChC,IAAI,CAACknB,eAAe,CAACttD,IAAI,CAACgV,EAAE,GAA0B,CAAC;IAEvDhV,IAAI,CAAC4mC,cAAc,GAAG,IAAI,CAAC0zB,QAAQ,CAAC,MAAM;MACxCt6D,IAAI,CAAC4V,cAAc,GAAG,IAAI,CAAC+/C,wBAAwB,CACjD,IAAI,CAACxD,qBACP,CAAC;MAED,IAAI,CAACt0B,MAAM,CAAA,EAAM,CAAC;MAElB,IACE,IAAI,CAACd,YAAY,CAAA,GAAc,CAAC,IAChC,IAAI,CAACnI,SAAS,CAAE,CAAA,CAAC30B,IAAI,OAAW,EAChC;QACA,MAAMD,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAmB;QAC9C,IAAI,CAACuS,IAAI,CAAA,CAAE;QACX,OAAO,IAAI,CAACpS,UAAU,CAAC9V,IAAI,EAAE,oBAAoB,CAAC;MACpD;MAEA,OAAO,IAAI,CAACw3D,WAAW,EAAE;IAC3B,CAAC,CAAC;IAEF,IAAI,CAAC75B,SAAS,CAAA,CAAE;IAChB,OAAO,IAAI,CAAC7nB,UAAU,CAAC9V,IAAI,EAAE,wBAAwB,CAAC;EACxD;EAGA07D,mBAAmBA,CAAIxxB,EAAW,EAAK;IACrC,IAAI,IAAI,CAACvV,UAAU,EAAE,KAAKrO,KAAE,CAACxM,KAAK,EAAE;MAClC,MAAMqwB,UAAU,GAAG,IAAI,CAAC/xB,KAAK,CAACgO,OAAO;MACrC,IAAI,CAAChO,KAAK,CAACgO,OAAO,GAAG,CAAC+jB,UAAU,CAAC,CAAC,CAAC,CAAC;MACpC,IAAI;QACF,OAAOD,EAAE,CAAA,CAAE;MACb,CAAC,SAAS;QACR,IAAI,CAAC9xB,KAAK,CAACgO,OAAO,GAAG+jB,UAAU;MACjC;IACF,CAAC,MAAM;MACL,OAAOD,EAAE,CAAA,CAAE;IACb;EACF;EAOAowB,QAAQA,CAAIpwB,EAAW,EAAK;IAC1B,MAAMxE,SAAS,GAAG,IAAI,CAACttB,KAAK,CAACiX,MAAM;IACnC,IAAI,CAACjX,KAAK,CAACiX,MAAM,GAAG,IAAI;IACxB,IAAI;MACF,OAAO6a,EAAE,CAAA,CAAE;IACb,CAAC,SAAS;MACR,IAAI,CAAC9xB,KAAK,CAACiX,MAAM,GAAGqW,SAAS;IAC/B;EACF;EAEAg0B,mCAAmCA,CAAIxvB,EAAW,EAAK;IACrD,MAAMyxB,oCAAoC,GACxC,IAAI,CAACvjD,KAAK,CAACsX,iCAAiC;IAC9C,IAAI,CAACtX,KAAK,CAACsX,iCAAiC,GAAG,IAAI;IACnD,IAAI;MACF,OAAOwa,EAAE,CAAA,CAAE;IACb,CAAC,SAAS;MACR,IAAI,CAAC9xB,KAAK,CAACsX,iCAAiC,GAC1CisC,oCAAoC;IACxC;EACF;EAEAhD,gCAAgCA,CAAIzuB,EAAW,EAAK;IAClD,MAAMyxB,oCAAoC,GACxC,IAAI,CAACvjD,KAAK,CAACsX,iCAAiC;IAC9C,IAAI,CAACtX,KAAK,CAACsX,iCAAiC,GAAG,KAAK;IACpD,IAAI;MACF,OAAOwa,EAAE,CAAA,CAAE;IACb,CAAC,SAAS;MACR,IAAI,CAAC9xB,KAAK,CAACsX,iCAAiC,GAC1CisC,oCAAoC;IACxC;EACF;EAEAjG,kBAAkBA,CAACrpD,KAAgB,EAAwB;IACzD,IAAI,IAAI,CAAC0lB,KAAK,CAAC1lB,KAAK,CAAC,EAAE;MACrB,OAAO,IAAI,CAACuvD,mBAAmB,EAAE;IACnC;EACF;EAEAtE,qBAAqBA,CAACjrD,KAAgB,EAAY;IAChD,OAAO,IAAI,CAACiuD,QAAQ,CAAC,MAAM;MACzB,IAAI,CAACz8B,MAAM,CAACxxB,KAAK,CAAC;MAClB,OAAO,IAAI,CAACmrD,WAAW,EAAE;IAC3B,CAAC,CAAC;EACJ;EAEAoE,mBAAmBA,CAAAA,EAAa;IAC9B,OAAO,IAAI,CAACtB,QAAQ,CAAC,MAAM;MACzB,IAAI,CAACpyC,IAAI,CAAA,CAAE;MACX,OAAO,IAAI,CAACsvC,WAAW,EAAE;IAC3B,CAAC,CAAC;EACJ;EAEAqE,iBAAiBA,CAAAA,EAAmB;IAClC,MAAM77D,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAkB;IAE7C3V,IAAI,CAACgV,EAAE,GAAG,IAAI,CAAC+c,KAAK,CAAU,GAAA,CAAC,GAC3B,KAAK,CAAClf,kBAAkB,CAAC,IAAI,CAACuF,KAAK,CAACpL,KAAK,CAAC,GAC1C,IAAI,CAACo5B,eAAe,CAAe,IAAI,CAAC;IAC5C,IAAI,IAAI,CAAC3R,GAAG,CAAA,EAAM,CAAC,EAAE;MACnBz0B,IAAI,CAAC87D,WAAW,GAAG,KAAK,CAAC7sB,uBAAuB,EAAE;IACpD;IACA,OAAO,IAAI,CAACn5B,UAAU,CAAC9V,IAAI,EAAE,cAAc,CAAC;EAC9C;EAEA+7D,sBAAsBA,CACpB/7D,IAAiC,EACjCstB,UAGC,GAAG,EAAE,EACe;IACrB,IAAIA,UAAU,CAACqX,KAAK,EAAE3kC,IAAI,CAAC2kC,KAAK,GAAG,IAAI;IACvC,IAAIrX,UAAU,CAAC+b,OAAO,EAAErpC,IAAI,CAACqpC,OAAO,GAAG,IAAI;IAC3C,IAAI,CAAC/L,gBAAgB,CAAA,GAAS,CAAC;IAC/Bt9B,IAAI,CAACgV,EAAE,GAAG,IAAI,CAACoxB,eAAe,EAAE;IAChC,IAAI,CAACknB,eAAe,CAClBttD,IAAI,CAACgV,EAAE,EACPhV,IAAI,CAAC2kC,KAAK,cACZ,CAAC;IAIM;MACL,IAAI,CAAC9G,MAAM,CAAA,CAAU,CAAC;MACtB79B,IAAI,CAACutB,OAAO,GAAG,IAAI,CAACwmC,oBAAoB,CACtC,aAAa,EACb,IAAI,CAAC8H,iBAAiB,CAACxJ,IAAI,CAAC,IAAI,CAClC,CAAC;MACD,IAAI,CAACx0B,MAAM,CAAA,CAAU,CAAC;IACxB;IACA,OAAO,IAAI,CAAC/nB,UAAU,CAAC9V,IAAI,EAAE,mBAAmB,CAAC;EACnD;EAEAg8D,eAAeA,CAAAA,EAAiB;IAC9B,MAAMh8D,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAgB;IAC3C,IAAI,CAACkoB,MAAM,CAAA,CAAU,CAAC;IACtB79B,IAAI,CAACutB,OAAO,GAAG,IAAI,CAACwmC,oBAAoB,CACtC,aAAa,EACb,IAAI,CAAC8H,iBAAiB,CAACxJ,IAAI,CAAC,IAAI,CAClC,CAAC;IACD,IAAI,CAACx0B,MAAM,CAAA,CAAU,CAAC;IACtB,OAAO,IAAI,CAAC/nB,UAAU,CAAC9V,IAAI,EAAE,YAAY,CAAC;EAC5C;EAEAi8D,kBAAkBA,CAAAA,EAAoB;IACpC,MAAMj8D,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAmB;IAC9C,IAAI,CAACkU,KAAK,CAACF,KAAK,EAAgB,CAAC;IAEjC,IAAI,CAACkU,MAAM,CAAA,CAAU,CAAC;IAEtB,KAAK,CAACq+B,2BAA2B,CAC9Bl8D,IAAI,CAAC0U,IAAI,GAAG,EAAE,EACE7E,SAAS,EACX,IAAI,GAErB,CAAC;IACD,IAAI,CAACga,KAAK,CAACD,IAAI,EAAE;IACjB,OAAO,IAAI,CAAC9T,UAAU,CAAC9V,IAAI,EAAE,eAAe,CAAC;EAC/C;EAEAm8D,mCAAmCA,CACjCn8D,IAAmC,EACnCo8D,MAAe,GAAG,KAAK,EACA;IACvBp8D,IAAI,CAACgV,EAAE,GAEH,IAAI,CAACoxB,eAAe,EAAE;IAE1B,IACiE,CAACg2B,MAAM,EACtE;MAEA,IAAI,CAAC9O,eAAe,CAACttD,IAAI,CAACgV,EAAE,MAA+B,CAAC;IAC9D;IAEA,IAAqC,IAAI,CAACyf,GAAG,CAAA,EAAO,CAAC,EAAE;MACrD,MAAM4nC,KAAK,GAAG,IAAI,CAAC1mD,SAAS,EAAyB;MACrD,IAAI,CAACwmD,mCAAmC,CAACE,KAAK,EAAE,IAAI,CAAC;MAErDr8D,IAAI,CAAC0U,IAAI,GAAG2nD,KAAK;IACnB,CAAC,MAAM;MACL,IAAI,CAACxyC,KAAK,CAACF,KAAK,IAAoB,CAAC;MACrC,IAAI,CAAC2V,SAAS,CAAC3V,KAAK,EAAgB,CAAC;MACrC3pB,IAAI,CAAC0U,IAAI,GAAG,IAAI,CAACunD,kBAAkB,EAAE;MACrC,IAAI,CAAC38B,SAAS,CAAC1V,IAAI,EAAE;MACrB,IAAI,CAACC,KAAK,CAACD,IAAI,EAAE;IACnB;IACA,OAAO,IAAI,CAAC9T,UAAU,CAAC9V,IAAI,EAAE,qBAAqB,CAAC;EACrD;EAEAs8D,uCAAuCA,CACrCt8D,IAA2B,EACJ;IACvB,IAAI,IAAI,CAAC+8B,YAAY,CAAA,GAAW,CAAC,EAAE;MACjC/8B,IAAI,CAACK,IAAI,GAAG,QAAQ;MACe;QACjCL,IAAI,CAACu8D,MAAM,GAAG,IAAI;MACpB;MACAv8D,IAAI,CAACgV,EAAE,GAAG,IAAI,CAACoxB,eAAe,EAAE;IACjC,CAAA,MAAM,IAAI,IAAI,CAACrU,KAAK,CAAA,GAAU,CAAC,EAAE;MAChC/xB,IAAI,CAACK,IAAI,GAAG,QAAQ;MACpBL,IAAI,CAACgV,EAAE,GAAG,KAAK,CAACnC,kBAAkB,CAAC,IAAI,CAACuF,KAAK,CAACpL,KAAK,CAAC;IACtD,CAAC,MAAM;MACL,IAAI,CAAC9H,UAAU,CAAA,CAAE;IACnB;IACA,IAAI,IAAI,CAAC6sB,KAAK,CAAA,CAAU,CAAC,EAAE;MACzB,IAAI,CAAClI,KAAK,CAACF,KAAK,IAAoB,CAAC;MACrC,IAAI,CAAC2V,SAAS,CAAC3V,KAAK,EAAgB,CAAC;MACrC3pB,IAAI,CAAC0U,IAAI,GAAG,IAAI,CAACunD,kBAAkB,EAAE;MACrC,IAAI,CAAC38B,SAAS,CAAC1V,IAAI,EAAE;MACrB,IAAI,CAACC,KAAK,CAACD,IAAI,EAAE;IACnB,CAAC,MAAM;MACL,IAAI,CAAC+T,SAAS,CAAA,CAAE;IAClB;IAEA,OAAO,IAAI,CAAC7nB,UAAU,CAAC9V,IAAI,EAAE,qBAAqB,CAAC;EACrD;EAEAw8D,8BAA8BA,CAC5Bx8D,IAAyC,EACzCy8D,sBAA4C,EAC5C1pB,QAAkB,EACW;IAC7B/yC,IAAI,CAAC+yC,QAAQ,GAAGA,QAAQ,IAAI,KAAK;IACjC/yC,IAAI,CAACgV,EAAE,GAAGynD,sBAAsB,IAAI,IAAI,CAACr2B,eAAe,CAAA,CAAE;IAC1D,IAAI,CAACknB,eAAe,CAACttD,IAAI,CAACgV,EAAE,MAAkC,CAAC;IAC/D,IAAI,CAAC6oB,MAAM,CAAA,EAAM,CAAC;IAClB,MAAM6+B,eAAe,GAAG,IAAI,CAACC,sBAAsB,EAAE;IACrD,IACE38D,IAAI,CAACykC,UAAU,KAAK,MAAM,IAC1Bi4B,eAAe,CAACz8D,IAAI,KAAK,2BAA2B,EACpD;MACA,IAAI,CAACsX,KAAK,CAAC22C,QAAQ,CAACmB,wBAAwB,EAAEqN,eAAe,CAAC;IAChE;IACA18D,IAAI,CAAC08D,eAAe,GAAGA,eAAe;IACtC,IAAI,CAAC/+B,SAAS,CAAA,CAAE;IAChB,OAAO,IAAI,CAAC7nB,UAAU,CAAC9V,IAAI,EAAE,2BAA2B,CAAC;EAC3D;EAEA48D,2BAA2BA,CAAAA,EAAY;IACrC,OACE,IAAI,CAAC7/B,YAAY,CAAY,GAAA,CAAC,IAC9B,IAAI,CAAC7H,iBAAiB,CAAE,CAAA,KAA8B,EAAA;EAE1D;EAEAynC,sBAAsBA,CAAAA,EAAwB;IAC5C,OAAO,IAAI,CAACC,2BAA2B,CAAA,CAAE,GACrC,IAAI,CAACC,8BAA8B,CAAA,CAAE,GACrC,IAAI,CAACpI,iBAAiB,CAA0B,KAAK,CAAC;EAC5D;EAEAoI,8BAA8BA,CAAAA,EAAgC;IAC5D,MAAM78D,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAA+B;IAC1D,IAAI,CAAC2nB,gBAAgB,CAAA,GAAY,CAAC;IAClC,IAAI,CAACO,MAAM,CAAA,EAAU,CAAC;IACtB,IAAI,CAAC,IAAI,CAAC9L,KAAK,CAAA,GAAU,CAAC,EAAE;MAC1B,IAAI,CAAC7sB,UAAU,CAAA,CAAE;IACnB;IAEAlF,IAAI,CAACmT,UAAU,GAAG,KAAK,CAACo0B,aAAa,EAAqB;IAC1D,IAAI,CAAC1J,MAAM,CAAA,EAAU,CAAC;IACtB,IAAI,CAAClT,iBAAiB,GAAG,IAAI;IAC7B,OAAO,IAAI,CAAC7U,UAAU,CAAC9V,IAAI,EAAE,2BAA2B,CAAC;EAC3D;EAIAy2D,WAAWA,CAAIqG,CAAU,EAAK;IAC5B,MAAM1kD,KAAK,GAAG,IAAI,CAACA,KAAK,CAAC9J,KAAK,CAAA,CAAE;IAChC,MAAM8iB,GAAG,GAAG0rC,CAAC,EAAE;IACf,IAAI,CAAC1kD,KAAK,GAAGA,KAAK;IAClB,OAAOgZ,GAAG;EACZ;EAEA2rC,kBAAkBA,CAChBD,CAAU,EACY;IACtB,MAAMptB,MAAM,GAAG,IAAI,CAAC5R,QAAQ,CAC1B0W,KAAK,IAEHsoB,CAAC,CAAE,CAAA,IAAItoB,KAAK,CAAA,CAChB,CAAC;IAED,IAAI9E,MAAM,CAACtR,OAAO,IAAI,CAACsR,MAAM,CAAC1vC,IAAI,EAAE;IACpC,IAAI0vC,MAAM,CAACvhC,KAAK,EAAE,IAAI,CAACiK,KAAK,GAAGs3B,MAAM,CAACxR,SAAS;IAE/C,OAAOwR,MAAM,CAAC1vC,IAAI;EACpB;EAEAkzD,UAAUA,CAAI4J,CAA8B,EAAiB;IAC3D,MAAM1kD,KAAK,GAAG,IAAI,CAACA,KAAK,CAAC9J,KAAK,CAAA,CAAE;IAChC,MAAMohC,MAAM,GAAGotB,CAAC,EAAE;IAClB,IAAIptB,MAAM,KAAK7/B,SAAS,IAAI6/B,MAAM,KAAK,KAAK,EAAE;MAC5C,OAAOA,MAAM;IACf;IACA,IAAI,CAACt3B,KAAK,GAAGA,KAAK;EACpB;EAEA4kD,iBAAiBA,CAACC,IAAS,EAA6B;IACtD,IAAI,IAAI,CAACv/B,gBAAgB,EAAE,EAAE;MAC3B;IACF;IACA,IAAIw/B,SAAS,GAAG,IAAI,CAAC9kD,KAAK,CAACnY,IAAI;IAC/B,IAAII,IAAkB;IAEtB,IAAI,IAAI,CAAC08B,YAAY,CAAA,GAAQ,CAAC,EAAE;MAC9BmgC,SAAS,GAAU,EAAA;MACnB78D,IAAI,GAAG,KAAK;IACd;IAGA,OAAO,IAAI,CAAC88D,kBAAkB,CAAC,MAAM;MACnC,QAAQD,SAAS;QACf,KAAA,EAAA;UACED,IAAI,CAAC5zB,OAAO,GAAG,IAAI;UACnB,OAAO,KAAK,CAAC+zB,sBAAsB,CACjCH,IAAI,EACQ,KAAK,EACU,KAC7B,CAAC;QACH,KAAA,EAAA;UAGEA,IAAI,CAAC5zB,OAAO,GAAG,IAAI;UACnB,OAAO,IAAI,CAACg0B,UAAU,CACpBJ,IAAI,EACc,IAAI,EACL,KACnB,CAAC;QACH,KAAA,GAAA;UACE,OAAO,IAAI,CAAClB,sBAAsB,CAACkB,IAAI,EAAE;YAAE5zB,OAAO,EAAE;UAAK,CAAC,CAAC;QAC7D,KAAA,GAAA;UACE,OAAO,IAAI,CAACizB,uCAAuC,CAACW,IAAI,CAAC;QAC3D,KAAA,EAAA;QACA,KAAA,EAAA;UACE,IAAI,CAAC,IAAI,CAAClrC,KAAK,GAAU,CAAC,IAAI,CAAC,IAAI,CAACqL,qBAAqB,CAAC,MAAM,CAAC,EAAE;YACjE6/B,IAAI,CAAC5zB,OAAO,GAAG,IAAI;YACnB,OAAO,IAAI,CAACi0B,iBAAiB,CAC3BL,IAAI,EACJ58D,IAAI,IAAI,IAAI,CAAC+X,KAAK,CAACpL,KAAK,EACxB,IACF,CAAC;UACH;UAGA,IAAI,CAAC6wB,MAAM,CAAA,EAAU,CAAC;UACtB,OAAO,IAAI,CAACk+B,sBAAsB,CAACkB,IAAI,EAAE;YACvCt4B,KAAK,EAAE,IAAI;YACX0E,OAAO,EAAE;UACX,CAAC,CAAC;QACJ,KAAA,GAAA;UAAoB;YAClB,MAAMqG,MAAM,GAAG,IAAI,CAAC8rB,2BAA2B,CAACyB,IAAI,EAAE;cACpD5zB,OAAO,EAAE;YACX,CAAC,CAAC;YACF,IAAIqG,MAAM,EAAE,OAAOA,MAAM;UAC3B;QAEA;UACE,IAAI1qB,iBAAiB,CAACk4C,SAAS,CAAC,EAAE;YAChC,OAAO,IAAI,CAACK,kBAAkB,CAC5BN,IAAI,EACJ,IAAI,CAAC7kD,KAAK,CAACpL,KAAK,EACL,IAAI,EACE,IACnB,CAAC;UACH;MACJ;IACF,CAAC,CAAC;EACJ;EAGAwwD,2BAA2BA,CAAAA,EAA8B;IACvD,OAAO,IAAI,CAACD,kBAAkB,CAC5B,IAAI,CAAC5nD,SAAS,CAAE,CAAA,EAChB,IAAI,CAACyC,KAAK,CAACpL,KAAK,EACL,IAAI,EACE,IACnB,CAAC;EACH;EAEAywD,0BAA0BA,CACxBz9D,IAAmC,EACnCmuC,IAAkB,EAClBj2B,UAAgC,EACL;IAC3B,QAAQi2B,IAAI,CAAChoC,IAAI;MACf,KAAK,SAAS;QAAE;UACd,MAAMuS,WAAW,GAAG,IAAI,CAACskD,iBAAiB,CAACh9D,IAAI,CAAC;UAChD,IAAI0Y,WAAW,EAAE;YACfA,WAAW,CAAC2wB,OAAO,GAAG,IAAI;UAC5B;UACA,OAAO3wB,WAAW;QACpB;MACA,KAAK,QAAQ;QAGX,IAAI,IAAI,CAACqZ,KAAK,CAAA,CAAU,CAAC,EAAE;UACzB,IAAI,CAAClI,KAAK,CAACF,KAAK,IAAoB,CAAC;UACrC,IAAI,CAAC2V,SAAS,CAAC3V,KAAK,EAAgB,CAAC;UACrC,MAAM+zC,GAAG,GAAG19D,IAAI;UAChB09D,GAAG,CAACr9D,IAAI,GAAG,QAAQ;UACgB;YACjCL,IAAI,CAACu8D,MAAM,GAAG,IAAI;UACpB;UACAmB,GAAG,CAAC1oD,EAAE,GAAGm5B,IAAI;UACbuvB,GAAG,CAAChpD,IAAI,GAAG,IAAI,CAACunD,kBAAkB,EAAE;UACpC,IAAI,CAACpyC,KAAK,CAACD,IAAI,EAAE;UACjB,IAAI,CAAC0V,SAAS,CAAC1V,IAAI,EAAE;UACrB,OAAO,IAAI,CAAC9T,UAAU,CAAC4nD,GAAG,EAAE,qBAAqB,CAAC;QACpD;QACA;MAEF;QACE,OAAO,IAAI,CAACH,kBAAkB,CAC5Bv9D,IAAI,EACJmuC,IAAI,CAAChoC,IAAI,EACE,KAAK,EAChB+R,UACF,CAAC;IACL;EACF;EAGAqlD,kBAAkBA,CAChBv9D,IAAS,EACTgN,KAAa,EACbkb,IAAa,EACbhQ,UAAgC,EACE;IAElC,QAAQlL,KAAK;MACX,KAAK,UAAU;QACb,IACE,IAAI,CAAC2wD,qBAAqB,CAACz1C,IAAI,CAAC,KAC/B,IAAI,CAAC6J,KAAK,CAAA,EAAU,CAAC,IAAI/M,iBAAiB,CAAC,IAAI,CAAC5M,KAAK,CAACnY,IAAI,CAAC,CAAC,EAC7D;UACA,OAAO,IAAI,CAAC29D,0BAA0B,CAAC59D,IAAI,EAAEkY,UAAU,CAAC;QAC1D;QACA;MAEF,KAAK,QAAQ;QACX,IAAI,IAAI,CAACylD,qBAAqB,CAACz1C,IAAI,CAAC,EAAE;UACpC,IAAI,IAAI,CAAC6J,KAAK,CAAA,GAAU,CAAC,EAAE;YACzB,OAAO,IAAI,CAACuqC,uCAAuC,CAACt8D,IAAI,CAAC;UAC1D,CAAA,MAAM,IAAIglB,iBAAiB,CAAC,IAAI,CAAC5M,KAAK,CAACnY,IAAI,CAAC,EAAE;YAC7CD,IAAI,CAACK,IAAI,GAAG,QAAQ;YACpB,OAAO,IAAI,CAAC87D,mCAAmC,CAACn8D,IAAI,CAAC;UACvD;QACF;QACA;MAEF,KAAK,WAAW;QACd,IACE,IAAI,CAAC29D,qBAAqB,CAACz1C,IAAI,CAAC,IAChClD,iBAAiB,CAAC,IAAI,CAAC5M,KAAK,CAACnY,IAAI,CAAC,EAClC;UACAD,IAAI,CAACK,IAAI,GAAG,WAAW;UACvB,OAAO,IAAI,CAAC87D,mCAAmC,CAACn8D,IAAI,CAAC;QACvD;QACA;MAEF,KAAK,MAAM;QACT,IACE,IAAI,CAAC29D,qBAAqB,CAACz1C,IAAI,CAAC,IAChClD,iBAAiB,CAAC,IAAI,CAAC5M,KAAK,CAACnY,IAAI,CAAC,EAClC;UACA,OAAO,IAAI,CAACw7D,2BAA2B,CAACz7D,IAAI,CAAC;QAC/C;QACA;IACJ;EACF;EAEA29D,qBAAqBA,CAACz1C,IAAa,EAAE;IACnC,IAAIA,IAAI,EAAE;MACR,IAAI,IAAI,CAACuV,qBAAqB,EAAE,EAAE,OAAO,KAAK;MAC9C,IAAI,CAACvV,IAAI,CAAA,CAAE;MACX,OAAO,IAAI;IACb;IACA,OAAO,CAAC,IAAI,CAACwV,gBAAgB,EAAE;EACjC;EAEAmgC,mCAAmCA,CACjCnnD,QAAkB,EACqB;IACvC,IAAI,CAAC,IAAI,CAACqb,KAAK,CAAA,EAAM,CAAC,EAAE;IAExB,MAAM+rC,yBAAyB,GAAG,IAAI,CAAC1lD,KAAK,CAACgX,sBAAsB;IACnE,IAAI,CAAChX,KAAK,CAACgX,sBAAsB,GAAG,IAAI;IAExC,MAAMgC,GAAkD,GACtD,IAAI,CAAC2rC,kBAAkB,CAAC,MAAM;MAC5B,MAAM/8D,IAAI,GAAG,IAAI,CAAC0gC,WAAW,CAA4BhqB,QAAQ,CAAC;MAClE1W,IAAI,CAAC4V,cAAc,GAAG,IAAI,CAACggD,qBAAqB,CAC9C,IAAI,CAACnD,oBACP,CAAC;MAED,KAAK,CAAC7e,mBAAmB,CAAC5zC,IAAI,CAAC;MAC/BA,IAAI,CAAC2mC,UAAU,GAAG,IAAI,CAACi0B,uCAAuC,EAAE;MAChE,IAAI,CAAC/8B,MAAM,CAAA,EAAS,CAAC;MACrB,OAAO79B,IAAI;IACb,CAAC,CAAC;IAEJ,IAAI,CAACoY,KAAK,CAACgX,sBAAsB,GAAG0uC,yBAAyB;IAE7D,IAAI,CAAC1sC,GAAG,EAAE;IAEV,OAAO,KAAK,CAACykB,oBAAoB,CAC/BzkB,GAAG,EAC0B,IAAI,EACrB,IACd,CAAC;EACH;EAIA2sC,gCAAgCA,CAAAA,EAElB;IACZ,IAAI,IAAI,CAAC1zB,SAAS,EAAE,OAAU,EAAE;IAChC,OAAO,IAAI,CAACqqB,oBAAoB,EAAE;EACpC;EAEAA,oBAAoBA,CAAAA,EAAmC;IACrD,MAAM10D,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAkC;IAC7D3V,IAAI,CAAC+T,MAAM,GAAG,IAAI,CAACumD,QAAQ,CAAC,MAC1B,IAAI,CAACoB,mBAAmB,CAAC,MAAM;MAC7B,IAAI,CAAC79B,MAAM,CAAA,EAAM,CAAC;MAClB,OAAO,IAAI,CAACk2B,oBAAoB,CAC9B,2BAA2B,EAC3B,IAAI,CAACyD,WAAW,CAACnF,IAAI,CAAC,IAAI,CAC5B,CAAC;IACF,CAAA,CACH,CAAC;IACD,IAAIryD,IAAI,CAAC+T,MAAM,CAACyE,MAAM,KAAK,CAAC,EAAE;MAC5B,IAAI,CAACjB,KAAK,CAAC22C,QAAQ,CAACgB,kBAAkB,EAAElvD,IAAI,CAAC;IAC/C,CAAC,MAAM,IAAI,CAAC,IAAI,CAACoY,KAAK,CAACiX,MAAM,IAAI,IAAI,CAACsF,UAAU,CAAA,CAAE,KAAKrO,KAAE,CAACxM,KAAK,EAAE;MAG/D,IAAI,CAACywB,YAAY,CAAA,CAAE;IACrB;IACA,IAAI,CAAC1M,MAAM,CAAA,EAAM,CAAC;IAClB,OAAO,IAAI,CAAC/nB,UAAU,CAAC9V,IAAI,EAAE,8BAA8B,CAAC;EAC9D;EAEAg+D,oBAAoBA,CAAAA,EAAY;IAC9B,OAAOl4C,yBAAyB,CAAC,IAAI,CAAC1N,KAAK,CAACnY,IAAI,CAAC;EACnD;EAMAouC,wBAAwBA,CAAAA,EAAY;IAClC,IAAI,IAAI,CAAC2vB,oBAAoB,EAAE,EAAE,OAAO,KAAK;IAC7C,OAAO,KAAK,CAAC3vB,wBAAwB,EAAE;EACzC;EAEAwe,uBAAuBA,CACrB96C,KAA4B,EAC5BmG,UAAyB,EACU;IAEnC,MAAMxB,QAAQ,GAAG,IAAI,CAAC0B,KAAK,CAAC1B,QAAQ;IAEpC,MAAMy8C,QAAsB,GAAG,CAAA,CAAE;IACjC,IAAI,CAACf,gBAAgB,CACnB;MACEE,gBAAgB,EAAE,CAChB,QAAQ,EACR,SAAS,EACT,WAAW,EACX,UAAU,EACV,UAAU;IAEb,CAAA,EACDa,QACF,CAAC;IACD,MAAMO,aAAa,GAAGP,QAAQ,CAACO,aAAa;IAC5C,MAAMuK,QAAQ,GAAG9K,QAAQ,CAAC8K,QAAQ;IAClC,MAAMpH,QAAQ,GAAG1D,QAAQ,CAAC0D,QAAQ;IAClC,IACE,EAAE9kD,KAAK,IAA8C,CAAC,KACrD2hD,aAAa,IAAImD,QAAQ,IAAIoH,QAAQ,CAAC,EACvC;MACA,IAAI,CAAC1mD,KAAK,CAAC22C,QAAQ,CAACqD,2BAA2B,EAAE76C,QAAQ,CAAC;IAC5D;IAEA,MAAMq6B,IAAI,GAAG,IAAI,CAACwB,iBAAiB,EAAE;IACrC,IAAIxgC,KAAK,IAA2C,EAAE;MACpD,IAAI,CAACugC,sBAAsB,CAACvB,IAAI,CAAC;IACnC;IACA,MAAMib,GAAG,GAAG,IAAI,CAACzZ,iBAAiB,CAACxB,IAAI,CAAC9iC,GAAG,CAACrQ,KAAK,EAAEmzC,IAAI,CAAC;IACxD,IAAI2iB,aAAa,IAAImD,QAAQ,IAAIoH,QAAQ,EAAE;MACzC,MAAMC,EAAE,GAAG,IAAI,CAACx9B,WAAW,CAAwBhqB,QAAQ,CAAC;MAC5D,IAAIwB,UAAU,CAACM,MAAM,EAAE;QACrB0lD,EAAE,CAAChmD,UAAU,GAAGA,UAAU;MAC5B;MACA,IAAIw7C,aAAa,EAAEwK,EAAE,CAACxK,aAAa,GAAGA,aAAa;MACnD,IAAImD,QAAQ,EAAEqH,EAAE,CAACrH,QAAQ,GAAGA,QAAQ;MACpC,IAAIoH,QAAQ,EAAEC,EAAE,CAACD,QAAQ,GAAGA,QAAQ;MACpC,IAAIjS,GAAG,CAAC/rD,IAAI,KAAK,YAAY,IAAI+rD,GAAG,CAAC/rD,IAAI,KAAK,mBAAmB,EAAE;QACjE,IAAI,CAACsX,KAAK,CAAC22C,QAAQ,CAAC0D,gCAAgC,EAAEsM,EAAE,CAAC;MAC3D;MACAA,EAAE,CAACC,SAAS,GAAGnS,GAAgD;MAC/D,OAAO,IAAI,CAACl2C,UAAU,CAACooD,EAAE,EAAE,qBAAqB,CAAC;IACnD;IAEA,IAAIhmD,UAAU,CAACM,MAAM,EAAE;MACrBu4B,IAAI,CAAC74B,UAAU,GAAGA,UAAU;IAC9B;IAEA,OAAO8zC,GAAG;EACZ;EAEAoS,iBAAiBA,CAACp+D,IAAuC,EAAW;IAClE,OACGA,IAAI,CAACC,IAAI,KAAK,qBAAqB,IAClC,KAAK,CAACm+D,iBAAiB,CAACp+D,IAAI,CAACm+D,SAAS,CAAC,IACzC,KAAK,CAACC,iBAAiB,CAACp+D,IAAI,CAAC;EAEjC;EAEAq+D,yBAAyBA,CAACr+D,IAAwB,EAAE;IAClD,KAAK,MAAMwtC,KAAK,IAAIxtC,IAAI,CAAC+T,MAAM,EAAE;MAC/B,IACEy5B,KAAK,CAACvtC,IAAI,KAAK,YAAY,IAC1ButC,KAAK,CAAS91B,QAAQ,IACvB,CAAC,IAAI,CAACU,KAAK,CAACoX,gBAAgB,EAC5B;QACA,IAAI,CAACjY,KAAK,CAAC22C,QAAQ,CAAClrB,iBAAiB,EAAEwK,KAAK,CAAC;MAC/C;IACF;EACF;EAEAuH,0BAA0BA,CACxB/0C,IAAuC,EACvC+T,MAAsB,EACtBy7B,gBAAkC,EAC5B;IACN,KAAK,CAACuF,0BAA0B,CAAC/0C,IAAI,EAAE+T,MAAM,EAAEy7B,gBAAgB,CAAC;IAChE,IAAI,CAAC6uB,yBAAyB,CAACr+D,IAAI,CAAC;EACtC;EAEA+tC,0BAA0BA,CAMxB/tC,IAAe,EAAEC,IAAe,EAAEmV,QAAiB,GAAG,KAAK,EAAK;IAChE,IAAI,IAAI,CAAC2c,KAAK,CAAA,EAAS,CAAC,EAAE;MACxB/xB,IAAI,CAAC2mC,UAAU,GAAG,IAAI,CAACyvB,oCAAoC,GAAS,CAAC;IACvE;IAEA,MAAMkI,YAAY,GAChBr+D,IAAI,KAAK,qBAAqB,GAC1B,mBAAmB,GACnBA,IAAI,KAAK,aAAa,IAAIA,IAAI,KAAK,oBAAoB,GACrD,iBAAiB,GACjB4P,SAAS;IACjB,IAAIyuD,YAAY,IAAI,CAAC,IAAI,CAACvsC,KAAK,CAAA,CAAU,CAAC,IAAI,IAAI,CAAC2L,gBAAgB,EAAE,EAAE;MACrE,OAAO,IAAI,CAAC5nB,UAAU,CAAC9V,IAAI,EAAEs+D,YAAY,CAAC;IAC5C;IACA,IAAIA,YAAY,KAAK,mBAAmB,IAAI,IAAI,CAAClmD,KAAK,CAACoX,gBAAgB,EAAE;MACvE,IAAI,CAACjY,KAAK,CAAC22C,QAAQ,CAACW,gCAAgC,EAAE7uD,IAAI,CAAC;MAC3D,IAAKA,IAAI,CAAmCqpC,OAAO,EAAE;QACnD,OAAO,KAAK,CAAC0E,0BAA0B,CAAC/tC,IAAI,EAAEs+D,YAAY,EAAElpD,QAAQ,CAAC;MACvE;IACF;IACA,IAAI,CAACipD,yBAAyB,CAACr+D,IAAI,CAAC;IAEpC,OAAO,KAAK,CAAC+tC,0BAA0B,CAAC/tC,IAAI,EAAEC,IAAI,EAAEmV,QAAQ,CAAC;EAC/D;EAEAmpD,2BAA2BA,CAACv+D,IAAgB,EAAQ;IAClD,IAAI,CAACA,IAAI,CAAC0U,IAAI,IAAI1U,IAAI,CAACgV,EAAE,EAAE;MAGzB,IAAI,CAACs4C,eAAe,CAACttD,IAAI,CAACgV,EAAE,MAA6B,CAAC;IAC5D,CAAC,MAAM;MACL,KAAK,CAACupD,2BAA2B,CAACv+D,IAAI,CAAC;IACzC;EACF;EAEAw+D,0BAA0BA,CAACC,KAA4C,EAAE;IACvEA,KAAK,CAAC/oC,OAAO,CAAC11B,IAAI,IAAI;MACpB,IAAI,CAAAA,IAAI,IAAJA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,IAAI,CAAEC,IAAI,MAAK,sBAAsB,EAAE;QACzC,IAAI,CAACsX,KAAK,CAAC22C,QAAQ,CAACuD,wBAAwB,EAAEzxD,IAAI,CAAC4mC,cAAc,CAAC;MACpE;IACF,CAAC,CAAC;EACJ;EAEAqK,gBAAgBA,CACdD,QAAgD,EAEhD0tB,UAAoB,EACoB;IAKxC,IAAI,CAACF,0BAA0B,CAACxtB,QAAQ,CAAC;IACzC,OAAOA,QAAQ;EACjB;EAEAI,cAAcA,CACZC,KAAgB,EAChBC,YAAqB,EACrBC,OAAgB,EAChB56B,mBAA6C,EACN;IACvC,MAAM3W,IAAI,GAAG,KAAK,CAACoxC,cAAc,CAC/BC,KAAK,EACLC,YAAY,EACZC,OAAO,EACP56B,mBACF,CAAC;IAED,IAAI3W,IAAI,CAACC,IAAI,KAAK,iBAAiB,EAAE;MACnC,IAAI,CAACu+D,0BAA0B,CAACx+D,IAAI,CAACisB,QAAQ,CAAC;IAChD;IAEA,OAAOjsB,IAAI;EACb;EAEA4Y,cAAcA,CACZC,IAAkB,EAElBnC,QAAkB,EAClBoC,OAAmC,EACnCV,KAA4B,EACd;IACd,IAAI,CAAC,IAAI,CAAColB,qBAAqB,CAAA,CAAE,IAAI,IAAI,CAACzL,KAAK,CAAQ,EAAA,CAAC,EAAE;MAIxD,IAAI,CAAC3Z,KAAK,CAACyX,kBAAkB,GAAG,KAAK;MACrC,IAAI,CAAC3H,IAAI,CAAA,CAAE;MAEX,MAAMy2C,iBAAiB,GACrB,IAAI,CAACj+B,WAAW,CAAwBhqB,QAAQ,CAAC;MACnDioD,iBAAiB,CAACxrD,UAAU,GAAG0F,IAAI;MACnC,OAAO,IAAI,CAAC/C,UAAU,CAAC6oD,iBAAiB,EAAE,qBAAqB,CAAC;IAClE;IAEA,IAAIC,cAAc,GAAG,KAAK;IAC1B,IACE,IAAI,CAAC7sC,KAAK,CAAA,EAAe,CAAC,IAC1B,IAAI,CAACmD,iBAAiB,CAAE,CAAA,KAAA,EAAuB,EAC/C;MACA,IAAIpc,OAAO,EAAE;QACXV,KAAK,CAACa,IAAI,GAAG,IAAI;QACjB,OAAOJ,IAAI;MACb;MACAT,KAAK,CAACW,mBAAmB,GAAG6lD,cAAc,GAAG,IAAI;MACjD,IAAI,CAAC12C,IAAI,CAAA,CAAE;IACb;IAGA,IAAI,IAAI,CAAC6J,KAAK,CAAM,EAAA,CAAC,IAAI,IAAI,CAACA,KAAK,CAAa,EAAA,CAAC,EAAE;MACjD,IAAI8sC,oBAAoB;MAIxB,MAAMnvB,MAAM,GAAG,IAAI,CAACqtB,kBAAkB,CAAC,MAAM;QAC3C,IAAI,CAACjkD,OAAO,IAAI,IAAI,CAACgmD,oBAAoB,CAACjmD,IAAI,CAAC,EAAE;UAG/C,MAAMkmD,YAAY,GAChB,IAAI,CAAClB,mCAAmC,CAACnnD,QAAQ,CAAC;UACpD,IAAIqoD,YAAY,EAAE;YAChB,OAAOA,YAAY;UACrB;QACF;QAEA,MAAMrpB,aAAa,GAAG,IAAI,CAACqoB,gCAAgC,EAAE;QAC7D,IAAI,CAACroB,aAAa,EAAE;QAEpB,IAAIkpB,cAAc,IAAI,CAAC,IAAI,CAAC7sC,KAAK,CAAA,EAAU,CAAC,EAAE;UAC5C8sC,oBAAoB,GAAG,IAAI,CAACzmD,KAAK,CAAC4X,WAAW,EAAE;UAC/C;QACF;QAEA,IAAI9J,eAAe,CAAC,IAAI,CAAC9N,KAAK,CAACnY,IAAI,CAAC,EAAE;UACpC,MAAMyvC,MAAM,GAAG,KAAK,CAACsvB,6BAA6B,CAChDnmD,IAAI,EACJnC,QAAQ,EACR0B,KACF,CAAC;UAGM;YACLs3B,MAAM,CAAC95B,cAAc,GAAG8/B,aAAa;UACvC;UACA,OAAOhG,MAAM;QACf;QAEA,IAAI,CAAC52B,OAAO,IAAI,IAAI,CAAC2b,GAAG,CAAA,EAAU,CAAC,EAAE;UACnC,MAAMz0B,IAAI,GAAG,IAAI,CAAC0gC,WAAW,CAE3BhqB,QAAQ,CAAC;UACX1W,IAAI,CAAC2X,MAAM,GAAGkB,IAAI;UAElB7Y,IAAI,CAAC8X,SAAS,GAAG,IAAI,CAACw9B,4BAA4B,GAAU,CAAC;UAG7D,IAAI,CAACkpB,0BAA0B,CAACx+D,IAAI,CAAC8X,SAAS,CAAC;UAIxC;YACL9X,IAAI,CAAC4V,cAAc,GAAG8/B,aAAa;UACrC;UAEA,IAAIt9B,KAAK,CAACW,mBAAmB,EAAE;YAC5B/Y,IAAI,CAAsC0X,QAAQ,GACjDknD,cAAc;UAClB;UAEA,OAAO,IAAI,CAACpnD,oBAAoB,CAACxX,IAAI,EAAEoY,KAAK,CAACW,mBAAmB,CAAC;QACnE;QAEA,MAAMkmD,SAAS,GAAG,IAAI,CAAC7mD,KAAK,CAACnY,IAAI;QACjC,IAEEg/D,SAAS,OAAU,IAEnBA,SAAS,OAAiB,IAEzBA,SAAS,OAAc,IACtB55C,uBAAuB,CAAC45C,SAAS,CAAC,IAClC,CAAC,IAAI,CAACzhC,qBAAqB,CAAA,CAAG,EAChC;UAEA;QACF;QAEA,MAAMx9B,IAAI,GAAG,IAAI,CAAC0gC,WAAW,CAA8BhqB,QAAQ,CAAC;QACpE1W,IAAI,CAACmT,UAAU,GAAG0F,IAAI;QAGf;UACL7Y,IAAI,CAAC4V,cAAc,GAAG8/B,aAAa;QACrC;QACA,OAAO,IAAI,CAAC5/B,UAAU,CAAC9V,IAAI,EAAE,2BAA2B,CAAC;MAC3D,CAAC,CAAC;MAEF,IAAI6+D,oBAAoB,EAAE;QACxB,IAAI,CAAC35D,UAAU,CAAC25D,oBAAoB,IAAW,CAAC;MAClD;MAEA,IAAInvB,MAAM,EAAE;QACV,IACEA,MAAM,CAACzvC,IAAI,KAAK,2BAA2B,KAC1C,IAAI,CAAC8xB,KAAK,CAAA,EAAO,CAAC,IAChB,IAAI,CAACA,KAAK,CAAe,EAAA,CAAC,IACzB,IAAI,CAACmD,iBAAiB,CAAE,CAAA,KAA+B,EAAA,CAAC,EAC5D;UACA,IAAI,CAAC3d,KAAK,CACR22C,QAAQ,CAACiC,iDAAiD,EAC1D,IAAI,CAAC/3C,KAAK,CAAC1B,QACb,CAAC;QACH;QACA,OAAOg5B,MAAM;MACf;IACF;IAEA,OAAO,KAAK,CAAC92B,cAAc,CAACC,IAAI,EAAEnC,QAAQ,EAAEoC,OAAO,EAAEV,KAAK,CAAC;EAC7D;EAEAu9B,cAAcA,CAAC31C,IAAqB,EAAQ;IAAA,IAAAk/D,aAAA;IAC1C,KAAK,CAACvpB,cAAc,CAAC31C,IAAI,CAAC;IAE1B,MAAM;MAAE2X;IAAQ,CAAA,GAAG3X,IAAI;IACvB,IACE2X,MAAM,CAAC1X,IAAI,KAAK,2BAA2B,IAC3C,EAAAi/D,CAAAA,aAAA,GAACvnD,MAAM,CAACtE,KAAK,KAAA,IAAA,IAAZ6rD,aAAA,CAAchrD,aAAa,CAC5B,EAAA;MAGO;QACLlU,IAAI,CAAC4V,cAAc,GAAG+B,MAAM,CAAC/B,cAAc;MAC7C;MACA5V,IAAI,CAAC2X,MAAM,GAAGA,MAAM,CAACxE,UAAU;IACjC;EACF;EAEAgsD,WAAWA,CACTpuB,IAAkB,EAClBquB,YAAsB,EACtBC,OAAe,EACD;IACd,IAAIC,WAAoB;IACxB,IACEt5C,uBAAuB,CAAA,EAAO,CAAC,GAAGq5C,OAAO,IACzC,CAAC,IAAI,CAAC7hC,qBAAqB,EAAE,KAC5B,IAAI,CAACT,YAAY,CAAO,EAAA,CAAC,KACvBuiC,WAAW,GAAG,IAAI,CAACviC,YAAY,CAAc,GAAA,CAAC,CAAC,CAAC,EACnD;MACA,MAAM/8B,IAAI,GAAG,IAAI,CAAC0gC,WAAW,CAE3B0+B,YAAY,CAAC;MACfp/D,IAAI,CAACmT,UAAU,GAAG49B,IAAI;MACtB/wC,IAAI,CAAC4mC,cAAc,GAAG,IAAI,CAAC0zB,QAAQ,CAAC,MAAM;QACxC,IAAI,CAACpyC,IAAI,CAAA,CAAE;QACX,IAAI,IAAI,CAAC6J,KAAK,CAAA,EAAU,CAAC,EAAE;UACzB,IAAIutC,WAAW,EAAE;YACf,IAAI,CAAC/nD,KAAK,CAAC9H,MAAM,CAACtG,iBAAiB,EAAE,IAAI,CAACiP,KAAK,CAAC1B,QAAQ,EAAE;cACxDtN,OAAO,EAAE;YACX,CAAC,CAAC;UACJ;UACA,OAAO,IAAI,CAACwrD,oBAAoB,EAAE;QACpC;QAEA,OAAO,IAAI,CAAC4C,WAAW,EAAE;MAC3B,CAAC,CAAC;MACF,IAAI,CAAC1hD,UAAU,CACb9V,IAAI,EACJs/D,WAAW,GAAG,uBAAuB,GAAG,gBAC1C,CAAC;MAED,IAAI,CAAC/0B,YAAY,CAAA,CAAE;MACnB,OAAO,IAAI,CAAC40B,WAAW,CAErBn/D,IAAI,EACJo/D,YAAY,EACZC,OACF,CAAC;IACH;IAEA,OAAO,KAAK,CAACF,WAAW,CAACpuB,IAAI,EAAEquB,YAAY,EAAEC,OAAO,CAAC;EACvD;EAEA3rB,iBAAiBA,CACfjsB,IAAY,EACZ/Q,QAAkB,EAClB6oD,aAAsB,EACtBvoD,SAAkB,EACZ;IAGN,IAAI,CAAC,IAAI,CAACoB,KAAK,CAACoX,gBAAgB,EAAE;MAChC,KAAK,CAACkkB,iBAAiB,CAACjsB,IAAI,EAAE/Q,QAAQ,EAAE6oD,aAAa,EAAEvoD,SAAS,CAAC;IACnE;EACF;EAEAw7B,qBAAqBA,CAACxyC,IAAiC,EAAE;IACvD,KAAK,CAACwyC,qBAAqB,CAACxyC,IAAI,CAAC;IACjC,IAAIA,IAAI,CAACyyC,MAAM,IAAIzyC,IAAI,CAACykC,UAAU,KAAK,OAAO,EAAE;MAC9C,IAAI,CAACltB,KAAK,CACR22C,QAAQ,CAAC3rB,6BAA6B,EACtCviC,IAAI,CAACuY,UAAU,CAAC,CAAC,CAAC,CAACtK,GAAG,CAACrQ,KACzB,CAAC;IACH;EACF;EAWA4hE,qBAAqBA,CAAAA,EAAG,CAAC;EAEzB1sB,sBAAsBA,CAACC,QAAiB,EAAW;IACjD,IAAI,KAAK,CAACD,sBAAsB,CAACC,QAAQ,CAAC,EAAE,OAAO,IAAI;IACvD,IAAI,IAAI,CAAChW,YAAY,CAAA,GAAS,CAAC,EAAE;MAC/B,MAAMvM,EAAE,GAAG,IAAI,CAAC0E,iBAAiB,EAAE;MACnC,OAAO6d,QAAQ,GACXviB,EAAE,KAAA,GAA6B,IAAIA,EAAE,KAAA,EAAuB,GAC5DA,EAAE,KAAuB,EAAA;IAC/B;IACA,OAAO,CAACuiB,QAAQ,IAAI,IAAI,CAAChW,YAAY,GAAW,CAAC;EACnD;EAEAiW,gBAAgBA,CACdhzC,IAA4D,EAC5D+yC,QAAiB,EACjBvwC,KAAoB,EACpByL,GAAc,EACR;IACN,KAAK,CAAC+kC,gBAAgB,CAAChzC,IAAI,EAAE+yC,QAAQ,EAAEvwC,KAAK,EAAEyL,GAAG,CAAC;IAClD,IAAI8kC,QAAQ,EAAE;MACX/yC,IAAI,CAA8B6nC,UAAU,GAC3CrlC,KAAK,KAAK,MAAM,GAAG,MAAM,GAAG,OAAO;IACvC,CAAC,MAAM;MACJxC,IAAI,CAAyBykC,UAAU,GACtCjiC,KAAK,KAAK,MAAM,IAAIA,KAAK,KAAK,QAAQ,GAAGA,KAAK,GAAG,OAAO;IAC5D;EACF;EAEAilC,WAAWA,CACTznC,IAA+D,EAClD;IACb,IAAI,IAAI,CAAC+xB,KAAK,CAAA,GAAU,CAAC,EAAE;MACzB/xB,IAAI,CAACykC,UAAU,GAAG,OAAO;MACzB,OAAO,KAAK,CAACgD,WAAW,CAACznC,IAAmC,CAAC;IAC/D;IAEA,IAAIy/D,UAAU;IACd,IACEz6C,iBAAiB,CAAC,IAAI,CAAC5M,KAAK,CAACnY,IAAI,CAAC,IAClC,IAAI,CAACi1B,iBAAiB,CAAE,CAAA,OAAuB,EAC/C;MACAl1B,IAAI,CAACykC,UAAU,GAAG,OAAO;MACzB,OAAO,IAAI,CAAC+3B,8BAA8B,CACxCx8D,IACF,CAAC;IACF,CAAA,MAAM,IAAI,IAAI,CAAC+8B,YAAY,CAAA,GAAS,CAAC,EAAE;MACtC,MAAM0/B,sBAAsB,GAAG,IAAI,CAACiD,qBAAqB,CACvD1/D,IAAI,EACW,KACjB,CAAC;MACD,IAAI,IAAI,CAACk1B,iBAAiB,CAAE,CAAA,OAAuB,EAAE;QACnD,OAAO,IAAI,CAACsnC,8BAA8B,CACxCx8D,IAAI,EACJy8D,sBACF,CAAC;MACH,CAAC,MAAM;QACLgD,UAAU,GAAG,KAAK,CAACE,6BAA6B,CAC9C3/D,IAAI,EACJy8D,sBACF,CAAC;MACH;IACF,CAAC,MAAM;MACLgD,UAAU,GAAG,KAAK,CAACh4B,WAAW,CAACznC,IAAmC,CAAC;IACrE;IAIA,IACEy/D,UAAU,CAACh7B,UAAU,KAAK,MAAM,IAEhCg7B,UAAU,CAAClnD,UAAU,CAACC,MAAM,GAAG,CAAC,IAEhCinD,UAAU,CAAClnD,UAAU,CAAC,CAAC,CAAC,CAACtY,IAAI,KAAK,wBAAwB,EAC1D;MACA,IAAI,CAACsX,KAAK,CAAC22C,QAAQ,CAACkD,sCAAsC,EAAEqO,UAAU,CAAC;IACzE;IAEA,OAAOA,UAAU;EACnB;EAEAxnD,WAAWA,CACTjY,IAIC,EACDkY,UAAgC,EACnB;IACb,IAAI,IAAI,CAAC6Z,KAAK,CAAA,EAAW,CAAC,EAAE;MAE1B,IAAI,CAAC7J,IAAI,CAAA,CAAE;MACX,MAAM03C,gBAAgB,GAAG5/D,IAA2C;MACpE,IAAIy8D,sBAA2C,GAAG,IAAI;MACtD,IACE,IAAI,CAAC1/B,YAAY,CAAA,GAAS,CAAC,IAE3B,IAAI,CAAC+V,sBAAsB,CAAgB,KAAK,CAAC,EACjD;QACA2pB,sBAAsB,GAAG,IAAI,CAACiD,qBAAqB,CACjDE,gBAAgB,EACD,KACjB,CAAC;MACH,CAAC,MAAM;QACLA,gBAAgB,CAACn7B,UAAU,GAAG,OAAO;MACvC;MACA,OAAO,IAAI,CAAC+3B,8BAA8B,CACxCoD,gBAAgB,EAChBnD,sBAAsB,EACP,IACjB,CAAC;IACF,CAAA,MAAM,IAAI,IAAI,CAAChoC,GAAG,CAAA,EAAM,CAAC,EAAE;MAE1B,MAAMhmB,MAAM,GAAGzO,IAAoC;MACnDyO,MAAM,CAAC0E,UAAU,GAAG,KAAK,CAAC2yB,eAAe,EAAE;MAC3C,IAAI,CAACnI,SAAS,CAAA,CAAE;MAChB,IAAI,CAAChT,iBAAiB,GAAG,IAAI;MAC7B,OAAO,IAAI,CAAC7U,UAAU,CAACrH,MAAM,EAAE,oBAAoB,CAAC;IACrD,CAAA,MAAM,IAAI,IAAI,CAAC4uB,aAAa,CAAA,EAAO,CAAC,EAAE;MAErC,MAAMyW,IAAI,GAAG9zC,IAA8C;MAE3D,IAAI,CAACs9B,gBAAgB,CAAA,GAAc,CAAC;MACpCwW,IAAI,CAAC9+B,EAAE,GAAG,IAAI,CAACoxB,eAAe,EAAE;MAChC,IAAI,CAACzI,SAAS,CAAA,CAAE;MAChB,OAAO,IAAI,CAAC7nB,UAAU,CAACg+B,IAAI,EAAE,8BAA8B,CAAC;IAC9D,CAAC,MAAM;MACL,OAAO,KAAK,CAAC77B,WAAW,CACtBjY,IAAI,EACJkY,UACF,CAAC;IACH;EACF;EAEA2nD,eAAeA,CAAAA,EAAY;IACzB,OACE,IAAI,CAAC9iC,YAAY,CAAA,GAAa,CAAC,IAAI,IAAI,CAACnI,SAAS,CAAE,CAAA,CAAC30B,IAAI,KAAc,EAAA;EAE1E;EAEAquC,4BAA4BA,CAAAA,EAA8C;IACxE,IAAI,IAAI,CAACuxB,eAAe,EAAE,EAAE;MAC1B,MAAMC,GAAG,GAAG,IAAI,CAACnqD,SAAS,EAAW;MACrC,IAAI,CAACuS,IAAI,CAAA,CAAE;MACX43C,GAAG,CAACpH,QAAQ,GAAG,IAAI;MACnB,OAAO,IAAI,CAAC2E,UAAU,CAACyC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC;IACzC;IAIA,IAAI,IAAI,CAAC/tC,KAAK,CAAA,GAAc,CAAC,EAAE;MAC7B,MAAM2d,MAAM,GAAG,IAAI,CAAC8rB,2BAA2B,CAC7C,IAAI,CAAC7lD,SAAS,CAChB,CAAA,CAAC;MACD,IAAI+5B,MAAM,EAAE,OAAOA,MAAM;IAC3B;IAEA,OAAO,KAAK,CAACpB,4BAA4B,EAAE;EAC7C;EAEAgvB,iBAAiBA,CACft9D,IAA2B,EAC3BK,IAAuC,EACvC0/D,uBAAgC,GAAG,KAAK,EACxC;IACA,MAAM;MAAEvwC;KAAkB,GAAG,IAAI,CAACpX,KAAK;IACvC,MAAMM,WAAW,GAAG,KAAK,CAAC4kD,iBAAiB,CACzCt9D,IAAI,EACJK,IAAI,EACJ0/D,uBAAuB,IAAIvwC,gBAC7B,CAAC;IAED,IAAI,CAACA,gBAAgB,EAAE,OAAO9W,WAAW;IAEzC,KAAK,MAAM;MAAE1D,EAAE;MAAEma;IAAK,CAAC,IAAIzW,WAAW,CAACsnD,YAAY,EAAE;MAEnD,IAAI,CAAC7wC,IAAI,EAAE;MAGX,IAAI9uB,IAAI,KAAK,OAAO,IAAI,CAAC,CAAC2U,EAAE,CAAC4xB,cAAc,EAAE;QAC3C,IAAI,CAACrvB,KAAK,CAAC22C,QAAQ,CAAC2B,qCAAqC,EAAE1gC,IAAI,CAAC;MAClE,CAAC,MAAM,IACL,CAAC8wC,8BAA8B,CAAC9wC,IAAI,EAAE,IAAI,CAAClE,SAAS,CAAC,QAAQ,CAAC,CAAC,EAC/D;QACA,IAAI,CAAC1T,KAAK,CACR22C,QAAQ,CAACrgD,kEAAkE,EAC3EshB,IACF,CAAC;MACH;IACF;IAEA,OAAOzW,WAAW;EACpB;EAEAwnD,qBAAqBA,CACnBnuD,KAAyB,EACzBmG,UAAiC,EACpB;IACb,IAAI,IAAI,CAAC6Z,KAAK,CAAA,EAAU,CAAC,IAAI,IAAI,CAACqL,qBAAqB,CAAC,MAAM,CAAC,EAAE;MAC/D,MAAMp9B,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAuB;MAClD,IAAI,CAACkoB,MAAM,CAAA,EAAU,CAAC;MACtB,OAAO,IAAI,CAACk+B,sBAAsB,CAAC/7D,IAAI,EAAE;QAAE2kC,KAAK,EAAE;MAAK,CAAC,CAAC;IAC3D;IAEA,IAAI,IAAI,CAAC5H,YAAY,CAAA,GAAS,CAAC,EAAE;MAC/B,OAAO,IAAI,CAACg/B,sBAAsB,CAChC,IAAI,CAACpmD,SAAS,CAChB,CAAA,CAAC;IACH;IAEA,IAAI,IAAI,CAAConB,YAAY,CAAA,GAAc,CAAC,EAAE;MACpC,MAAM2S,MAAM,GAAG,IAAI,CAAC8rB,2BAA2B,CAAC,IAAI,CAAC7lD,SAAS,CAAE,CAAA,CAAC;MACjE,IAAI+5B,MAAM,EAAE,OAAOA,MAAM;IAC3B;IAEA,OAAO,KAAK,CAACwwB,qBAAqB,CAACnuD,KAAK,EAAEmG,UAAU,CAAC;EACvD;EAEAioD,mBAAmBA,CAAAA,EAAuC;IACxD,OAAO,IAAI,CAACpN,eAAe,CAAC,CAAC,QAAQ,EAAE,WAAW,EAAE,SAAS,CAAC,CAAC;EACjE;EAEAqN,kBAAkBA,CAAC1vB,MAAW,EAAE6e,SAAgC,EAAW;IACzE,OAAOA,SAAS,CAACv1B,IAAI,CAAC+0B,QAAQ,IAAI;MAChC,IAAIgD,kBAAkB,CAAChD,QAAQ,CAAC,EAAE;QAChC,OAAOre,MAAM,CAACgjB,aAAa,KAAK3E,QAAQ;MAC1C;MACA,OAAO,CAAC,CAACre,MAAM,CAACqe,QAAQ,CAAC;IAC3B,CAAC,CAAC;EACJ;EAEAkE,uBAAuBA,CAAAA,EAAG;IACxB,OACE,IAAI,CAACl2B,YAAY,CAAW,GAAA,CAAC,IAC7B,IAAI,CAAC7H,iBAAiB,CAAE,CAAA,KAA6B,GAAA;EAEzD;EAEAsb,gBAAgBA,CACdC,SAAsB,EACtBC,MAAW,EACXt4B,KAA8B,EACxB;IACN,MAAMm3C,SAAS,GAAG,CAChB,SAAS,EACT,SAAS,EACT,QAAQ,EACR,WAAW,EACX,UAAU,EACV,UAAU,EACV,UAAU,EACV,QAAQ,CACA;IACV,IAAI,CAAC6C,gBAAgB,CACnB;MACEE,gBAAgB,EAAE/C,SAAS;MAC3BgD,mBAAmB,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC;MAClCS,6BAA6B,EAAE,IAAI;MACnCR,aAAa,EAAEtE,QAAQ,CAAC8B;IACzB,CAAA,EACDtf,MACF,CAAC;IAED,MAAM2vB,gCAAgC,GAAGA,CAAAA,KAAM;MAC7C,IAAI,IAAI,CAACpN,uBAAuB,EAAE,EAAE;QAClC,IAAI,CAAC/qC,IAAI,CAAA,CAAE;QACX,IAAI,CAACA,IAAI,CAAA,CAAE;QACX,IAAI,IAAI,CAACk4C,kBAAkB,CAAC1vB,MAAM,EAAE6e,SAAS,CAAC,EAAE;UAC9C,IAAI,CAACh4C,KAAK,CACR22C,QAAQ,CAAC+C,6BAA6B,EACtC,IAAI,CAAC74C,KAAK,CAAC4X,WAAW,CAAA,CACxB,CAAC;QACH;QACA,KAAK,CAACswC,qBAAqB,CAAC7vB,SAAS,EAAEC,MAAuB,CAAC;MACjE,CAAC,MAAM;QACL,IAAI,CAAC6vB,4BAA4B,CAC/B9vB,SAAS,EACTC,MAAM,EACNt4B,KAAK,EACL,CAAC,CAACs4B,MAAM,CAAC5F,MACX,CAAC;MACH;KACD;IACD,IAAI4F,MAAM,CAACrH,OAAO,EAAE;MAClB,IAAI,CAAC8zB,kBAAkB,CAACkD,gCAAgC,CAAC;IAC3D,CAAC,MAAM;MACLA,gCAAgC,EAAE;IACpC;EACF;EAEAE,4BAA4BA,CAC1B9vB,SAAsB,EACtBC,MAAkD,EAClDt4B,KAA8B,EAC9ByyB,QAAiB,EACX;IACN,MAAMosB,GAAG,GAAG,IAAI,CAACT,wBAAwB,CACvC9lB,MACF,CAAC;IACD,IAAIumB,GAAG,EAAE;MACPxmB,SAAS,CAAC/7B,IAAI,CAACmH,IAAI,CAACo7C,GAAG,CAAC;MAExB,IAAKvmB,MAAM,CAASgoB,QAAQ,EAAE;QAC5B,IAAI,CAACnhD,KAAK,CAAC22C,QAAQ,CAACsB,yBAAyB,EAAE9e,MAAM,CAAC;MACxD;MACA,IAAKA,MAAM,CAASgjB,aAAa,EAAE;QACjC,IAAI,CAACn8C,KAAK,CAAC22C,QAAQ,CAACuB,8BAA8B,EAAE/e,MAAM,EAAE;UAC1Dqe,QAAQ,EAAGre,MAAM,CAASgjB;QAC5B,CAAC,CAAC;MACJ;MACA,IAAKhjB,MAAM,CAASrH,OAAO,EAAE;QAC3B,IAAI,CAAC9xB,KAAK,CAAC22C,QAAQ,CAACwB,wBAAwB,EAAEhf,MAAM,CAAC;MACvD;MACA,IAAKA,MAAM,CAASutB,QAAQ,EAAE;QAC5B,IAAI,CAAC1mD,KAAK,CAAC22C,QAAQ,CAACyB,yBAAyB,EAAEjf,MAAM,CAAC;MACxD;MAEA;IACF;IAEA,IAAI,CAAC,IAAI,CAACt4B,KAAK,CAACqX,eAAe,IAAKihB,MAAM,CAASgoB,QAAQ,EAAE;MAC3D,IAAI,CAACnhD,KAAK,CAAC22C,QAAQ,CAACoC,iCAAiC,EAAE5f,MAAM,CAAC;IAChE;IAEA,IAAKA,MAAM,CAASutB,QAAQ,EAAE;MAC5B,IAAI,CAAC7lD,KAAK,CAACooD,aAAa,EAAE;QACxB,IAAI,CAACjpD,KAAK,CAAC22C,QAAQ,CAACuC,qBAAqB,EAAE/f,MAAM,CAAC;MACpD;IACF;IAIA,KAAK,CAAC6vB,4BAA4B,CAChC9vB,SAAS,EACTC,MAAM,EACNt4B,KAAK,EACLyyB,QACF,CAAC;EACH;EAEA41B,4BAA4BA,CAC1BC,YAAsE,EAChE;IACN,MAAMhpD,QAAQ,GAAG,IAAI,CAAC+c,GAAG,GAAY,CAAC;IACtC,IAAI/c,QAAQ,EAAEgpD,YAAY,CAAChpD,QAAQ,GAAG,IAAI;IAE1C,IAAKgpD,YAAY,CAAS7J,QAAQ,IAAI,IAAI,CAAC9kC,KAAK,CAAU,EAAA,CAAC,EAAE;MAC3D,IAAI,CAACxa,KAAK,CAAC22C,QAAQ,CAACO,sBAAsB,EAAEiS,YAAY,CAAC;IAC3D;IAEA,IAAKA,YAAY,CAASr3B,OAAO,IAAI,IAAI,CAACtX,KAAK,CAAU,EAAA,CAAC,EAAE;MAC1D,IAAI,CAACxa,KAAK,CAAC22C,QAAQ,CAACM,qBAAqB,EAAEkS,YAAY,CAAC;IAC1D;EACF;EAOAxyB,wBAAwBA,CACtBluC,IAAmC,EACnCmuC,IAAkB,EAClBj2B,UAAgC,EACnB;IACb,MAAM47B,IAAI,GACR3F,IAAI,CAACluC,IAAI,KAAK,YAAY,GAEtB,IAAI,CAACw9D,0BAA0B,CAACz9D,IAAI,EAAEmuC,IAAI,EAAEj2B,UAAU,CAAC,GACvDrI,SAAS;IACf,OAAOikC,IAAI,IAAI,KAAK,CAAC5F,wBAAwB,CAACluC,IAAI,EAAEmuC,IAAI,EAAEj2B,UAAU,CAAC;EACvE;EAIAk2B,4BAA4BA,CAAAA,EAAY;IACtC,IAAI,IAAI,CAAC4vB,oBAAoB,EAAE,EAAE,OAAO,IAAI;IAC5C,OAAO,KAAK,CAAC5vB,4BAA4B,EAAE;EAC7C;EAGAG,gBAAgBA,CACdJ,IAAkB,EAElBz3B,QAAkB,EAClBC,mBAA6C,EAC/B;IAGd,IAAI,CAAC,IAAI,CAACyB,KAAK,CAACgX,sBAAsB,IAAI,CAAC,IAAI,CAAC2C,KAAK,CAAA,EAAY,CAAC,EAAE;MAClE,OAAO,KAAK,CAACwc,gBAAgB,CAC3BJ,IAAI,EAEJz3B,QAAQ,EACRC,mBACF,CAAC;IACH;IAEA,MAAM+4B,MAAM,GAAG,IAAI,CAAC5R,QAAQ,CAAC,MAC3B,KAAK,CAACyQ,gBAAgB,CAACJ,IAAI,EAAEz3B,QAAQ,CACvC,CAAC;IAED,IAAI,CAACg5B,MAAM,CAAC1vC,IAAI,EAAE;MAChB,IAAI0vC,MAAM,CAACvhC,KAAK,EAAE;QAEhB,KAAK,CAACqgC,0BAA0B,CAAC73B,mBAAmB,EAAE+4B,MAAM,CAACvhC,KAAK,CAAC;MACrE;MAEA,OAAOggC,IAAI;IACb;IACA,IAAIuB,MAAM,CAACvhC,KAAK,EAAE,IAAI,CAACiK,KAAK,GAAGs3B,MAAM,CAACxR,SAAS;IAC/C,OAAOwR,MAAM,CAAC1vC,IAAI;EACpB;EAIA2vC,cAAcA,CACZ3vC,IAAO,EACP0W,QAAkB,EACU;IAC5B,MAAMwpB,OAAO,GAAG,KAAK,CAACyP,cAAc,CAAC3vC,IAAI,EAAE0W,QAAQ,CAAC;IACpD,IAAI,IAAI,CAAC+d,GAAG,CAAA,EAAY,CAAC,EAAE;MACxByL,OAAO,CAAkBxoB,QAAQ,GAAG,IAAI;MAIzC,IAAI,CAAC+B,gBAAgB,CAACzZ,IAAI,CAAC;IAC7B;IAEA,IAAI,IAAI,CAAC+xB,KAAK,CAAA,EAAS,CAAC,EAAE;MACxB,MAAM6d,YAAY,GAAG,IAAI,CAAClP,WAAW,CAAyBhqB,QAAQ,CAAC;MACvEk5B,YAAY,CAACz8B,UAAU,GAAGnT,IAAoB;MAC9C4vC,YAAY,CAAChJ,cAAc,GAAG,IAAI,CAACquB,qBAAqB,EAAE;MAE1D,OAAO,IAAI,CAACn/C,UAAU,CAAC85B,YAAY,EAAE,sBAAsB,CAAC;IAC9D;IAEA,OAAO5vC,IAAI;EACb;EAEA8vC,sBAAsBA,CACpB9vC,IAA8B,EACI;IAClC,IAAI,CAAC,IAAI,CAACoY,KAAK,CAACoX,gBAAgB,IAAI,IAAI,CAACuN,YAAY,CAAY,GAAA,CAAC,EAAE;MAClE,OAAO,IAAI,CAACogC,kBAAkB,CAAC,MAAM,IAAI,CAACrtB,sBAAsB,CAAC9vC,IAAI,CAAC,CAAC;IACzE;IAGA,MAAM0W,QAAQ,GAAG,IAAI,CAAC0B,KAAK,CAAC1B,QAAQ;IAEpC,MAAMiqD,SAAS,GAAG,IAAI,CAACtjC,aAAa,IAAY,CAAC;IAEjD,IACEsjC,SAAS,KACR,IAAI,CAAC5jC,YAAY,CAAY,GAAA,CAAC,IAAI,CAAC,IAAI,CAACqR,4BAA4B,CAAA,CAAE,CAAC,EACxE;MACA,MAAM,IAAI,CAAC72B,KAAK,CACd22C,QAAQ,CAACkB,iCAAiC,EAC1C,IAAI,CAACh3C,KAAK,CAAC1B,QACb,CAAC;IACH;IAEA,MAAMkqD,YAAY,GAAG57C,iBAAiB,CAAC,IAAI,CAAC5M,KAAK,CAACnY,IAAI,CAAC;IACvD,MAAMyY,WAA6C,GAChDkoD,YAAY,IAAI,IAAI,CAACpD,2BAA2B,CAAE,CAAA,IACnD,KAAK,CAAC1tB,sBAAsB,CAAC9vC,IAAI,CAAC;IAEpC,IAAI,CAAC0Y,WAAW,EAAE,OAAO,IAAI;IAE7B,IACEA,WAAW,CAACzY,IAAI,KAAK,wBAAwB,IAC7CyY,WAAW,CAACzY,IAAI,KAAK,wBAAwB,IAC7C0gE,SAAS,EACT;MACA3gE,IAAI,CAAC6nC,UAAU,GAAG,MAAM;IAC1B;IAEA,IAAI84B,SAAS,EAAE;MAEb,IAAI,CAAChoD,kBAAkB,CAACD,WAAW,EAAEhC,QAAQ,CAAC;MAE9CgC,WAAW,CAAC2wB,OAAO,GAAG,IAAI;IAC5B;IAEA,OAAO3wB,WAAW;EACpB;EAEA23B,YAAYA,CACVrwC,IAAa,EACbswC,WAAoB,EACpBC,UAA2B,EAE3BxmB,WAAyB,EACnB;IACN,IAAI,CAAC,CAACumB,WAAW,IAAIC,UAAU,KAAK,IAAI,CAACxT,YAAY,CAAe,GAAA,CAAC,EAAE;MACrE;IACF;IAEA,KAAK,CAACsT,YAAY,CAChBrwC,IAAI,EACJswC,WAAW,EACXC,UAAU,EACTvwC,IAAI,CAASqpC,OAAO,cAGvB,CAAC;IACD,MAAMzzB,cAAc,GAAG,IAAI,CAAC+/C,wBAAwB,CAClD,IAAI,CAACjD,0BACP,CAAC;IACD,IAAI98C,cAAc,EAAE5V,IAAI,CAAC4V,cAAc,GAAGA,cAAc;EAC1D;EAEAirD,4BAA4BA,CAC1B7gE,IAAwE,EAClE;IACN,IAAI,CAACA,IAAI,CAAC0X,QAAQ,EAAE;MAClB,IAAI,IAAI,CAAC+c,GAAG,CAAA,EAAQ,CAAC,EAAE;QACrBz0B,IAAI,CAAC8gE,QAAQ,GAAG,IAAI;MACrB,CAAA,MAAM,IAAI,IAAI,CAACrsC,GAAG,CAAA,EAAY,CAAC,EAAE;QAChCz0B,IAAI,CAAC0X,QAAQ,GAAG,IAAI;MACtB;IACF;IAEA,MAAMzX,IAAI,GAAG,IAAI,CAAC02D,wBAAwB,EAAE;IAC5C,IAAI12D,IAAI,EAAED,IAAI,CAAC4mC,cAAc,GAAG3mC,IAAI;EACtC;EAEA+V,kBAAkBA,CAAChW,IAAqB,EAAmB;IACzD,IAAI,CAAC6gE,4BAA4B,CAAC7gE,IAAI,CAAC;IAEvC,IACE,IAAI,CAACoY,KAAK,CAACoX,gBAAgB,IAC3B,EAAExvB,IAAI,CAAC62D,QAAQ,IAAI,CAAC72D,IAAI,CAAC4mC,cAAc,CAAC,IACxC,IAAI,CAAC7U,KAAK,CAAM,EAAA,CAAC,EACjB;MACA,IAAI,CAACxa,KAAK,CACR22C,QAAQ,CAACU,+BAA+B,EACxC,IAAI,CAACx2C,KAAK,CAAC1B,QACb,CAAC;IACH;IACA,IAAI1W,IAAI,CAAC04D,QAAQ,IAAI,IAAI,CAAC3mC,KAAK,CAAM,EAAA,CAAC,EAAE;MACtC,MAAM;QAAElrB;MAAK,CAAA,GAAG7G,IAAI;MACpB,IAAI,CAACuX,KAAK,CACR22C,QAAQ,CAACG,8BAA8B,EACvC,IAAI,CAACj2C,KAAK,CAAC1B,QAAQ,EACnB;QACE43C,YAAY,EACVznD,GAAG,CAAC5G,IAAI,KAAK,YAAY,IAAI,CAACD,IAAI,CAAC6V,QAAQ,GACvChP,GAAG,CAACV,IAAI,GACR,IAAI,IAAI,CAACinB,KAAK,CAAC6C,KAAK,CAAC,IAAI,CAAClF,iBAAiB,CAAClkB,GAAG,CAACjJ,KAAK,CAAC,EAAE,IAAI,CAACmtB,iBAAiB,CAAClkB,GAAG,CAAChJ,GAAG,CAAC,CAAC;MAChG,CACF,CAAC;IACH;IAEA,OAAO,KAAK,CAACmY,kBAAkB,CAAChW,IAAI,CAAC;EACvC;EAEAmW,yBAAyBA,CACvBnW,IAA4B,EACJ;IACxB,IAAIA,IAAI,CAAC04D,QAAQ,EAAE;MACjB,IAAI,CAACnhD,KAAK,CAAC22C,QAAQ,CAACwC,yBAAyB,EAAE1wD,IAAI,CAAC;IACtD;IAEA,IAAIA,IAAI,CAAC0zD,aAAa,EAAE;MACtB,IAAI,CAACn8C,KAAK,CAAC22C,QAAQ,CAACyC,8BAA8B,EAAE3wD,IAAI,EAAE;QACxD+uD,QAAQ,EAAE/uD,IAAI,CAAC0zD;MACjB,CAAC,CAAC;IACJ;IAEA,IAAI,CAACmN,4BAA4B,CAAC7gE,IAAI,CAAC;IACvC,OAAO,KAAK,CAACmW,yBAAyB,CAACnW,IAAI,CAAC;EAC9C;EAEA+gE,0BAA0BA,CACxB/gE,IAA6B,EACJ;IACzB,IAAI,CAAC6gE,4BAA4B,CAAC7gE,IAAI,CAAC;IACvC,IAAIA,IAAI,CAAC0X,QAAQ,EAAE;MACjB,IAAI,CAACH,KAAK,CAAC22C,QAAQ,CAACK,wBAAwB,EAAEvuD,IAAI,CAAC;IACrD;IACA,OAAO,KAAK,CAAC+gE,0BAA0B,CAAC/gE,IAAI,CAAC;EAC/C;EAEA4xC,eAAeA,CACbnB,SAAsB,EACtB38B,MAAqB,EACrBwB,WAAoB,EACpB5B,OAAgB,EAChB6B,aAAsB,EACtBs8B,iBAA0B,EACpB;IACN,MAAMj8B,cAAc,GAAG,IAAI,CAAC+/C,wBAAwB,CAClD,IAAI,CAAClD,oBACP,CAAC;IACD,IAAI78C,cAAc,IAAIL,aAAa,EAAE;MACnC,IAAI,CAACgC,KAAK,CAAC22C,QAAQ,CAACQ,4BAA4B,EAAE94C,cAAc,CAAC;IACnE;IAGA,MAAM;MAAEyzB,OAAO,GAAG,KAAK;MAAEhpC;IAAM,CAAA,GAAGyT,MAAM;IAExC,IAAIu1B,OAAO,KAAKhpC,IAAI,KAAK,KAAK,IAAIA,IAAI,KAAK,KAAK,CAAC,EAAE;MACjD,IAAI,CAACkX,KAAK,CAAC22C,QAAQ,CAACS,eAAe,EAAE76C,MAAM,EAAE;QAAEzT;MAAK,CAAC,CAAC;IACxD;IACA,IAAIuV,cAAc,EAAE9B,MAAM,CAAC8B,cAAc,GAAGA,cAAc;IAC1D,KAAK,CAACg8B,eAAe,CACnBnB,SAAS,EACT38B,MAAM,EACNwB,WAAW,EACX5B,OAAO,EACP6B,aAAa,EACbs8B,iBACF,CAAC;EACH;EAEAE,sBAAsBA,CACpBtB,SAAsB,EACtB38B,MAA4B,EAC5BwB,WAAoB,EACpB5B,OAAgB,EACV;IACN,MAAMkC,cAAc,GAAG,IAAI,CAAC+/C,wBAAwB,CAClD,IAAI,CAAClD,oBACP,CAAC;IACD,IAAI78C,cAAc,EAAE9B,MAAM,CAAC8B,cAAc,GAAGA,cAAc;IAC1D,KAAK,CAACm8B,sBAAsB,CAACtB,SAAS,EAAE38B,MAAM,EAAEwB,WAAW,EAAE5B,OAAO,CAAC;EACvE;EAEAstD,gCAAgCA,CAC9BhhE,IAA8C,EAC9CK,IAAY,EACZ;IACA,IAAIL,IAAI,CAACC,IAAI,KAAK,iBAAiB,EAAE;IAErC,IACGD,IAAI,CAAYC,IAAI,KAAK,kBAAkB,IAC5C,CAAC0zD,cAAA,CAAA3f,IAAA,CACEh0C,IAAI,CAAyCgN,KAAK,EACnD,MACF,CAAC,EACD;MACA;IACF;IAEA,KAAK,CAACg0D,gCAAgC,CAAChhE,IAAI,EAAEK,IAAI,CAAC;EACpD;EAEA2xC,eAAeA,CAAChyC,IAAa,EAAQ;IACnC,KAAK,CAACgyC,eAAe,CAAChyC,IAAI,CAAC;IAE3B,IAAIA,IAAI,CAACwR,UAAU,KAAK,IAAI,CAACugB,KAAK,CAAA,EAAM,CAAC,IAAI,IAAI,CAACA,KAAK,CAAa,EAAA,CAAC,CAAC,EAAE;MAG/D;QACL/xB,IAAI,CAACiyC,mBAAmB,GAAG,IAAI,CAAC8rB,gCAAgC,EAAE;MACpE;IACF;IACA,IAAI,IAAI,CAAC1gC,aAAa,CAAA,GAAe,CAAC,EAAE;MACtCr9B,IAAI,CAACsoC,UAAU,GAAG,IAAI,CAAC+yB,qBAAqB,CAAC,YAAY,CAAC;IAC5D;EACF;EAEAhpB,iBAAiBA,CACfh8B,IAAe,EACfK,QAAqC,EACrCpB,WAAoB,EACpB5B,OAAgB,EAChB4C,SAAkB,EAClBC,UAAmB,EACnBI,mBAA6C,EAC1C;IACH,MAAMf,cAAc,GAAG,IAAI,CAAC+/C,wBAAwB,CAClD,IAAI,CAAClD,oBACP,CAAC;IACD,IAAI78C,cAAc,EAAES,IAAI,CAACT,cAAc,GAAGA,cAAc;IAExD,OAAO,KAAK,CAACy8B,iBAAiB,CAC5Bh8B,IAAI,EAEJK,QAAQ,EACRpB,WAAW,EACX5B,OAAO,EACP4C,SAAS,EACTC,UAAU,EACVI,mBACF,CAAC;EACH;EAEAi9B,mBAAmBA,CAAC5zC,IAAgB,EAAEuV,aAAsB,EAAQ;IAClE,MAAMK,cAAc,GAAG,IAAI,CAAC+/C,wBAAwB,CAClD,IAAI,CAAClD,oBACP,CAAC;IACD,IAAI78C,cAAc,EAAE5V,IAAI,CAAC4V,cAAc,GAAGA,cAAc;IACxD,KAAK,CAACg+B,mBAAmB,CAAC5zC,IAAI,EAAEuV,aAAa,CAAC;EAChD;EAGAs+B,UAAUA,CACRC,IAA0B,EAC1BzzC,IAAuC,EACjC;IACN,KAAK,CAACwzC,UAAU,CAACC,IAAI,EAAEzzC,IAAI,CAAC;IAC5B,IACEyzC,IAAI,CAAC9+B,EAAE,CAAC/U,IAAI,KAAK,YAAY,IAC7B,CAAC,IAAI,CAACu9B,qBAAqB,EAAE,IAC7B,IAAI,CAAC/I,GAAG,CAAA,EAAQ,CAAC,EACjB;MACAqf,IAAI,CAACgtB,QAAQ,GAAG,IAAI;IACtB;IAEA,MAAM7gE,IAAI,GAAG,IAAI,CAAC02D,wBAAwB,EAAE;IAC5C,IAAI12D,IAAI,EAAE;MACR6zC,IAAI,CAAC9+B,EAAE,CAAC4xB,cAAc,GAAG3mC,IAAI;MAC7B,IAAI,CAACwZ,gBAAgB,CAACq6B,IAAI,CAAC9+B,EAAE,CAAC;IAChC;EACF;EAGA++B,iCAAiCA,CAC/B/zC,IAA+B,EAC/Bg0C,IAAsB,EACK;IAC3B,IAAI,IAAI,CAACjiB,KAAK,CAAA,EAAS,CAAC,EAAE;MACxB/xB,IAAI,CAAC2mC,UAAU,GAAG,IAAI,CAACsuB,qBAAqB,EAAE;IAChD;IACA,OAAO,KAAK,CAAClhB,iCAAiC,CAAC/zC,IAAI,EAAEg0C,IAAI,CAAC;EAC5D;EAEAhF,gBAAgBA,CACdr4B,mBAA6C,EAC7Cu9B,cAAyB,EACX;IAAA,IAAAC,IAAA,EAAAG,KAAA,EAAA2sB,SAAA,EAAA1sB,KAAA,EAAA2sB,UAAA;IAGd,IAAI9oD,KAA+B;IACnC,IAAIg8B,GAAG;IACP,IAAI+sB,QAAQ;IAEZ,IACE,IAAI,CAACl2C,SAAS,CAAC,KAAK,CAAC,KACpB,IAAI,CAAC8G,KAAK,CAAe,GAAA,CAAC,IAAI,IAAI,CAACA,KAAK,CAAM,EAAA,CAAC,CAAC,EACjD;MAEA3Z,KAAK,GAAG,IAAI,CAACA,KAAK,CAAC9J,KAAK,EAAE;MAE1B8lC,GAAG,GAAG,IAAI,CAACtW,QAAQ,CACjB,MAAM,KAAK,CAACkR,gBAAgB,CAACr4B,mBAAmB,EAAEu9B,cAAc,CAAC,EACjE97B,KACF,CAAC;MAID,IAAI,CAACg8B,GAAG,CAACjmC,KAAK,EAAE,OAAOimC,GAAG,CAACp0C,IAAI;MAK/B,MAAM;QAAEomB;OAAS,GAAG,IAAI,CAAChO,KAAK;MAC9B,MAAMi8B,cAAc,GAAGjuB,OAAO,CAACA,OAAO,CAAC5N,MAAM,GAAG,CAAC,CAAC;MAClD,IAAI67B,cAAc,KAAK/tB,KAAE,CAACvM,MAAM,IAAIs6B,cAAc,KAAK/tB,KAAE,CAACrM,MAAM,EAAE;QAChEmM,OAAO,CAACC,GAAG,CAAA,CAAE;MACf;IACF;IAEA,IAAI,EAAA8tB,CAAAA,IAAA,GAACC,GAAG,aAAHD,IAAA,CAAKhmC,KAAK,CAAA,IAAI,CAAC,IAAI,CAAC4jB,KAAK,CAAA,EAAM,CAAC,EAAE;MACrC,OAAO,KAAK,CAACid,gBAAgB,CAACr4B,mBAAmB,EAAEu9B,cAAc,CAAC;IACpE;IAOA,IAAI,CAAC97B,KAAK,IAAIA,KAAK,KAAK,IAAI,CAACA,KAAK,EAAEA,KAAK,GAAG,IAAI,CAACA,KAAK,CAAC9J,KAAK,EAAE;IAE9D,IAAIsH,cAA+D;IAEnE,MAAM2H,KAAK,GAAG,IAAI,CAACugB,QAAQ,CAAE0W,KAAkB,IAAK;MAAA,IAAArD,WAAA,EAAAiwB,eAAA;MAElDxrD,cAAc,GAAG,IAAI,CAACggD,qBAAqB,CAAC,IAAI,CAACnD,oBAAoB,CAAC;MACtE,MAAMtkB,IAAI,GAAG,KAAK,CAACa,gBAAgB,CACjCr4B,mBAAmB,EACnBu9B,cACF,CAAC;MAED,IACE/F,IAAI,CAACluC,IAAI,KAAK,yBAAyB,IAAAkxC,CAAAA,WAAA,GACvChD,IAAI,CAAC96B,KAAK,KAAA,IAAA,IAAV89B,WAAA,CAAYj9B,aAAa,EACzB;QACAsgC,KAAK,EAAE;MACT;MAGA,IAAI,CAAA4sB,CAAAA,eAAA,GAAAxrD,cAAc,KAAdwrD,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,eAAA,CAAgBrtD,MAAM,CAACyE,MAAM,MAAK,CAAC,EAAE;QACvC,IAAI,CAACmoB,0BAA0B,CAACwN,IAAI,EAAEv4B,cAAc,CAAC;MACvD;MACAu4B,IAAI,CAACv4B,cAAc,GAAGA,cAAc;MA2BpC,OAAOu4B,IAAI;IACZ,CAAA,EAAE/1B,KAAK,CAAC;IAGT,IAAI,CAACmF,KAAK,CAACpP,KAAK,IAAI,CAACoP,KAAK,CAAC6gB,OAAO,EAAE;MAIlC,IAAIxoB,cAAc,EAAE,IAAI,CAACyrD,4BAA4B,CAACzrD,cAAc,CAAC;MACrE,OAAO2H,KAAK,CAACvd,IAAI;IACnB;IAEA,IAAI,CAACo0C,GAAG,EAAE;MAIR6Z,MAAM,CAAC,CAAC,IAAI,CAAChjC,SAAS,CAAC,KAAK,CAAC,CAAC;MAI9Bk2C,QAAQ,GAAG,IAAI,CAACrjC,QAAQ,CACtB,MAAM,KAAK,CAACkR,gBAAgB,CAACr4B,mBAAmB,EAAEu9B,cAAc,CAAC,EACjE97B,KACF,CAAC;MAGD,IAAI,CAAC+oD,QAAQ,CAAChzD,KAAK,EAAE,OAAOgzD,QAAQ,CAACnhE,IAAI;IAC3C;IAEA,IAAA,CAAAs0C,KAAA,GAAIF,GAAG,aAAHE,KAAA,CAAKt0C,IAAI,EAAE;MAEb,IAAI,CAACoY,KAAK,GAAGg8B,GAAG,CAAClW,SAAS;MAC1B,OAAOkW,GAAG,CAACp0C,IAAI;IACjB;IAEA,IAAIud,KAAK,CAACvd,IAAI,EAAE;MAEd,IAAI,CAACoY,KAAK,GAAGmF,KAAK,CAAC2gB,SAAS;MAC5B,IAAItoB,cAAc,EAAE,IAAI,CAACyrD,4BAA4B,CAACzrD,cAAc,CAAC;MACrE,OAAO2H,KAAK,CAACvd,IAAI;IACnB;IAEA,IAAA,CAAAihE,SAAA,GAAIE,QAAQ,aAARF,SAAA,CAAUjhE,IAAI,EAAE;MAElB,IAAI,CAACoY,KAAK,GAAG+oD,QAAQ,CAACjjC,SAAS;MAC/B,OAAOijC,QAAQ,CAACnhE,IAAI;IACtB;IAEA,MAAM,EAAAu0C,KAAA,GAAAH,GAAG,KAAHG,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,KAAA,CAAKpmC,KAAK,KAAIoP,KAAK,CAACpP,KAAK,MAAA+yD,UAAA,GAAIC,QAAQ,KAARD,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,UAAA,CAAU/yD,KAAK,CAAA;EACpD;EAEAkzD,4BAA4BA,CAACrhE,IAAS,EAAE;IAAA,IAAAsvC,WAAA;IACtC,IACEtvC,IAAI,CAAC+T,MAAM,CAACyE,MAAM,KAAK,CAAC,IACxB,CAACxY,IAAI,CAAC+T,MAAM,CAAC,CAAC,CAAC,CAAC0hD,UAAU,IAC1B,EAAAnmB,CAAAA,WAAA,GAACtvC,IAAI,CAACqT,KAAK,KAAA,IAAA,IAAVi8B,WAAA,CAAYgyB,aAAa,CAC1B,IAAA,IAAI,CAACzsD,eAAe,CAAC,YAAY,EAAE,0BAA0B,CAAC,EAC9D;MACA,IAAI,CAAC0C,KAAK,CAAC22C,QAAQ,CAAC2C,sBAAsB,EAAE7wD,IAAI,CAAC;IACnD;EACF;EAGAk5D,eAAeA,CACbviD,mBAA6C,EAC7C4qD,QAAkB,EACJ;IACd,IAAI,CAAC,IAAI,CAACt2C,SAAS,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC8G,KAAK,CAAA,EAAM,CAAC,EAAE;MAC/C,OAAO,IAAI,CAACqpC,oBAAoB,EAAE;IACpC;IACA,OAAO,KAAK,CAAClC,eAAe,CAACviD,mBAAmB,EAAE4qD,QAAQ,CAAC;EAC7D;EAEA1sB,UAAUA,CACR70C,IAAuC,EACe;IACtD,IAAI,IAAI,CAAC+xB,KAAK,CAAA,EAAS,CAAC,EAAE;MAIxB,MAAM2d,MAAM,GAAG,IAAI,CAAC5R,QAAQ,CAAC0W,KAAK,IAAI;QACpC,MAAM7N,UAAU,GAAG,IAAI,CAACyvB,oCAAoC,GAE5D,CAAC;QACD,IAAI,IAAI,CAAC74B,kBAAkB,CAAA,CAAE,IAAI,CAAC,IAAI,CAACxL,KAAK,CAAS,EAAA,CAAC,EAAEyiB,KAAK,EAAE;QAC/D,OAAO7N,UAAU;MACnB,CAAC,CAAC;MAEF,IAAI+I,MAAM,CAACtR,OAAO,EAAE;MAEpB,IAAI,CAACsR,MAAM,CAACvR,MAAM,EAAE;QAClB,IAAIuR,MAAM,CAACvhC,KAAK,EAAE,IAAI,CAACiK,KAAK,GAAGs3B,MAAM,CAACxR,SAAS;QAE/Cl+B,IAAI,CAAC2mC,UAAU,GAAG+I,MAAM,CAAC1vC,IAAI;MAC/B;IACF;IAEA,OAAO,KAAK,CAAC60C,UAAU,CAAC70C,IAAI,CAAC;EAC/B;EAGAsyC,sBAAsBA,CAAC9E,KAAgB,EAAE;IACvC,IAAI,IAAI,CAAC/Y,GAAG,CAAA,EAAY,CAAC,EAAE;MACxB+Y,KAAK,CAAyB91B,QAAQ,GAAG,IAAI;IAChD;IACA,MAAMzX,IAAI,GAAG,IAAI,CAAC02D,wBAAwB,EAAE;IAC5C,IAAI12D,IAAI,EAAEutC,KAAK,CAAC5G,cAAc,GAAG3mC,IAAI;IACrC,IAAI,CAACwZ,gBAAgB,CAAC+zB,KAAK,CAAC;IAE5B,OAAOA,KAAK;EACd;EAEAz2B,YAAYA,CAAC/W,IAAY,EAAEgX,SAAmB,EAAW;IACvD,QAAQhX,IAAI,CAACC,IAAI;MACf,KAAK,sBAAsB;QACzB,OAAO,IAAI,CAAC8W,YAAY,CAAC/W,IAAI,CAACmT,UAAU,EAAE6D,SAAS,CAAC;MACtD,KAAK,qBAAqB;QACxB,OAAO,IAAI;MACb;QACE,OAAO,KAAK,CAACD,YAAY,CAAC/W,IAAI,EAAEgX,SAAS,CAAC;IAC9C;EACF;EAEAC,YAAYA,CAACjX,IAAY,EAAEkX,KAAc,GAAG,KAAK,EAAQ;IACvD,QAAQlX,IAAI,CAACC,IAAI;MACf,KAAK,yBAAyB;QAC5B,IAAI,CAACuhE,mCAAmC,CAACxhE,IAAI,EAAEkX,KAAK,CAAC;QACrD;MACF,KAAK,gBAAgB;MACrB,KAAK,uBAAuB;MAC5B,KAAK,qBAAqB;MAC1B,KAAK,iBAAiB;QACpB,IAAIA,KAAK,EAAE;UACT,IAAI,CAACsoB,eAAe,CAAC1D,gCAAgC,CACnDoyB,QAAQ,CAACwD,6BAA6B,EACtC1xD,IACF,CAAC;QACH,CAAC,MAAM;UACL,IAAI,CAACuX,KAAK,CAAC22C,QAAQ,CAACwD,6BAA6B,EAAE1xD,IAAI,CAAC;QAC1D;QACA,IAAI,CAACiX,YAAY,CAACjX,IAAI,CAACmT,UAAU,EAAE+D,KAAK,CAAC;QACzC;MACF,KAAK,sBAAsB;QACzB,IAAI,CAACA,KAAK,IAAIlX,IAAI,CAAC+wC,IAAI,CAAC9wC,IAAI,KAAK,sBAAsB,EAAE;UACvDD,IAAI,CAAC+wC,IAAI,GAAG,IAAI,CAACnD,mBAAmB,CAAC5tC,IAAI,CAAC+wC,IAAI,CAAiB;QACjE;MAEF;QACE,KAAK,CAAC95B,YAAY,CAACjX,IAAI,EAAEkX,KAAK,CAAC;IACnC;EACF;EAEAsqD,mCAAmCA,CACjCxhE,IAA+B,EAC/BkX,KAAc,EACR;IACN,QAAQlX,IAAI,CAACmT,UAAU,CAAClT,IAAI;MAC1B,KAAK,gBAAgB;MACrB,KAAK,uBAAuB;MAC5B,KAAK,qBAAqB;MAC1B,KAAK,iBAAiB;MACtB,KAAK,yBAAyB;QAC5B,IAAI,CAACgX,YAAY,CAACjX,IAAI,CAACmT,UAAU,EAAE+D,KAAK,CAAC;QACzC;MACF;QACE,KAAK,CAACD,YAAY,CAACjX,IAAI,EAAEkX,KAAK,CAAC;IACnC;EACF;EAEA60C,qBAAqBA,CAAC/rD,IAAY,EAAE8tD,YAAqB,EAAQ;IAC/D,QAAQ9tD,IAAI,CAACC,IAAI;MACf,KAAK,gBAAgB;MACrB,KAAK,uBAAuB;MAC5B,KAAK,iBAAiB;MACtB,KAAK,qBAAqB;QACxB,IAAI,CAAC8rD,qBAAqB,CAAC/rD,IAAI,CAACmT,UAAU,EAAE,KAAK,CAAC;QAClD;MACF;QACE,KAAK,CAAC44C,qBAAqB,CAAC/rD,IAAI,EAAE8tD,YAAY,CAAC;IACnD;EACF;EAEAl3C,WAAWA,CACT3W,IAOqB,EACrB4W,yBAAkC,EAClCC,OAAoB,EACpB;IACA,QAAQ7W,IAAI;MAIV,KAAK,sBAAsB;QACzB,OAAO,IAAI;MACb,KAAK,qBAAqB;QACxB,OAAO,WAAW;MACpB,KAAK,qBAAqB;MAC1B,KAAK,2BAA2B;QAC9B,OAAO,YAAY;MACrB,KAAK,gBAAgB;MACrB,KAAK,uBAAuB;MAC5B,KAAK,iBAAiB;QACpB,OACE,CAAC6W,OAAO,OAA0B,IAAI,CAACD,yBAAyB,KAC/D,CAAC,YAAY,EAAE,IAAI,CAAuB;MAE/C;QACE,OAAO,KAAK,CAACD,WAAW,CAAC3W,IAAI,EAAE4W,yBAAyB,EAAEC,OAAO,CAAC;IACtE;EACF;EAEA68B,gBAAgBA,CAAAA,EAAc;IAC5B,IAAI,IAAI,CAACv7B,KAAK,CAACnY,IAAI,OAAa,EAAE;MAChC,OAAO,IAAI,CAACmmC,eAAe,CAAe,IAAI,CAAC;IACjD;IACA,OAAO,KAAK,CAACuN,gBAAgB,EAAE;EACjC;EAEA8tB,4BAA4BA,CAC1BtzB,IAAkB,EAClBz3B,QAAkB,EACJ;IAEd,IAAI,IAAI,CAACqb,KAAK,CAAM,EAAA,CAAC,IAAI,IAAI,CAACA,KAAK,CAAa,EAAA,CAAC,EAAE;MACjD,MAAM2jB,aAAa,GAAG,IAAI,CAACqoB,gCAAgC,EAAE;MAE7D,IAAI,IAAI,CAAChsC,KAAK,CAAA,EAAU,CAAC,EAAE;QACzB,MAAMiiB,IAAI,GAAG,KAAK,CAACytB,4BAA4B,CAC7CtzB,IAAI,EACJz3B,QACF,CAAqB;QAGd;UACLs9B,IAAI,CAACp+B,cAAc,GAAG8/B,aAAa;QACrC;QAEA,OAAO1B,IAAI;MACb;MAEA,IAAI,CAAC9uC,UAAU,CAAC,IAAI,IAAW,CAAC;IAClC;IAEA,OAAO,KAAK,CAACu8D,4BAA4B,CAACtzB,IAAI,EAAEz3B,QAAQ,CAAC;EAC3D;EAEAi2C,mBAAmBA,CACjBtb,KAAiD,EACxC;IACT,IACE,IAAI,CAACj5B,KAAK,CAACoX,gBAAgB,IAC3B,IAAI,CAACuC,KAAK,GAAS,CAAC,IACpB,IAAI,CAACmD,iBAAiB,CAAE,CAAA,KAAKmc,KAAK,EAClC;MACA,IAAI,CAACnpB,IAAI,CAAA,CAAE;MACX,OAAO,KAAK;IACd;IACA,OAAO,KAAK,CAACykC,mBAAmB,CAACtb,KAAK,CAAC;EACzC;EAOAI,aAAaA,CAAAA,EAAY;IACvB,OAAO,IAAI,CAAC1f,KAAK,CAAM,EAAA,CAAC,IAAI,KAAK,CAAC0f,aAAa,CAAA,CAAE;EACnD;EAEAC,eAAeA,CAAAA,EAAY;IACzB,OACE,IAAI,CAAC3f,KAAK,CAAQ,EAAA,CAAC,IAAI,IAAI,CAACA,KAAK,CAAA,EAAS,CAAC,IAAI,KAAK,CAAC2f,eAAe,EAAE;EAE1E;EAEAa,iBAAiBA,CACf77B,QAA0B,EAC1Bq6B,IAAqB,EACV;IACX,MAAM/wC,IAAI,GAAG,KAAK,CAACuyC,iBAAiB,CAAC77B,QAAQ,EAAEq6B,IAAI,CAAC;IAEpD,IACE/wC,IAAI,CAACC,IAAI,KAAK,mBAAmB,IACjCD,IAAI,CAAC4mC,cAAc,IACnB5mC,IAAI,CAACopC,KAAK,CAACxrC,KAAK,GAAGoC,IAAI,CAAC4mC,cAAc,CAAChpC,KAAK,EAC5C;MACA,IAAI,CAAC2Z,KAAK,CAAC22C,QAAQ,CAACiD,yBAAyB,EAAEnxD,IAAI,CAAC4mC,cAAc,CAAC;IACrE;IAEA,OAAO5mC,IAAI;EACb;EAGA+1B,gBAAgBA,CAAC53B,IAAY,EAAQ;IACnC,IAAI,IAAI,CAACia,KAAK,CAACiX,MAAM,EAAE;MACrB,IAAIlxB,IAAI,OAA0B,EAAE;QAClC,IAAI,CAAC04B,QAAQ,CAAQ,EAAA,EAAA,CAAC,CAAC;QACvB;MACF;MACA,IAAI14B,IAAI,OAAuB,EAAE;QAC/B,IAAI,CAAC04B,QAAQ,CAAQ,EAAA,EAAA,CAAC,CAAC;QACvB;MACF;IACF;IACA,KAAK,CAACd,gBAAgB,CAAC53B,IAAI,CAAC;EAC9B;EAGAosC,YAAYA,CAAAA,EAAG;IACb,MAAM;MAAEtqC;KAAM,GAAG,IAAI,CAACmY,KAAK;IAC3B,IAAInY,IAAI,OAAU,EAAE;MAClB,IAAI,CAACmY,KAAK,CAAC/J,GAAG,IAAI,CAAC;MACnB,IAAI,CAACspB,YAAY,CAAA,CAAE;IACrB,CAAC,MAAM,IAAI13B,IAAI,KAAA,EAAU,EAAE;MACzB,IAAI,CAACmY,KAAK,CAAC/J,GAAG,IAAI,CAAC;MACnB,IAAI,CAACupB,YAAY,CAAA,CAAE;IACrB;EACF;EAEAyS,SAASA,CAAAA,EAAG;IACV,MAAM;MAAEpqC;KAAM,GAAG,IAAI,CAACmY,KAAK;IAC3B,IAAInY,IAAI,OAAiB,EAAE;MACzB,IAAI,CAACmY,KAAK,CAAC/J,GAAG,IAAI,CAAC;MACnB,IAAI,CAACwoB,QAAQ,CAAQ,EAAA,EAAA,CAAC,CAAC;MACvB,OAAA,EAAA;IACF;IACA,OAAO52B,IAAI;EACb;EAEAsvC,gBAAgBA,CACdyB,QAAsB,EACtBxB,gBAA6C,EAC7Ct4B,KAAc,EACR;IACN,KAAK,IAAI4P,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkqB,QAAQ,CAACx4B,MAAM,EAAEsO,CAAC,EAAE,EAAE;MACxC,MAAMqnB,IAAI,GAAG6C,QAAQ,CAAClqB,CAAC,CAAC;MACxB,IAAI,CAAAqnB,IAAI,IAAJA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,IAAI,CAAEluC,IAAI,MAAK,sBAAsB,EAAE;QACzC+wC,QAAQ,CAAClqB,CAAC,CAAC,GAAG,IAAI,CAAC8mB,mBAAmB,CAACO,IAAI,CAAC;MAC9C;IACF;IACA,KAAK,CAACoB,gBAAgB,CAACyB,QAAQ,EAAExB,gBAAgB,EAAEt4B,KAAK,CAAC;EAC3D;EAEA02B,mBAAmBA,CAAC5tC,IAA4B,EAAgB;IAC7DA,IAAI,CAACmT,UAAU,CAAkByzB,cAAc,GAAG5mC,IAAI,CAAC4mC,cAAc;IAEtE,IAAI,CAACntB,gBAAgB,CAACzZ,IAAI,CAACmT,UAAU,EAAEnT,IAAI,CAAC4mC,cAAc,CAAC34B,GAAG,CAACpQ,GAAG,CAAC;IAEnE,OAAOmC,IAAI,CAACmT,UAAU;EACxB;EAEA2hC,gBAAgBA,CAAC/gC,MAAqB,EAAE;IACtC,IAAI,IAAI,CAACge,KAAK,CAAA,EAAS,CAAC,EAAE;MACxB,OAAOhe,MAAM,CAACs7B,KAAK,CAAClB,IAAI,IAAI,IAAI,CAACp3B,YAAY,CAACo3B,IAAI,EAAE,IAAI,CAAC,CAAC;IAC5D;IACA,OAAO,KAAK,CAAC2G,gBAAgB,CAAC/gC,MAAM,CAAC;EACvC;EAEAkgC,qBAAqBA,CAAAA,EAAY;IAC/B,OAAO,IAAI,CAACliB,KAAK,CAAS,EAAA,CAAC,IAAI,KAAK,CAACkiB,qBAAqB,CAAA,CAAE;EAC9D;EAEAytB,uBAAuBA,CAAAA,EAAG;IAExB,OAAO,KAAK,CAACA,uBAAuB,CAAA,CAAE,IAAI,IAAI,CAAC7B,eAAe,CAAA,CAAE;EAClE;EAEAxnB,+BAA+BA,CAC7Br4C,IAAyB,EACJ;IAErB,IAAI,IAAI,CAAC+xB,KAAK,CAAM,EAAA,CAAC,IAAI,IAAI,CAACA,KAAK,CAAa,EAAA,CAAC,EAAE;MACjD,MAAM2jB,aAAa,GAAG,IAAI,CAACqnB,kBAAkB,CAAC,MAC5C,IAAI,CAACgB,gCAAgC,CAAA,CACvC,CAAC;MACD,IAAIroB,aAAa,EAAE;QAGV;UACL11C,IAAI,CAAC4V,cAAc,GAAG8/B,aAAa;QACrC;MACF;IACF;IACA,OAAO,KAAK,CAAC2C,+BAA+B,CAACr4C,IAAI,CAAC;EACpD;EAEA2hE,iCAAiCA,CAC/B7tD,MAAsC,EAC9B;IACR,MAAM8tD,SAAS,GAAG,KAAK,CAACD,iCAAiC,CAAC7tD,MAAM,CAAC;IACjE,MAAMC,MAAM,GAAG,IAAI,CAACF,4BAA4B,CAACC,MAAM,CAAC;IACxD,MAAM+tD,UAAU,GAAG9tD,MAAM,CAAC,CAAC,CAAC;IAC5B,MAAM+tD,eAAe,GAAGD,UAAU,IAAI,IAAI,CAAC/vB,WAAW,CAAC+vB,UAAU,CAAC;IAElE,OAAOC,eAAe,GAAGF,SAAS,GAAG,CAAC,GAAGA,SAAS;EACpD;EAEAG,qBAAqBA,CAAAA,EAAc;IACjC,MAAMv0B,KAAK,GAAG,KAAK,CAACu0B,qBAAqB,EAAE;IAC3C,MAAM9hE,IAAI,GAAG,IAAI,CAAC02D,wBAAwB,EAAE;IAE5C,IAAI12D,IAAI,EAAE;MACRutC,KAAK,CAAC5G,cAAc,GAAG3mC,IAAI;MAC3B,IAAI,CAACwZ,gBAAgB,CAAC+zB,KAAK,CAAC;IAC9B;IAEA,OAAOA,KAAK;EACd;EAEA2vB,kBAAkBA,CAAIjzB,EAAW,EAAK;IACpC,MAAM;MAAE1a,gBAAgB,EAAEwyC,mBAAmB;MAAE56C,MAAM,EAAE66C;KAAW,GAChE,IAAI,CAAC7pD,KAAK;IACZ,IAAI,CAACA,KAAK,CAACoX,gBAAgB,GAAG,IAAI;IAClC,IAAI,CAACpX,KAAK,CAACgP,MAAM,GAAG,KAAK;IACzB,IAAI;MACF,OAAO8iB,EAAE,CAAA,CAAE;IACb,CAAC,SAAS;MACR,IAAI,CAAC9xB,KAAK,CAACoX,gBAAgB,GAAGwyC,mBAAmB;MACjD,IAAI,CAAC5pD,KAAK,CAACgP,MAAM,GAAG66C,SAAS;IAC/B;EACF;EAEA5E,UAAUA,CACRr9D,IAAe,EACfswC,WAAoB,EACpBC,UAAoB,EACjB;IACH,MAAM2xB,kBAAkB,GAAG,IAAI,CAAC9pD,KAAK,CAACqX,eAAe;IACrD,IAAI,CAACrX,KAAK,CAACqX,eAAe,GAAG,CAAC,CAAEzvB,IAAI,CAAS04D,QAAQ;IACrD,IAAI;MACF,OAAO,KAAK,CAAC2E,UAAU,CAACr9D,IAAI,EAAEswC,WAAW,EAAEC,UAAU,CAAC;IACxD,CAAC,SAAS;MACR,IAAI,CAACn4B,KAAK,CAACqX,eAAe,GAAGyyC,kBAAkB;IACjD;EACF;EAEAtE,0BAA0BA,CACxB59D,IAAS,EACTkY,UAAgC,EACkC;IAClE,IAAI,IAAI,CAAC6Z,KAAK,CAAA,EAAU,CAAC,EAAE;MACzB/xB,IAAI,CAAC04D,QAAQ,GAAG,IAAI;MACpB,OAAO,IAAI,CAACyJ,mBAAmB,CAC7BjqD,UAAU,EACV,IAAI,CAACmlD,UAAU,CACbr9D,IAAI,EACc,IAAI,EACL,KACnB,CACF,CAAC;IACF,CAAA,MAAM,IAAI,IAAI,CAAC+8B,YAAY,CAAA,GAAc,CAAC,EAAE;MAM3C,IAAI,CAAC,IAAI,CAACU,qBAAqB,EAAE,EAAE;QACjCz9B,IAAI,CAAC04D,QAAQ,GAAG,IAAI;QACpB,IAAI,CAACnhD,KAAK,CAAC22C,QAAQ,CAACqC,wCAAwC,EAAEvwD,IAAI,CAAC;QACnE,OAAO,IAAI,CAACw7D,2BAA2B,CACrCx7D,IACF,CAAC;MACH;IACF,CAAC,MAAM;MACL,IAAI,CAACkF,UAAU,CAAC,IAAI,IAAW,CAAC;IAClC;EACF;EAEAmQ,WAAWA,CAGTrV,IAAe,EACfsV,WAAoB,EACpB5B,OAAgB,EAChB6B,aAAsB,EACtBC,gBAAyB,EACzBvV,IAAe,EACfwV,YAAsB,EACtB;IACA,MAAM3B,MAAM,GAAG,KAAK,CAACuB,WAAW,CAC9BrV,IAAI,EACJsV,WAAW,EACX5B,OAAO,EACP6B,aAAa,EACbC,gBAAgB,EAChBvV,IAAI,EACJwV,YACF,CAAC;IAED,IAAI3B,MAAM,CAAC4kD,QAAQ,EAAE;MACnB,MAAM0J,eAAe,GAAG,IAAI,CAACn3C,SAAS,CAAC,QAAQ,CAAC;MAChD,MAAMo3C,QAAQ,GAAGD,eAAe,GAE5BtuD,MAAM,CAAC9G,KAAK,GACZ8G,MAAM;MACV,IAAIuuD,QAAQ,CAAC3tD,IAAI,EAAE;QACjB,MAAM;UAAE7N;QAAK,CAAA,GAAGiN,MAAM;QACtB,IAAI,CAACyD,KAAK,CAAC22C,QAAQ,CAACC,+BAA+B,EAAEr6C,MAAM,EAAE;UAC3Ds6C,UAAU,EACRvnD,GAAG,CAAC5G,IAAI,KAAK,YAAY,IAAI,CAAC6T,MAAM,CAAC+B,QAAQ,GACzChP,GAAG,CAACV,IAAI,GACR,IAAI,IAAI,CAACinB,KAAK,CAAC6C,KAAK,CAAC,IAAI,CAAClF,iBAAiB,CAAClkB,GAAG,CAACjJ,KAAK,CAAC,EAAE,IAAI,CAACmtB,iBAAiB,CAAClkB,GAAG,CAAChJ,GAAG,CAAC,CAAC;QAChG,CAAC,CAAC;MACJ;IACF;IACA,OAAOiW,MAAM;EACf;EAEA0hD,wBAAwBA,CAAAA,EAA0B;IAChD,MAAMX,QAAsB,GAAG,IAAI,CAACzuB,eAAe,EAAE;IACrD,OAAiDyuB,QAAQ,CAAC1uD,IAAI;EAChE;EAEAm8D,2BAA2BA,CAAAA,EAAY;IACrC,OAAO,CAAC,CAAC,IAAI,CAACztD,eAAe,CAAC,YAAY,EAAE,KAAK,CAAC;EACpD;EAEAnD,KAAKA,CAAAA,EAAG;IACN,IAAI,IAAI,CAAC4wD,2BAA2B,EAAE,EAAE;MACtC,IAAI,CAAClqD,KAAK,CAACoX,gBAAgB,GAAG,IAAI;IACpC;IACA,OAAO,KAAK,CAAC9d,KAAK,EAAE;EACtB;EAEA6wD,aAAaA,CAAAA,EAAG;IACd,IAAI,IAAI,CAACD,2BAA2B,EAAE,EAAE;MACtC,IAAI,CAAClqD,KAAK,CAACoX,gBAAgB,GAAG,IAAI;IACpC;IACA,OAAO,KAAK,CAAC+yC,aAAa,EAAE;EAC9B;EAEAC,oBAAoBA,CAClBxiE,IAA+B,EAC/ByiE,QAAiB,EACjBC,cAAuB,EACvBtvB,eAAwB,EACxB;IACA,IAAI,CAACqvB,QAAQ,IAAIrvB,eAAe,EAAE;MAChC,IAAI,CAACuvB,kCAAkC,CACrC3iE,IAAI,EACW,KAAK,EACpB0iE,cACF,CAAC;MACD,OAAO,IAAI,CAAC5sD,UAAU,CAAoB9V,IAAI,EAAE,iBAAiB,CAAC;IACpE;IACAA,IAAI,CAAC6nC,UAAU,GAAG,OAAO;IACzB,OAAO,KAAK,CAAC26B,oBAAoB,CAC/BxiE,IAAI,EACJyiE,QAAQ,EACRC,cAAc,EACdtvB,eACF,CAAC;EACH;EAEAH,oBAAoBA,CAClBN,SAAoC,EACpCO,gBAAyB,EACzBC,kBAA2B,EAC3BC,eAAwB,EAExBrpB,WAAoC,EACjB;IACnB,IAAI,CAACmpB,gBAAgB,IAAIE,eAAe,EAAE;MACxC,IAAI,CAACuvB,kCAAkC,CACrChwB,SAAS,EACM,IAAI,EACnBQ,kBACF,CAAC;MACD,OAAO,IAAI,CAACr9B,UAAU,CAAoB68B,SAAS,EAAE,iBAAiB,CAAC;IACzE;IACAA,SAAS,CAAClO,UAAU,GAAG,OAAO;IAC9B,OAAO,KAAK,CAACwO,oBAAoB,CAC/BN,SAAS,EACTO,gBAAgB,EAChBC,kBAAkB,EAClBC,eAAe,EACfD,kBAAkB,cAGpB,CAAC;EACH;EAEAwvB,kCAAkCA,CAChC3iE,IAAS,EACT4iE,QAAiB,EACjBC,wBAAiC,EAC3B;IACN,MAAMC,WAAW,GAAGF,QAAQ,GAAG,UAAU,GAAG,OAAO;IACnD,MAAMG,YAAY,GAAGH,QAAQ,GAAG,OAAO,GAAG,UAAU;IAEpD,IAAII,QAAQ,GAAGhjE,IAAI,CAAC8iE,WAAW,CAAC;IAChC,IAAIG,SAAS;IAEb,IAAIC,gBAAgB,GAAG,KAAK;IAC5B,IAAIC,iBAAiB,GAAG,IAAI;IAE5B,MAAMl1D,GAAG,GAAG+0D,QAAQ,CAAC/0D,GAAG,CAACrQ,KAAK;IAO9B,IAAI,IAAI,CAACm/B,YAAY,CAAA,EAAO,CAAC,EAAE;MAE7B,MAAMqmC,OAAO,GAAG,IAAI,CAACh9B,eAAe,EAAE;MACtC,IAAI,IAAI,CAACrJ,YAAY,CAAA,EAAO,CAAC,EAAE;QAE7B,MAAMsmC,QAAQ,GAAG,IAAI,CAACj9B,eAAe,EAAE;QACvC,IAAIlhB,0BAA0B,CAAC,IAAI,CAAC9M,KAAK,CAACnY,IAAI,CAAC,EAAE;UAE/CijE,gBAAgB,GAAG,IAAI;UACvBF,QAAQ,GAAGI,OAAO;UAClBH,SAAS,GAAGL,QAAQ,GAChB,IAAI,CAACx8B,eAAe,CAAA,CAAE,GACtB,IAAI,CAACk9B,qBAAqB,EAAE;UAChCH,iBAAiB,GAAG,KAAK;QAC3B,CAAC,MAAM;UAELF,SAAS,GAAGI,QAAQ;UACpBF,iBAAiB,GAAG,KAAK;QAC3B;MACD,CAAA,MAAM,IAAIj+C,0BAA0B,CAAC,IAAI,CAAC9M,KAAK,CAACnY,IAAI,CAAC,EAAE;QAEtDkjE,iBAAiB,GAAG,KAAK;QACzBF,SAAS,GAAGL,QAAQ,GAChB,IAAI,CAACx8B,eAAe,CAAA,CAAE,GACtB,IAAI,CAACk9B,qBAAqB,EAAE;MAClC,CAAC,MAAM;QAELJ,gBAAgB,GAAG,IAAI;QACvBF,QAAQ,GAAGI,OAAO;MACpB;IACD,CAAA,MAAM,IAAIl+C,0BAA0B,CAAC,IAAI,CAAC9M,KAAK,CAACnY,IAAI,CAAC,EAAE;MAEtDijE,gBAAgB,GAAG,IAAI;MACvB,IAAIN,QAAQ,EAAE;QACZI,QAAQ,GAAG,IAAI,CAAC58B,eAAe,CAAC,IAAI,CAAC;QACrC,IAAI,CAAC,IAAI,CAACrJ,YAAY,CAAA,EAAO,CAAC,EAAE;UAC9B,IAAI,CAAC2W,iBAAiB,CACpBsvB,QAAQ,CAAC78D,IAAI,EACb68D,QAAQ,CAAC/0D,GAAG,CAACrQ,KAAK,EAClB,IAAI,EACJ,IACF,CAAC;QACH;MACF,CAAC,MAAM;QACLolE,QAAQ,GAAG,IAAI,CAACM,qBAAqB,EAAE;MACzC;IACF;IACA,IAAIJ,gBAAgB,IAAIL,wBAAwB,EAAE;MAChD,IAAI,CAACtrD,KAAK,CACRqrD,QAAQ,GACJ1U,QAAQ,CAACoD,+BAA+B,GACxCpD,QAAQ,CAACmD,+BAA+B,EAC5CpjD,GACF,CAAC;IACH;IAEAjO,IAAI,CAAC8iE,WAAW,CAAC,GAAGE,QAAQ;IAC5BhjE,IAAI,CAAC+iE,YAAY,CAAC,GAAGE,SAAS;IAE9B,MAAMM,OAAO,GAAGX,QAAQ,GAAG,YAAY,GAAG,YAAY;IACtD5iE,IAAI,CAACujE,OAAO,CAAC,GAAGL,gBAAgB,GAAG,MAAM,GAAG,OAAO;IAEnD,IAAIC,iBAAiB,IAAI,IAAI,CAAC9lC,aAAa,CAAA,EAAO,CAAC,EAAE;MACnDr9B,IAAI,CAAC+iE,YAAY,CAAC,GAAGH,QAAQ,GACzB,IAAI,CAACx8B,eAAe,EAAE,GACtB,IAAI,CAACk9B,qBAAqB,EAAE;IAClC;IACA,IAAI,CAACtjE,IAAI,CAAC+iE,YAAY,CAAC,EAAE;MACvB/iE,IAAI,CAAC+iE,YAAY,CAAC,GAAG3iC,eAAe,CAACpgC,IAAI,CAAC8iE,WAAW,CAAC,CAAC;IACzD;IACA,IAAIF,QAAQ,EAAE;MACZ,IAAI,CAACtV,eAAe,CAClBttD,IAAI,CAAC+iE,YAAY,CAAC,EAClBG,gBAAgB,cAGlB,CAAC;IACH;EACF;AACF,CAAC;AAEH,SAASM,qBAAqBA,CAACrwD,UAAwB,EAAW;EAChE,IAAIA,UAAU,CAAClT,IAAI,KAAK,kBAAkB,EAAE,OAAO,KAAK;EAExD,MAAM;IAAE4V,QAAQ;IAAEgpB;EAAU,CAAA,GAAG1rB,UAAU;EAEzC,IACE0C,QAAQ,IACRgpB,QAAQ,CAAC5+B,IAAI,KAAK,eAAe,KAChC4+B,QAAQ,CAAC5+B,IAAI,KAAK,iBAAiB,IAAI4+B,QAAQ,CAAC4kC,WAAW,CAACjrD,MAAM,GAAG,CAAC,CAAC,EACxE;IACA,OAAO,KAAK;EACd;EAEA,OAAOkrD,iCAAiC,CAACvwD,UAAU,CAAC9B,MAAM,CAAC;AAC7D;AAQA,SAAS4uD,8BAA8BA,CACrC9sD,UAAwB,EACxB5B,MAAe,EACN;EAAA,IAAA87C,iBAAA;EACT,MAAM;IAAEptD;EAAM,CAAA,GAAGkT,UAAU;EAC3B,IAAAk6C,CAAAA,iBAAA,GAAIl6C,UAAU,CAACE,KAAK,KAAhBg6C,IAAAA,IAAAA,iBAAA,CAAkBn5C,aAAa,EAAE;IACnC,OAAO,KAAK;EACd;EACA,IAAI3C,MAAM,EAAE;IACV,IAAItR,IAAI,KAAK,SAAS,EAAE;MACtB,MAAM;QAAE+M;MAAO,CAAA,GAAGmG,UAAU;MAC5B,IAAI,OAAOnG,KAAK,KAAK,QAAQ,IAAI,OAAOA,KAAK,KAAK,SAAS,EAAE;QAC3D,OAAO,IAAI;MACb;IACF;EACF,CAAC,MAAM;IACL,IAAI/M,IAAI,KAAK,eAAe,IAAIA,IAAI,KAAK,gBAAgB,EAAE;MACzD,OAAO,IAAI;IACb;EACF;EACA,IAAI0jE,QAAQ,CAACxwD,UAAU,EAAE5B,MAAM,CAAC,IAAIqyD,gBAAgB,CAACzwD,UAAU,EAAE5B,MAAM,CAAC,EAAE;IACxE,OAAO,IAAI;EACb;EACA,IAAItR,IAAI,KAAK,iBAAiB,IAAIkT,UAAU,CAACswD,WAAW,CAACjrD,MAAM,KAAK,CAAC,EAAE;IACrE,OAAO,IAAI;EACb;EACA,IAAIgrD,qBAAqB,CAACrwD,UAAU,CAAC,EAAE;IACrC,OAAO,IAAI;EACb;EACA,OAAO,KAAK;AACd;AAEA,SAASwwD,QAAQA,CAACxwD,UAAwB,EAAE5B,MAAe,EAAW;EACpE,IAAIA,MAAM,EAAE;IACV,OACE4B,UAAU,CAAClT,IAAI,KAAK,SAAS,KAC5B,OAAOkT,UAAU,CAACnG,KAAK,KAAK,QAAQ,IAAI,QAAQ,IAAImG,UAAU,CAAC;EAEpE;EACA,OACEA,UAAU,CAAClT,IAAI,KAAK,gBAAgB,IAAIkT,UAAU,CAAClT,IAAI,KAAK,eAAe;AAE/E;AAEA,SAAS2jE,gBAAgBA,CAACzwD,UAAwB,EAAE5B,MAAe,EAAW;EAC5E,IAAI4B,UAAU,CAAClT,IAAI,KAAK,iBAAiB,EAAE;IACzC,MAAM;MAAE4rD,QAAQ;MAAE/8C;IAAU,CAAA,GAAGqE,UAAU;IACzC,IAAI04C,QAAQ,KAAK,GAAG,IAAI8X,QAAQ,CAAC70D,QAAQ,EAAEyC,MAAM,CAAC,EAAE;MAClD,OAAO,IAAI;IACb;EACF;EACA,OAAO,KAAK;AACd;AAEA,SAASmyD,iCAAiCA,CAACvwD,UAAwB,EAAW;EAC5E,IAAIA,UAAU,CAAClT,IAAI,KAAK,YAAY,EAAE,OAAO,IAAI;EACjD,IAAIkT,UAAU,CAAClT,IAAI,KAAK,kBAAkB,IAAIkT,UAAU,CAAC0C,QAAQ,EAAE;IACjE,OAAO,KAAK;EACd;EAEA,OAAO6tD,iCAAiC,CAACvwD,UAAU,CAAC9B,MAAM,CAAC;AAC7D;ACruIA,MAAMwyD,iBAAiB,GAAGh1D,cAAc,cAAc,CAAC;EACrDi1D,mBAAmB,EAAE,2BAA2B;EAChDC,eAAe,EAAE;AACnB,CAAC,CAAC;AAEF,IAAAC,YAAA,GAAgBxyD,UAAyB,IACvC,MAAMyyD,uBAAuB,SAASzyD,UAAU,CAAmB;EACjE0yD,gBAAgBA,CACd3jC,YAAe,EACwC;IACvD,IAAI,IAAI,CAACxO,KAAK,CAAA,GAAe,CAAC,EAAE;MAC9B,MAAM/xB,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAoB;MAC/C,IAAI,CAACuS,IAAI,CAAA,CAAE;MACX,IAAI,CAACi8C,aAAa,CAAA,CAAE;MAIpBnkE,IAAI,CAACmG,IAAI,GAAG,KAAK,CAACigC,eAAe,CAAe,IAAI,CAAC;MAErD,IAAI,CAAC+9B,aAAa,CAAA,CAAE;MACpB,IAAI,CAACtmC,MAAM,CAAA,GAAe,CAAC;MAC3B,OAAO,IAAI,CAACumC,iBAAiB,CAACpkE,IAAI,EAAEugC,YAAY,CAAC;IACnD;EACF;EAEA6jC,iBAAiBA,CACfpkE,IAA8D,EAC9DugC,YAAe,EAC2B;IAC1C,IAAIjc,WAAW,GAAGtkB,IAAmC;IAErD,IAAI,CAACskB,WAAW,CAACic,YAAY,IAAI,CAACjc,WAAW,CAACrkB,IAAI,EAAE;MAClDqkB,WAAW,GAAG,IAAI,CAACxO,UAAU,CAC3BwO,WAAW,EACX,aACF,CAAgC;IAClC;IAEAA,WAAW,CAACic,YAAY,GAAGA,YAAY;IACvC,OAAOjc,WAAW;EACpB;EAMAyR,gBAAgBA,CAAC53B,IAAY,EAAE;IAC7B,IACEA,IAAI,KAA0B,EAAA,IAC9B,IAAI,CAACivB,KAAK,CAACC,UAAU,CAAC,IAAI,CAACjV,KAAK,CAAC/J,GAAG,GAAG,CAAC,CAAC,OAA0B,EACnE;MACA,IAAI,CAACwoB,QAAQ,CAAiB,GAAA,EAAA,CAAC,CAAC;IAClC,CAAC,MAAM;MACL,KAAK,CAACd,gBAAgB,CAAC53B,IAAI,CAAC;IAC9B;EACF;EAMAopC,aAAaA,CACX5wB,mBAA6C,EACb;IAChC,OACE,IAAI,CAACutD,gBAAgB,CAAC,YAAY,CAAC,IACnC,KAAK,CAAC38B,aAAa,CAAC5wB,mBAAmB,CAAC;EAE5C;EAEAyvB,eAAeA,CAAC+C,OAAiB,EAAkC;IAKjE,OACE,IAAI,CAAC+6B,gBAAgB,CAAC,YAAY,CAAC,IAAI,KAAK,CAAC99B,eAAe,CAAC+C,OAAO,CAAC;EAEzE;EAEAuK,iBAAiBA,CACfjsB,IAAY,EACZ/Q,QAAkB,EAClB6oD,aAAsB,EACtBvoD,SAAkB,EAClB;IAIA,IAAIyQ,IAAI,KAAK5X,SAAS,EAAE;MACtB,KAAK,CAAC6jC,iBAAiB,CAACjsB,IAAI,EAAE/Q,QAAQ,EAAE6oD,aAAa,EAAEvoD,SAAS,CAAC;IACnE;EACF;EAMA28B,gBAAgBA,CAAAA,EAAgC;IAC9C,OAAO,IAAI,CAACuwB,gBAAgB,CAAC,SAAS,CAAC,IAAI,KAAK,CAACvwB,gBAAgB,CAAA,CAAE;EACrE;EAEA/8B,WAAWA,CAAC3W,IAAY,EAAEuxC,eAAwB,EAAE16B,OAAoB,EAAE;IACxE,OACE7W,IAAI,KAAK,aAAa,IACtB,KAAK,CAAC2W,WAAW,CAAC3W,IAAI,EAAEuxC,eAAe,EAAE16B,OAAO,CAAC;EAErD;EAEAG,YAAYA,CAACjX,IAAY,EAAEkX,KAAc,EAAQ;IAC/C,IACElX,IAAI,IACJA,IAAI,CAACC,IAAI,KAAK,aAAa,IAC3BD,IAAI,CAACugC,YAAY,KAAK,YAAY,EAClC;MACAvgC,IAAI,CAACugC,YAAY,GAAG,SAAS;IAC/B,CAAC,MAAM;MACL,KAAK,CAACtpB,YAAY,CAACjX,IAAI,EAAEkX,KAAK,CAAC;IACjC;EACF;EAMAmtD,yBAAyBA,CAAC7zC,EAAU,EAAEniB,GAAW,EAAW;IAC1D,IAAI,KAAK,CAACg2D,yBAAyB,CAAC7zC,EAAE,EAAEniB,GAAG,CAAC,EAAE;MAC5C,OAAO,IAAI;IACb;IAIA,MAAMmmB,SAAS,GAAG,IAAI,CAACI,SAAS,EAAE;IAClC,IAAIJ,SAAS,CAACv0B,IAAI,KAAA,GAAmB,EAAE;MACrC,OAAO,IAAI;IACb;IAEA,OAAO,KAAK;EACd;EAEAqkE,mBAAmBA,CACjBtkE,IAA4C,EAC5CukE,OAAgB,EAChB;IAEA,IAAIvkE,IAAI,CAACwa,KAAK,IAAIxa,IAAI,CAACwa,KAAK,CAACva,IAAI,KAAK,aAAa,EAAE;IACrD,KAAK,CAACqkE,mBAAmB,CAACtkE,IAAI,EAAEukE,OAAO,CAAC;EAC1C;EAGAr2B,wBAAwBA,CACtBluC,IAAmC,EACnCmuC,IAAoC,EACL;IAAA,IAAAgD,WAAA;IAE/B,IAAIhD,IAAI,CAACluC,IAAI,KAAK,aAAa,IAAAkxC,CAAAA,WAAA,GAAIhD,IAAI,CAAC96B,KAAK,KAAA,IAAA,IAAV89B,WAAA,CAAYj9B,aAAa,EAAE;MAE5D,OAAO,KAAK,CAACg6B,wBAAwB,CAACluC,IAAI,EAAEmuC,IAAI,CAAC;IACnD;IAEA,IAAI,IAAI,CAACpc,KAAK,CAAA,EAAS,CAAC,EAAE;MAExB,MAAMxe,IAAwB,GAAGvT,IAAI;MACrCuT,IAAI,CAACiH,KAAK,GAAG,IAAI,CAAC4pD,iBAAiB,CAACj2B,IAAI,EAAE,YAAY,CAAC;MACvD,IAAI,CAACjmB,IAAI,CAAA,CAAE;MACX3U,IAAI,CAACmB,IAAI,GAAG,KAAK,CAAC8vD,+CAA+C,EAAE;MACnE,OAAO,IAAI,CAAC1uD,UAAU,CAACvC,IAAI,EAAE,kBAAkB,CAAC;IAClD;IAEA,IAAI,CAACoqB,SAAS,CAAA,CAAE;IAChB,MAAM8mC,eAAe,GAAGzkE,IAA6C;IACrEykE,eAAe,CAACt+D,IAAI,GAAIgoC,IAAI,CAAmBhoC,IAAI;IACnD,OAAO,IAAI,CAACi+D,iBAAiB,CAACK,eAAe,EAAE,WAAW,CAAC;EAC7D;EAEAC,UAAUA,CACRtwD,eAAyB,EACzBuwD,qBAA+B,EAC/BrwD,eAA2D,EACvB;IACpC,OACE,IAAI,CAAC4vD,gBAAgB,CAAC,gBAAgB,CAAC,IACvC,KAAK,CAACQ,UAAU,CACdtwD,eAAe,EACfuwD,qBAAqB,EACrBrwD,eACF,CAAC;EAEL;EAEAswD,eAAeA,CACbC,SAAmB,EACgC;IACnD,OACE,IAAI,CAACX,gBAAgB,CAAC,YAAY,CAAC,IAAI,KAAK,CAACU,eAAe,CAACC,SAAS,CAAC;EAE3E;EAEAxH,UAAUA,CACRr9D,IAAO,EACPswC,WAAiD,EACjDC,UAAoB,EACjB;IACH,MAAMtwC,IAAI,GAAGqwC,WAAW,GAAG,kBAAkB,GAAG,iBAAiB;IAEjE,IAAI,CAACpoB,IAAI,CAAA,CAAE;IACX,MAAM+5C,SAAS,GAAG,IAAI,CAAC7pD,KAAK,CAACgP,MAAM;IAEnC,MAAM9C,WAAW,GAAG,IAAI,CAAC4/C,gBAAgB,CAAC,YAAY,CAAC;IACvD,IAAI5/C,WAAW,EAAE;MACf,IACE,IAAI,CAACyN,KAAK,CAAY,EAAA,CAAC,IACvB,IAAI,CAACA,KAAK,CAAA,GAAe,CAAC,IAC1B,IAAI,CAACA,KAAK,CAAA,CAAU,CAAC,EACrB;QACA/xB,IAAI,CAACgV,EAAE,GAAGsP,WAAW;MACvB,CAAC,MAAM,IAAIisB,UAAU,IAAI,CAACD,WAAW,EAAE;QACrCtwC,IAAI,CAACgV,EAAE,GAAG,IAAI;QACdhV,IAAI,CAAC0U,IAAI,GAAG,IAAI,CAAC0vD,iBAAiB,CAAC9/C,WAAW,EAAE,WAAW,CAAC;QAC5D,OAAO,IAAI,CAACxO,UAAU,CAAC9V,IAAI,EAAEC,IAAI,CAAC;MACpC,CAAC,MAAM;QACL,MAAM,IAAI,CAACsX,KAAK,CACdssD,iBAAiB,CAACC,mBAAmB,EACrC,IAAI,CAAC1rD,KAAK,CAAC1B,QACb,CAAC;MACH;IACF,CAAC,MAAM;MACL,IAAI,CAAC25B,YAAY,CAACrwC,IAAI,EAAEswC,WAAW,EAAEC,UAAU,CAAC;IAClD;IAEA,KAAK,CAACyB,eAAe,CAAChyC,IAAI,CAAC;IAC3BA,IAAI,CAAC0U,IAAI,GACP,IAAI,CAACwvD,gBAAgB,CAAC,WAAW,CAAC,IAClC,KAAK,CAACY,cAAc,CAAC,CAAC,CAAC9kE,IAAI,CAACwR,UAAU,EAAEywD,SAAS,CAAC;IACpD,OAAO,IAAI,CAACnsD,UAAU,CAAC9V,IAAI,EAAEC,IAAI,CAAC;EACpC;EAEAgY,WAAWA,CACTjY,IAIC,EACDkY,UAAgC,EACnB;IACb,MAAMoM,WAAW,GAAG,IAAI,CAAC4/C,gBAAgB,CAAC,YAAY,CAAC;IACvD,IAAI,CAAC5/C,WAAW,EAAE,OAAO,KAAK,CAACrM,WAAW,CAACjY,IAAI,EAAEkY,UAAU,CAAC;IAE5D,MAAMk0B,KAAK,GAAGpsC,IAAwC;IAEtD,IAAI,CAAC,IAAI,CAAC+8B,YAAY,CAAS,EAAA,CAAC,IAAI,CAAC,IAAI,CAAChL,KAAK,CAAA,EAAS,CAAC,EAAE;MAEzDqa,KAAK,CAAC7zB,UAAU,GAAG,EAAE;MACrB6zB,KAAK,CAACv0B,MAAM,GAAG,IAAI;MACnBu0B,KAAK,CAAC1zB,WAAW,GAAG,IAAI,CAAC0rD,iBAAiB,CAAC9/C,WAAW,EAAE,aAAa,CAAC;MACtE,OAAO,IAAI,CAACxO,UAAU,CAACs2B,KAAK,EAAE,wBAAwB,CAAC;IACzD;IAGA,IAAI,CAACzV,YAAY,CAAC,mBAAmB,CAAC;IACtC,MAAMgc,SAAS,GAAG,IAAI,CAACh9B,SAAS,EAA4B;IAC5Dg9B,SAAS,CAACr6B,QAAQ,GAAGgM,WAAW;IAChC8nB,KAAK,CAAC7zB,UAAU,GAAG,CAAC,IAAI,CAACzC,UAAU,CAAC68B,SAAS,EAAE,wBAAwB,CAAC,CAAC;IAEzE,OAAO,KAAK,CAAC16B,WAAW,CAACm0B,KAAK,EAAEl0B,UAAU,CAAC;EAC7C;EAEAm2B,wBAAwBA,CAAAA,EAAY;IAClC,IAAI,IAAI,CAACtc,KAAK,CAAA,EAAY,CAAC,EAAE;MAC3B,MAAM7J,IAAI,GAAG,IAAI,CAAC6M,cAAc,EAAE;MAClC,IAAI,IAAI,CAACiI,oBAAoB,CAAC9U,IAAI,EAAE,MAAM,CAAC,EAAE;QAC3C,IACE,IAAI,CAACkF,KAAK,CAAC23C,UAAU,CACnBh/C,cAAc,CAAe,GAAA,CAAC,EAC9B,IAAI,CAACiP,mBAAmB,CAAC9M,IAAI,GAAG,CAAC,CACnC,CAAC,EACD;UACA,OAAO,IAAI;QACb;MACF;IACF;IACA,OAAO,KAAK,CAACmmB,wBAAwB,EAAE;EACzC;EAEA22B,gCAAgCA,CAC9BhlE,IAIC,EACDy8D,sBAA2C,EACD;IAAA,IAAAwI,WAAA;IAC1C,IAAAA,CAAAA,WAAA,GAAKjlE,IAAI,CAA8BuY,UAAU,KAA7C0sD,IAAAA,IAAAA,WAAA,CAA+CzsD,MAAM,EAAE;MAEzD,OAAO,IAAI;IACb;IACA,OAAO,KAAK,CAACwsD,gCAAgC,CAC3ChlE,IAAI,EACJy8D,sBACF,CAAC;EACH;EAEAyI,WAAWA,CAACllE,IAA8B,EAAQ;IAChD,MAAM;MAAEuY;IAAY,CAAA,GAAGvY,IAAI;IAC3B,IAAIuY,UAAU,IAAA,IAAA,IAAVA,UAAU,CAAEC,MAAM,EAAE;MACtBxY,IAAI,CAACuY,UAAU,GAAGA,UAAU,CAAC4sD,MAAM,CAEjCnlE,IAAI,IAAIA,IAAI,CAACsY,QAAQ,CAACrY,IAAI,KAAK,aACjC,CAAC;IACH;IACA,KAAK,CAACilE,WAAW,CAACllE,IAAI,CAAC;IACvBA,IAAI,CAACuY,UAAU,GAAGA,UAAU;EAC9B;EAEAkvB,WAAWA,CACTznC,IAAiC,EACkB;IACnD,MAAMskB,WAAW,GAAG,IAAI,CAAC4/C,gBAAgB,CAAC,YAAY,CAAC;IACvD,IAAI,CAAC5/C,WAAW,EAAE,OAAO,KAAK,CAACmjB,WAAW,CAACznC,IAAI,CAAC;IAEhDA,IAAI,CAACuY,UAAU,GAAG,EAAE;IAEpB,IAAI,CAAC,IAAI,CAACwkB,YAAY,CAAS,EAAA,CAAC,IAAI,CAAC,IAAI,CAAChL,KAAK,CAAA,EAAS,CAAC,EAAE;MAEzD/xB,IAAI,CAAC6X,MAAM,GAAG,IAAI,CAACusD,iBAAiB,CAAC9/C,WAAW,EAAE,eAAe,CAAC;MAClE,IAAI,CAACqZ,SAAS,CAAA,CAAE;MAChB,OAAO,IAAI,CAAC7nB,UAAU,CAAC9V,IAAI,EAAE,mBAAmB,CAAC;IACnD;IAGA,MAAM2yC,SAAS,GACb,IAAI,CAACx5B,eAAe,CAA2BmL,WAAW,CAAC;IAC7DquB,SAAS,CAACC,KAAK,GAAGtuB,WAAW;IAC7BtkB,IAAI,CAACuY,UAAU,CAACsD,IAAI,CAClB,IAAI,CAAC/F,UAAU,CAAC68B,SAAS,EAAE,wBAAwB,CACrD,CAAC;IAED,IAAI,IAAI,CAACle,GAAG,CAAA,EAAS,CAAC,EAAE;MAEtB,MAAM2wC,aAAa,GAAG,IAAI,CAACC,6BAA6B,CAACrlE,IAAI,CAAC;MAG9D,IAAI,CAAColE,aAAa,EAAE,IAAI,CAACE,0BAA0B,CAACtlE,IAAI,CAAC;IAC3D;IAEA,IAAI,CAACs9B,gBAAgB,CAAA,EAAS,CAAC;IAC/Bt9B,IAAI,CAAC6X,MAAM,GAAG,IAAI,CAAC0tD,iBAAiB,EAAE;IACtC,IAAI,CAAC5nC,SAAS,CAAA,CAAE;IAChB,OAAO,IAAI,CAAC7nB,UAAU,CAAC9V,IAAI,EAAE,mBAAmB,CAAC;EACnD;EAEAulE,iBAAiBA,CAAAA,EAAsC;IAGrD,OACE,IAAI,CAACrB,gBAAgB,CAAC,eAAe,CAAC,IAAI,KAAK,CAACqB,iBAAiB,CAAA,CAAE;EAEvE;EAGApB,aAAaA,CAAAA,EAAS;IACpB,IACE,IAAI,CAAC/rD,KAAK,CAACxa,KAAK,GAChB,IAAI,CAACmtB,iBAAiB,CAAC,IAAI,CAAC3S,KAAK,CAACsB,aAAa,CAACjc,KAAK,CAAC,EACtD;MACA,IAAI,CAAC8Z,KAAK,CAACssD,iBAAiB,CAACE,eAAe,EAAE,IAAI,CAAC3rD,KAAK,CAACsB,aAAa,CAAC;IACzE;EACF;AACF,CAAC;AC3YH,IAAA8rD,WAAA,GAAgBh0D,UAAyB,IACvC,MAAMi0D,gBAAgB,SAASj0D,UAAU,CAAmB;EAC1Dk0D,gBAAgBA,CAAAA,EAAiB;IAC/B,IAAI,IAAI,CAAC3zC,KAAK,CAAA,EAAU,CAAC,EAAE;MACzB,MAAM4zC,mBAAmB,GAAG,IAAI,CAACvtD,KAAK,CAAC1B,QAAQ;MAE/C,MAAM1W,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAgB;MAC3C,IAAI,CAACuS,IAAI,CAAA,CAAE;MACX,IAAIlD,iBAAiB,CAAC,IAAI,CAAC5M,KAAK,CAACnY,IAAI,CAAC,EAAE;QACtC,MAAMkG,IAAI,GAAG,IAAI,CAACy/D,mBAAmB,EAAE;QACvC,MAAM/X,UAAU,GAAG,IAAI,CAAC5gB,gBAAgB,CAACjtC,IAAI,EAAEmG,IAAI,CAAC;QAEpD0nD,UAAU,CAAC5tD,IAAI,GAAG,uBAAuB;QACzC,IAAI,IAAI,CAAC8xB,KAAK,CAAA,EAAU,CAAC,EAAE;UACzB,OAAO87B,UAAU;QACnB;MACF;MACA,IAAI,CAAC3oD,UAAU,CAACygE,mBAAmB,CAAC;IACtC;EACF;EAMAp+B,aAAaA,CAAC5wB,mBAA6C,EAAgB;IACzE,OACE,IAAI,CAAC+uD,gBAAgB,CAAE,CAAA,IAAI,KAAK,CAACn+B,aAAa,CAAC5wB,mBAAmB,CAAC;EAEvE;AACF,CAAC;ACxBH,MAAMkvD,kBAAkB,GAEpB,CAAC,SAAS,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,CAAC;AAC1C,MAAMC,YAAY,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;AAEzC,SAASC,eAAeA,CAACC,UAA4B,EAAE;EAC5D,IAAIA,UAAU,CAACp+C,GAAG,CAAC,YAAY,CAAC,EAAE;IAChC,IAAIo+C,UAAU,CAACp+C,GAAG,CAAC,mBAAmB,CAAC,EAAE;MACvC,MAAM,IAAIzW,KAAK,CACb,iEACF,CAAC;IACH;IAEA,MAAM80D,sBAAsB,GAC1BD,UAAU,CAACt3D,GAAG,CAAC,YAAY,CAAC,CAACu3D,sBAAsB;IACrD,IACEA,sBAAsB,IAAI,IAAI,IAC9B,OAAOA,sBAAsB,KAAK,SAAS,EAC3C;MACA,MAAM,IAAI90D,KAAK,CACb,2DACF,CAAC;IACH;IAEA,MAAM+0D,sBAAsB,GAC1BF,UAAU,CAACt3D,GAAG,CAAC,YAAY,CAAC,CAACw3D,sBAAsB;IACrD,IACEA,sBAAsB,IAAI,IAAI,IAC9B,OAAOA,sBAAsB,KAAK,SAAS,EAC3C;MACA,MAAM,IAAI/0D,KAAK,CAAC,6CAA6C,CAAC;IAChE;EACF;EAEA,IAAI60D,UAAU,CAACp+C,GAAG,CAAC,MAAM,CAAC,IAAIo+C,UAAU,CAACp+C,GAAG,CAAC,YAAY,CAAC,EAAE;IAC1D,MAAM,IAAIzW,KAAK,CAAC,6CAA6C,CAAC;EAChE;EAEA,IAAI60D,UAAU,CAACp+C,GAAG,CAAC,cAAc,CAAC,IAAIo+C,UAAU,CAACp+C,GAAG,CAAC,aAAa,CAAC,EAAE;IACnE,MAAM,IAAIzW,KAAK,CAAC,sDAAsD,CAAC;EACzE;EAEA,IAAI60D,UAAU,CAACp+C,GAAG,CAAC,kBAAkB,CAAC,EAAE;IAAA,IAAAu+C,eAAA;IACtC,MAAM9uC,QAAQ,GAAG2uC,UAAU,CAACt3D,GAAG,CAAC,kBAAkB,CAAC,CAAC2oB,QAAQ;IAE5D,IAAI,CAACwuC,kBAAkB,CAACptC,QAAQ,CAACpB,QAAQ,CAAC,EAAE;MAC1C,MAAM+uC,YAAY,GAAGP,kBAAkB,CAAC3/D,GAAG,CAACmgE,CAAC,IAAI,IAAIA,CAAC,GAAG,CAAC,CAAC//D,IAAI,CAAC,IAAI,CAAC;MACrE,MAAM,IAAI6K,KAAK,CACb,6EAA6Ei1D,YAAY,GAC3F,CAAC;IACH;IAEA,MAAME,iBAAiB,GAEnB,CAAA,CAAAH,eAAA,GAAAH,UAAU,CAACt3D,GAAG,CAAC,gBAAgB,CAAC,KAAhCy3D,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,eAAA,CAAkCI,UAAU,MAAK,MAAM;IAE3D,IAAIlvC,QAAQ,KAAK,MAAM,EAAE;MACvB,IAAI2uC,UAAU,CAACp+C,GAAG,CAAC,cAAc,CAAC,EAAE;QAClC,MAAM,IAAIzW,KAAK,CACb,0DACF,CAAC;MACH;MAEA,IAAI60D,UAAU,CAACp+C,GAAG,CAAC,aAAa,CAAC,EAAE;QACjC,MAAM,IAAIzW,KAAK,CACb,yDACF,CAAC;MACH;MAEA,MAAMmmB,UAAU,GAAG0uC,UAAU,CAACt3D,GAAG,CAAC,kBAAkB,CAAC,CAAC4oB,UAAU;MAEhE,IAAI,CAACwuC,YAAY,CAACrtC,QAAQ,CAACnB,UAAU,CAAC,EAAE;QACtC,MAAMkvC,SAAS,GAAGV,YAAY,CAAC5/D,GAAG,CAACq0D,CAAC,IAAI,IAAIA,CAAC,GAAG,CAAC,CAACj0D,IAAI,CAAC,IAAI,CAAC;QAE5D,MAAM,IAAI6K,KAAK,CACb,iHAAiHq1D,SAAS,GAC5H,CAAC;MACH;MAEA,IAAIlvC,UAAU,KAAK,GAAG,IAAIgvC,iBAAiB,EAAE;QAC3C,MAAM,IAAIn1D,KAAK,CACb,iGAAiG/K,IAAI,CAACC,SAAS,CAAC,CAAC,gBAAgB,EAAE2/D,UAAU,CAACt3D,GAAG,CAAC,gBAAgB,CAAC,CAAC,CAAC,KACvK,CAAC;MACH;IACF,CAAC,MAAM,IAAI2oB,QAAQ,KAAK,OAAO,IAAIivC,iBAAiB,EAAE;MACpD,MAAM,IAAIn1D,KAAK,CACb,iFAAiF/K,IAAI,CAACC,SAAS,CAAC,CAAC,gBAAgB,EAAE2/D,UAAU,CAACt3D,GAAG,CAAC,gBAAgB,CAAC,CAAC,CAAC,KACvJ,CAAC;IACH;EACF;EAEA,IAAIs3D,UAAU,CAACp+C,GAAG,CAAC,kBAAkB,CAAC,EAAE;IAK/B;MACL,IACEo+C,UAAU,CAACp+C,GAAG,CAAC,wBAAwB,CAAC,IACxCo+C,UAAU,CAACp+C,GAAG,CAAC,kBAAkB,CAAC,EAClC;QACA,MAAM,IAAIzW,KAAK,CACb,uFACF,CAAC;MACH;MACA,MAAMs1D,mCAAmC,GACvCT,UAAU,CAACt3D,GAAG,CAAC,kBAAkB,CAAC,CAACg4D,OAAO;MAC5C,IAAID,mCAAmC,KAAK,UAAU,EAAE;QACtD,MAAM,IAAIt1D,KAAK,CACb,4DAA4D,GAC1D,wDAAwD,GACxD,sCACJ,CAAC;MACH;IACF;EACF;EACA,IAAI60D,UAAU,CAACp+C,GAAG,CAAC,kBAAkB,CAAC,EAAE;IAM/B,IAAIo+C,UAAU,CAACp+C,GAAG,CAAC,wBAAwB,CAAC,EAAE;MACnD,MAAM,IAAIzW,KAAK,CACb,qEACF,CAAC;IACH;EACF;EACA,IACE,CAAC60D,UAAU,CAACp+C,GAAG,CAAC,wBAAwB,CAAC,IACzCo+C,UAAU,CAACp+C,GAAG,CAAC,kBAAkB,CAAC,IAClCo+C,UAAU,CAACt3D,GAAG,CAAC,kBAAkB,CAAC,CAACi4D,sBAAsB,EACzD;IAMO;MACLX,UAAU,CAACr3D,GAAG,CAAC,wBAAwB,EAAE,CAAA,CAAE,CAAC;IAC9C;EACF;EAEA,IAAIq3D,UAAU,CAACp+C,GAAG,CAAC,gBAAgB,CAAC,EAAE;IACpC,MAAM2+C,UAAU,GAAGP,UAAU,CAACt3D,GAAG,CAAC,gBAAgB,CAAC,CAAC63D,UAAU;IAC9D,IAAIA,UAAU,IAAI,IAAI,EAAE;MAWf;QACL,MAAMK,6BAA6B,GAAG,CAAC,MAAM,EAAE,KAAK,CAAC;QACrD,IAAI,CAACA,6BAA6B,CAACnuC,QAAQ,CAAC8tC,UAAU,CAAC,EAAE;UACvD,MAAM,IAAIp1D,KAAK,CACb,yEAAyE,GACvEy1D,6BAA6B,CAAC1gE,GAAG,CAACmgE,CAAC,IAAI,IAAIA,CAAC,GAAG,CAAC,CAAC//D,IAAI,CAAC,IAAI,CAC9D,CAAC;QACH;MACF;IACF;EACF;EAEA,IACE0/D,UAAU,CAACp+C,GAAG,CAAC,oBAAoB,CAAC,IACpC,CAACo+C,UAAU,CAACp+C,GAAG,CAAC,eAAe,CAAC,EAChC;IACA,MAAMzZ,KAAK,GAAG,IAAIgD,KAAK,CACrB,8FACF,CAAC;IAEDhD,KAAK,CAAC04D,cAAc,GAAG,eAAe;IACtC,MAAM14D,KAAK;EACb;EAEA,IACE63D,UAAU,CAACp+C,GAAG,CAAC,wBAAwB,CAAC,IACxCo+C,UAAU,CAACt3D,GAAG,CAAC,wBAAwB,CAAC,CAACg4D,OAAO,KAAK,SAAS,EAC9D;IACA,MAAM,IAAIv1D,KAAK,CACb,kEAAkE,GAChE,wDAAwD,GACxD,qCACJ,CAAC;EACH;AAeF;AAYO,MAAM21D,YAAY,GAAG;EAC1Bv1D,MAAM;EACN6iC,GAAG;EACHjP,IAAI;EACJ8sB,UAAU;EACVuT,WAAW;EACXxB;AACF,CAAC;AAEM,MAAM+C,gBAAgB,GAAG95D,MAAM,CAACkC,IAAI,CAAC23D,YAAY,CAEvD;AC1Kc,MAAeE,gBAAgB,SAASvb,UAAU,CAAC;EAuChEwb,UAAUA,CACR5wD,IAAsC,EACtC6wD,QAAoC,EACpCC,QAEC,EACDxwD,mBAA6C,EACvC;IACN,IACEN,IAAI,CAACpW,IAAI,KAAK,eAAe,IAC7B,IAAI,CAACqZ,cAAc,CAACjD,IAAI,CAAC,IACzBA,IAAI,CAACR,QAAQ,IACbQ,IAAI,CAACG,SAAS,EACd;MACA;IACF;IAEA,MAAM3P,GAAG,GAAGwP,IAAI,CAACxP,GAIE;IAEnB,MAAMV,IAAI,GAAGU,GAAG,CAAC5G,IAAI,KAAK,YAAY,GAAG4G,GAAG,CAACV,IAAI,GAAGU,GAAG,CAACmG,KAAK;IAE7D,IAAI7G,IAAI,KAAK,WAAW,EAAE;MACxB,IAAI+gE,QAAQ,EAAE;QACZ,IAAI,CAAC3vD,KAAK,CAAC9H,MAAM,CAACtH,aAAa,EAAEtB,GAAG,CAAC;QACrC;MACF;MACA,IAAIsgE,QAAQ,CAACC,IAAI,EAAE;QACjB,IAAIzwD,mBAAmB,EAAE;UAGvB,IAAIA,mBAAmB,CAAC6nB,cAAc,KAAK,IAAI,EAAE;YAC/C7nB,mBAAmB,CAAC6nB,cAAc,GAAG33B,GAAG,CAACoH,GAAG,CAACrQ,KAAK;UACpD;QACF,CAAC,MAAM;UACL,IAAI,CAAC2Z,KAAK,CAAC9H,MAAM,CAACpN,cAAc,EAAEwE,GAAG,CAAC;QACxC;MACF;MAEAsgE,QAAQ,CAACC,IAAI,GAAG,IAAI;IACtB;EACF;EAEAC,oBAAoBA,CAClBl5B,IAAkC,EAClC5f,gBAAwB,EACW;IACnC,OACE4f,IAAI,CAACluC,IAAI,KAAK,yBAAyB,IACvC,IAAI,CAAC8qB,iBAAiB,CAACojB,IAAI,CAACvwC,KAAK,CAAC,KAAK2wB,gBAAgB;EAE3D;EAGAg0C,aAAaA,CAAAA,EAA8C;IACzD,IAAI,CAAC9iC,kBAAkB,CAAA,CAAE;IACzB,IAAI,CAACjL,SAAS,CAAA,CAAE;IAChB,MAAM2Z,IAAI,GAAG,IAAI,CAACrI,eAAe,EAAmC;IACpE,IAAI,CAAC,IAAI,CAAC/T,KAAK,CAAA,GAAO,CAAC,EAAE;MACvB,IAAI,CAAC7sB,UAAU,CAAA,CAAE;IACnB;IAGA,IAAI,CAACsoB,yBAAyB,CAAA,CAAE;IAChC2gB,IAAI,CAAC1iB,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAC7B0iB,IAAI,CAAC7f,MAAM,GAAG,IAAI,CAAClW,KAAK,CAACkW,MAAM;IAC/B,IAAI,IAAI,CAAC1c,WAAW,MAAqB,EAAE;MACzCu8B,IAAI,CAACz9B,MAAM,GAAG,IAAI,CAACA,MAAM;IAC3B;IACA,OAAOy9B,IAAI;EACb;EAqBArI,eAAeA,CAEbwhC,UAAoB,EACpB3wD,mBAAsC,EACxB;IACd,IAAI2wD,UAAU,EAAE;MACd,OAAO,IAAI,CAACC,aAAa,CAAC,MACxB,IAAI,CAACC,mBAAmB,CAAC7wD,mBAAmB,CAC9C,CAAC;IACH;IACA,OAAO,IAAI,CAAC8wD,UAAU,CAAC,MAAM,IAAI,CAACD,mBAAmB,CAAC7wD,mBAAmB,CAAC,CAAC;EAC7E;EAGA6wD,mBAAmBA,CAEjB7wD,mBAAsC,EACxB;IACd,MAAMD,QAAQ,GAAG,IAAI,CAAC0B,KAAK,CAAC1B,QAAQ;IACpC,MAAMy3B,IAAI,GAAG,IAAI,CAACa,gBAAgB,CAACr4B,mBAAmB,CAAC;IACvD,IAAI,IAAI,CAACob,KAAK,CAAA,EAAS,CAAC,EAAE;MACxB,MAAM/xB,IAAI,GAAG,IAAI,CAAC0gC,WAAW,CAAuBhqB,QAAQ,CAAC;MAC7D1W,IAAI,CAACyjE,WAAW,GAAG,CAACt1B,IAAI,CAAC;MACzB,OAAO,IAAI,CAAC1Z,GAAG,CAAA,EAAS,CAAC,EAAE;QACzBz0B,IAAI,CAACyjE,WAAW,CAAC5nD,IAAI,CAAC,IAAI,CAACmzB,gBAAgB,CAACr4B,mBAAmB,CAAC,CAAC;MACnE;MACA,IAAI,CAACs6B,gBAAgB,CAACjxC,IAAI,CAACyjE,WAAW,CAAC;MACvC,OAAO,IAAI,CAAC3tD,UAAU,CAAC9V,IAAI,EAAE,oBAAoB,CAAC;IACpD;IACA,OAAOmuC,IAAI;EACb;EAGAu5B,0BAA0BA,CAExB/wD,mBAA6C,EAC7Cu9B,cAAyB,EACzB;IACA,OAAO,IAAI,CAACqzB,aAAa,CAAC,MACxB,IAAI,CAACv4B,gBAAgB,CAACr4B,mBAAmB,EAAEu9B,cAAc,CAC3D,CAAC;EACH;EAGAjF,uBAAuBA,CAErBt4B,mBAA6C,EAC7Cu9B,cAAyB,EACzB;IACA,OAAO,IAAI,CAACuzB,UAAU,CAAC,MACrB,IAAI,CAACz4B,gBAAgB,CAACr4B,mBAAmB,EAAEu9B,cAAc,CAC3D,CAAC;EACH;EAIA1F,0BAA0BA,CACxB73B,mBAAqC,EACrCgxD,WAA6B,EAC7B;IAAA,IAAAC,gBAAA;IACAjxD,mBAAmB,CAAC+nB,qBAAqB,GAAA,CAAAkpC,gBAAA,GACvCD,WAAW,IAAXA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,WAAW,CAAE15D,GAAG,YAAA25D,gBAAA,GAAI,IAAI,CAACxvD,KAAK,CAAC1B,QAAQ;EAC3C;EAKAs4B,gBAAgBA,CAEdr4B,mBAA6C,EAC7Cu9B,cAAyB,EACX;IACd,MAAMx9B,QAAQ,GAAG,IAAI,CAAC0B,KAAK,CAAC1B,QAAQ;IACpC,IAAI,IAAI,CAACqmB,YAAY,CAAA,GAAU,CAAC,EAAE;MAChC,IAAI,IAAI,CAACuC,SAAS,CAAC7C,QAAQ,EAAE;QAC3B,IAAIsU,IAAI,GAAG,IAAI,CAAC82B,UAAU,EAAE;QAC5B,IAAI3zB,cAAc,EAAE;UAClBnD,IAAI,GAAGmD,cAAc,CAACF,IAAI,CAAC,IAAI,EAAEjD,IAAI,EAAEr6B,QAAQ,CAAC;QAClD;QACA,OAAOq6B,IAAI;MACb;IACF;IAEA,IAAI+2B,mBAAmB;IACvB,IAAInxD,mBAAmB,EAAE;MACvBmxD,mBAAmB,GAAG,KAAK;IAC7B,CAAC,MAAM;MACLnxD,mBAAmB,GAAG,IAAIipB,gBAAgB,EAAE;MAC5CkoC,mBAAmB,GAAG,IAAI;IAC5B;IACA,MAAM;MAAE7nE;KAAM,GAAG,IAAI,CAACmY,KAAK;IAE3B,IAAInY,IAAI,KAAc,EAAA,IAAI+kB,iBAAiB,CAAC/kB,IAAI,CAAC,EAAE;MACjD,IAAI,CAACmY,KAAK,CAACmW,gBAAgB,GAAG,IAAI,CAACnW,KAAK,CAACxa,KAAK;IAChD;IAEA,IAAImzC,IAAI,GAAG,IAAI,CAACg3B,qBAAqB,CAACpxD,mBAAmB,CAAC;IAC1D,IAAIu9B,cAAc,EAAE;MAClBnD,IAAI,GAAGmD,cAAc,CAACF,IAAI,CAAC,IAAI,EAAEjD,IAAI,EAAEr6B,QAAQ,CAAC;IAClD;IACA,IAAI4O,iBAAiB,CAAC,IAAI,CAAClN,KAAK,CAACnY,IAAI,CAAC,EAAE;MACtC,MAAMD,IAAI,GAAG,IAAI,CAAC0gC,WAAW,CAAyBhqB,QAAQ,CAAC;MAC/D,MAAMm1C,QAAQ,GAAG,IAAI,CAACzzC,KAAK,CAACpL,KAAK;MACjChN,IAAI,CAAC6rD,QAAQ,GAAGA,QAAQ;MAExB,IAAI,IAAI,CAAC95B,KAAK,CAAA,EAAM,CAAC,EAAE;QACrB,IAAI,CAAC9a,YAAY,CAAC85B,IAAI,EAAc,IAAI,CAAC;QACzC/wC,IAAI,CAAC+wC,IAAI,GAAGA,IAAI;QAEhB,MAAMjhC,UAAU,GAAG4G,QAAQ,CAACjZ,KAAK;QACjC,IACEkZ,mBAAmB,CAAC6nB,cAAc,IAAI,IAAI,IAC1C7nB,mBAAmB,CAAC6nB,cAAc,CAAC/gC,KAAK,IAAIqS,UAAU,EACtD;UACA6G,mBAAmB,CAAC6nB,cAAc,GAAG,IAAI;QAC3C;QACA,IACE7nB,mBAAmB,CAAC4nB,kBAAkB,IAAI,IAAI,IAC9C5nB,mBAAmB,CAAC4nB,kBAAkB,CAAC9gC,KAAK,IAAIqS,UAAU,EAC1D;UACA6G,mBAAmB,CAAC4nB,kBAAkB,GAAG,IAAI;QAC/C;QACA,IACE5nB,mBAAmB,CAAC8nB,aAAa,IAAI,IAAI,IACzC9nB,mBAAmB,CAAC8nB,aAAa,CAAChhC,KAAK,IAAIqS,UAAU,EACrD;UACA,IAAI,CAAC6vB,yBAAyB,CAAChpB,mBAAmB,CAAC;UACnDA,mBAAmB,CAAC8nB,aAAa,GAAG,IAAI;QAC1C;MACF,CAAC,MAAM;QACLz+B,IAAI,CAAC+wC,IAAI,GAAGA,IAA+B;MAC7C;MAEA,IAAI,CAAC7oB,IAAI,CAAA,CAAE;MACXloB,IAAI,CAACopC,KAAK,GAAG,IAAI,CAAC4F,gBAAgB,EAAE;MACpC,IAAI,CAACke,SAAS,CAACnc,IAAI,EAAE,IAAI,CAACj7B,UAAU,CAAC9V,IAAI,EAAE,sBAAsB,CAAC,CAAC;MAEnE,OAAOA,IAAI;IACZ,CAAA,MAAM,IAAI8nE,mBAAmB,EAAE;MAC9B,IAAI,CAACzpC,qBAAqB,CAAC1nB,mBAAmB,EAAE,IAAI,CAAC;IACvD;IAEA,OAAOo6B,IAAI;EACb;EAKAg3B,qBAAqBA,CAEnBpxD,mBAAqC,EACvB;IACd,MAAMD,QAAQ,GAAG,IAAI,CAAC0B,KAAK,CAAC1B,QAAQ;IACpC,MAAM6X,gBAAgB,GAAG,IAAI,CAACnW,KAAK,CAACmW,gBAAgB;IACpD,MAAM4f,IAAI,GAAG,IAAI,CAAC65B,YAAY,CAACrxD,mBAAmB,CAAC;IAEnD,IAAI,IAAI,CAAC0wD,oBAAoB,CAACl5B,IAAI,EAAE5f,gBAAgB,CAAC,EAAE;MACrD,OAAO4f,IAAI;IACb;IAEA,OAAO,IAAI,CAACI,gBAAgB,CAACJ,IAAI,EAAEz3B,QAAQ,EAAEC,mBAAmB,CAAC;EACnE;EAEA43B,gBAAgBA,CAEdJ,IAAkB,EAClBz3B,QAAkB,EAElBC,mBAA6C,EAC/B;IACd,IAAI,IAAI,CAAC8d,GAAG,CAAA,EAAY,CAAC,EAAE;MACzB,MAAMz0B,IAAI,GAAG,IAAI,CAAC0gC,WAAW,CAA0BhqB,QAAQ,CAAC;MAChE1W,IAAI,CAACgnB,IAAI,GAAGmnB,IAAI;MAChBnuC,IAAI,CAAC0uC,UAAU,GAAG,IAAI,CAACO,uBAAuB,EAAE;MAChD,IAAI,CAACpR,MAAM,CAAA,EAAS,CAAC;MACrB79B,IAAI,CAAC+uC,SAAS,GAAG,IAAI,CAACC,gBAAgB,EAAE;MACxC,OAAO,IAAI,CAACl5B,UAAU,CAAC9V,IAAI,EAAE,uBAAuB,CAAC;IACvD;IACA,OAAOmuC,IAAI;EACb;EAEA85B,wBAAwBA,CAEtBtxD,mBAAsC,EACR;IAC9B,OAAO,IAAI,CAACob,KAAK,CAAe,GAAA,CAAC,GAC7B,IAAI,CAACnd,gBAAgB,CAAA,CAAE,GACvB,IAAI,CAACskD,eAAe,CAACviD,mBAAmB,CAAC;EAC/C;EAKAqxD,YAAYA,CAEVrxD,mBAAqC,EACvB;IACd,MAAMD,QAAQ,GAAG,IAAI,CAAC0B,KAAK,CAAC1B,QAAQ;IACpC,MAAM6X,gBAAgB,GAAG,IAAI,CAACnW,KAAK,CAACmW,gBAAgB;IACpD,MAAM4f,IAAI,GAAG,IAAI,CAAC85B,wBAAwB,CAACtxD,mBAAmB,CAAC;IAE/D,IAAI,IAAI,CAAC0wD,oBAAoB,CAACl5B,IAAI,EAAE5f,gBAAgB,CAAC,EAAE;MACrD,OAAO4f,IAAI;IACb;IAEA,OAAO,IAAI,CAACgxB,WAAW,CAAChxB,IAAI,EAAEz3B,QAAQ,EAAE,CAAC,CAAC,CAAC;EAC7C;EAQAyoD,WAAWA,CAETpuB,IAAkC,EAClCquB,YAAsB,EACtBC,OAAe,EACD;IACd,IAAI,IAAI,CAACpqD,aAAa,CAAC87B,IAAI,CAAC,EAAE;MAK5B,MAAM/jC,KAAK,GAAG,IAAI,CAAC+H,gBAAgB,CAACg8B,IAAI,CAAC;MAEzC,IACEsuB,OAAO,IAAIr5C,uBAAuB,GAAO,CAAC,IAC1C,CAAC,IAAI,CAACsZ,SAAS,CAAC3C,KAAK,IACrB,CAAC,IAAI,CAAC5K,KAAK,CAAA,EAAO,CAAC,EACnB;QACA,IAAI,CAACxa,KAAK,CAAC9H,MAAM,CAAC3H,mBAAmB,EAAEipC,IAAI,EAAE;UAC3ChzC,cAAc,EAAEiP;QAClB,CAAC,CAAC;MACJ;MAEA,IAAI,CAACmK,UAAU,CAACC,cAAc,CAACpK,KAAK,EAAE+jC,IAAI,CAAC9iC,GAAG,CAACrQ,KAAK,CAAC;IACvD;IAEA,MAAMsqE,EAAE,GAAG,IAAI,CAAC9vD,KAAK,CAACnY,IAAI;IAC1B,IAAIylB,eAAe,CAACwiD,EAAE,CAAC,KAAK,IAAI,CAAC5oC,SAAS,CAAC3C,KAAK,IAAI,CAAC,IAAI,CAAC5K,KAAK,CAAO,EAAA,CAAC,CAAC,EAAE;MACxE,IAAIo2C,IAAI,GAAGniD,uBAAuB,CAACkiD,EAAE,CAAC;MACtC,IAAIC,IAAI,GAAG9I,OAAO,EAAE;QAClB,IAAI6I,EAAE,OAAgB,EAAE;UACtB,IAAI,CAACvxC,YAAY,CAAC,kBAAkB,CAAC;UACrC,IAAI,IAAI,CAACve,KAAK,CAACwX,0BAA0B,EAAE;YAEzC,OAAOmhB,IAAI;UACb;UACA,IAAI,CAACq3B,4BAA4B,CAACr3B,IAAI,EAAkBquB,YAAY,CAAC;QACvE;QACA,MAAMp/D,IAAI,GAAG,IAAI,CAAC0gC,WAAW,CAC3B0+B,YACF,CAAC;QACDp/D,IAAI,CAAC+wC,IAAI,GAAGA,IAAI;QAChB/wC,IAAI,CAAC6rD,QAAQ,GAAG,IAAI,CAACzzC,KAAK,CAACpL,KAAK;QAEhC,MAAMq7D,OAAO,GAAGH,EAAE,KAAiB,EAAA,IAAIA,EAAE,KAAkB,EAAA;QAC3D,MAAMI,QAAQ,GAAGJ,EAAE,KAAyB,EAAA;QAE5C,IAAII,QAAQ,EAAE;UAGZH,IAAI,GAAGniD,uBAAuB,CAAA,EAAc,CAAC;QAC/C;QAEA,IAAI,CAACkC,IAAI,CAAA,CAAE;QAEX,IACEggD,EAAE,OAAgB,IAElB,IAAI,CAACj9C,SAAS,CAAC,CAAC,kBAAkB,EAAE;UAAEoM,QAAQ,EAAE;QAAW,CAAA,CAAC,CAAC,EAC7D;UACA,IAAI,IAAI,CAACjf,KAAK,CAACnY,IAAI,KAAA,EAAc,IAAI,IAAI,CAACq/B,SAAS,CAAC9C,QAAQ,EAAE;YAC5D,MAAM,IAAI,CAACjlB,KAAK,CACd9H,MAAM,CAACzG,gCAAgC,EACvC,IAAI,CAACoP,KAAK,CAAC1B,QACb,CAAC;UACH;QACF;QAEA1W,IAAI,CAACopC,KAAK,GAAG,IAAI,CAACm/B,oBAAoB,CAACL,EAAE,EAAEC,IAAI,CAAC;QAChD,MAAMK,YAAY,GAAG,IAAI,CAAC1yD,UAAU,CAClC9V,IAAI,EACJqoE,OAAO,IAAIC,QAAQ,GAAG,mBAAmB,GAAG,kBAC9C,CAAC;QAMD,MAAMG,MAAM,GAAG,IAAI,CAACrwD,KAAK,CAACnY,IAAI;QAC9B,IACGqoE,QAAQ,KAAKG,MAAM,KAAA,EAAiB,IAAIA,MAAM,KAAkB,EAAA,CAAC,IACjEJ,OAAO,IAAII,MAAM,OAA0B,EAC5C;UACA,MAAM,IAAI,CAAClxD,KAAK,CACd9H,MAAM,CAAChJ,yBAAyB,EAChC,IAAI,CAAC2R,KAAK,CAAC1B,QACb,CAAC;QACH;QAEA,OAAO,IAAI,CAACyoD,WAAW,CAACqJ,YAAY,EAAEpJ,YAAY,EAAEC,OAAO,CAAC;MAC9D;IACF;IAEA,OAAOtuB,IAAI;EACb;EAKAw3B,oBAAoBA,CAElBL,EAAa,EACbC,IAAY,EACE;IACd,MAAMzxD,QAAQ,GAAG,IAAI,CAAC0B,KAAK,CAAC1B,QAAQ;IACpC,QAAQwxD,EAAE;MACR,KAAA,EAAA;QACE,QAAQ,IAAI,CAACrzD,eAAe,CAAC,kBAAkB,EAAE,UAAU,CAAC;UAC1D,KAAK,MAAM;YACT,OAAO,IAAI,CAAC6zD,uBAAuB,CAAC,MAAM;cACxC,OAAO,IAAI,CAACC,iBAAiB,EAAE;YACjC,CAAC,CAAC;UAGJ,KAAK,OAAO;YACV,OAAO,IAAI,CAACD,uBAAuB,CAAC,MAAM;cACxC,IAAI,IAAI,CAACppC,SAAS,CAAC7C,QAAQ,IAAI,IAAI,CAACM,YAAY,CAAU,GAAA,CAAC,EAAE;gBAC3D,MAAM,IAAI,CAACxlB,KAAK,CAAC9H,MAAM,CAACxD,iBAAiB,EAAE,IAAI,CAACmM,KAAK,CAAC1B,QAAQ,CAAC;cACjE;cACA,OAAO,IAAI,CAACkyD,6BAA6B,CACvC,IAAI,CAACC,wBAAwB,CAACX,EAAE,EAAEC,IAAI,CAAC,EACvCzxD,QACF,CAAC;YACH,CAAC,CAAC;UAEJ,KAAK,QAAQ;YACX,OAAO,IAAI,CAACoyD,8BAA8B,CAAC,MAAM;cAC/C,OAAO,IAAI,CAACC,uBAAuB,CAACZ,IAAI,CAAC;YAC3C,CAAC,CAAC;QACN;MAGF;QACE,OAAO,IAAI,CAACU,wBAAwB,CAACX,EAAE,EAAEC,IAAI,CAAC;IAClD;EACF;EAKAU,wBAAwBA,CAEtBX,EAAa,EACbC,IAAY,EACE;IACd,MAAMzxD,QAAQ,GAAG,IAAI,CAAC0B,KAAK,CAAC1B,QAAQ;IAEpC,OAAO,IAAI,CAACyoD,WAAW,CACrB,IAAI,CAAC8I,wBAAwB,CAAA,CAAE,EAC/BvxD,QAAQ,EACRuP,uBAAuB,CAACiiD,EAAE,CAAC,GAAGC,IAAI,GAAG,CAAC,GAAGA,IAC3C,CAAC;EACH;EAEAQ,iBAAiBA,CAAAA,EAA6B;IAAA,IAAAK,WAAA;IAC5C,MAAM;MAAEtyD;KAAU,GAAG,IAAI,CAAC0B,KAAK;IAC/B,MAAM1D,IAAI,GAAG,IAAI,CAACs6B,gBAAgB,EAAE;IACpC,MAAMi6B,mBAAmB,GAAGn9D,mCAAmC,CAAC8b,GAAG,CAEjElT,IAAI,CAACzU,IACP,CAAC;IAGD,IAAIgpE,mBAAmB,IAAI,EAAAD,CAAAA,WAAA,GAACt0D,IAAI,CAACrB,KAAK,KAAV21D,IAAAA,IAAAA,WAAA,CAAY90D,aAAa,CAAE,EAAA;MACrD,IAAI,CAACqD,KAAK,CAAC9H,MAAM,CAAClD,uBAAuB,EAAEmK,QAAQ,EAAE;QACnDzW,IAAI,EAAEyU,IAAI,CAACzU;MACb,CAAC,CAAC;IACJ;IACA,IAAI,CAAC,IAAI,CAACipE,qCAAqC,EAAE,EAAE;MAEjD,IAAI,CAAC3xD,KAAK,CAAC9H,MAAM,CAACnD,eAAe,EAAEoK,QAAQ,CAAC;IAC9C;IAEA,OAAOhC,IAAI;EACb;EAEAy0D,0BAA0BA,CACxBnpE,IAAmD,EACnD;IACA,IAAI,IAAI,CAAC+xB,KAAK,CAAA,EAAY,CAAC,EAAE;MAC3B,IAAI,CAACxa,KAAK,CAAC9H,MAAM,CAAC3F,kCAAkC,EAAE9J,IAAI,CAAC8O,QAAQ,CAAC;IACtE;EACF;EAIAoqD,eAAeA,CAEbviD,mBAA6C,EAC7C4qD,QAAkB,EACJ;IACd,MAAM7qD,QAAQ,GAAG,IAAI,CAAC0B,KAAK,CAAC1B,QAAQ;IACpC,MAAM0yD,OAAO,GAAG,IAAI,CAACrsC,YAAY,GAAU,CAAC;IAE5C,IAAIqsC,OAAO,IAAI,IAAI,CAACC,oBAAoB,EAAE,EAAE;MAC1C,IAAI,CAACnhD,IAAI,CAAA,CAAE;MACX,MAAMimB,IAAI,GAAG,IAAI,CAACm7B,UAAU,CAAC5yD,QAAQ,CAAC;MACtC,IAAI,CAAC6qD,QAAQ,EAAE,IAAI,CAAC4H,0BAA0B,CAACh7B,IAAI,CAAC;MACpD,OAAOA,IAAI;IACb;IACA,MAAMo7B,MAAM,GAAG,IAAI,CAACx3C,KAAK,GAAU,CAAC;IACpC,MAAM/xB,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAA0C;IACrE,IAAIiQ,aAAa,CAAC,IAAI,CAACxN,KAAK,CAACnY,IAAI,CAAC,EAAE;MAClCD,IAAI,CAAC6rD,QAAQ,GAAG,IAAI,CAACzzC,KAAK,CAACpL,KAAK;MAChChN,IAAI,CAACE,MAAM,GAAG,IAAI;MAElB,IAAI,IAAI,CAAC6xB,KAAK,CAAA,EAAU,CAAC,EAAE;QACzB,IAAI,CAAC4E,YAAY,CAAC,kBAAkB,CAAC;MACvC;MACA,MAAM6yC,QAAQ,GAAG,IAAI,CAACz3C,KAAK,GAAW,CAAC;MACvC,IAAI,CAAC7J,IAAI,CAAA,CAAE;MAEXloB,IAAI,CAAC8O,QAAQ,GAAG,IAAI,CAACoqD,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC;MAEhD,IAAI,CAAC76B,qBAAqB,CAAC1nB,mBAAmB,EAAE,IAAI,CAAC;MAErD,IAAI,IAAI,CAACyB,KAAK,CAACgP,MAAM,IAAIoiD,QAAQ,EAAE;QACjC,MAAM1d,GAAG,GAAG9rD,IAAI,CAAC8O,QAAQ;QAEzB,IAAIg9C,GAAG,CAAC7rD,IAAI,KAAK,YAAY,EAAE;UAC7B,IAAI,CAACsX,KAAK,CAAC9H,MAAM,CAACpE,YAAY,EAAErL,IAAI,CAAC;QACtC,CAAA,MAAM,IAAI,IAAI,CAACqZ,wBAAwB,CAACyyC,GAAG,CAAC,EAAE;UAC7C,IAAI,CAACv0C,KAAK,CAAC9H,MAAM,CAAC1N,kBAAkB,EAAE/B,IAAI,CAAC;QAC7C;MACF;MAEA,IAAI,CAACupE,MAAM,EAAE;QACX,IAAI,CAAChI,QAAQ,EAAE;UACb,IAAI,CAAC4H,0BAA0B,CAACnpE,IAAiC,CAAC;QACpE;QACA,OAAO,IAAI,CAAC8V,UAAU,CAAC9V,IAAI,EAAE,iBAAiB,CAAC;MACjD;IACF;IAEA,MAAMmuC,IAAI,GAAG,IAAI,CAACs7B,WAAW,CAE3BzpE,IAAI,EACJupE,MAAM,EACN5yD,mBACF,CAAC;IAED,IAAIyyD,OAAO,EAAE;MACX,MAAM;QAAEnpE;OAAM,GAAG,IAAI,CAACmY,KAAK;MAC3B,MAAM+B,UAAU,GAAG,IAAI,CAAC8Q,SAAS,CAAC,aAAa,CAAC,GAC5C5F,uBAAuB,CAACplB,IAAI,CAAC,GAC7BolB,uBAAuB,CAACplB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC8xB,KAAK,CAAA,EAAU,CAAC;MAC3D,IAAI5X,UAAU,IAAI,CAAC,IAAI,CAACuvD,gBAAgB,EAAE,EAAE;QAC1C,IAAI,CAAC7vC,cAAc,CAACpqB,MAAM,CAAC7O,sBAAsB,EAAE8V,QAAQ,CAAC;QAC5D,OAAO,IAAI,CAAC4yD,UAAU,CAAC5yD,QAAQ,CAAC;MAClC;IACF;IAEA,OAAOy3B,IAAI;EACb;EAGAs7B,WAAWA,CAETzpE,IAAkB,EAClBupE,MAAe,EACf5yD,mBAA6C,EAC/B;IACd,IAAI4yD,MAAM,EAAE;MACV,MAAMI,oBAAoB,GAAG3pE,IAAkC;MAC/D,IAAI,CAACktD,SAAS,CACZyc,oBAAoB,CAAC76D,QAAQ,EAC7B,IAAI,CAACgH,UAAU,CAAC6zD,oBAAoB,EAAE,kBAAkB,CAC1D,CAAC;MACD,OAAO3pE,IAAI;IACb;IAEA,MAAM0W,QAAQ,GAAG,IAAI,CAAC0B,KAAK,CAAC1B,QAAQ;IACpC,IAAIy3B,IAAI,GAAG,IAAI,CAACy7B,mBAAmB,CAACjzD,mBAAmB,CAAC;IACxD,IAAI,IAAI,CAAC0nB,qBAAqB,CAAC1nB,mBAAmB,EAAE,KAAK,CAAC,EAAE,OAAOw3B,IAAI;IACvE,OAAOxoB,cAAc,CAAC,IAAI,CAACvN,KAAK,CAACnY,IAAI,CAAC,IAAI,CAAC,IAAI,CAACs9B,kBAAkB,EAAE,EAAE;MACpE,MAAMv9B,IAAI,GAAG,IAAI,CAAC0gC,WAAW,CAAqBhqB,QAAQ,CAAC;MAC3D1W,IAAI,CAAC6rD,QAAQ,GAAG,IAAI,CAACzzC,KAAK,CAACpL,KAAK;MAChChN,IAAI,CAACE,MAAM,GAAG,KAAK;MACnBF,IAAI,CAAC8O,QAAQ,GAAGq/B,IAAI;MACpB,IAAI,CAACjmB,IAAI,CAAA,CAAE;MACX,IAAI,CAACglC,SAAS,CAAC/e,IAAI,EAAGA,IAAI,GAAG,IAAI,CAACr4B,UAAU,CAAC9V,IAAI,EAAE,kBAAkB,CAAE,CAAC;IAC1E;IACA,OAAOmuC,IAAI;EACb;EAIAy7B,mBAAmBA,CAEjBjzD,mBAA6C,EAC/B;IACd,MAAMD,QAAQ,GAAG,IAAI,CAAC0B,KAAK,CAAC1B,QAAQ;IACpC,MAAM6X,gBAAgB,GAAG,IAAI,CAACnW,KAAK,CAACmW,gBAAgB;IACpD,MAAM4f,IAAI,GAAG,IAAI,CAAC5G,aAAa,CAAC5wB,mBAAmB,CAAC;IAEpD,IAAI,IAAI,CAAC0wD,oBAAoB,CAACl5B,IAAI,EAAE5f,gBAAgB,CAAC,EAAE;MACrD,OAAO4f,IAAI;IACb;IAEA,OAAO,IAAI,CAACkH,eAAe,CAAClH,IAAI,EAAEz3B,QAAQ,CAAC;EAC7C;EAEA2+B,eAAeA,CAEbx8B,IAAkB,EAClBnC,QAAkB,EAClBoC,OAAwB,EACV;IACd,MAAMV,KAAK,GAAG;MACZW,mBAAmB,EAAE,KAAK;MAC1B8wD,eAAe,EAAE,IAAI,CAAC/K,oBAAoB,CAACjmD,IAAI,CAAC;MAChDI,IAAI,EAAE;KACP;IACD,GAAG;MACDJ,IAAI,GAAG,IAAI,CAACD,cAAc,CAACC,IAAI,EAAEnC,QAAQ,EAAEoC,OAAO,EAAEV,KAAK,CAAC;MAG1DA,KAAK,CAACyxD,eAAe,GAAG,KAAK;IAC/B,CAAC,QAAQ,CAACzxD,KAAK,CAACa,IAAI;IACpB,OAAOJ,IAAI;EACb;EAMAD,cAAcA,CAEZC,IAAkB,EAClBnC,QAAkB,EAClBoC,OAAmC,EACnCV,KAA4B,EACd;IACd,MAAM;MAAEnY;KAAM,GAAG,IAAI,CAACmY,KAAK;IAC3B,IAAI,CAACU,OAAO,IAAI7Y,IAAI,OAAmB,EAAE;MACvC,OAAO,IAAI,CAAC6pE,SAAS,CAACjxD,IAAI,EAAEnC,QAAQ,EAAEoC,OAAO,EAAEV,KAAK,CAAC;IACvD,CAAC,MAAM,IAAI8N,eAAe,CAACjmB,IAAI,CAAC,EAAE;MAChC,OAAO,IAAI,CAAC++D,6BAA6B,CAACnmD,IAAI,EAAEnC,QAAQ,EAAE0B,KAAK,CAAC;IAClE;IAEA,IAAIV,QAAQ,GAAG,KAAK;IAEpB,IAAIzX,IAAI,OAAmB,EAAE;MAC3B,IAAI6Y,OAAO,EAAE;QACX,IAAI,CAACvB,KAAK,CAAC9H,MAAM,CAACjI,qBAAqB,EAAE,IAAI,CAAC4Q,KAAK,CAAC1B,QAAQ,CAAC;QAC7D,IAAI,IAAI,CAACwe,iBAAiB,CAAE,CAAA,OAA8B,EAAE;UAE1D9c,KAAK,CAACa,IAAI,GAAG,IAAI;UACjB,OAAOJ,IAAI;QACb;MACF;MACAT,KAAK,CAACW,mBAAmB,GAAGrB,QAAQ,GAAG,IAAI;MAC3C,IAAI,CAACwQ,IAAI,CAAA,CAAE;IACb;IAEA,IAAI,CAACpP,OAAO,IAAI,IAAI,CAACiZ,KAAK,CAAA,EAAU,CAAC,EAAE;MACrC,OAAO,IAAI,CAACg4C,+BAA+B,CACzClxD,IAAI,EACJnC,QAAQ,EACR0B,KAAK,EACLV,QACF,CAAC;IACH,CAAC,MAAM;MACL,MAAM7B,QAAQ,GAAG,IAAI,CAAC4e,GAAG,EAAY,CAAC;MACtC,IAAI5e,QAAQ,IAAI6B,QAAQ,IAAI,IAAI,CAAC+c,GAAG,CAAO,EAAA,CAAC,EAAE;QAC5C,OAAO,IAAI,CAACu1C,WAAW,CAACnxD,IAAI,EAAEnC,QAAQ,EAAE0B,KAAK,EAAEvC,QAAQ,EAAE6B,QAAQ,CAAC;MACpE,CAAC,MAAM;QACLU,KAAK,CAACa,IAAI,GAAG,IAAI;QACjB,OAAOJ,IAAI;MACb;IACF;EACF;EAMAmxD,WAAWA,CAETnxD,IAAkB,EAClBnC,QAAkB,EAClB0B,KAA4B,EAC5BvC,QAAiB,EACjB6B,QAAiB,EACgC;IACjD,MAAM1X,IAAI,GAAG,IAAI,CAAC0gC,WAAW,CAE3BhqB,QAAQ,CAAC;IACX1W,IAAI,CAACqR,MAAM,GAAGwH,IAAI;IAClB7Y,IAAI,CAAC6V,QAAQ,GAAGA,QAAQ;IACxB,IAAIA,QAAQ,EAAE;MACZ7V,IAAI,CAAC6+B,QAAQ,GAAG,IAAI,CAACiH,eAAe,EAAE;MACtC,IAAI,CAACjI,MAAM,CAAA,CAAY,CAAC;IACzB,CAAA,MAAM,IAAI,IAAI,CAAC9L,KAAK,CAAA,GAAe,CAAC,EAAE;MACrC,IAAIlZ,IAAI,CAAC5Y,IAAI,KAAK,OAAO,EAAE;QACzB,IAAI,CAACsX,KAAK,CAAC9H,MAAM,CAAC/G,iBAAiB,EAAEgO,QAAQ,CAAC;MAChD;MACA,IAAI,CAACS,UAAU,CAACC,cAAc,CAAC,IAAI,CAACgB,KAAK,CAACpL,KAAK,EAAE,IAAI,CAACoL,KAAK,CAAC1B,QAAQ,CAAC;MACrE1W,IAAI,CAAC6+B,QAAQ,GAAG,IAAI,CAACjqB,gBAAgB,EAAE;IACzC,CAAC,MAAM;MACL5U,IAAI,CAAC6+B,QAAQ,GAAG,IAAI,CAACuH,eAAe,CAAC,IAAI,CAAC;IAC5C;IAEA,IAAIhuB,KAAK,CAACW,mBAAmB,EAAE;MAC5B/Y,IAAI,CAAgC0X,QAAQ,GAAGA,QAAQ;MACxD,OAAO,IAAI,CAAC5B,UAAU,CAAC9V,IAAI,EAAE,0BAA0B,CAAC;IAC1D,CAAC,MAAM;MACL,OAAO,IAAI,CAAC8V,UAAU,CAAC9V,IAAI,EAAE,kBAAkB,CAAC;IAClD;EACF;EAGA8pE,SAASA,CAEPjxD,IAAkB,EAClBnC,QAAkB,EAClBoC,OAAmC,EACnCV,KAA4B,EACd;IACd,MAAMpY,IAAI,GAAG,IAAI,CAAC0gC,WAAW,CAAmBhqB,QAAQ,CAAC;IACzD1W,IAAI,CAACqR,MAAM,GAAGwH,IAAI;IAClB,IAAI,CAACqP,IAAI,CAAA,CAAE;IACXloB,IAAI,CAAC2X,MAAM,GAAG,IAAI,CAACsyD,eAAe,EAAE;IACpC7xD,KAAK,CAACa,IAAI,GAAG,IAAI;IACjB,OAAO,IAAI,CAACo8B,eAAe,CACzB,IAAI,CAACv/B,UAAU,CAAC9V,IAAI,EAAE,gBAAgB,CAAC,EACvC0W,QAAQ,EACRoC,OACF,CAAC;EACH;EAMAixD,+BAA+BA,CAE7BlxD,IAAkB,EAClBnC,QAAkB,EAClB0B,KAA4B,EAC5BV,QAAiB,EACH;IACd,MAAMomD,yBAAyB,GAAG,IAAI,CAAC1lD,KAAK,CAACgX,sBAAsB;IACnE,IAAIzY,mBAA4C,GAAG,IAAI;IAEvD,IAAI,CAACyB,KAAK,CAACgX,sBAAsB,GAAG,IAAI;IACxC,IAAI,CAAClH,IAAI,CAAA,CAAE;IAEX,MAAMloB,IAAI,GAAG,IAAI,CAAC0gC,WAAW,CAC3BhqB,QACF,CAAC;IACD1W,IAAI,CAAC2X,MAAM,GAAGkB,IAAI;IAClB,MAAM;MAAEgxD,eAAe;MAAE9wD;IAAqB,CAAA,GAAGX,KAAK;IAEtD,IAAIyxD,eAAe,EAAE;MACnB,IAAI,CAACrqC,eAAe,CAAC7V,KAAK,CAACwS,kBAAkB,CAAE,CAAA,CAAC;MAChDxlB,mBAAmB,GAAG,IAAIipB,gBAAgB,EAAE;IAC9C;IAEA,IAAI7mB,mBAAmB,EAAE;MAEvB/Y,IAAI,CAAC0X,QAAQ,GAAGA,QAAQ;IAC1B;IAEA,IAAIA,QAAQ,EAAE;MACZ1X,IAAI,CAAC8X,SAAS,GAAG,IAAI,CAACw9B,4BAA4B,GAAU,CAAC;IAC/D,CAAC,MAAM;MACLt1C,IAAI,CAAC8X,SAAS,GAAG,IAAI,CAACw9B,4BAA4B,CAEhDz8B,EAAAA,EAAAA,IAAI,CAAC5Y,IAAI,KAAK,OAAO,EACrBD,IAAI,EACJ2W,mBACF,CAAC;IACH;IACA,IAAI6xD,YAGyB,GAAG,IAAI,CAAChxD,oBAAoB,CACvDxX,IAAI,EACJ+Y,mBACF,CAAC;IAED,IAAI8wD,eAAe,IAAI,IAAI,CAAC51B,qBAAqB,CAAE,CAAA,IAAI,CAACv8B,QAAQ,EAAE;MAEhEU,KAAK,CAACa,IAAI,GAAG,IAAI;MACjB,IAAI,CAAC0mB,yBAAyB,CAAChpB,mBAAmB,CAAC;MACnD,IAAI,CAAC6oB,eAAe,CAACxD,iBAAiB,EAAE;MACxC,IAAI,CAACwD,eAAe,CAAC5V,IAAI,EAAE;MAC3B4+C,YAAY,GAAG,IAAI,CAACz0B,iCAAiC,CACnD,IAAI,CAACrT,WAAW,CAA4BhqB,QAAQ,CAAC,EACrD8xD,YACF,CAAC;IACH,CAAC,MAAM;MACL,IAAIqB,eAAe,EAAE;QACnB,IAAI,CAACxrC,qBAAqB,CAAC1nB,mBAAmB,EAAE,IAAI,CAAC;QACrD,IAAI,CAAC6oB,eAAe,CAAC5V,IAAI,EAAE;MAC7B;MACA,IAAI,CAAC5R,qBAAqB,CAACwwD,YAAY,CAAC;IAC1C;IAEA,IAAI,CAACpwD,KAAK,CAACgX,sBAAsB,GAAG0uC,yBAAyB;IAE7D,OAAO0K,YAAY;EACrB;EAEAxwD,qBAAqBA,CACnBhY,IAAiD,EACjDkxC,mBAA6B,EAC7B;IACA,IAAI,CAACgb,oBAAoB,CAAClsD,IAAI,CAAC8X,SAAS,EAAEo5B,mBAAmB,CAAC;EAChE;EAIA8tB,6BAA6BA,CAE3BnmD,IAAkB,EAClBnC,QAAkB,EAClB0B,KAA4B,EACA;IAC5B,MAAMpY,IAAI,GAAG,IAAI,CAAC0gC,WAAW,CAA6BhqB,QAAQ,CAAC;IACnE1W,IAAI,CAACkqE,GAAG,GAAGrxD,IAAI;IACf7Y,IAAI,CAACmqE,KAAK,GAAG,IAAI,CAACrR,aAAa,CAAC,IAAI,CAAC;IACrC,IAAI1gD,KAAK,CAACW,mBAAmB,EAAE;MAC7B,IAAI,CAACxB,KAAK,CAAC9H,MAAM,CAAChI,0BAA0B,EAAEiP,QAAQ,CAAC;IACzD;IACA,OAAO,IAAI,CAACZ,UAAU,CAAC9V,IAAI,EAAE,0BAA0B,CAAC;EAC1D;EAEA8+D,oBAAoBA,CAACjmD,IAAkB,EAAW;IAChD,OACEA,IAAI,CAAC5Y,IAAI,KAAK,YAAY,IAC1B4Y,IAAI,CAAC1S,IAAI,KAAK,OAAO,IACrB,IAAI,CAACiS,KAAK,CAACsB,aAAa,CAACjc,KAAK,KAAKob,IAAI,CAAChb,GAAG,IAC3C,CAAC,IAAI,CAAC0/B,kBAAkB,CAAA,CAAE,IAE1B1kB,IAAI,CAAChb,GAAG,GAAGgb,IAAI,CAACjb,KAAK,KAAK,CAAC,IAC3B,IAAI,CAACmtB,iBAAiB,CAAClS,IAAI,CAACjb,KAAK,CAAC,KAAK,IAAI,CAACwa,KAAK,CAACmW,gBAAgB;EAEtE;EAEA/W,oBAAoBA,CAClBxX,IAAe,EACf0X,QAAiB,EACd;IACH,IAAI1X,IAAI,CAAC2X,MAAM,CAAC1X,IAAI,KAAK,QAAQ,EAAE;MACjC,IAAID,IAAI,CAAC8X,SAAS,CAACU,MAAM,KAAK,CAAC,IAAIxY,IAAI,CAAC8X,SAAS,CAACU,MAAM,GAAG,CAAC,EAAE;QAC5D,IAAI,CAACjB,KAAK,CAAC9H,MAAM,CAAChM,eAAe,EAAEzD,IAAI,CAAC;MAC1C,CAAC,MAAM;QACL,KAAK,MAAM8rD,GAAG,IAAI9rD,IAAI,CAAC8X,SAAS,EAAE;UAChC,IAAIg0C,GAAG,CAAC7rD,IAAI,KAAK,eAAe,EAAE;YAChC,IAAI,CAACsX,KAAK,CAAC9H,MAAM,CAAC9L,wBAAwB,EAAEmoD,GAAG,CAAC;UAClD;QACF;MACF;IACF;IACA,OAAO,IAAI,CAACh2C,UAAU,CACpB9V,IAAI,EACJ0X,QAAQ,GAAG,wBAAwB,GAAG,gBACxC,CAAC;EACH;EAEA49B,4BAA4BA,CAE1BjE,KAAgB,EAChB+4B,gBAA0B,EAC1BC,YAAoC,EACpC1zD,mBAA6C,EACxB;IACrB,MAAM+1C,IAAoB,GAAG,EAAE;IAC/B,IAAIhgB,KAAK,GAAG,IAAI;IAChB,MAAM49B,6BAA6B,GAAG,IAAI,CAAClyD,KAAK,CAACwX,0BAA0B;IAC3E,IAAI,CAACxX,KAAK,CAACwX,0BAA0B,GAAG,KAAK;IAE7C,OAAO,CAAC,IAAI,CAAC6E,GAAG,CAAC4c,KAAK,CAAC,EAAE;MACvB,IAAI3E,KAAK,EAAE;QACTA,KAAK,GAAG,KAAK;MACf,CAAC,MAAM;QACL,IAAI,CAAC7O,MAAM,CAAA,EAAS,CAAC;QACrB,IAAI,IAAI,CAAC9L,KAAK,CAACsf,KAAK,CAAC,EAAE;UACrB,IAAIg5B,YAAY,EAAE;YAChB,IAAI,CAACE,2BAA2B,CAACF,YAAY,CAAC;UAChD;UACA,IAAI,CAACniD,IAAI,CAAA,CAAE;UACX;QACF;MACF;MAEAwkC,IAAI,CAAC7wC,IAAI,CACP,IAAI,CAAC2uD,iBAAiB,CAAC,KAAK,EAAE7zD,mBAAmB,EAAEyzD,gBAAgB,CACrE,CAAC;IACH;IAEA,IAAI,CAAChyD,KAAK,CAACwX,0BAA0B,GAAG06C,6BAA6B;IAErE,OAAO5d,IAAI;EACb;EAEAzY,qBAAqBA,CAAAA,EAAY;IAC/B,OAAO,IAAI,CAACliB,KAAK,CAAS,EAAA,CAAC,IAAI,CAAC,IAAI,CAACwL,kBAAkB,EAAE;EAC3D;EAEAwW,iCAAiCA,CAE/B/zC,IAAuC,EACvCg0C,IAAsB,EACK;IAAA,IAAAy2B,WAAA;IAC3B,IAAI,CAACh9C,iCAAiC,CAACumB,IAAI,CAAC;IAC5C,IAAI,CAACnW,MAAM,CAAA,EAAS,CAAC;IACrB,IAAI,CAACgY,oBAAoB,CACvB71C,IAAI,EACJg0C,IAAI,CAACl8B,SAAS,EACd,IAAI,GAAA2yD,WAAA,GACJz2B,IAAI,CAAC3gC,KAAK,qBAAVo3D,WAAA,CAAYj7B,gBACd,CAAC;IAED,IAAIwE,IAAI,CAACjoB,aAAa,EAAE;MACtBD,gBAAgB,CAAC9rB,IAAI,EAAEg0C,IAAI,CAACjoB,aAAa,CAAC;IAC5C;IAEA,IAAIioB,IAAI,CAACr8B,MAAM,CAAC+T,gBAAgB,EAAE;MAChCI,gBAAgB,CAAC9rB,IAAI,EAAEg0C,IAAI,CAACr8B,MAAM,CAAC+T,gBAAgB,CAAC;IACtD;IACA,OAAO1rB,IAAI;EACb;EAIAiqE,eAAeA,CAAAA,EAA6B;IAC1C,MAAMvzD,QAAQ,GAAG,IAAI,CAAC0B,KAAK,CAAC1B,QAAQ;IACpC,OAAO,IAAI,CAAC2+B,eAAe,CAAC,IAAI,CAAC9N,aAAa,CAAA,CAAE,EAAE7wB,QAAQ,EAAE,IAAI,CAAC;EACnE;EAcA6wB,aAAaA,CAEX5wB,mBAA6C,EAC/B;IACd,IAAI3W,IAAI;IACR,IAAIkY,UAAgC,GAAG,IAAI;IAE3C,MAAM;MAAEjY;KAAM,GAAG,IAAI,CAACmY,KAAK;IAC3B,QAAQnY,IAAI;MACV,KAAA,EAAA;QACE,OAAO,IAAI,CAACyqE,UAAU,EAAE;MAE1B,KAAA,EAAA;QACE1qE,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAkD;QACvE,IAAI,CAACuS,IAAI,CAAA,CAAE;QAEX,IAAI,IAAI,CAAC6J,KAAK,CAAA,EAAO,CAAC,EAAE;UACtB,OAAO,IAAI,CAAC44C,uBAAuB,CAAC3qE,IAA8B,CAAC;QACrE;QAEA,IAAI,IAAI,CAAC+xB,KAAK,CAAA,EAAU,CAAC,EAAE;UACzB,IAAI,IAAI,CAACngB,WAAW,MAAsC,EAAE;YAC1D,OAAO,IAAI,CAACg5D,eAAe,CAAC5qE,IAAkC,CAAC;UACjE,CAAC,MAAM;YACL,OAAO,IAAI,CAAC8V,UAAU,CAAC9V,IAAI,EAAE,QAAQ,CAAC;UACxC;QACF,CAAC,MAAM;UACL,IAAI,CAACuX,KAAK,CAAC9H,MAAM,CAACtF,iBAAiB,EAAE,IAAI,CAACiO,KAAK,CAACC,eAAe,CAAC;UAChE,OAAO,IAAI,CAACvC,UAAU,CAAC9V,IAAI,EAAE,QAAQ,CAAC;QACxC;MAEF,KAAA,EAAA;QACEA,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAoB;QACzC,IAAI,CAACuS,IAAI,CAAA,CAAE;QACX,OAAO,IAAI,CAACpS,UAAU,CAAC9V,IAAI,EAAE,gBAAgB,CAAC;MAEhD,KAAA,EAAA;QAAa;UACX,OAAO,IAAI,CAAC6qE,OAAO,CAAC,IAAI,CAACl1D,SAAS,CAAE,CAAA,EAAE,KAAK,CAAC;QAC9C;MAEA,KAAA,EAAA;MACA,KAAA,EAAA;QAAqB;UACnB,IAAI,CAACyiB,UAAU,CAAA,CAAE;UACjB,OAAO,IAAI,CAACvmB,kBAAkB,CAAC,IAAI,CAACuG,KAAK,CAACpL,KAAK,CAAC;QAClD;MAEA,KAAA,GAAA;QACE,OAAO,IAAI,CAAC8F,mBAAmB,CAAC,IAAI,CAACsF,KAAK,CAACpL,KAAK,CAAC;MAEnD,KAAA,GAAA;QACE,OAAO,IAAI,CAACoF,kBAAkB,CAAC,IAAI,CAACgG,KAAK,CAACpL,KAAK,CAAC;MAElD,KAAA,GAAA;QACE,OAAO,IAAI,CAAC6F,kBAAkB,CAAC,IAAI,CAACuF,KAAK,CAACpL,KAAK,CAAC;MAElD,KAAA,EAAA;QACE,OAAO,IAAI,CAAC+F,gBAAgB,EAAE;MAEhC,KAAA,EAAA;QACE,OAAO,IAAI,CAACC,mBAAmB,CAAC,IAAI,CAAC;MACvC,KAAA,EAAA;QACE,OAAO,IAAI,CAACA,mBAAmB,CAAC,KAAK,CAAC;MAExC,KAAA,EAAA;QAAgB;UACd,MAAMoiC,UAAU,GAAG,IAAI,CAACh9B,KAAK,CAACmW,gBAAgB,KAAK,IAAI,CAACnW,KAAK,CAACxa,KAAK;UACnE,OAAO,IAAI,CAACu3C,kCAAkC,CAACC,UAAU,CAAC;QAC5D;MAEA,KAAA,CAAA;MACA,KAAA,CAAA;QAAsB;UACpB,OAAO,IAAI,CAAChE,cAAc,CACxB,IAAI,CAACh5B,KAAK,CAACnY,IAAI,MAAmB,GAA+B,CAAA,GAAA,CAAA,EAC9C,KAAK,EACV,IAChB,CAAC;QACH;MACA,KAAA,CAAA;QAAkB;UAChB,OAAO,IAAI,CAACmxC,cAAc,CAAA,CAAA,EAEL,IAAI,EACT,KAAK,EACnBz6B,mBACF,CAAC;QACH;MACA,KAAA,CAAA;MACA,KAAA,CAAA;QAAoB;UAClB,OAAO,IAAI,CAAC41C,eAAe,CACzB,IAAI,CAACn0C,KAAK,CAACnY,IAAI,MAAiB,GAA2B,CAAA,GAAA,CAAA,EAC3C,KAAK,EACN,IACjB,CAAC;QACH;MACA,KAAA,CAAA;QAAgB;UACd,OAAO,IAAI,CAACssD,eAAe,CAAA,CAAA,EAET,KAAK,EACN,KAAK,EACpB51C,mBACF,CAAC;QACH;MACA,KAAA,EAAA;QACE,OAAO,IAAI,CAACm0D,2BAA2B,EAAE;MAE3C,KAAA,EAAA;QACE5yD,UAAU,GAAG,IAAI,CAAC6yD,eAAe,EAAE;MAErC,KAAA,EAAA;QACE,OAAO,IAAI,CAAC1N,UAAU,CACpB,IAAI,CAAC8E,mBAAmB,CACtBjqD,UAAU,EACV,IAAI,CAACvC,SAAS,CAAA,CAChB,CAAC,EACD,KACF,CAAC;MAEH,KAAA,EAAA;QACE,OAAO,IAAI,CAACq1D,mBAAmB,EAAE;MAEnC,KAAA,EAAA;MACA,KAAA,EAAA;QACE,OAAO,IAAI,CAAClS,aAAa,CAAC,KAAK,CAAC;MAIlC,KAAA,EAAA;QAAqB;UACnB94D,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAoB;UACzC,IAAI,CAACuS,IAAI,CAAA,CAAE;UACXloB,IAAI,CAACqR,MAAM,GAAG,IAAI;UAClB,MAAMsG,MAAM,GAAI3X,IAAI,CAAC2X,MAAM,GAAG,IAAI,CAACsyD,eAAe,CAAA,CAAG;UACrD,IAAItyD,MAAM,CAAC1X,IAAI,KAAK,kBAAkB,EAAE;YACtC,OAAO,IAAI,CAAC6V,UAAU,CAAC9V,IAAI,EAAE,gBAAgB,CAAC;UAChD,CAAC,MAAM;YACL,MAAM,IAAI,CAACuX,KAAK,CAAC9H,MAAM,CAACzF,eAAe,EAAE2N,MAAM,CAAC;UAClD;QACF;MAEA,KAAA,GAAA;QAAqB;UAOnB,IAAI,CAACJ,KAAK,CAAC9H,MAAM,CAAC3H,mBAAmB,EAAE,IAAI,CAACsQ,KAAK,CAAC1B,QAAQ,EAAE;YAC1D3Y,cAAc,EAAE,IAAI,CAACqa,KAAK,CAACpL;UAC7B,CAAC,CAAC;UACF,OAAO,IAAI,CAAC4H,gBAAgB,EAAE;QAChC;MAEA,KAAA,EAAA;QAAsB;UACpB,OAAO,IAAI,CAACq2D,iCAAiC,CAAA,EAAA,EAAY,GAAG,CAAC;QAC/D;MAEA,KAAA,EAAA;QAAmB;UACjB,OAAO,IAAI,CAACA,iCAAiC,CAAA,EAAA,EAAgB,GAAG,CAAC;QACnE;MAEA,KAAA,EAAA;MACA,KAAA,EAAA;QAAkB;UAChB,OAAO,IAAI,CAACC,mBAAmB,CAAC,MAAM,CAAC;QACzC;MAEA,KAAA,EAAA;MACA,KAAA,EAAA;MACA,KAAA,EAAA;QAAc;UACZ,MAAMC,YAAY,GAAG,IAAI,CAACt2D,eAAe,CACvC,kBAAkB,EAClB,UACF,CAAC;UAED,IAAIs2D,YAAY,EAAE;YAChB,OAAO,IAAI,CAACD,mBAAmB,CAACC,YAAY,CAAC;UAC/C;UACA,IAAI,CAACjmE,UAAU,CAAA,CAAE;UACjB;QACF;MAEA,KAAA,EAAA;QAAY;UACV,MAAMqyB,WAAW,GAAG,IAAI,CAACnK,KAAK,CAACoK,WAAW,CAAC,IAAI,CAACzC,cAAc,CAAA,CAAE,CAAC;UACjE,IACEhO,iBAAiB,CAACwQ,WAAW,CAAC,IAC9BA,WAAW,OAA0B,EACrC;YACA,IAAI,CAACuC,eAAe,CAAC,CAAC,KAAK,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC;UACrD,CAAC,MAAM;YACL,IAAI,CAAC50B,UAAU,CAAA,CAAE;UACnB;UACA;QACF;MAEA;QACE,IAAqCjF,IAAI,QAAe,EAAE;UACxD,OAAO,IAAI,CAACyS,mBAAmB,CAAC,IAAI,CAAC0F,KAAK,CAACpL,KAAK,CAAC;QACnD;QAEA,IAAIgY,iBAAiB,CAAC/kB,IAAI,CAAC,EAAE;UAC3B,IACE,IAAI,CAAC88B,YAAY,CAAA,GAAW,CAAC,IAC7B,IAAI,CAAC1H,uBAAuB,CAAE,CAAA,KAAA,GAA6B,EAC3D;YACA,OAAO,IAAI,CAAC+1C,qBAAqB,EAAE;UACrC;UACA,MAAMh2B,UAAU,GAAG,IAAI,CAACh9B,KAAK,CAACmW,gBAAgB,KAAK,IAAI,CAACnW,KAAK,CAACxa,KAAK;UACnE,MAAMkyB,WAAW,GAAG,IAAI,CAAC1X,KAAK,CAAC0X,WAAW;UAC1C,MAAM9a,EAAE,GAAG,IAAI,CAACoxB,eAAe,EAAE;UAEjC,IACE,CAACtW,WAAW,IACZ9a,EAAE,CAAC7O,IAAI,KAAK,OAAO,IACnB,CAAC,IAAI,CAACo3B,kBAAkB,EAAE,EAC1B;YACA,MAAM;cAAEt9B;aAAM,GAAG,IAAI,CAACmY,KAAK;YAC3B,IAAInY,IAAI,OAAiB,EAAE;cACzB,IAAI,CAACwtB,iCAAiC,CAACzY,EAAE,CAAC;cAC1C,IAAI,CAACkT,IAAI,CAAA,CAAE;cACX,OAAO,IAAI,CAACmjD,4BAA4B,CACtC,IAAI,CAAClyD,eAAe,CAACnE,EAAE,CACzB,CAAC;YACH,CAAC,MAAM,IAAIgQ,iBAAiB,CAAC/kB,IAAI,CAAC,EAAE;cAIlC,IAAI,IAAI,CAACi1B,iBAAiB,CAAE,CAAA,OAAuB,EAAE;gBAInD,OAAO,IAAI,CAACo2C,4BAA4B,CACtC,IAAI,CAACnyD,eAAe,CAACnE,EAAE,CACzB,CAAC;cACH,CAAC,MAAM;gBAGL,OAAOA,EAAE;cACX;YACF,CAAC,MAAM,IAAI/U,IAAI,KAAA,EAAW,EAAE;cAC1B,IAAI,CAACwtB,iCAAiC,CAACzY,EAAE,CAAC;cAC1C,OAAO,IAAI,CAAC61D,OAAO,CAAC,IAAI,CAAC1xD,eAAe,CAACnE,EAAE,CAAC,EAAE,IAAI,CAAC;YACrD;UACF;UAEA,IACEogC,UAAU,IACV,IAAI,CAACrjB,KAAK,CAAS,EAAA,CAAC,IACpB,CAAC,IAAI,CAACwL,kBAAkB,EAAE,EAC1B;YACA,IAAI,CAACrV,IAAI,CAAA,CAAE;YACX,OAAO,IAAI,CAAC2tB,oBAAoB,CAC9B,IAAI,CAAC18B,eAAe,CAACnE,EAAE,CAAC,EACxB,CAACA,EAAE,CAAC,EACJ,KACF,CAAC;UACH;UAEA,OAAOA,EAAE;QACX,CAAC,MAAM;UACL,IAAI,CAAC9P,UAAU,CAAA,CAAE;QACnB;IACJ;EACF;EAYA+lE,iCAAiCA,CAC/BM,cAAyB,EACzBC,eAAuB,EACT;IACd,MAAML,YAAY,GAAG,IAAI,CAACt2D,eAAe,CAAC,kBAAkB,EAAE,UAAU,CAAC;IAEzE,IAAIs2D,YAAY,EAAE;MAKhB,IAAI,CAAC/yD,KAAK,CAACnY,IAAI,GAAGsrE,cAAc;MAChC,IAAI,CAACnzD,KAAK,CAACpL,KAAK,GAAGw+D,eAAe;MAGlC,IAAI,CAACpzD,KAAK,CAAC/J,GAAG,EAAE;MAChB,IAAI,CAAC+J,KAAK,CAACva,GAAG,EAAE;MAGhB,IAAI,CAACua,KAAK,CAACoB,MAAM,GAAGxb,8BAA8B,CAAC,IAAI,CAACoa,KAAK,CAACoB,MAAM,EAAE,CAAC,CAAC,CAAC;MAEzE,OAAO,IAAI,CAAC0xD,mBAAmB,CAACC,YAAY,CAAC;IAC/C,CAAC,MAAM;MACL,IAAI,CAACjmE,UAAU,CAAA,CAAE;IACnB;EACF;EAQAgmE,mBAAmBA,CAACC,YAAoB,EAAgB;IACtD,MAAMnrE,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAoB;IAC/C,MAAMe,QAAQ,GAAG,IAAI,CAAC0B,KAAK,CAAC1B,QAAQ;IACpC,MAAMuoD,SAAS,GAAG,IAAI,CAAC7mD,KAAK,CAACnY,IAAI;IAGjC,IAAI,CAACioB,IAAI,CAAA,CAAE;IAKX,OAAO,IAAI,CAACujD,oBAAoB,CAACzrE,IAAI,EAAE0W,QAAQ,EAAEy0D,YAAY,EAAElM,SAAS,CAAC;EAC3E;EAeAwM,oBAAoBA,CAGlBzrE,IAAe,EACf0W,QAAkB,EAClBy0D,YAAoB,EACpBlM,SAAoB,EACjB;IACH,IACE,IAAI,CAACyM,+BAA+B,CAACP,YAAY,EAAEz0D,QAAQ,EAAEuoD,SAAS,CAAC,EACvE;MAMA,MAAM9F,QAAQ,GACZgS,YAAY,KAAK,OAAO,GACpB,+BAA+B,GAG/B,gBAAgB;MAEtB,IAAI,CAAC,IAAI,CAACQ,uCAAuC,EAAE,EAAE;QACnD,IAAI,CAACp0D,KAAK,CAIR4zD,YAAY,KAAK,OAAO,GACpB17D,MAAM,CAAC7C,sBAAsB,GAE7B6C,MAAM,CAACtD,gBAAgB,EAC3BuK,QACF,CAAC;MACH;MAIA,IAAI,CAACk1D,sBAAsB,CAAA,CAAE;MAE7B,OAAO,IAAI,CAAC91D,UAAU,CAAC9V,IAAI,EAAEm5D,QAAQ,CAAC;IACxC,CAAC,MAAM;MAEL,MAAM,IAAI,CAAC5hD,KAAK,CAAC9H,MAAM,CAACrD,0BAA0B,EAAEsK,QAAQ,EAAE;QAC5DrK,KAAK,EAAE0Z,cAAc,CAACk5C,SAAS;MACjC,CAAC,CAAC;IACJ;EACF;EAWAyM,+BAA+BA,CAC7BP,YAAoB,EACpBz0D,QAAkB,EAClBuoD,SAAoB,EACX;IACT,QAAQkM,YAAY;MAClB,KAAK,MAAM;QAAE;UACX,OAAO,IAAI,CAAClgD,SAAS,CAAC,CACpB,kBAAkB,EAClB;YAEEqM,UAAU,EAAEvR,cAAc,CAACk5C,SAAS;UACrC,CAAA,CACF,CAAC;QACJ;MACA,KAAK,OAAO;QACV,OAAOA,SAAS,KAAY,EAAA;MAC9B;QACE,MAAM,IAAI,CAAC1nD,KAAK,CAAC9H,MAAM,CAACvD,0BAA0B,EAAEwK,QAAQ,CAAC;IACjE;EACF;EAGA40D,4BAA4BA,CAE1BtrE,IAAuC,EACZ;IAG3B,IAAI,CAACs/B,SAAS,CAAC3V,KAAK,CAACiT,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC0C,SAAS,CAAC7C,QAAQ,CAAC,CAAC;IAClE,MAAM1oB,MAAM,GAAG,CAAC,IAAI,CAACqyB,eAAe,CAAE,CAAA,CAAC;IACvC,IAAI,CAAC9G,SAAS,CAAC1V,IAAI,EAAE;IACrB,IAAI,IAAI,CAAC4T,qBAAqB,EAAE,EAAE;MAChC,IAAI,CAACjmB,KAAK,CAAC9H,MAAM,CAAC9J,yBAAyB,EAAE,IAAI,CAACyS,KAAK,CAAC4X,WAAW,CAAA,CAAE,CAAC;IACxE;IACA,IAAI,CAAC6N,MAAM,CAAA,EAAS,CAAC;IAErB,OAAO,IAAI,CAACgY,oBAAoB,CAAC71C,IAAI,EAAE+T,MAAM,EAAE,IAAI,CAAC;EACtD;EAIA82D,OAAOA,CAEL7qE,IAA4B,EAC5B0T,OAAgB,EACA;IAChB,IAAI,CAACijB,YAAY,CAAC,eAAe,CAAC;IAClC,IAAIjjB,OAAO,EAAE;MACX,IAAI,CAACijB,YAAY,CAAC,oBAAoB,CAAC;IACzC;IACA32B,IAAI,CAAC40C,KAAK,GAAGlhC,OAAO;IACpB,IAAI,CAACwU,IAAI,CAAA,CAAE;IACX,MAAM6W,SAAS,GAAG,IAAI,CAAC3mB,KAAK,CAACyW,MAAM;IACnC,IAAI,CAACzW,KAAK,CAACyW,MAAM,GAAG,EAAE;IACtB,IAAInb,OAAO,EAAE;MAGX,IAAI,CAAC4rB,SAAS,CAAC3V,KAAK,EAAsB,CAAC;MAC3C3pB,IAAI,CAAC0U,IAAI,GAAG,IAAI,CAACgwD,UAAU,EAAE;MAC7B,IAAI,CAACplC,SAAS,CAAC1V,IAAI,EAAE;IACvB,CAAC,MAAM;MACL5pB,IAAI,CAAC0U,IAAI,GAAG,IAAI,CAACgwD,UAAU,EAAE;IAC/B;IAEA,IAAI,CAACtsD,KAAK,CAACyW,MAAM,GAAGkQ,SAAS;IAC7B,OAAO,IAAI,CAACjpB,UAAU,CAAC9V,IAAI,EAAE,cAAc,CAAC;EAC9C;EAGA0qE,UAAUA,CAAAA,EAAY;IACpB,MAAM1qE,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAW;IACtC,IAAI,CAACuS,IAAI,CAAA,CAAE;IACX,IACE,IAAI,CAAC6J,KAAK,CAAA,EAAU,CAAC,IACrB,CAAC,IAAI,CAAClI,KAAK,CAACrU,gBAAgB,IAC5B,EAAE,IAAI,CAAC5D,WAAW,KAAsC,CAAC,EACzD;MACA,IAAI,CAAC2F,KAAK,CAAC9H,MAAM,CAAChH,eAAe,EAAEzI,IAAI,CAAC;IAC1C,CAAC,MAAM,IACL,CAAC,IAAI,CAAC6pB,KAAK,CAACZ,UAAU,IACtB,EAAE,IAAI,CAACrX,WAAW,KAAsC,CAAC,EACzD;MACA,IAAI,CAAC2F,KAAK,CAAC9H,MAAM,CAAC9F,eAAe,EAAE3J,IAAI,CAAC;IAC1C;IAEA,IACE,CAAC,IAAI,CAAC+xB,KAAK,GAAU,CAAC,IACtB,CAAC,IAAI,CAACA,KAAK,CAAY,CAAA,CAAC,IACxB,CAAC,IAAI,CAACA,KAAK,CAAA,EAAO,CAAC,EACnB;MACA,IAAI,CAACxa,KAAK,CAAC9H,MAAM,CAAChF,gBAAgB,EAAEzK,IAAI,CAAC;IAC3C;IAEA,OAAO,IAAI,CAAC8V,UAAU,CAAC9V,IAAI,EAAE,OAAO,CAAC;EACvC;EAEA4U,gBAAgBA,CAAAA,EAAkB;IAChC,MAAM5U,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAiB;IAC5C,MAAMX,EAAE,GAAG,IAAI,CAAC0rB,WAAW,CAGzB1iC,8BAA8B,CAAC,IAAI,CAACoa,KAAK,CAAC1B,QAAQ,EAAE,CAAC,CACvD,CAAC;IACD,MAAMvQ,IAAI,GAAG,IAAI,CAACiS,KAAK,CAACpL,KAAK;IAC7B,IAAI,CAACkb,IAAI,CAAA,CAAE;IACXloB,IAAI,CAACgV,EAAE,GAAG,IAAI,CAACi4B,gBAAgB,CAACj4B,EAAE,EAAE7O,IAAI,CAAC;IACzC,OAAO,IAAI,CAAC2P,UAAU,CAAC9V,IAAI,EAAE,aAAa,CAAC;EAC7C;EAEA8qE,2BAA2BA,CAAAA,EAEc;IACvC,MAAM9qE,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAyC;IAOpE,IAAI,CAACuS,IAAI,CAAA,CAAE;IAEX,IAAI,IAAI,CAACoX,SAAS,CAAC7C,QAAQ,IAAI,IAAI,CAAC1K,KAAK,CAAO,EAAA,CAAC,EAAE;MACjD,MAAM85C,IAAI,GAAG,IAAI,CAAC5+B,gBAAgB,CAChC,IAAI,CAAC9zB,eAAe,CAAenZ,IAAI,CAAC,EACxC,UACF,CAAC;MACD,IAAI,CAACkoB,IAAI,CAAA,CAAE;MAEX,IAAI,IAAI,CAAC6J,KAAK,CAAA,GAAS,CAAC,EAAE;QACxB,IAAI,CAAC4E,YAAY,CAAC,cAAc,CAAC;MAClC,CAAA,MAAM,IAAI,CAAC,IAAI,CAAC1L,SAAS,CAAC,cAAc,CAAC,EAAE;QAE1C,IAAI,CAAC/lB,UAAU,CAAA,CAAE;MACnB;MACA,OAAO,IAAI,CAAC4mE,iBAAiB,CAC3B9rE,IAAI,EACJ6rE,IAAI,EACJ,MACF,CAAC;IACH;IACA,OAAO,IAAI,CAACE,aAAa,CAAC/rE,IAAoC,CAAC;EACjE;EAEA8rE,iBAAiBA,CACf9rE,IAA4B,EAC5B6rE,IAAkB,EAClBvd,YAAoB,EACJ;IAChBtuD,IAAI,CAAC6rE,IAAI,GAAGA,IAAI;IAEhB,MAAM/7C,WAAW,GAAG,IAAI,CAAC1X,KAAK,CAAC0X,WAAW;IAE1C9vB,IAAI,CAAC6+B,QAAQ,GAAG,IAAI,CAACuH,eAAe,CAAC,IAAI,CAAC;IAE1C,IAAIpmC,IAAI,CAAC6+B,QAAQ,CAAC14B,IAAI,KAAKmoD,YAAY,IAAIx+B,WAAW,EAAE;MACtD,IAAI,CAACvY,KAAK,CAAC9H,MAAM,CAACrF,uBAAuB,EAAEpK,IAAI,CAAC6+B,QAAQ,EAAE;QACxDx0B,MAAM,EAAEwhE,IAAI,CAAC1lE,IAAI;QACjBmE,qBAAqB,EAAEgkD;MACzB,CAAC,CAAC;IACJ;IAEA,OAAO,IAAI,CAACx4C,UAAU,CAAC9V,IAAI,EAAE,cAAc,CAAC;EAC9C;EAGA2qE,uBAAuBA,CAErB3qE,IAAiD,EACZ;IACrC,MAAMgV,EAAE,GAAG,IAAI,CAACi4B,gBAAgB,CAC9B,IAAI,CAAC9zB,eAAe,CAAenZ,IAAI,CAAC,EACxC,QACF,CAAC;IACD,IAAI,CAACkoB,IAAI,CAAA,CAAE;IAEX,IAAI,IAAI,CAAC6U,YAAY,CAAA,GAAS,CAAC,EAAE;MAC/B,IAAI,CAAC,IAAI,CAACrV,QAAQ,EAAE;QAClB,IAAI,CAACnQ,KAAK,CAAC9H,MAAM,CAACpR,uBAAuB,EAAE2W,EAAE,CAAC;MAChD;MACA,IAAI,CAAC2V,iBAAiB,GAAG,IAAI;IAC/B,CAAC,MAAM,IAAI,IAAI,CAACoS,YAAY,CAAA,GAAW,CAAC,IAAI,IAAI,CAACA,YAAY,CAAA,EAAU,CAAC,EAAE;MACxE,MAAMivC,QAAQ,GAAG,IAAI,CAACjvC,YAAY,IAAW,CAAC;MAE9C,IAAI,CAACpG,YAAY,CACfq1C,QAAQ,GAAG,oBAAoB,GAAG,0BACpC,CAAC;MACD,IAAI,EAAE,IAAI,CAACp6D,WAAW,MAAsC,CAAC,EAAE;QAC7D,MAAM,IAAI,CAAC2F,KAAK,CACd9H,MAAM,CAAClN,2CAA2C,EAClD,IAAI,CAAC6V,KAAK,CAAC1B,QAAQ,EACnB;UACElU,KAAK,EAAE,IAAI,CAAC4V,KAAK,CAACpL;QACpB,CACF,CAAC;MACH;MACA,IAAI,CAACkb,IAAI,CAAA,CAAE;MACVloB,IAAI,CAAgCwC,KAAK,GAAGwpE,QAAQ,GACjD,QAAQ,GACR,OAAO;MACX,OAAO,IAAI,CAACpB,eAAe,CAAC5qE,IAAkC,CAAC;IACjE;IAEA,OAAO,IAAI,CAAC8rE,iBAAiB,CAAC9rE,IAAI,EAA4BgV,EAAE,EAAE,MAAM,CAAC;EAC3E;EAEAg4B,kBAAkBA,CAChBhgC,KAAU,EACV/M,IAAe,EACfD,IAAS,EACN;IACH,IAAI,CAAC88B,QAAQ,CAAC98B,IAAI,EAAE,UAAU,EAAEgN,KAAK,CAAC;IACtC,IAAI,CAAC8vB,QAAQ,CACX98B,IAAI,EACJ,KAAK,EACL,IAAI,CAACotB,KAAK,CAAC6C,KAAK,CAAC,IAAI,CAAClF,iBAAiB,CAAC/qB,IAAI,CAACpC,KAAK,CAAC,EAAE,IAAI,CAACwa,KAAK,CAACva,GAAG,CACrE,CAAC;IACDmC,IAAI,CAACgN,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACkb,IAAI,CAAA,CAAE;IACX,OAAO,IAAI,CAACpS,UAAU,CAAI9V,IAAI,EAAEC,IAAI,CAAC;EACvC;EAEA2S,YAAYA,CAAmB5F,KAAU,EAAE/M,IAAe,EAAK;IAC7D,MAAMD,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAE;IAC7B,OAAO,IAAI,CAACq3B,kBAAkB,CAAChgC,KAAK,EAAE/M,IAAI,EAAED,IAAI,CAAC;EACnD;EAEA6S,kBAAkBA,CAAC7F,KAAU,EAAE;IAC7B,OAAO,IAAI,CAAC4F,YAAY,CAAkB5F,KAAK,EAAE,eAAe,CAAC;EACnE;EAEA8F,mBAAmBA,CAAC9F,KAAU,EAAE;IAC9B,OAAO,IAAI,CAAC4F,YAAY,CAAmB5F,KAAK,EAAE,gBAAgB,CAAC;EACrE;EAEAoF,kBAAkBA,CAACpF,KAAU,EAAE;IAC7B,OAAO,IAAI,CAAC4F,YAAY,CAAkB5F,KAAK,EAAE,eAAe,CAAC;EACnE;EAGA0F,mBAAmBA,CAAC1F,KAAU,EAAE;IAC9B,OAAO,IAAI,CAAC4F,YAAY,CAAmB5F,KAAK,EAAE,gBAAgB,CAAC;EACrE;EAEA6E,kBAAkBA,CAAC7E,KAIlB,EAAE;IACD,MAAMhN,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAmB;IAC9C,IAAI,CAACmnB,QAAQ,CACX98B,IAAI,EACJ,KAAK,EACL,IAAI,CAACotB,KAAK,CAAC6C,KAAK,CAAC,IAAI,CAAClF,iBAAiB,CAAC/qB,IAAI,CAACpC,KAAK,CAAC,EAAE,IAAI,CAACwa,KAAK,CAACva,GAAG,CACrE,CAAC;IACDmC,IAAI,CAAC8R,OAAO,GAAG9E,KAAK,CAAC8E,OAAO;IAC5B9R,IAAI,CAAC+R,KAAK,GAAG/E,KAAK,CAAC+E,KAAK;IACxB,IAAI,CAACmW,IAAI,CAAA,CAAE;IACX,OAAO,IAAI,CAACpS,UAAU,CAAC9V,IAAI,EAAE,eAAe,CAAC;EAC/C;EAEAgT,mBAAmBA,CAAChG,KAAc,EAAE;IAClC,MAAMhN,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAoB;IAC/C3V,IAAI,CAACgN,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACkb,IAAI,CAAA,CAAE;IACX,OAAO,IAAI,CAACpS,UAAU,CAAC9V,IAAI,EAAE,gBAAgB,CAAC;EAChD;EAEA+S,gBAAgBA,CAAAA,EAAG;IACjB,MAAM/S,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAiB;IAC5C,IAAI,CAACuS,IAAI,CAAA,CAAE;IACX,OAAO,IAAI,CAACpS,UAAU,CAAC9V,IAAI,EAAE,aAAa,CAAC;EAC7C;EAGAm1C,kCAAkCA,CAEhCC,UAAmB,EACL;IACd,MAAM1+B,QAAQ,GAAG,IAAI,CAAC0B,KAAK,CAAC1B,QAAQ;IAEpC,IAAIuc,GAAG;IACP,IAAI,CAAC/K,IAAI,CAAA,CAAE;IACX,IAAI,CAACsX,eAAe,CAAC7V,KAAK,CAACuS,iBAAiB,CAAE,CAAA,CAAC;IAE/C,MAAM4hC,yBAAyB,GAAG,IAAI,CAAC1lD,KAAK,CAACgX,sBAAsB;IACnE,MAAMk7C,6BAA6B,GAAG,IAAI,CAAClyD,KAAK,CAACwX,0BAA0B;IAC3E,IAAI,CAACxX,KAAK,CAACgX,sBAAsB,GAAG,IAAI;IACxC,IAAI,CAAChX,KAAK,CAACwX,0BAA0B,GAAG,KAAK;IAE7C,MAAMq8C,aAAa,GAAG,IAAI,CAAC7zD,KAAK,CAAC1B,QAAQ;IACzC,MAAMs6B,QAA0C,GAAG,EAAE;IACrD,MAAMr6B,mBAAmB,GAAG,IAAIipB,gBAAgB,EAAE;IAClD,IAAI8M,KAAK,GAAG,IAAI;IAChB,IAAIw/B,cAAc;IAClB,IAAIC,qBAAqB;IAEzB,OAAO,CAAC,IAAI,CAACp6C,KAAK,CAAA,EAAU,CAAC,EAAE;MAC7B,IAAI2a,KAAK,EAAE;QACTA,KAAK,GAAG,KAAK;MACf,CAAC,MAAM;QACL,IAAI,CAAC7O,MAAM,CAETlnB,EAAAA,EAAAA,mBAAmB,CAAC+nB,qBAAqB,KAAK,IAAI,GAC9C,IAAI,GACJ/nB,mBAAmB,CAAC+nB,qBAC1B,CAAC;QACD,IAAI,IAAI,CAAC3M,KAAK,CAAA,EAAU,CAAC,EAAE;UACzBo6C,qBAAqB,GAAG,IAAI,CAAC/zD,KAAK,CAAC1B,QAAQ;UAC3C;QACF;MACF;MAEA,IAAI,IAAI,CAACqb,KAAK,CAAA,EAAY,CAAC,EAAE;QAC3B,MAAMq6C,kBAAkB,GAAG,IAAI,CAACh0D,KAAK,CAAC1B,QAAQ;QAC9Cw1D,cAAc,GAAG,IAAI,CAAC9zD,KAAK,CAAC1B,QAAQ;QACpCs6B,QAAQ,CAACn1B,IAAI,CACX,IAAI,CAAC8zB,cAAc,CAAC,IAAI,CAACyc,gBAAgB,CAAE,CAAA,EAAEggB,kBAAkB,CACjE,CAAC;QAED,IAAI,CAAC,IAAI,CAACzf,mBAAmB,CAAA,EAA2B,CAAC,EAAE;UACzD;QACF;MACF,CAAC,MAAM;QACL3b,QAAQ,CAACn1B,IAAI,CACX,IAAI,CAACozB,uBAAuB,CAC1Bt4B,mBAAmB,EACnB,IAAI,CAACg5B,cACP,CACF,CAAC;MACH;IACF;IAEA,MAAM08B,WAAW,GAAG,IAAI,CAACj0D,KAAK,CAACsB,aAAa;IAC5C,IAAI,CAACmkB,MAAM,CAAA,EAAU,CAAC;IAEtB,IAAI,CAACzlB,KAAK,CAACgX,sBAAsB,GAAG0uC,yBAAyB;IAC7D,IAAI,CAAC1lD,KAAK,CAACwX,0BAA0B,GAAG06C,6BAA6B;IAErE,IAAIgC,SAAS,GAAG,IAAI,CAAC5rC,WAAW,CAA4BhqB,QAAQ,CAAC;IACrE,IACE0+B,UAAU,IACV,IAAI,CAACN,gBAAgB,CAAC9D,QAAQ,CAAC,KAC9Bs7B,SAAS,GAAG,IAAI,CAACz3B,UAAU,CAACy3B,SAAS,CAAC,CAAC,EACxC;MACA,IAAI,CAAC3sC,yBAAyB,CAAChpB,mBAAmB,CAAC;MACnD,IAAI,CAAC6oB,eAAe,CAACxD,iBAAiB,EAAE;MACxC,IAAI,CAACwD,eAAe,CAAC5V,IAAI,EAAE;MAC3B,IAAI,CAACisB,oBAAoB,CAACy2B,SAAS,EAAEt7B,QAAQ,EAAE,KAAK,CAAC;MAErD,OAAOs7B,SAAS;IAClB;IACA,IAAI,CAAC9sC,eAAe,CAAC5V,IAAI,EAAE;IAE3B,IAAI,CAAConB,QAAQ,CAACx4B,MAAM,EAAE;MACpB,IAAI,CAACtT,UAAU,CAAC,IAAI,CAACkT,KAAK,CAACC,eAAe,CAAC;IAC7C;IACA,IAAI8zD,qBAAqB,EAAE,IAAI,CAACjnE,UAAU,CAACinE,qBAAqB,CAAC;IACjE,IAAID,cAAc,EAAE,IAAI,CAAChnE,UAAU,CAACgnE,cAAc,CAAC;IACnD,IAAI,CAAC7tC,qBAAqB,CAAC1nB,mBAAmB,EAAE,IAAI,CAAC;IAErD,IAAI,CAACu1C,oBAAoB,CAAClb,QAAQ,EAA4B,IAAI,CAAC;IACnE,IAAIA,QAAQ,CAACx4B,MAAM,GAAG,CAAC,EAAE;MACvBya,GAAG,GAAG,IAAI,CAACyN,WAAW,CAAuBurC,aAAa,CAAC;MAC3Dh5C,GAAG,CAACwwC,WAAW,GAAGzyB,QAA0B;MAE5C,IAAI,CAACl7B,UAAU,CAACmd,GAAG,EAAE,oBAAoB,CAAC;MAC1C,IAAI,CAACxZ,gBAAgB,CAACwZ,GAAG,EAAEo5C,WAAW,CAAC;IACzC,CAAC,MAAM;MACLp5C,GAAG,GAAG+d,QAAQ,CAAC,CAAC,CAAC;IACnB;IAEA,OAAO,IAAI,CAACu7B,eAAe,CACzB71D,QAAQ,EAERuc,GACF,CAAC;EACH;EAEAs5C,eAAeA,CAAC71D,QAAkB,EAAEvD,UAAwB,EAAgB;IAC1E,IAAI,EAAE,IAAI,CAACvB,WAAW,MAA6C,CAAC,EAAE;MACpE,IAAI,CAACkrB,QAAQ,CAAC3pB,UAAU,EAAE,eAAe,EAAE,IAAI,CAAC;MAChD,IAAI,CAAC2pB,QAAQ,CAAC3pB,UAAU,EAAE,YAAY,EAAEuD,QAAQ,CAACjZ,KAAK,CAAC;MAEvD,IAAI,CAACkwB,uBAAuB,CAC1Bxa,UAAU,EACVuD,QAAQ,CAACjZ,KAAK,EACd,IAAI,CAAC2a,KAAK,CAACsB,aAAa,CAACjc,KAC3B,CAAC;MAED,OAAO0V,UAAU;IACnB;IAEA,MAAMq5D,eAAe,GACnB,IAAI,CAAC9rC,WAAW,CAA4BhqB,QAAQ,CAAC;IACvD81D,eAAe,CAACr5D,UAAU,GAAGA,UAAU;IACvC,OAAO,IAAI,CAAC2C,UAAU,CAAC02D,eAAe,EAAE,yBAAyB,CAAC;EACpE;EAGA13B,gBAAgBA,CAAC/gC,MAAqB,EAAW;IAC/C,OAAO,CAAC,IAAI,CAACwpB,kBAAkB,EAAE;EACnC;EAEAsX,UAAUA,CACR70C,IAAuC,EACQ;IAC/C,IAAI,IAAI,CAACy0B,GAAG,CAAA,EAAS,CAAC,EAAE;MACtB,OAAOz0B,IAAI;IACb;EACF;EAEA2vC,cAAcA,CACZ3vC,IAAO,EAEP0W,QAAkB,EACiC;IACnD,OAAO1W,IAAI;EACb;EAEAgrE,mBAAmBA,CAAAA,EAAiD;IAClE,MAAMhrE,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAoC;IAC/D,IAAI,CAACuS,IAAI,CAAA,CAAE;IACX,IAAI,IAAI,CAAC6J,KAAK,CAAA,EAAO,CAAC,EAAE;MAEtB,MAAM85C,IAAI,GAAG,IAAI,CAAC5+B,gBAAgB,CAChC,IAAI,CAAC9zB,eAAe,CAAenZ,IAAI,CAAC,EACxC,KACF,CAAC;MACD,IAAI,CAACkoB,IAAI,CAAA,CAAE;MACX,MAAMukD,QAAQ,GAAG,IAAI,CAACX,iBAAiB,CACrC9rE,IAAI,EACJ6rE,IAAI,EACJ,QACF,CAAC;MAED,IACE,CAAC,IAAI,CAAChiD,KAAK,CAACN,kBAAkB,IAC9B,CAAC,IAAI,CAACM,KAAK,CAACV,OAAO,IACnB,EAAE,IAAI,CAACvX,WAAW,IAA4C,CAAC,EAC/D;QACA,IAAI,CAAC2F,KAAK,CAAC9H,MAAM,CAAClG,mBAAmB,EAAEkjE,QAAQ,CAAC;MAClD;MAEA,OAAOA,QAAQ;IACjB;IAEA,OAAO,IAAI,CAACC,QAAQ,CAAC1sE,IAA+B,CAAC;EACvD;EAQA0sE,QAAQA,CAAe1sE,IAA6B,EAAmB;IACrE,IAAI,CAAC21C,cAAc,CAAC31C,IAAI,CAAC;IAEzB,IAAI,IAAI,CAACy0B,GAAG,CAAA,EAAU,CAAC,EAAE;MACvB,MAAMxe,IAAI,GAAG,IAAI,CAAC02D,aAAa,GAAU,CAAC;MAC1C,IAAI,CAAC17B,gBAAgB,CAACh7B,IAAI,CAAC;MAE3BjW,IAAI,CAAC8X,SAAS,GAAG7B,IAAI;IACvB,CAAC,MAAM;MACLjW,IAAI,CAAC8X,SAAS,GAAG,EAAE;IACrB;IAEA,OAAO,IAAI,CAAChC,UAAU,CAAC9V,IAAI,EAAE,eAAe,CAAC;EAC/C;EAEA21C,cAAcA,CAAe31C,IAA6B,EAAQ;IAChE,MAAM4iE,QAAQ,GAAG,IAAI,CAAC7wC,KAAK,GAAW,CAAC;IACvC,MAAMpa,MAAM,GAAG,IAAI,CAACsyD,eAAe,EAAE;IACrCjqE,IAAI,CAAC2X,MAAM,GAAGA,MAAM;IACpB,IACEirD,QAAQ,KACPjrD,MAAM,CAAC1X,IAAI,KAAK,QAAQ,IAAI0X,MAAM,CAAC1X,IAAI,KAAK,kBAAkB,CAAC,EAChE;MACA,IAAI,CAACsX,KAAK,CAAC9H,MAAM,CAAC/L,0BAA0B,EAAEiU,MAAM,CAAC;IACvD;EACF;EAIAi1D,oBAAoBA,CAACC,QAAiB,EAAqB;IACzD,MAAM;MAAEjvE,KAAK;MAAE8Y,QAAQ;MAAE7Y,GAAG;MAAEmP;KAAO,GAAG,IAAI,CAACoL,KAAK;IAClD,MAAM00D,SAAS,GAAGlvE,KAAK,GAAG,CAAC;IAC3B,MAAMmvE,IAAI,GAAG,IAAI,CAACrsC,WAAW,CAC3B1iC,8BAA8B,CAAC0Y,QAAQ,EAAE,CAAC,CAC5C,CAAC;IACD,IAAI1J,KAAK,KAAK,IAAI,EAAE;MAClB,IAAI,CAAC6/D,QAAQ,EAAE;QACb,IAAI,CAACt1D,KAAK,CACR9H,MAAM,CAAClL,6BAA6B,EAEpCvG,8BAA8B,CAC5B,IAAI,CAACoa,KAAK,CAAC2W,6BAA6B,EACxC,CACF,CACF,CAAC;MACH;IACF;IAEA,MAAMi+C,MAAM,GAAG,IAAI,CAACj7C,KAAK,GAAgB,CAAC;IAC1C,MAAMk7C,SAAS,GAAGD,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;IAClC,MAAME,OAAO,GAAGrvE,GAAG,GAAGovE,SAAS;IAC/BF,IAAI,CAAC//D,KAAK,GAAG;MACXoG,GAAG,EAAE,IAAI,CAACga,KAAK,CAAC6C,KAAK,CAAC68C,SAAS,EAAEI,OAAO,CAAC,CAACv0C,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC;MACjEw0C,MAAM,EAAEngE,KAAK,KAAK,IAAI,GAAG,IAAI,GAAGA,KAAK,CAACijB,KAAK,CAAC,CAAC,EAAEg9C,SAAS;KACzD;IACDF,IAAI,CAACK,IAAI,GAAGJ,MAAM;IAClB,IAAI,CAAC9kD,IAAI,CAAA,CAAE;IACX,MAAMsgD,YAAY,GAAG,IAAI,CAAC1yD,UAAU,CAACi3D,IAAI,EAAE,iBAAiB,CAAC;IAC7D,IAAI,CAACtzD,gBAAgB,CACnB+uD,YAAY,EACZxqE,8BAA8B,CAAC,IAAI,CAACoa,KAAK,CAACsB,aAAa,EAAEuzD,SAAS,CACpE,CAAC;IACD,OAAOzE,YAAY;EACrB;EAGA1P,aAAaA,CAAe+T,QAAiB,EAAqB;IAChE,MAAM7sE,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAqB;IAChD,IAAI03D,MAAM,GAAG,IAAI,CAACT,oBAAoB,CAACC,QAAQ,CAAC;IAChD,MAAMS,MAAM,GAAG,CAACD,MAAM,CAAC;IACvB,MAAME,aAAa,GAAG,EAAE;IACxB,OAAO,CAACF,MAAM,CAACD,IAAI,EAAE;MACnBG,aAAa,CAAC1xD,IAAI,CAAC,IAAI,CAACk9C,yBAAyB,CAAE,CAAA,CAAC;MACpD,IAAI,CAACz/B,wBAAwB,CAAA,CAAE;MAC/Bg0C,MAAM,CAACzxD,IAAI,CAAEwxD,MAAM,GAAG,IAAI,CAACT,oBAAoB,CAACC,QAAQ,CAAE,CAAC;IAC7D;IAGA7sE,IAAI,CAACyjE,WAAW,GAAG8J,aAA4C;IAC/DvtE,IAAI,CAACstE,MAAM,GAAGA,MAAM;IACpB,OAAO,IAAI,CAACx3D,UAAU,CAAC9V,IAAI,EAAE,iBAAiB,CAAC;EACjD;EAGA+4D,yBAAyBA,CAAAA,EAAwC;IAC/D,OAAO,IAAI,CAACjzB,eAAe,EAAE;EAC/B;EAsBAymB,eAAeA,CAEblb,KAAgB,EAChB/6B,SAAkB,EAClB4wD,QAAyB,EACzBvwD,mBAA6C,EAC1C;IACH,IAAIuwD,QAAQ,EAAE;MACZ,IAAI,CAACvwC,YAAY,CAAC,gBAAgB,CAAC;IACrC;IACA,MAAM2zC,6BAA6B,GAAG,IAAI,CAAClyD,KAAK,CAACwX,0BAA0B;IAC3E,IAAI,CAACxX,KAAK,CAACwX,0BAA0B,GAAG,KAAK;IAC7C,MAAM49C,QAAa,GAAGvgE,MAAM,CAACqzB,MAAM,CAAC,IAAI,CAAC;IACzC,IAAIoM,KAAK,GAAG,IAAI;IAChB,MAAM1sC,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAExB;IAEH3V,IAAI,CAACstB,UAAU,GAAG,EAAE;IACpB,IAAI,CAACpF,IAAI,CAAA,CAAE;IAEX,OAAO,CAAC,IAAI,CAAC6J,KAAK,CAACsf,KAAK,CAAC,EAAE;MACzB,IAAI3E,KAAK,EAAE;QACTA,KAAK,GAAG,KAAK;MACf,CAAC,MAAM;QACL,IAAI,CAAC7O,MAAM,CAAA,EAAS,CAAC;QACrB,IAAI,IAAI,CAAC9L,KAAK,CAACsf,KAAK,CAAC,EAAE;UACrB,IAAI,CAACk5B,2BAA2B,CAACvqE,IAAI,CAAC;UACtC;QACF;MACF;MAEA,IAAIqW,IAAI;MACR,IAAIC,SAAS,EAAE;QACbD,IAAI,GAAG,IAAI,CAAC02C,oBAAoB,EAAE;MACpC,CAAC,MAAM;QACL12C,IAAI,GAAG,IAAI,CAACo3D,uBAAuB,CAAC92D,mBAAmB,CAAC;QACxD,IAAI,CAACswD,UAAU,CAAC5wD,IAAI,EAAE6wD,QAAQ,EAAEsG,QAAQ,EAAE72D,mBAAmB,CAAC;MAChE;MAEA,IACEuwD,QAAQ,IACR,CAAC,IAAI,CAACtzD,gBAAgB,CAACyC,IAAI,CAAC,IAC5BA,IAAI,CAACpW,IAAI,KAAK,eAAe,EAC7B;QACA,IAAI,CAACsX,KAAK,CAAC9H,MAAM,CAACnK,qBAAqB,EAAE+Q,IAAI,CAAC;MAChD;MAEmC;QAEjC,IAAIA,IAAI,CAACG,SAAS,EAAE;UAClB,IAAI,CAACsmB,QAAQ,CAACzmB,IAAI,EAAE,WAAW,EAAE,IAAI,CAAC;QACxC;MACF;MAGArW,IAAI,CAACstB,UAAU,CAACzR,IAAI,CAACxF,IAAI,CAAC;IAC5B;IAEA,IAAI,CAAC6R,IAAI,CAAA,CAAE;IAEX,IAAI,CAAC9P,KAAK,CAACwX,0BAA0B,GAAG06C,6BAA6B;IACrE,IAAIrqE,IAAI,GAAG,kBAAkB;IAC7B,IAAIqW,SAAS,EAAE;MACbrW,IAAI,GAAG,eAAe;IACvB,CAAA,MAAM,IAAIinE,QAAQ,EAAE;MACnBjnE,IAAI,GAAG,kBAAkB;IAC3B;IAEA,OAAO,IAAI,CAAC6V,UAAU,CAAC9V,IAAI,EAAEC,IAAI,CAAC;EACpC;EAEAsqE,2BAA2BA,CAACvqE,IAAoB,EAAQ;IACtD,IAAI,CAAC88B,QAAQ,CAAC98B,IAAI,EAAE,eAAe,EAAE,IAAI,CAACoY,KAAK,CAACC,eAAe,CAAC5a,KAAK,CAAC;IACtE,IAAI,CAACq/B,QAAQ,CAAC98B,IAAI,EAAE,kBAAkB,EAAE,IAAI,CAACoY,KAAK,CAACC,eAAe,EAAE,KAAK,CAAC;EAC5E;EAKAq1D,wBAAwBA,CACtBr3D,IAA8B,EACe;IAC7C,OACE,CAACA,IAAI,CAACR,QAAQ,IACdQ,IAAI,CAACxP,GAAG,CAAC5G,IAAI,KAAK,YAAY,KAC7B,IAAI,CAAC2+B,qBAAqB,CAAA,CAAE,IAC3B,IAAI,CAAC7M,KAAK,CAAA,CAAY,CAAC,IACvB,IAAI,CAACA,KAAK,CAAA,EAAQ,CAAC,CAAC;EAE1B;EAGA07C,uBAAuBA,CAErB92D,mBAA6C,EACX;IAClC,IAAIuB,UAAU,GAAG,EAAE;IACnB,IAAI,IAAI,CAAC6Z,KAAK,CAAA,EAAM,CAAC,EAAE;MACrB,IAAI,IAAI,CAAC9G,SAAS,CAAC,YAAY,CAAC,EAAE;QAChC,IAAI,CAAC1T,KAAK,CAAC9H,MAAM,CAACjF,4BAA4B,EAAE,IAAI,CAAC4N,KAAK,CAAC1B,QAAQ,CAAC;MACtE;MAIA,OAAO,IAAI,CAACqb,KAAK,CAAA,EAAM,CAAC,EAAE;QACxB7Z,UAAU,CAAC2D,IAAI,CAAC,IAAI,CAAC+wC,cAAc,CAAE,CAAA,CAAC;MACxC;IACF;IAEA,MAAMv2C,IAAI,GAAG,IAAI,CAACV,SAAS,EAAoB;IAC/C,IAAIjC,OAAO,GAAG,KAAK;IACnB,IAAI6C,UAAU,GAAG,KAAK;IACtB,IAAIG,QAAQ;IAEZ,IAAI,IAAI,CAACqb,KAAK,CAAA,EAAY,CAAC,EAAE;MAC3B,IAAI7Z,UAAU,CAACM,MAAM,EAAE,IAAI,CAACtT,UAAU,CAAA,CAAE;MACxC,OAAO,IAAI,CAACinD,WAAW,EAAE;IAC3B;IAEA,IAAIj0C,UAAU,CAACM,MAAM,EAAE;MACrBnC,IAAI,CAAC6B,UAAU,GAAGA,UAAU;MAC5BA,UAAU,GAAG,EAAE;IACjB;IAEA7B,IAAI,CAACvC,MAAM,GAAG,KAAK;IAEnB,IAAI6C,mBAAmB,EAAE;MACvBD,QAAQ,GAAG,IAAI,CAAC0B,KAAK,CAAC1B,QAAQ;IAChC;IAEA,IAAIpB,WAAW,GAAG,IAAI,CAACmf,GAAG,GAAQ,CAAC;IACnC,IAAI,CAAC2d,+BAA+B,CAAC/7B,IAAI,CAAC;IAC1C,MAAMyZ,WAAW,GAAG,IAAI,CAAC1X,KAAK,CAAC0X,WAAW;IAC1C,IAAI,CAACk9B,iBAAiB,CAAC32C,IAAI,EAAEM,mBAAmB,CAAC;IAEjD,IAAI,CAACrB,WAAW,IAAI,CAACwa,WAAW,IAAI,IAAI,CAAC49C,wBAAwB,CAACr3D,IAAI,CAAC,EAAE;MACvE,MAAM;QAAExP;MAAK,CAAA,GAAGwP,IAAI;MACpB,MAAMs3D,OAAO,GAAG9mE,GAAG,CAACV,IAAI;MAGxB,IAAIwnE,OAAO,KAAK,OAAO,IAAI,CAAC,IAAI,CAACnwC,qBAAqB,CAAA,CAAE,EAAE;QACxD9pB,OAAO,GAAG,IAAI;QACd,IAAI,CAAC+Z,iCAAiC,CAAC5mB,GAAG,CAAC;QAC3CyO,WAAW,GAAG,IAAI,CAACmf,GAAG,GAAQ,CAAC;QAC/B,IAAI,CAACu4B,iBAAiB,CAAC32C,IAAI,CAAC;MAC9B;MAGA,IAAIs3D,OAAO,KAAK,KAAK,IAAIA,OAAO,KAAK,KAAK,EAAE;QAC1Cp3D,UAAU,GAAG,IAAI;QACjB,IAAI,CAACkX,iCAAiC,CAAC5mB,GAAG,CAAC;QAC3CwP,IAAI,CAAChW,IAAI,GAAGstE,OAAO;QACnB,IAAI,IAAI,CAAC57C,KAAK,CAAA,EAAQ,CAAC,EAAE;UACvBzc,WAAW,GAAG,IAAI;UAClB,IAAI,CAACiC,KAAK,CAAC9H,MAAM,CAACrP,mBAAmB,EAAE,IAAI,CAACgY,KAAK,CAAC4X,WAAW,EAAE,EAAE;YAC/D3vB,IAAI,EAAEstE;UACR,CAAC,CAAC;UACF,IAAI,CAACzlD,IAAI,CAAA,CAAE;QACb;QACA,IAAI,CAAC8kC,iBAAiB,CAAC32C,IAAI,CAAC;MAC9B;IACF;IAEA,OAAO,IAAI,CAACg8B,iBAAiB,CAC3Bh8B,IAAI,EACJK,QAAQ,EACRpB,WAAW,EACX5B,OAAO,EACP,KAAK,EACL6C,UAAU,EACVI,mBACF,CAAC;EACH;EAEAgrD,iCAAiCA,CAC/B7tD,MAAsC,EAC9B;IACR,OAAOA,MAAM,CAACzT,IAAI,KAAK,KAAK,GAAG,CAAC,GAAG,CAAC;EACtC;EAGAwT,4BAA4BA,CAACC,MAAsC,EAAE;IACnE,OAAOA,MAAM,CAACC,MAAM;EACtB;EAIAo+B,uBAAuBA,CAACr+B,MAAsC,EAAQ;IAAA,IAAA85D,OAAA;IACpE,MAAM1hC,UAAU,GAAG,IAAI,CAACy1B,iCAAiC,CAAC7tD,MAAM,CAAC;IACjE,MAAMC,MAAM,GAAG,IAAI,CAACF,4BAA4B,CAACC,MAAM,CAAC;IAExD,IAAIC,MAAM,CAACyE,MAAM,KAAK0zB,UAAU,EAAE;MAChC,IAAI,CAAC30B,KAAK,CACRzD,MAAM,CAACzT,IAAI,KAAK,KAAK,GAAGoP,MAAM,CAAC3O,cAAc,GAAG2O,MAAM,CAAC1O,cAAc,EACrE+S,MACF,CAAC;IACH;IAEA,IACEA,MAAM,CAACzT,IAAI,KAAK,KAAK,IACrB,CAAA,CAAAutE,OAAA,GAAA75D,MAAM,CAACA,MAAM,CAACyE,MAAM,GAAG,CAAC,CAAC,KAAA,IAAA,GAAA,KAAA,CAAA,GAAzBo1D,OAAA,CAA2B3tE,IAAI,MAAK,aAAa,EACjD;MACA,IAAI,CAACsX,KAAK,CAAC9H,MAAM,CAACzO,sBAAsB,EAAE8S,MAAM,CAAC;IACnD;EACF;EAGAsC,iBAAiBA,CAEfC,IAA4B,EAC5Bf,WAAoB,EACpB5B,OAAgB,EAChB4C,SAAkB,EAClBC,UAAmB,EACgB;IACnC,IAAIA,UAAU,EAAE;MAEd,MAAMs3D,YAAY,GAAG,IAAI,CAACx4D,WAAW,CACnCgB,IAAI,EAGJf,WAAW,EACG,KAAK,EACC,KAAK,EACzB,KAAK,EACL,cACF,CAAC;MACD,IAAI,CAAC68B,uBAAuB,CAAC07B,YAAY,CAAC;MAC1C,OAAOA,YAAY;IACrB;IAEA,IAAIn6D,OAAO,IAAI4B,WAAW,IAAI,IAAI,CAACyc,KAAK,CAAU,EAAA,CAAC,EAAE;MACnD,IAAIzb,SAAS,EAAE,IAAI,CAACpR,UAAU,EAAE;MAChCmR,IAAI,CAAChW,IAAI,GAAG,QAAQ;MACpBgW,IAAI,CAACvC,MAAM,GAAG,IAAI;MAClB,OAAO,IAAI,CAACuB,WAAW,CACrBgB,IAAI,EACJf,WAAW,EACX5B,OAAO,EACa,KAAK,EACzB,KAAK,EACL,cACF,CAAC;IACH;EACF;EAIA+C,mBAAmBA,CAEjBJ,IAA8B,EAC9BK,QAAqC,EACrCJ,SAAkB,EAClBK,mBAA6C,EACR;IACrCN,IAAI,CAACG,SAAS,GAAG,KAAK;IAEtB,IAAI,IAAI,CAACie,GAAG,CAAA,EAAS,CAAC,EAAE;MACtBpe,IAAI,CAACrJ,KAAK,GAAGsJ,SAAS,GAClB,IAAI,CAACi8B,iBAAiB,CAAC,IAAI,CAACn6B,KAAK,CAAC1B,QAAQ,CAAC,GAC3C,IAAI,CAACu4B,uBAAuB,CAACt4B,mBAAmB,CAAC;MAErD,OAAO,IAAI,CAACb,UAAU,CAACO,IAAI,EAAE,gBAAgB,CAAC;IAChD;IAEA,IAAI,CAACA,IAAI,CAACR,QAAQ,IAAIQ,IAAI,CAACxP,GAAG,CAAC5G,IAAI,KAAK,YAAY,EAAE;MAKpD,IAAI,CAACyzC,iBAAiB,CAACr9B,IAAI,CAACxP,GAAG,CAACV,IAAI,EAAEkQ,IAAI,CAACxP,GAAG,CAACoH,GAAG,CAACrQ,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC;MAEtE,IAAI0Y,SAAS,EAAE;QACbD,IAAI,CAACrJ,KAAK,GAAG,IAAI,CAACulC,iBAAiB,CACjC77B,QAAQ,EACR0pB,eAAe,CAAC/pB,IAAI,CAACxP,GAAG,CAC1B,CAAC;MACF,CAAA,MAAM,IAAI,IAAI,CAACkrB,KAAK,CAAA,EAAM,CAAC,EAAE;QAC5B,MAAMwM,kBAAkB,GAAG,IAAI,CAACnmB,KAAK,CAAC1B,QAAQ;QAC9C,IAAIC,mBAAmB,IAAI,IAAI,EAAE;UAC/B,IAAIA,mBAAmB,CAAC4nB,kBAAkB,KAAK,IAAI,EAAE;YACnD5nB,mBAAmB,CAAC4nB,kBAAkB,GAAGA,kBAAkB;UAC7D;QACF,CAAC,MAAM;UACL,IAAI,CAAChnB,KAAK,CAAC9H,MAAM,CAACvL,2BAA2B,EAAEq6B,kBAAkB,CAAC;QACpE;QACAloB,IAAI,CAACrJ,KAAK,GAAG,IAAI,CAACulC,iBAAiB,CACjC77B,QAAQ,EACR0pB,eAAe,CAAC/pB,IAAI,CAACxP,GAAG,CAC1B,CAAC;MACH,CAAC,MAAM;QACLwP,IAAI,CAACrJ,KAAK,GAAGozB,eAAe,CAAC/pB,IAAI,CAACxP,GAAG,CAAC;MACxC;MACAwP,IAAI,CAACG,SAAS,GAAG,IAAI;MAErB,OAAO,IAAI,CAACV,UAAU,CAACO,IAAI,EAAE,gBAAgB,CAAC;IAChD;EACF;EAEAg8B,iBAAiBA,CAEfh8B,IAAe,EACfK,QAAqC,EACrCpB,WAAoB,EACpB5B,OAAgB,EAChB4C,SAAkB,EAClBC,UAAmB,EACnBI,mBAA6C,EAC1C;IACH,MAAM3W,IAAI,GAAI,IAAI,CAACoW,iBAAiB,CAClCC,IAAI,EACJf,WAAW,EACX5B,OAAO,EACP4C,SAAS,EACTC,UACF,CAAC,IACC,IAAI,CAACE,mBAAmB,CACtBJ,IAAI,EACJK,QAAQ,EACRJ,SAAS,EACTK,mBACF,CAAO;IAET,IAAI,CAAC3W,IAAI,EAAE,IAAI,CAACkF,UAAU,EAAE;IAE5B,OAAOlF,IAAI;EACb;EAKAgtD,iBAAiBA,CAEf32C,IAE4B,EAC5BM,mBAA6C,EACvC;IACN,IAAI,IAAI,CAAC8d,GAAG,CAAA,CAAY,CAAC,EAAE;MACxBpe,IAAI,CAAmCR,QAAQ,GAAG,IAAI;MACvDQ,IAAI,CAACxP,GAAG,GAAG,IAAI,CAACooC,uBAAuB,EAAE;MACzC,IAAI,CAACpR,MAAM,CAAA,CAAY,CAAC;IAC1B,CAAC,MAAM;MAEL,MAAM;QAAE59B,IAAI;QAAE+M;OAAO,GAAG,IAAI,CAACoL,KAAK;MAClC,IAAIvR,GAAG;MAEP,IAAIqe,0BAA0B,CAACjlB,IAAI,CAAC,EAAE;QACpC4G,GAAG,GAAG,IAAI,CAACu/B,eAAe,CAAC,IAAI,CAAC;MAClC,CAAC,MAAM;QACL,QAAQnmC,IAAI;UACV,KAAA,GAAA;YACE4G,GAAG,GAAG,IAAI,CAACiM,mBAAmB,CAAC9F,KAAK,CAAC;YACrC;UACF,KAAA,GAAA;YACEnG,GAAG,GAAG,IAAI,CAACgM,kBAAkB,CAAC7F,KAAK,CAAC;YACpC;UACF,KAAA,GAAA;YACEnG,GAAG,GAAG,IAAI,CAACuL,kBAAkB,CAACpF,KAAK,CAAC;YACpC;UACF,KAAA,GAAA;YAAqB;cAEnB,MAAMyxB,aAAa,GAAG,IAAI,CAACrmB,KAAK,CAAC1B,QAAQ;cACzC,IAAIC,mBAAmB,IAAI,IAAI,EAAE;gBAC/B,IAAIA,mBAAmB,CAAC8nB,aAAa,KAAK,IAAI,EAAE;kBAC9C9nB,mBAAmB,CAAC8nB,aAAa,GAAGA,aAAa;gBACnD;cACF,CAAC,MAAM;gBACL,IAAI,CAAClnB,KAAK,CAAC9H,MAAM,CAAChG,sBAAsB,EAAEg1B,aAAa,CAAC;cAC1D;cACA53B,GAAG,GAAG,IAAI,CAAC+N,gBAAgB,EAAE;cAC7B;YACF;UACA;YACE,IAAqC3U,IAAI,QAAe,EAAE;cACxD4G,GAAG,GAAG,IAAI,CAAC6L,mBAAmB,CAAC1F,KAAK,CAAC;cACrC;YACF;YAEA,IAAI,CAAC9H,UAAU,CAAA,CAAE;QACrB;MACF;MACCmR,IAAI,CAASxP,GAAG,GAAGA,GAAG;MACvB,IAAI5G,IAAI,QAAmB,EAAE;QAE3BoW,IAAI,CAACR,QAAQ,GAAG,KAAK;MACvB;IACF;EACF;EAIApC,YAAYA,CAACzT,IAAoC,EAAE0T,OAAgB,EAAQ;IACzE1T,IAAI,CAACgV,EAAE,GAAG,IAAI;IACdhV,IAAI,CAAC8tE,SAAS,GAAG,KAAK;IACtB9tE,IAAI,CAAC40C,KAAK,GAAGlhC,OAAO;EACtB;EAIA2B,WAAWA,CAETrV,IAAe,EACfsV,WAAoB,EACpB5B,OAAgB,EAChB6B,aAAsB,EACtBC,gBAAyB,EACzBvV,IAAe,EACfwV,YAAqB,GAAG,KAAK,EAC1B;IACH,IAAI,CAAChC,YAAY,CAACzT,IAAI,EAAE0T,OAAO,CAAC;IAChC1T,IAAI,CAAC8tE,SAAS,GAAGx4D,WAAW;IAC5B,IAAI,CAACuU,KAAK,CAACF,KAAK,CACdL,MACiB,IACd7T,YAAY,QAAqB,CAAC,CAAC,IACnCD,gBAAgB,QAA4B,CAAC,CAClD,CAAC;IACD,IAAI,CAAC8pB,SAAS,CAAC3V,KAAK,CAACiT,aAAa,CAAClpB,OAAO,EAAE1T,IAAI,CAAC8tE,SAAS,CAAC,CAAC;IAC5D,IAAI,CAACl6B,mBAAmB,CAAC5zC,IAAI,EAAEuV,aAAa,CAAC;IAC7C,MAAMizD,YAAY,GAAG,IAAI,CAACz6B,0BAA0B,CAAC/tC,IAAI,EAAEC,IAAI,EAAE,IAAI,CAAC;IACtE,IAAI,CAACq/B,SAAS,CAAC1V,IAAI,EAAE;IACrB,IAAI,CAACC,KAAK,CAACD,IAAI,EAAE;IAEjB,OAAO4+C,YAAY;EACrB;EAKAp3B,cAAcA,CAEZC,KAAgB,EAChBC,YAAqB,EACrBC,OAAgB,EAChB56B,mBAA6C,EACN;IACvC,IAAI46B,OAAO,EAAE;MACX,IAAI,CAAC5a,YAAY,CAAC,gBAAgB,CAAC;IACrC;IACA,MAAM2zC,6BAA6B,GAAG,IAAI,CAAClyD,KAAK,CAACwX,0BAA0B;IAC3E,IAAI,CAACxX,KAAK,CAACwX,0BAA0B,GAAG,KAAK;IAC7C,MAAM5vB,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAyC;IACpE,IAAI,CAACuS,IAAI,CAAA,CAAE;IACXloB,IAAI,CAACisB,QAAQ,GAAG,IAAI,CAAC0gD,aAAa,CAChCt7B,KAAK,EACY,CAACE,OAAO,EACzB56B,mBAAmB,EAEnB3W,IACF,CAAC;IACD,IAAI,CAACoY,KAAK,CAACwX,0BAA0B,GAAG06C,6BAA6B;IACrE,OAAO,IAAI,CAACx0D,UAAU,CACpB9V,IAAI,EACJuxC,OAAO,GAAG,iBAAiB,GAAG,iBAChC,CAAC;EACH;EAKAsE,oBAAoBA,CAElB71C,IAAuC,EACvC+T,MAEuC,EACvCL,OAAgB,EAChB87B,gBAAkC,EACP;IAC3B,IAAI,CAAC3lB,KAAK,CAACF,KAAK,CAACL,KAAoC,CAAC;IACtD,IAAIvX,KAAK,GAAG6qB,aAAa,CAAClpB,OAAO,EAAE,KAAK,CAAC;IAIzC,IAAI,CAAC,IAAI,CAACqe,KAAK,CAAU,CAAA,CAAC,IAAI,IAAI,CAACuN,SAAS,CAAC3C,KAAK,EAAE;MAClD5qB,KAAK,KAAsB;IAC7B;IACA,IAAI,CAACutB,SAAS,CAAC3V,KAAK,CAAC5X,KAAK,CAAC;IAC3B,IAAI,CAAC0B,YAAY,CAACzT,IAAI,EAAE0T,OAAO,CAAC;IAChC,MAAMoqD,yBAAyB,GAAG,IAAI,CAAC1lD,KAAK,CAACgX,sBAAsB;IAEnE,IAAIrb,MAAM,EAAE;MACV,IAAI,CAACqE,KAAK,CAACgX,sBAAsB,GAAG,IAAI;MACxC,IAAI,CAAC2lB,0BAA0B,CAAC/0C,IAAI,EAAE+T,MAAM,EAAEy7B,gBAAgB,CAAC;IACjE;IACA,IAAI,CAACp3B,KAAK,CAACgX,sBAAsB,GAAG,KAAK;IACzC,IAAI,CAACla,iBAAiB,CAAClV,IAAI,EAAE,IAAI,CAAC;IAElC,IAAI,CAACs/B,SAAS,CAAC1V,IAAI,EAAE;IACrB,IAAI,CAACC,KAAK,CAACD,IAAI,EAAE;IACjB,IAAI,CAACxR,KAAK,CAACgX,sBAAsB,GAAG0uC,yBAAyB;IAE7D,OAAO,IAAI,CAAChoD,UAAU,CAAC9V,IAAI,EAAE,yBAAyB,CAAC;EACzD;EAEA+0C,0BAA0BA,CACxB/0C,IAAuC,EACvC+T,MAEuC,EACvCy7B,gBAAkC,EAC5B;IACN,IAAI,CAACD,gBAAgB,CAACx7B,MAAM,EAAEy7B,gBAAgB,EAAE,KAAK,CAAC;IACtDxvC,IAAI,CAAC+T,MAAM,GAAGA,MAA+C;EAC/D;EAEAg6B,0BAA0BA,CAMxB/tC,IAAe,EAAEC,IAAe,EAAEmV,QAAiB,GAAG,KAAK,EAAK;IAEhE,IAAI,CAACF,iBAAiB,CAAClV,IAAI,EAAE,KAAK,EAAEoV,QAAQ,CAAC;IAC7C,OAAO,IAAI,CAACU,UAAU,CAAC9V,IAAI,EAAEC,IAAI,CAAC;EACpC;EAGAiV,iBAAiBA,CAEflV,IAAwB,EACxBmV,eAAgC,EAChCC,QAAiB,GAAG,KAAK,EACnB;IACN,MAAM24D,YAAY,GAAG54D,eAAe,IAAI,CAAC,IAAI,CAAC4c,KAAK,CAAA,CAAU,CAAC;IAC9D,IAAI,CAACyN,eAAe,CAAC7V,KAAK,CAACyS,kBAAkB,CAAE,CAAA,CAAC;IAEhD,IAAI2xC,YAAY,EAAE;MAEf/tE,IAAI,CAAuC0U,IAAI,GAC9C,IAAI,CAACs6B,gBAAgB,EAAE;MACzB,IAAI,CAACS,WAAW,CAACzvC,IAAI,EAAE,KAAK,EAAEmV,eAAe,EAAE,KAAK,CAAC;IACvD,CAAC,MAAM;MACL,MAAM8sD,SAAS,GAAG,IAAI,CAAC7pD,KAAK,CAACgP,MAAM;MAGnC,MAAM2X,SAAS,GAAG,IAAI,CAAC3mB,KAAK,CAACyW,MAAM;MACnC,IAAI,CAACzW,KAAK,CAACyW,MAAM,GAAG,EAAE;MAItB,IAAI,CAACyQ,SAAS,CAAC3V,KAAK,CAClB,IAAI,CAAC2V,SAAS,CAAC/C,YAAY,CAAE,CAAA,IAC/B,CAAC;MACDv8B,IAAI,CAAC0U,IAAI,GAAG,IAAI,CAACgwD,UAAU,CACzB,IAAI,EACJ,KAAK,EAEJsJ,sBAA+B,IAAK;QACnC,MAAMC,SAAS,GAAG,CAAC,IAAI,CAACC,iBAAiB,CAACluE,IAAI,CAAC+T,MAAM,CAAC;QAEtD,IAAIi6D,sBAAsB,IAAIC,SAAS,EAAE;UAEvC,IAAI,CAAC12D,KAAK,CACR9H,MAAM,CAACrM,4BAA4B,EAEnC,CAACpD,IAAI,CAACK,IAAI,KAAK,QAAQ,IAAIL,IAAI,CAACK,IAAI,KAAK,aAAa,KAEpD,CAAC,CAACL,IAAI,CAAC6G,GAAG,GAER7G,IAAI,CAAC6G,GAAG,CAACoH,GAAG,CAACpQ,GAAG,GAChBmC,IACN,CAAC;QACH;QAEA,MAAMk1C,iBAAiB,GAAG,CAAC+sB,SAAS,IAAI,IAAI,CAAC7pD,KAAK,CAACgP,MAAM;QAIzD,IAAI,CAACqoB,WAAW,CACdzvC,IAAI,EACJ,CAAC,IAAI,CAACoY,KAAK,CAACgP,MAAM,IAAI,CAACjS,eAAe,IAAI,CAACC,QAAQ,IAAI,CAAC64D,SAAS,EACjE94D,eAAe,EACf+/B,iBACF,CAAC;QAGD,IAAI,IAAI,CAAC98B,KAAK,CAACgP,MAAM,IAAIpnB,IAAI,CAACgV,EAAE,EAAE;UAChC,IAAI,CAACs4C,eAAe,CAClBttD,IAAI,CAACgV,EAAE,MAEPkgC,iBACF,CAAC;QACH;MACF,CACF,CAAC;MACD,IAAI,CAAC5V,SAAS,CAAC1V,IAAI,EAAE;MACrB,IAAI,CAACxR,KAAK,CAACyW,MAAM,GAAGkQ,SAAS;IAC/B;IACA,IAAI,CAACS,eAAe,CAAC5V,IAAI,EAAE;EAC7B;EAEAw0C,iBAAiBA,CAACp+D,IAAuC,EAAW;IAClE,OAAOA,IAAI,CAACC,IAAI,KAAK,YAAY;EACnC;EAEAiuE,iBAAiBA,CACfn6D,MAAwD,EAC/C;IACT,KAAK,IAAI+S,CAAC,GAAG,CAAC,EAAEsL,GAAG,GAAGre,MAAM,CAACyE,MAAM,EAAEsO,CAAC,GAAGsL,GAAG,EAAEtL,CAAC,EAAE,EAAE;MACjD,IAAI,CAAC,IAAI,CAACs3C,iBAAiB,CAACrqD,MAAM,CAAC+S,CAAC,CAAC,CAAC,EAAE,OAAO,KAAK;IACtD;IACA,OAAO,IAAI;EACb;EAEA2oB,WAAWA,CACTzvC,IAAwB,EACxBg1C,eAAwB,EACxBC,eAAgC,EAChCC,iBAA0B,GAAG,IAAI,EAC3B;IACN,MAAMiY,YAAY,GAAG,CAACnY,eAAe,IAAI,IAAIjpC,GAAG,CAAA,CAAU;IAO1D,MAAMoiE,gBAAgB,GAAG;MAAEluE,IAAI,EAAE;KAA6B;IAC9D,KAAK,MAAMutC,KAAK,IAAIxtC,IAAI,CAAC+T,MAAM,EAAE;MAC/B,IAAI,CAACm5C,SAAS,CACZ1f,KAAK,EACL2gC,gBAAgB,KAEhBhhB,YAAY,EACZjY,iBACF,CAAC;IACH;EACF;EAQAy3B,aAAaA,CAEXt7B,KAAgB,EAChBob,UAAoB,EACpB91C,mBAA6C,EAC7C0zD,YAA4B,EACH;IACzB,MAAM3d,IAA6B,GAAG,EAAE;IACxC,IAAIhgB,KAAK,GAAG,IAAI;IAEhB,OAAO,CAAC,IAAI,CAACjY,GAAG,CAAC4c,KAAK,CAAC,EAAE;MACvB,IAAI3E,KAAK,EAAE;QACTA,KAAK,GAAG,KAAK;MACf,CAAC,MAAM;QACL,IAAI,CAAC7O,MAAM,CAAA,EAAS,CAAC;QACrB,IAAI,IAAI,CAAC9L,KAAK,CAACsf,KAAK,CAAC,EAAE;UACrB,IAAIg5B,YAAY,EAAE;YAChB,IAAI,CAACE,2BAA2B,CAACF,YAAY,CAAC;UAChD;UACA,IAAI,CAACniD,IAAI,CAAA,CAAE;UACX;QACF;MACF;MAEAwkC,IAAI,CAAC7wC,IAAI,CAAC,IAAI,CAAC2uD,iBAAiB,CAAC/d,UAAU,EAAE91C,mBAAmB,CAAC,CAAC;IACpE;IACA,OAAO+1C,IAAI;EACb;EAcA8d,iBAAiBA,CAEf/d,UAA2B,EAC3B91C,mBAA6C,EAC7CyzD,gBAAiC,EAC8B;IAC/D,IAAIpe,GAAG;IACP,IAAI,IAAI,CAACj6B,KAAK,CAAA,EAAS,CAAC,EAAE;MACxB,IAAI,CAAC06B,UAAU,EAAE;QACf,IAAI,CAACl1C,KAAK,CAAC9H,MAAM,CAAC7F,eAAe,EAAE,IAAI,CAACwO,KAAK,CAAC4X,WAAW,EAAE,EAAE;UAC3D9qB,UAAU,EAAE;QACd,CAAC,CAAC;MACJ;MACA8mD,GAAG,GAAG,IAAI;IACX,CAAA,MAAM,IAAI,IAAI,CAACj6B,KAAK,CAAA,EAAY,CAAC,EAAE;MAClC,MAAMq6C,kBAAkB,GAAG,IAAI,CAACh0D,KAAK,CAAC1B,QAAQ;MAE9Cs1C,GAAG,GAAG,IAAI,CAACrc,cAAc,CACvB,IAAI,CAACwc,WAAW,CAACx1C,mBAAmB,CAAC,EACrCy1D,kBACF,CAAC;IACF,CAAA,MAAM,IAAI,IAAI,CAACr6C,KAAK,CAAA,EAAY,CAAC,EAAE;MAClC,IAAI,CAAC4E,YAAY,CAAC,oBAAoB,CAAC;MACvC,IAAI,CAACyzC,gBAAgB,EAAE;QACrB,IAAI,CAAC7yD,KAAK,CAAC9H,MAAM,CAAC1G,6BAA6B,EAAE,IAAI,CAACqP,KAAK,CAAC1B,QAAQ,CAAC;MACvE;MACA,MAAM1W,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAyB;MACpD,IAAI,CAACuS,IAAI,CAAA,CAAE;MACX8jC,GAAG,GAAG,IAAI,CAACl2C,UAAU,CAAC9V,IAAI,EAAE,qBAAqB,CAAC;IACpD,CAAC,MAAM;MACLgsD,GAAG,GAAG,IAAI,CAAC/c,uBAAuB,CAChCt4B,mBAAmB,EACnB,IAAI,CAACg5B,cACP,CAAC;IACH;IACA,OAAOqc,GAAG;EACZ;EAQA5lB,eAAeA,CAAC+C,OAAiB,EAAgB;IAC/C,MAAMnpC,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAgB;IAC3C,MAAMxP,IAAI,GAAG,IAAI,CAACy/D,mBAAmB,CAACz8B,OAAO,CAAC;IAE9C,OAAO,IAAI,CAAC8D,gBAAgB,CAACjtC,IAAI,EAAEmG,IAAI,CAAC;EAC1C;EAEA8mC,gBAAgBA,CACdjtC,IAAgC,EAChCmG,IAAY,EACE;IACdnG,IAAI,CAACmG,IAAI,GAAGA,IAAI;IAChBnG,IAAI,CAACiO,GAAG,CAAClQ,cAAc,GAAGoI,IAAI;IAE9B,OAAO,IAAI,CAAC2P,UAAU,CAAC9V,IAAI,EAAE,YAAY,CAAC;EAC5C;EAEA4lE,mBAAmBA,CAACz8B,OAAiB,EAAU;IAC7C,IAAIhjC,IAAY;IAEhB,MAAM;MAAEuQ,QAAQ;MAAEzW;KAAM,GAAG,IAAI,CAACmY,KAAK;IAErC,IAAI8M,0BAA0B,CAACjlB,IAAI,CAAC,EAAE;MACpCkG,IAAI,GAAG,IAAI,CAACiS,KAAK,CAACpL,KAAK;IACzB,CAAC,MAAM;MACL,IAAI,CAAC9H,UAAU,CAAA,CAAE;IACnB;IAEA,MAAMugB,cAAc,GAAGR,iCAAiC,CAAChlB,IAAI,CAAC;IAE9D,IAAIkpC,OAAO,EAAE;MAGX,IAAI1jB,cAAc,EAAE;QAClB,IAAI,CAAC8Q,YAAY,CAAA,GAAQ,CAAC;MAC5B;IACF,CAAC,MAAM;MACL,IAAI,CAACmd,iBAAiB,CAACvtC,IAAI,EAAEuQ,QAAQ,EAAE+O,cAAc,EAAE,KAAK,CAAC;IAC/D;IAEA,IAAI,CAACyC,IAAI,CAAA,CAAE;IAEX,OAAO/hB,IAAI;EACb;EAEAutC,iBAAiBA,CACfjsB,IAAY,EACZ/Q,QAAkB,EAClB6oD,aAAsB,EACtBvoD,SAAkB,EACZ;IAEN,IAAIyQ,IAAI,CAACjP,MAAM,GAAG,EAAE,EAAE;MACpB;IACF;IAGA,IAAI,CAAC6P,iBAAiB,CAACZ,IAAI,CAAC,EAAE;MAC5B;IACF;IAEA,IAAI83C,aAAa,IAAIx3C,SAAS,CAACN,IAAI,CAAC,EAAE;MACpC,IAAI,CAAClQ,KAAK,CAAC9H,MAAM,CAACtG,iBAAiB,EAAEuN,QAAQ,EAAE;QAC7CtN,OAAO,EAAEqe;MACX,CAAC,CAAC;MACF;IACF;IAEA,MAAM2mD,YAAY,GAAG,CAAC,IAAI,CAACh2D,KAAK,CAACgP,MAAM,GACnCI,cAAc,GACdxQ,SAAS,GACP8Q,wBAAwB,GACxBH,oBAAoB;IAE1B,IAAIymD,YAAY,CAAC3mD,IAAI,EAAE,IAAI,CAACC,QAAQ,CAAC,EAAE;MACrC,IAAI,CAACnQ,KAAK,CAAC9H,MAAM,CAAC/F,sBAAsB,EAAEgN,QAAQ,EAAE;QAClDjS,YAAY,EAAEgjB;MAChB,CAAC,CAAC;MACF;IACF,CAAC,MAAM,IAAIA,IAAI,KAAK,OAAO,EAAE;MAC3B,IAAI,IAAI,CAAC6X,SAAS,CAAC7C,QAAQ,EAAE;QAC3B,IAAI,CAACllB,KAAK,CAAC9H,MAAM,CAACxE,sBAAsB,EAAEyL,QAAQ,CAAC;QACnD;MACF;IACF,CAAC,MAAM,IAAI+Q,IAAI,KAAK,OAAO,EAAE;MAC3B,IAAI,IAAI,CAAC6X,SAAS,CAAC9C,QAAQ,EAAE;QAC3B,IAAI,CAACjlB,KAAK,CAAC9H,MAAM,CAACjP,sBAAsB,EAAEkW,QAAQ,CAAC;QACnD;MACF;MAEA,IAAI,IAAI,CAACmT,KAAK,CAACR,aAAa,EAAE;QAC5B,IAAI,CAAC9R,KAAK,CAAC9H,MAAM,CAAChP,mCAAmC,EAAEiW,QAAQ,CAAC;QAChE;MACF;MAEA,IAAI,CAAC8oB,eAAe,CAACzD,+BAA+B,CAACrlB,QAAQ,CAAC;IAChE,CAAC,MAAM,IAAI+Q,IAAI,KAAK,WAAW,EAAE;MAC/B,IAAI,IAAI,CAACoC,KAAK,CAACT,+BAA+B,EAAE;QAC9C,IAAI,CAAC7R,KAAK,CAAC9H,MAAM,CAACnP,gBAAgB,EAAEoW,QAAQ,CAAC;QAC7C;MACF;IACF;EACF;EAIA2yD,oBAAoBA,CAAAA,EAAY;IAC9B,MAAMgF,cAAc,GAClB,IAAI,CAAC/uC,SAAS,CAAC9C,QAAQ,IACtB,IAAI,CAAC5qB,WAAW,IAAwC,IACvD,CAAC,IAAI,CAACiY,KAAK,CAACd,UAAW;IAE3B,IAAIslD,cAAc,IAAI,CAAC,IAAI,CAACxkD,KAAK,CAACd,UAAU,EAAE;MAC5C,IAAI,CAAC3Q,KAAK,CAAC2X,gBAAgB,GAAG,IAAI;IACpC;IAEA,OAAOs+C,cAAc;EACvB;EAIA/E,UAAUA,CAAe5yD,QAAkB,EAAqB;IAC9D,MAAM1W,IAAI,GAAG,IAAI,CAAC0gC,WAAW,CAAoBhqB,QAAQ,CAAC;IAE1D,IAAI,CAAC8oB,eAAe,CAAC5D,+BAA+B,CAClDnsB,MAAM,CAAC/O,8BAA8B,EAErCV,IACF,CAAC;IAED,IAAI,IAAI,CAACy0B,GAAG,CAAA,EAAQ,CAAC,EAAE;MACrB,IAAI,CAACld,KAAK,CAAC9H,MAAM,CAAClI,iBAAiB,EAAEvH,IAAI,CAAC;IAC5C;IAEA,IACE,CAAC,IAAI,CAAC6pB,KAAK,CAACd,UAAU,IACtB,EAAE,IAAI,CAACnX,WAAW,IAAwC,CAAC,EAC3D;MACA,IAAI,IAAI,CAAC83D,gBAAgB,EAAE,EAAE;QAC3B,IAAI,CAAC9+C,2BAA2B,GAAG,IAAI;MACzC,CAAC,MAAM;QACL,IAAI,CAACD,iBAAiB,GAAG,IAAI;MAC/B;IACF;IAEA,IAAI,CAAC,IAAI,CAACvS,KAAK,CAACuX,SAAS,EAAE;MACzB3vB,IAAI,CAAC8O,QAAQ,GAAG,IAAI,CAACoqD,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC;IAClD;IAEA,OAAO,IAAI,CAACpjD,UAAU,CAAC9V,IAAI,EAAE,iBAAiB,CAAC;EACjD;EAEA0pE,gBAAgBA,CAAAA,EAAY;IAC1B,IAAI,IAAI,CAAClsC,qBAAqB,EAAE,EAAE,OAAO,IAAI;IAC7C,MAAM;MAAEv9B;KAAM,GAAG,IAAI,CAACmY,KAAK;IAC3B,OAGEnY,IAAI,KAAe,EAAA,IACnBA,IAAI,KAAA,EAAc,IAClBA,IAAI,KAAA,CAAgB,IACpBimB,eAAe,CAACjmB,IAAI,CAAC,IACpBA,IAAI,QAAW,IAAI,CAAC,IAAI,CAACmY,KAAK,CAAC0X,WAAY,IAG5C7vB,IAAI,QAAc,IAClBA,IAAI,KAAa,EAAA,IAGhB,IAAI,CAACgrB,SAAS,CAAC,aAAa,CAAC,IAAIhrB,IAAI,KAAA,EAAA;EAE1C;EAIA4nE,UAAUA,CAAAA,EAAkC;IAC1C,MAAM7nE,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAqB;IAEhD,IAAI,CAAC6pB,eAAe,CAAC5D,+BAA+B,CAClDnsB,MAAM,CAACvE,gBAAgB,EAEvBlL,IACF,CAAC;IAED,IAAI,CAACkoB,IAAI,CAAA,CAAE;IACX,IAAIomD,UAAU,GAAG,KAAK;IACtB,IAAIx/D,QAA6B,GAAG,IAAI;IACxC,IAAI,CAAC,IAAI,CAAC0uB,qBAAqB,EAAE,EAAE;MACjC8wC,UAAU,GAAG,IAAI,CAAC75C,GAAG,GAAQ,CAAC;MAC9B,QAAQ,IAAI,CAACrc,KAAK,CAACnY,IAAI;QACrB,KAAA,EAAA;QACA,KAAA,GAAA;QACA,KAAA,CAAA;QACA,KAAA,EAAA;QACA,KAAA,CAAA;QACA,KAAA,CAAA;QACA,KAAA,EAAA;QACA,KAAA,EAAA;UAIE,IAAI,CAACquE,UAAU,EAAE;QAEnB;UACEx/D,QAAQ,GAAG,IAAI,CAACkgC,gBAAgB,EAAE;MACtC;IACF;IACAhvC,IAAI,CAACuuE,QAAQ,GAAGD,UAAU;IAC1BtuE,IAAI,CAAC8O,QAAQ,GAAGA,QAAQ;IACxB,OAAO,IAAI,CAACgH,UAAU,CAAC9V,IAAI,EAAE,iBAAiB,CAAC;EACjD;EAGA4qE,eAAeA,CAEb5qE,IAAgC,EACZ;IACpB,IAAI,CAACkoB,IAAI,CAAA,CAAE;IACXloB,IAAI,CAAC6X,MAAM,GAAG,IAAI,CAACo3B,uBAAuB,EAAE;IAC5CjvC,IAAI,CAACkR,OAAO,GAAG,IAAI;IACnB,IAAI,IAAI,CAACujB,GAAG,CAAA,EAAS,CAAC,EAAE;MACtB,IAAI,CAAC,IAAI,CAAC1C,KAAK,CAAA,EAAU,CAAC,EAAE;QAC1B/xB,IAAI,CAACkR,OAAO,GAAG,IAAI,CAAC+9B,uBAAuB,EAAE;QAE7C,IAAI,IAAI,CAACxa,GAAG,CAAA,EAAS,CAAC,IAAI,CAAC,IAAI,CAAC1C,KAAK,CAAU,EAAA,CAAC,EAAE;UAGhD,GAAG;YACD,IAAI,CAACkd,uBAAuB,CAAA,CAAE;UAChC,CAAC,QAAQ,IAAI,CAACxa,GAAG,CAAS,EAAA,CAAC,IAAI,CAAC,IAAI,CAAC1C,KAAK,CAAA,EAAU,CAAC;UAErD,IAAI,CAACxa,KAAK,CAAC9H,MAAM,CAAChM,eAAe,EAAEzD,IAAI,CAAC;QAC1C;MACF;IACF;IACA,IAAI,CAAC69B,MAAM,CAAA,EAAU,CAAC;IACtB,OAAO,IAAI,CAAC/nB,UAAU,CAAC9V,IAAI,EAAE,kBAAkB,CAAC;EAClD;EAKAooE,4BAA4BA,CAACr3B,IAAkB,EAAEquB,YAAsB,EAAE;IAEvE,IAAI,IAAI,CAACn0C,SAAS,CAAC,CAAC,kBAAkB,EAAE;MAAEoM,QAAQ,EAAE;IAAS,CAAA,CAAC,CAAC,EAAE;MAC/D,IAAI0Z,IAAI,CAAC9wC,IAAI,KAAK,oBAAoB,EAAE;QAGtC,IAAI,CAACsX,KAAK,CAAC9H,MAAM,CAAC/C,8BAA8B,EAAE0yD,YAAY,CAAC;MACjE;IACF;EACF;EAEAwJ,6BAA6BA,CAAC4F,SAAuB,EAAE93D,QAAkB,EAAE;IACzE,IAAI,IAAI,CAAC+3D,iBAAiB,CAACD,SAAS,CAAC,EAAE;MACrC,MAAMhnC,QAAQ,GAAG,IAAI,CAAC9G,WAAW,CAAyBhqB,QAAQ,CAAC;MACnE8wB,QAAQ,CAAC7vB,MAAM,GAAG62D,SAAS;MAC3B,OAAO,IAAI,CAAC14D,UAAU,CAAC0xB,QAAQ,EAAE,sBAAsB,CAAC;IAC1D,CAAC,MAAM;MACL,MAAMA,QAAQ,GAAG,IAAI,CAAC9G,WAAW,CAA4BhqB,QAAQ,CAAC;MACtE,IAAI,CAACg4D,kCAAkC,CAACh4D,QAAQ,CAAC;MACjD8wB,QAAQ,CAACr0B,UAAU,GAAGq7D,SAAS;MAC/B,OAAO,IAAI,CAAC14D,UAAU,CAAC0xB,QAAQ,EAAE,yBAAyB,CAAC;IAC7D;EACF;EAEAinC,iBAAiBA,CAACt7D,UAAwB,EAAW;IACnD,QAAQA,UAAU,CAAClT,IAAI;MACrB,KAAK,kBAAkB;QACrB,OACE,CAACkT,UAAU,CAAC0C,QAAQ,IAAI,IAAI,CAAC44D,iBAAiB,CAACt7D,UAAU,CAAC9B,MAAM,CAAC;MAErE,KAAK,YAAY;QACf,OAAO,IAAI;MACb;QACE,OAAO,KAAK;IAChB;EACF;EAMAq9D,kCAAkCA,CAACh4D,QAAkB,EAAQ;IAO3D,IAAI,IAAI,CAACqb,KAAK,CAAA,EAAS,CAAC,EAAE;MACxB,MAAM,IAAI,CAACxa,KAAK,CAAC9H,MAAM,CAACjD,mBAAmB,EAAE,IAAI,CAAC4L,KAAK,CAAC1B,QAAQ,CAAC;IACnE;IAGA,IAAI,CAAC,IAAI,CAACwyD,qCAAqC,EAAE,EAAE;MACjD,IAAI,CAAC3xD,KAAK,CAAC9H,MAAM,CAAC9C,mBAAmB,EAAE+J,QAAQ,CAAC;IAClD;EACF;EAQAgyD,uBAAuBA,CAAIiG,QAAiB,EAAK;IAC/C,MAAMC,sBAAsB,GAAG,IAAI,CAACx2D,KAAK,CAACsW,YAAY;IACtD,IAAI,CAACtW,KAAK,CAACsW,YAAY,GAAG;MAExBC,wBAAwB,EAAE,CAAC;MAE3BC,aAAa,EAAE;KAChB;IAED,IAAI;MACF,OAAO+/C,QAAQ,CAAA,CAAE;IACnB,CAAC,SAAS;MACR,IAAI,CAACv2D,KAAK,CAACsW,YAAY,GAAGkgD,sBAAsB;IAClD;EACF;EAUAC,kCAAkCA,CAAIF,QAAiB,EAAK;IAE1D,IAAI,IAAI,CAAC1jD,SAAS,CAAC,CAAC,kBAAkB,EAAE;MAAEoM,QAAQ,EAAE;IAAS,CAAA,CAAC,CAAC,EAAE;MAE/D,MAAMu3C,sBAAsB,GAAG,IAAI,CAACx2D,KAAK,CAACsW,YAAY;MACtD,IAAI,CAACtW,KAAK,CAACsW,YAAY,GAAG;QAExBC,wBAAwB,EAAE,CAAC;QAE3BC,aAAa,EAAE;OAChB;MAED,IAAI;QACF,OAAO+/C,QAAQ,CAAA,CAAE;MACnB,CAAC,SAAS;QACR,IAAI,CAACv2D,KAAK,CAACsW,YAAY,GAAGkgD,sBAAsB;MAClD;IACF,CAAC,MAAM;MAKL,OAAOD,QAAQ,CAAA,CAAE;IACnB;EACF;EAEA7F,8BAA8BA,CAAI6F,QAAiB,EAAK;IACtD,MAAMG,0BAA0B,GAAG,IAAI,CAAC12D,KAAK,CAACuX,SAAS;IACvD,IAAI,CAACvX,KAAK,CAACuX,SAAS,GAAG,IAAI;IAE3B,IAAI;MACF,OAAOg/C,QAAQ,CAAA,CAAE;IACnB,CAAC,SAAS;MACR,IAAI,CAACv2D,KAAK,CAACuX,SAAS,GAAGm/C,0BAA0B;IACnD;EACF;EAEArH,UAAUA,CAAIkH,QAAiB,EAAK;IAClC,MAAM58D,KAAK,GAAG,IAAI,CAACutB,SAAS,CAAC/C,YAAY,CAAA,CAAE;IAC3C,MAAMwyC,cAAc,GAAGC,IAAqB,CAACj9D,KAAK;IAClD,IAAIg9D,cAAc,EAAE;MAClB,IAAI,CAACzvC,SAAS,CAAC3V,KAAK,CAAC5X,KAAK,IAAqB,CAAC;MAChD,IAAI;QACF,OAAO48D,QAAQ,CAAA,CAAE;MACnB,CAAC,SAAS;QACR,IAAI,CAACrvC,SAAS,CAAC1V,IAAI,EAAE;MACvB;IACF;IACA,OAAO+kD,QAAQ,CAAA,CAAE;EACnB;EAEApH,aAAaA,CAAIoH,QAAiB,EAAK;IACrC,MAAM58D,KAAK,GAAG,IAAI,CAACutB,SAAS,CAAC/C,YAAY,CAAA,CAAE;IAC3C,MAAM0yC,gBAAgB,GAAGD,IAAqBj9D,KAAK;IACnD,IAAIk9D,gBAAgB,EAAE;MACpB,IAAI,CAAC3vC,SAAS,CAAC3V,KAAK,CAAC5X,KAAK,GAAG,EAAmB,CAAC;MACjD,IAAI;QACF,OAAO48D,QAAQ,CAAA,CAAE;MACnB,CAAC,SAAS;QACR,IAAI,CAACrvC,SAAS,CAAC1V,IAAI,EAAE;MACvB;IACF;IACA,OAAO+kD,QAAQ,CAAA,CAAE;EACnB;EAIA/C,sBAAsBA,CAAAA,EAAS;IAC7B,IAAI,CAACxzD,KAAK,CAACsW,YAAY,CAACE,aAAa,GAAG,CAAC;EAC3C;EAEA+8C,uCAAuCA,CAAAA,EAAY;IACjD,OAAO,IAAI,CAACvzD,KAAK,CAACsW,YAAY,CAACC,wBAAwB,IAAI,CAAC;EAC9D;EAEAu6C,qCAAqCA,CAAAA,EAAY;IAC/C,OACE,IAAI,CAAC9wD,KAAK,CAACsW,YAAY,CAACE,aAAa,IAAI,IAAI,IAC7C,IAAI,CAACxW,KAAK,CAACsW,YAAY,CAACE,aAAa,IAAI,CAAC;EAE9C;EAEAm6C,uBAAuBA,CAAeZ,IAAY,EAAgB;IAChE,MAAMzxD,QAAQ,GAAG,IAAI,CAAC0B,KAAK,CAAC1B,QAAQ;IAEpC,IAAI,CAAC0B,KAAK,CAACmW,gBAAgB,GAAG,IAAI,CAACnW,KAAK,CAACxa,KAAK;IAC9C,MAAM0sE,6BAA6B,GAAG,IAAI,CAAClyD,KAAK,CAACwX,0BAA0B;IAC3E,IAAI,CAACxX,KAAK,CAACwX,0BAA0B,GAAG,IAAI;IAE5C,MAAMs/C,GAAG,GAAG,IAAI,CAAC/P,WAAW,CAC1B,IAAI,CAAC8I,wBAAwB,EAAE,EAC/BvxD,QAAQ,EACRyxD,IACF,CAAC;IAED,IAAI,CAAC/vD,KAAK,CAACwX,0BAA0B,GAAG06C,6BAA6B;IAErE,OAAO4E,GAAG;EACZ;EAGA9D,qBAAqBA,CAAAA,EAAmC;IACtD,IAAI,CAACz0C,YAAY,CAAC,cAAc,CAAC;IACjC,MAAM32B,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAsB;IACjD,IAAI,CAACuS,IAAI,CAAA,CAAE;IACX,IAAI,CAAC,IAAI,CAAC6J,KAAK,CAAA,CAAU,CAAC,EAAE;MAC1B,IAAI,CAAC7sB,UAAU,CAAC,IAAI,GAAW,CAAC;IAClC;IAEA,MAAM6wC,OAAO,GAAG,IAAI,CAACrV,WAAW,CAAY,IAAI,CAACtoB,KAAK,CAACoB,MAAM,CAAC;IAC9D,IAAI,CAAC0O,IAAI,CAAA,CAAE;IAEX,MAAMinD,YAAY,GAAG,IAAI,CAACrwC,gBAAgB,CAAiB,IAAI,CAAC;IAChE,IAAI,CAACW,kBAAkB,CAAA,CAAE;IAEzB,IAAI;MACFz/B,IAAI,CAAC0U,IAAI,GAAG,IAAI,CAAC06D,YAAY,CAACr5B,OAAO,EAAa,CAAA,EAAA,QAAQ,CAAC;IAC7D,CAAC,SAAS;MACRo5B,YAAY,EAAE;IAChB;IACA,OAAO,IAAI,CAACr5D,UAAU,CAAqB9V,IAAI,EAAE,kBAAkB,CAAC;EACtE;EAGAoyC,+BAA+BA,CAE7B/7B,IAAmD,EAC7C,CAAC;AACX;ACxlGA,MAAMg5D,SAAS,GAAG;IAAEhvE,IAAI;EAA+B,CAAA;EACrDivE,WAAW,GAAG;IAAEjvE,IAAI;GAAiC;AAkBvD,MAAMkvE,aAAa,GAAG,kBAAkB;AAExC,MAAMC,yBAAyB,GAAG,kBAAkB;AAUpD,SAASC,kBAAkBA,CACzB/+D,MAA6B,EAC7B0c,KAAa,EACbtd,UAAkB,EAClB;EACA,KAAK,IAAIgX,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpW,MAAM,CAAC8H,MAAM,EAAEsO,CAAC,EAAE,EAAE;IACtC,MAAMza,KAAK,GAAGqE,MAAM,CAACoW,CAAC,CAAC;IACvB,MAAM;MAAE7mB;IAAM,CAAA,GAAGoM,KAAK;IACtB,IAAI,OAAOpM,IAAI,KAAK,QAAQ,EAAE;MACO;QACjC,IAAIA,IAAI,QAAmB,EAAE;UAC3B,MAAM;YAAEgO,GAAG;YAAErQ,KAAK;YAAEoP,KAAK;YAAEnP;UAAK,CAAA,GAAGwO,KAAK;UACxC,MAAMqjE,UAAU,GAAG9xE,KAAK,GAAG,CAAC;UAC5B,MAAM+xE,UAAU,GAAG3xE,8BAA8B,CAACiQ,GAAG,CAACrQ,KAAK,EAAE,CAAC,CAAC;UAC/D8S,MAAM,CAACuc,MAAM,CACXnG,CAAC,EACD,CAAC,EACD,IAAI+M,KAAK,CAAC;YAER5zB,IAAI,EAAEkmB,gBAAgB,CAAA,EAAQ,CAAC;YAC/BnZ,KAAK,EAAE,GAAG;YACVpP,KAAK,EAAEA,KAAK;YACZC,GAAG,EAAE6xE,UAAU;YACfh5D,QAAQ,EAAEzI,GAAG,CAACrQ,KAAK;YACnB4b,MAAM,EAAEm2D;UACV,CAAC,CAAC,EACF,IAAI97C,KAAK,CAAC;YAER5zB,IAAI,EAAEkmB,gBAAgB,CAAA,GAAQ,CAAC;YAC/BnZ,KAAK,EAAEA,KAAK;YACZpP,KAAK,EAAE8xE,UAAU;YACjB7xE,GAAG,EAAEA,GAAG;YACR6Y,QAAQ,EAAEi5D,UAAU;YACpBn2D,MAAM,EAAEvL,GAAG,CAACpQ;UACb,CAAA,CACH,CAAC;UACDipB,CAAC,EAAE;UACH;QACF;QAEA,IAAIZ,eAAe,CAACjmB,IAAI,CAAC,EAAE;UACzB,MAAM;YAAEgO,GAAG;YAAErQ,KAAK;YAAEoP,KAAK;YAAEnP;UAAK,CAAA,GAAGwO,KAAK;UACxC,MAAMujE,YAAY,GAAGhyE,KAAK,GAAG,CAAC;UAC9B,MAAMiyE,eAAe,GAAG7xE,8BAA8B,CAACiQ,GAAG,CAACrQ,KAAK,EAAE,CAAC,CAAC;UACpE,IAAIkyE,UAAU;UACd,IAAI1iD,KAAK,CAACC,UAAU,CAACzvB,KAAK,GAAGkS,UAAU,CAAC,KAAA,EAA0B,EAAE;YAClEggE,UAAU,GAAG,IAAIj8C,KAAK,CAAC;cAErB5zB,IAAI,EAAEkmB,gBAAgB,CAAA,EAAa,CAAC;cACpCnZ,KAAK,EAAE,GAAG;cACVpP,KAAK,EAAEA,KAAK;cACZC,GAAG,EAAE+xE,YAAY;cACjBl5D,QAAQ,EAAEzI,GAAG,CAACrQ,KAAK;cACnB4b,MAAM,EAAEq2D;YACV,CAAC,CAAC;UACJ,CAAC,MAAM;YACLC,UAAU,GAAG,IAAIj8C,KAAK,CAAC;cAErB5zB,IAAI,EAAEkmB,gBAAgB,CAAA,CAAU,CAAC;cACjCnZ,KAAK,EAAE,GAAG;cACVpP,KAAK,EAAEA,KAAK;cACZC,GAAG,EAAE+xE,YAAY;cACjBl5D,QAAQ,EAAEzI,GAAG,CAACrQ,KAAK;cACnB4b,MAAM,EAAEq2D;YACV,CAAC,CAAC;UACJ;UACA,IAAIE,aAAa,EACfC,kBAAkB,EAClBC,qBAAqB,EACrBC,QAAQ;UACV,IAAIjwE,IAAI,OAAoB,EAAE;YAE5B+vE,kBAAkB,GAAGnyE,GAAG,GAAG,CAAC;YAC5BoyE,qBAAqB,GAAGjyE,8BAA8B,CAACiQ,GAAG,CAACpQ,GAAG,EAAE,CAAC,CAAC,CAAC;YACnEkyE,aAAa,GAAG/iE,KAAK,KAAK,IAAI,GAAG,IAAI,GAAGA,KAAK,CAACijB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAC1DigD,QAAQ,GAAG,IAAIr8C,KAAK,CAAC;cAEnB5zB,IAAI,EAAEkmB,gBAAgB,CAAA,EAAa,CAAC;cACpCnZ,KAAK,EAAE,GAAG;cACVpP,KAAK,EAAEoyE,kBAAkB;cACzBnyE,GAAG,EAAEA,GAAG;cACR6Y,QAAQ,EAAEu5D,qBAAqB;cAC/Bz2D,MAAM,EAAEvL,GAAG,CAACpQ;YACd,CAAC,CAAC;UACJ,CAAC,MAAM;YAELmyE,kBAAkB,GAAGnyE,GAAG,GAAG,CAAC;YAC5BoyE,qBAAqB,GAAGjyE,8BAA8B,CAACiQ,GAAG,CAACpQ,GAAG,EAAE,CAAC,CAAC,CAAC;YACnEkyE,aAAa,GAAG/iE,KAAK,KAAK,IAAI,GAAG,IAAI,GAAGA,KAAK,CAACijB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAC1DigD,QAAQ,GAAG,IAAIr8C,KAAK,CAAC;cAEnB5zB,IAAI,EAAEkmB,gBAAgB,CAAA,EAAgB,CAAC;cACvCnZ,KAAK,EAAE,IAAI;cACXpP,KAAK,EAAEoyE,kBAAkB;cACzBnyE,GAAG,EAAEA,GAAG;cACR6Y,QAAQ,EAAEu5D,qBAAqB;cAC/Bz2D,MAAM,EAAEvL,GAAG,CAACpQ;YACd,CAAC,CAAC;UACJ;UACA6S,MAAM,CAACuc,MAAM,CACXnG,CAAC,EACD,CAAC,EACDgpD,UAAU,EACV,IAAIj8C,KAAK,CAAC;YAER5zB,IAAI,EAAEkmB,gBAAgB,CAAA,EAAY,CAAC;YACnCnZ,KAAK,EAAE+iE,aAAa;YACpBnyE,KAAK,EAAEgyE,YAAY;YACnB/xE,GAAG,EAAEmyE,kBAAkB;YACvBt5D,QAAQ,EAAEm5D,eAAe;YACzBr2D,MAAM,EAAEy2D;WACT,CAAC,EACFC,QACF,CAAC;UACDppD,CAAC,IAAI,CAAC;UACN;QACF;MACF;MAEAza,KAAK,CAACpM,IAAI,GAAGkmB,gBAAgB,CAAClmB,IAAI,CAAC;IACrC;EACF;EACA,OAAOyQ,MAAM;AACf;AACe,MAAey/D,eAAe,SAASnJ,gBAAgB,CAAC;EAQrElxB,aAAaA,CAEXnkC,IAAoB,EACpBokC,OAA0B,EAClB;IACRpkC,IAAI,CAACokC,OAAO,GAAG,IAAI,CAACq5B,YAAY,CAACr5B,OAAO,CAAC;IACzCpkC,IAAI,CAAC8Z,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAE7B,IAAI,IAAI,CAAC7Z,WAAW,MAAqB,EAAE;MACzCD,IAAI,CAACjB,MAAM,GAAG++D,kBAAkB,CAC9B,IAAI,CAAC/+D,MAAM,EACX,IAAI,CAAC0c,KAAK,EACV,IAAI,CAACtd,UACP,CAAC;IACH;IAEA,OAAO,IAAI,CAACgG,UAAU,CAACnE,IAAI,EAAE,MAAM,CAAC;EACtC;EAEAy9D,YAAYA,CAEVr5B,OAA0B,EAC1Bl4C,GAAc,GAAS,GAAA,EACvB8R,UAAsB,GAAG,IAAI,CAACuB,OAAO,CAACvB,UAAU,EACrC;IACXomC,OAAO,CAACpmC,UAAU,GAAGA,UAAU;IAC/BomC,OAAO,CAACq6B,WAAW,GAAG,IAAI,CAACC,yBAAyB,EAAE;IACtD,IAAI,CAACl8D,cAAc,CAAC4hC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAEl4C,GAAG,CAAC;IAC7C,IAAI,IAAI,CAAC6pB,QAAQ,EAAE;MACjB,IACE,EAAE,IAAI,CAAC9V,WAAW,KAAqC,CAAC,IACxD,IAAI,CAACiY,KAAK,CAACjB,gBAAgB,CAACiP,IAAI,GAAG,CAAC,EACpC;QACA,KAAK,MAAM,CAACj1B,SAAS,EAAEib,EAAE,CAAC,IAAI9O,KAAK,CAACyrB,IAAI,CAAC,IAAI,CAAC3Q,KAAK,CAACjB,gBAAgB,CAAC,EAAE;UACrE,IAAI,CAACrR,KAAK,CAAC9H,MAAM,CAACxI,qBAAqB,EAAE4W,EAAE,EAAE;YAAEjb;UAAU,CAAC,CAAC;QAC7D;MACF;MACA,IAAI,CAACk6B,QAAQ,CAACiZ,OAAO,EAAE,eAAe,EAAE,IAAI,CAAC39B,KAAK,CAAC2X,gBAAgB,CAAC;IACtE;IACA,IAAIugD,eAA0B;IAC9B,IAAIzyE,GAAG,QAAW,EAAE;MAElByyE,eAAe,GAAG,IAAI,CAACx6D,UAAU,CAACigC,OAAO,EAAE,SAAS,CAAC;IACvD,CAAC,MAAM;MAELu6B,eAAe,GAAG,IAAI,CAAC/2D,YAAY,CACjCw8B,OAAO,EACP,SAAS,EACT/3C,8BAA8B,CAAC,IAAI,CAACoa,KAAK,CAAC1B,QAAQ,EAAE,CAAC,CAAC,CACxD,CAAC;IACH;IACA,OAAO45D,eAAe;EACxB;EAKAC,eAAeA,CAACh9D,IAAiB,EAAe;IAC9C,MAAML,SAAS,GAAGK,IAAW;IAC7BL,SAAS,CAACjT,IAAI,GAAG,WAAW;IAC5BiT,SAAS,CAAClG,KAAK,GAAGkG,SAAS,CAACC,UAAU;IACtC,OAAOD,SAAS,CAACC,UAAU;IAE3B,MAAMq9D,gBAAgB,GAAGt9D,SAAS,CAAClG,KAAK;IACxC,MAAMsG,eAAe,GAAGk9D,gBAAgB,CAACxjE,KAAK;IAC9C,MAAMoG,GAAG,GAAG,IAAI,CAACga,KAAK,CAAC6C,KAAK,CAC1B,IAAI,CAAClF,iBAAiB,CAACylD,gBAAgB,CAAC5yE,KAAK,CAAC,EAC9C,IAAI,CAACmtB,iBAAiB,CAACylD,gBAAgB,CAAC3yE,GAAG,CAC7C,CAAC;IACD,MAAMo1B,GAAG,GAAIu9C,gBAAgB,CAACxjE,KAAK,GAAGoG,GAAG,CAAC6c,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAE;IAEvD,IAAI,CAAC6M,QAAQ,CAAC0zC,gBAAgB,EAAE,KAAK,EAAEp9D,GAAG,CAAC;IAC3C,IAAI,CAAC0pB,QAAQ,CAAC0zC,gBAAgB,EAAE,UAAU,EAAEv9C,GAAG,CAAC;IAChD,IAAI,CAAC6J,QAAQ,CAAC0zC,gBAAgB,EAAE,iBAAiB,EAAEl9D,eAAe,CAAC;IAEnEk9D,gBAAgB,CAACvwE,IAAI,GAAG,kBAAkB;IAE1C,OAAOiT,SAAS;EAClB;EAEAm9D,yBAAyBA,CAAAA,EAAkC;IACzD,IAAI,CAAC,IAAI,CAACt+C,KAAK,CAAA,EAAwB,CAAC,EAAE;MACxC,OAAO,IAAI;IACb;IAEA,MAAM/xB,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAA0B;IACrD3V,IAAI,CAACgN,KAAK,GAAG,IAAI,CAACoL,KAAK,CAACpL,KAAK;IAC7B,IAAI,CAACkb,IAAI,CAAA,CAAE;IACX,OAAO,IAAI,CAACpS,UAAU,CAAC9V,IAAI,EAAE,sBAAsB,CAAC;EACtD;EAEA4nC,KAAKA,CAAAA,EAAY;IACf,IAAI,CAAC,IAAI,CAAC7K,YAAY,CAAA,GAAQ,CAAC,EAAE;MAC/B,OAAO,KAAK;IACd;IACA,OAAO,IAAI,CAAC0zC,uBAAuB,EAAE;EACvC;EAEApM,yBAAyBA,CAAC7zC,EAAU,EAAEniB,GAAW,EAAE;IACjD,IAAI0Y,iBAAiB,CAACyJ,EAAE,CAAC,EAAE;MACzBg/C,yBAAyB,CAACv6C,SAAS,GAAG5mB,GAAG;MACzC,IAAImhE,yBAAyB,CAACxoD,IAAI,CAAC,IAAI,CAACoG,KAAK,CAAC,EAAE;QAG9C,MAAMsjD,KAAK,GAAG,IAAI,CAACp7C,cAAc,CAACk6C,yBAAyB,CAACv6C,SAAS,CAAC;QACtE,IAAI,CAAC/N,gBAAgB,CAACwpD,KAAK,CAAC,IAAIA,KAAK,OAAwB,EAAE;UAC7D,OAAO,KAAK;QACd;MACF;MACA,OAAO,IAAI;IACb,CAAC,MAAM,IAAIlgD,EAAE,KAAA,EAAwB,EAAE;MACrC,OAAO,IAAI;IACb,CAAC,MAAM;MACL,OAAO,KAAK;IACd;EACF;EAEAmgD,sBAAsBA,CAACngD,EAAU,EAAE;IACjC,OACEA,EAAE,KAAA,EAAgC,IAAIA,EAAE,KAA6B,GAAA;EAEzE;EAMAigD,uBAAuBA,CAAAA,EAAY;IACjC,MAAMvoD,IAAI,GAAG,IAAI,CAAC6M,cAAc,EAAE;IAClC,MAAMoI,MAAM,GAAG,IAAI,CAAC7H,cAAc,CAACpN,IAAI,CAAC;IACxC,OACE,IAAI,CAACyoD,sBAAsB,CAACxzC,MAAM,CAAC,IACnC,IAAI,CAACknC,yBAAyB,CAAClnC,MAAM,EAAEjV,IAAI,CAAC;EAEhD;EAOA0oD,0CAA0CA,CAAAA,EAAY;IACpD,MAAM1oD,IAAI,GAAG,IAAI,CAACiN,oBAAoB,EAAE;IACxC,MAAMgI,MAAM,GAAG,IAAI,CAAC7H,cAAc,CAACpN,IAAI,CAAC;IACxC,OACEiV,MAAM,KAA6B,GAAA,IACnC,IAAI,CAACknC,yBAAyB,CAAClnC,MAAM,EAAEjV,IAAI,CAAC;EAEhD;EAEA2oD,gBAAgBA,CAAAA,EAAY;IAC1B,MAAM;MAAE5wE,IAAI;MAAE6vB;IAAY,CAAC,GAAG,IAAI,CAAC8E,SAAS,EAAE;IAC9C,IAAI30B,IAAI,KAAA,GAAW,IAAI,CAAC6vB,WAAW,EAAE;MAEnC,OAAO,KAAK;IACd,CAAC,MAAM,IAAI9K,iBAAiB,CAAC/kB,IAAI,CAAC,IAAI,CAAC,IAAI,CAACw9B,qBAAqB,CAAA,CAAE,EAAE;MACnE,IAAI,CAAC9G,YAAY,CAAC,4BAA4B,CAAC;MAC/C,OAAO,IAAI;IACb;EACF;EAEAm6C,gBAAgBA,CAAAA,EAAY;IAC1B,IAAI5oD,IAAI,GAAG,IAAI,CAACiN,oBAAoB,EAAE;IACtC,IAAI,IAAI,CAAC6H,oBAAoB,CAAC9U,IAAI,EAAE,OAAO,CAAC,EAAE;MAC5CA,IAAI,GAAG,IAAI,CAACkN,yBAAyB,CAAClN,IAAI,GAAG,CAAC,CAAC;MAC/C,MAAMiV,MAAM,GAAG,IAAI,CAAC7H,cAAc,CAACpN,IAAI,CAAC;MACxC,IAAI,IAAI,CAACm8C,yBAAyB,CAAClnC,MAAM,EAAEjV,IAAI,CAAC,EAAE;QAChD,IAAI,CAACyO,YAAY,CAAC,4BAA4B,CAAC;QAC/C,OAAO,IAAI;MACb;IACF;IACA,OAAO,KAAK;EACd;EAGAo6C,eAAeA,CAAAA,EAAe;IAC5B,OAAO,IAAI,CAAC/iC,kBAAkB,CAC5BgjC,KACqC,IACQ,IAI/C,CAAC;EACH;EAGAC,sBAAsBA,CAAAA,EAAe;IACnC,OAAO,IAAI,CAACjjC,kBAAkB,CAC5BgjC,KAC6C,IAC1C,CAAC,IAAI,CAAC9/D,OAAO,CAACH,MAAM,IAAI,IAAI,CAACqH,KAAK,CAACgP,MAAM,GACtC,CAAC,IACsC,CAC/C,CAAC;EACH;EAEAo9C,+CAA+CA,CAE7C0M,oBAA6B,GAAG,KAAK,EACrC;IACA,IAAIn/D,KAAyB,IAAmC;IAChE,IAAI,IAAI,CAACb,OAAO,CAACH,MAAM,IAAI,CAAC,IAAI,CAACqH,KAAK,CAACgP,MAAM,EAAE;MAC7CrV,KAAK,KAA+C;MACpD,IAAIm/D,oBAAoB,EAAE;QACxBn/D,KAAK,KAA2C;MAClD;IACF;IACA,OAAO,IAAI,CAACi8B,kBAAkB,CAACj8B,KAAK,CAAC;EACvC;EASAo/D,cAAcA,CAAAA,EAAe;IAC3B,OAAO,IAAI,CAACnjC,kBAAkB,EAAiC,CAAC;EAClE;EAIAA,kBAAkBA,CAEhBj8B,KAAyB,EAOA;IACzB,IAAImG,UAAgC,GAAG,IAAI;IAE3C,IAAI,IAAI,CAAC6Z,KAAK,CAAA,EAAM,CAAC,EAAE;MACrB7Z,UAAU,GAAG,IAAI,CAAC6yD,eAAe,CAAC,IAAI,CAAC;IACzC;IACA,OAAO,IAAI,CAAC7K,qBAAqB,CAACnuD,KAAK,EAAEmG,UAAU,CAAC;EACtD;EAEAgoD,qBAAqBA,CAEnBnuD,KAAyB,EACzBmG,UAAiC,EACpB;IACb,MAAMglD,SAAS,GAAG,IAAI,CAAC9kD,KAAK,CAACnY,IAAI;IACjC,MAAMD,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAE;IAC7B,MAAMy7D,gBAAgB,GAAG,CAAC,EAAEr/D,KAAK,IAAsC,CAAC;IACxE,MAAMs/D,wBAAwB,GAAG,CAAC,EAChCt/D,KAAK,IAA8C,CACpD;IACD,MAAMsC,QAAQ,GAAGtC,KAAK,IAAuC;IAM7D,QAAQmrD,SAAS;MACf,KAAA,EAAA;QACE,OAAO,IAAI,CAACoU,2BAA2B,CAACtxE,IAAI,EAAgB,IAAI,CAAC;MACnE,KAAA,EAAA;QACE,OAAO,IAAI,CAACsxE,2BAA2B,CAACtxE,IAAI,EAAgB,KAAK,CAAC;MACpE,KAAA,EAAA;QACE,OAAO,IAAI,CAACuxE,sBAAsB,CAACvxE,IAAmC,CAAC;MACzE,KAAA,EAAA;QACE,OAAO,IAAI,CAACwxE,qBAAqB,CAACxxE,IAAkC,CAAC;MACvE,KAAA,EAAA;QACE,OAAO,IAAI,CAACyxE,iBAAiB,CAACzxE,IAA8B,CAAC;MAC/D,KAAA,EAAA;QACE,IAAI,IAAI,CAACk1B,iBAAiB,EAAE,OAAkB,EAAE;QAChD,IAAI,CAACm8C,wBAAwB,EAAE;UAC7B,IAAI,CAAC95D,KAAK,CACR,IAAI,CAACa,KAAK,CAACgP,MAAM,GACb3X,MAAM,CAAC/D,cAAc,GACrB,IAAI,CAACwF,OAAO,CAACH,MAAM,GACjBtB,MAAM,CAACnH,oBAAoB,GAC3BmH,MAAM,CAACpH,cAAc,EAC3B,IAAI,CAAC+P,KAAK,CAAC1B,QACb,CAAC;QACH;QACA,OAAO,IAAI,CAAC0mD,sBAAsB,CAChCp9D,IAAI,EACJ,KAAK,EACL,CAACoxE,gBAAgB,IAAIC,wBACvB,CAAC;MACH,KAAA,EAAA;QACE,IAAI,CAACD,gBAAgB,EAAE,IAAI,CAAClsE,UAAU,EAAE;QACxC,OAAO,IAAI,CAACm4D,UAAU,CACpB,IAAI,CAAC8E,mBAAmB,CACtBjqD,UAAU,EACVlY,IACF,CAAC,EACD,IACF,CAAC;MAEH,KAAA,EAAA;QACE,OAAO,IAAI,CAAC0xE,gBAAgB,CAAC1xE,IAA6B,CAAC;MAC7D,KAAA,EAAA;QACE,OAAO,IAAI,CAAC2xE,oBAAoB,CAAC3xE,IAAiC,CAAC;MACrE,KAAA,EAAA;QACE,OAAO,IAAI,CAAC4xE,oBAAoB,CAAC5xE,IAAiC,CAAC;MACrE,KAAA,EAAA;QACE,OAAO,IAAI,CAAC6xE,mBAAmB,CAAC7xE,IAAgC,CAAC;MACnE,KAAA,EAAA;QACE,OAAO,IAAI,CAAC8xE,iBAAiB,CAAC9xE,IAA8B,CAAC;MAE/D,KAAA,EAAA;QAEE,IAAI,CAAC,IAAI,CAACoY,KAAK,CAAC0X,WAAW,IAAI,IAAI,CAACghD,gBAAgB,CAAA,CAAE,EAAE;UACtD,IAAI,CAAC,IAAI,CAACzH,oBAAoB,EAAE,EAAE;YAChC,IAAI,CAAC9xD,KAAK,CAAC9H,MAAM,CAAC9O,2BAA2B,EAAEX,IAAI,CAAC;UACtD,CAAC,MAAM,IAAI,CAACoxE,gBAAgB,EAAE;YAC5B,IAAI,CAAC75D,KAAK,CAAC9H,MAAM,CAACnG,4BAA4B,EAAEtJ,IAAI,CAAC;UACvD;UACA,IAAI,CAACkoB,IAAI,CAAA,CAAE;UACX,OAAO,IAAI,CAACo1C,iBAAiB,CAC3Bt9D,IAAI,EACJ,aACF,CAAC;QACH;QACA;MACF,KAAA,GAAA;QAEE,IACE,IAAI,CAACoY,KAAK,CAAC0X,WAAW,IACtB,CAAC,IAAI,CAAC8gD,0CAA0C,CAAA,CAAE,EAClD;UACA;QACF;QACA,IAAI,CAACj6C,YAAY,CAAC,4BAA4B,CAAC;QAC/C,IAAI,CAAC,IAAI,CAAC9M,KAAK,CAACnC,QAAQ,IAAI,IAAI,CAACmC,KAAK,CAAChB,UAAU,EAAE;UACjD,IAAI,CAACtR,KAAK,CAAC9H,MAAM,CAAC1F,0BAA0B,EAAE,IAAI,CAACqO,KAAK,CAAC1B,QAAQ,CAAC;QACpE,CAAC,MAAM,IAAI,CAAC06D,gBAAgB,EAAE;UAC5B,IAAI,CAAC75D,KAAK,CAAC9H,MAAM,CAACnG,4BAA4B,EAAE,IAAI,CAAC8O,KAAK,CAAC1B,QAAQ,CAAC;QACtE;QACA,OAAO,IAAI,CAAC4mD,iBAAiB,CAC3Bt9D,IAAI,EACJ,OACF,CAAC;MACH,KAAA,GAAA;QAAc;UACZ,IAAI,IAAI,CAACoY,KAAK,CAAC0X,WAAW,EAAE;YAC1B;UACF;UAGA,MAAM5H,IAAI,GAAG,IAAI,CAAC6M,cAAc,EAAE;UAClC,MAAMoI,MAAM,GAAG,IAAI,CAAC7H,cAAc,CAACpN,IAAI,CAAC;UACxC,IAAIiV,MAAM,OAAgC,EAAE;YAC1C,IAAI,CAACi0C,gBAAgB,IAAI,IAAI,CAAC3zC,qBAAqB,CAAE,CAAA,EAAE;YACvD,IACE,CAAC,IAAI,CAAC4mC,yBAAyB,CAAClnC,MAAM,EAAEjV,IAAI,CAAC,IAC7CiV,MAAM,KAAA,GAA6B,EACnC;cACA;YACF;UACF;QACF;MAEA,KAAA,EAAA;QAAgB;UACd,IAAI,CAACi0C,gBAAgB,EAAE;YACrB,IAAI,CAAC75D,KAAK,CAAC9H,MAAM,CAACnG,4BAA4B,EAAE,IAAI,CAAC8O,KAAK,CAAC1B,QAAQ,CAAC;UACtE;QACF;MAEA,KAAA,EAAA;QAAc;UACZ,MAAMrW,IAAI,GAAG,IAAI,CAAC+X,KAAK,CAACpL,KAAK;UAC7B,OAAO,IAAI,CAACswD,iBAAiB,CAC3Bt9D,IAAI,EACJK,IACF,CAAC;QACH;MACA,KAAA,EAAA;QACE,OAAO,IAAI,CAAC0xE,mBAAmB,CAAC/xE,IAAgC,CAAC;MACnE,KAAA,EAAA;QACE,OAAO,IAAI,CAACgyE,kBAAkB,CAAChyE,IAA+B,CAAC;MACjE,KAAA,CAAA;QACE,OAAO,IAAI,CAAC0kE,UAAU,EAAE;MAC1B,KAAA,EAAA;QACE,OAAO,IAAI,CAACuN,mBAAmB,CAACjyE,IAAgC,CAAC;MACnE,KAAA,EAAA;QAAiB;UACf,MAAMkyE,iBAAiB,GAAG,IAAI,CAACh9C,iBAAiB,EAAE;UAClD,IACEg9C,iBAAiB,KAAA,EAA8B,IAC/CA,iBAAiB,OAAkB,EACnC;YACA;UACF;QACF;MAEA,KAAA,EAAA;QAAiB;UACf,IACE,EAAE,IAAI,CAACtgE,WAAW,IAA0C,CAAC,IAC7D,CAACyC,QAAQ,EACT;YACA,IAAI,CAACkD,KAAK,CAAC9H,MAAM,CAACvG,sBAAsB,EAAE,IAAI,CAACkP,KAAK,CAAC1B,QAAQ,CAAC;UAChE;UAEA,IAAI,CAACwR,IAAI,CAAA,CAAE;UAEX,IAAIwnB,MAAM;UACV,IAAIwtB,SAAS,OAAe,EAAE;YAC5BxtB,MAAM,GAAG,IAAI,CAACjI,WAAW,CAACznC,IAAmC,CAAC;YAE9D,IACE0vC,MAAM,CAACzvC,IAAI,KAAK,mBAAmB,KAClC,CAACyvC,MAAM,CAACjL,UAAU,IAAIiL,MAAM,CAACjL,UAAU,KAAK,OAAO,CAAC,EACrD;cACA,IAAI,CAAC9Z,iBAAiB,GAAG,IAAI;YAC/B;UACF,CAAC,MAAM;YACL+kB,MAAM,GAAG,IAAI,CAACz3B,WAAW,CACvBjY,IAAI,EAKJkY,UACF,CAAC;YAED,IACGw3B,MAAM,CAACzvC,IAAI,KAAK,wBAAwB,KACtC,CAACyvC,MAAM,CAAC7H,UAAU,IAAI6H,MAAM,CAAC7H,UAAU,KAAK,OAAO,CAAC,IACtD6H,MAAM,CAACzvC,IAAI,KAAK,sBAAsB,KACpC,CAACyvC,MAAM,CAAC7H,UAAU,IAAI6H,MAAM,CAAC7H,UAAU,KAAK,OAAO,CAAE,IACxD6H,MAAM,CAACzvC,IAAI,KAAK,0BAA0B,EAC1C;cACA,IAAI,CAAC0qB,iBAAiB,GAAG,IAAI;YAC/B;UACF;UAEA,IAAI,CAACklB,uBAAuB,CAACH,MAAM,CAAC;UAEpC,OAAOA,MAAM;QACf;MAEA;QAAS;UACP,IAAI,IAAI,CAACyiC,eAAe,EAAE,EAAE;YAC1B,IAAI,CAACf,gBAAgB,EAAE;cACrB,IAAI,CAAC75D,KAAK,CACR9H,MAAM,CAAClP,qCAAqC,EAC5C,IAAI,CAAC6X,KAAK,CAAC1B,QACb,CAAC;YACH;YACA,IAAI,CAACwR,IAAI,CAAA,CAAE;YACX,OAAO,IAAI,CAACk1C,sBAAsB,CAChCp9D,IAAI,EACJ,IAAI,EACJ,CAACoxE,gBAAgB,IAAIC,wBACvB,CAAC;UACH;QACF;IACF;IAOA,MAAMe,SAAS,GAAG,IAAI,CAACh6D,KAAK,CAACpL,KAAK;IAClC,MAAMmhC,IAAI,GAAG,IAAI,CAACrI,eAAe,EAAE;IAEnC,IACE9gB,iBAAiB,CAACk4C,SAAS,CAAC,IAC5B/uB,IAAI,CAACluC,IAAI,KAAK,YAAY,IAC1B,IAAI,CAACw0B,GAAG,CAAA,EAAS,CAAC,EAClB;MACA,OAAO,IAAI,CAAC49C,qBAAqB,CAC/BryE,IAAI,EACJoyE,SAAS,EACTjkC,IAAI,EACJp8B,KACF,CAAC;IACH,CAAC,MAAM;MACL,OAAO,IAAI,CAACm8B,wBAAwB,CAClCluC,IAAI,EACJmuC,IAAI,EACJj2B,UACF,CAAC;IACH;EACF;EAEA23B,uBAAuBA,CAAC7vC,IAAY,EAAQ;IAC1C,IACE,EAAE,IAAI,CAAC4R,WAAW,IAA0C,CAAC,IAC7D,CAAC,IAAI,CAAC8V,QAAQ,EACd;MACA,IAAI,CAACnQ,KAAK,CAAC9H,MAAM,CAAClR,mBAAmB,EAAEyB,IAAI,CAAC;IAC9C;EACF;EAEAsyE,6BAA6BA,CAAAA,EAAY;IACvC,IAAI,IAAI,CAACrnD,SAAS,CAAC,mBAAmB,CAAC,EAAE,OAAO,IAAI;IACpD,OACE,IAAI,CAACA,SAAS,CAAC,YAAY,CAAC,IAC5B,IAAI,CAACpW,eAAe,CAAC,YAAY,EAAE,wBAAwB,CAAC,KAAK,KAAK;EAE1E;EAQAstD,mBAAmBA,CACjBoQ,eAAqC,EACrCC,SAAY,EACZC,UAA0E,EACvE;IACH,IAAIF,eAAe,EAAE;MAAA,IAAAG,qBAAA;MACnB,IAAAA,CAAAA,qBAAA,GAAIF,SAAS,CAACt6D,UAAU,KAApBw6D,IAAAA,IAAAA,qBAAA,CAAsBl6D,MAAM,EAAE;QAGhC,IACE,OAAO,IAAI,CAAC3D,eAAe,CACzB,YAAY,EACZ,wBACF,CAAC,KAAK,SAAS,EACf;UAIA,IAAI,CAAC0C,KAAK,CACR9H,MAAM,CAAChO,2BAA2B,EAClC+wE,SAAS,CAACt6D,UAAU,CAAC,CAAC,CACxB,CAAC;QACH;QACAs6D,SAAS,CAACt6D,UAAU,CAACyT,OAAO,CAAC,GAAG4mD,eAAe,CAAC;MAClD,CAAC,MAAM;QACLC,SAAS,CAACt6D,UAAU,GAAGq6D,eAAe;MACxC;MACA,IAAI,CAAC5xC,0BAA0B,CAAC6xC,SAAS,EAAED,eAAe,CAAC,CAAC,CAAC,CAAC;MAC9D,IAAIE,UAAU,EAAE,IAAI,CAAC9xC,0BAA0B,CAAC8xC,UAAU,EAAED,SAAS,CAAC;IACxE;IACA,OAAOA,SAAS;EAClB;EAEA9Q,uBAAuBA,CAAAA,EAAY;IACjC,OAAO,IAAI,CAAC3vC,KAAK,CAAA,EAAU,CAAC;EAC9B;EAEAg5C,eAAeA,CAAe4H,WAAqB,EAAiB;IAClE,MAAMz6D,UAAU,GAAG,EAAE;IACrB,GAAG;MACDA,UAAU,CAAC2D,IAAI,CAAC,IAAI,CAAC+wC,cAAc,CAAE,CAAA,CAAC;IACxC,CAAC,QAAQ,IAAI,CAAC76B,KAAK,GAAM,CAAC;IAE1B,IAAI,IAAI,CAACA,KAAK,CAAA,EAAW,CAAC,EAAE;MAC1B,IAAI,CAAC4gD,WAAW,EAAE;QAChB,IAAI,CAACztE,UAAU,CAAA,CAAE;MACnB;MAEA,IAAI,CAAC,IAAI,CAACotE,6BAA6B,EAAE,EAAE;QACzC,IAAI,CAAC/6D,KAAK,CAAC9H,MAAM,CAAC9N,oBAAoB,EAAE,IAAI,CAACyW,KAAK,CAAC1B,QAAQ,CAAC;MAC9D;KACD,MAAM,IAAI,CAAC,IAAI,CAACgrD,uBAAuB,EAAE,EAAE;MAC1C,MAAM,IAAI,CAACnqD,KAAK,CAAC9H,MAAM,CAACpG,0BAA0B,EAAE,IAAI,CAAC+O,KAAK,CAAC1B,QAAQ,CAAC;IAC1E;IAEA,OAAOwB,UAAU;EACnB;EAEA00C,cAAcA,CAAAA,EAA4B;IACxC,IAAI,CAAC9yB,eAAe,CAAC,CAAC,YAAY,EAAE,mBAAmB,CAAC,CAAC;IAEzD,MAAM95B,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAe;IAC1C,IAAI,CAACuS,IAAI,CAAA,CAAE;IAEX,IAAI,IAAI,CAAC+C,SAAS,CAAC,YAAY,CAAC,EAAE;MAChC,MAAMvU,QAAQ,GAAG,IAAI,CAAC0B,KAAK,CAAC1B,QAAQ;MACpC,IAAIy3B,IAAkB;MAEtB,IAAI,IAAI,CAACpc,KAAK,CAAA,EAAU,CAAC,EAAE;QACzB,MAAMrb,QAAQ,GAAG,IAAI,CAAC0B,KAAK,CAAC1B,QAAQ;QACpC,IAAI,CAACwR,IAAI,CAAA,CAAE;QACXimB,IAAI,GAAG,IAAI,CAACrI,eAAe,EAAE;QAC7B,IAAI,CAACjI,MAAM,CAAA,EAAU,CAAC;QACtBsQ,IAAI,GAAG,IAAI,CAACo+B,eAAe,CAAC71D,QAAQ,EAAEy3B,IAAI,CAAC;QAE3C,MAAMykC,cAAc,GAAG,IAAI,CAACx6D,KAAK,CAAC1B,QAAQ;QAC1C1W,IAAI,CAACmT,UAAU,GAAG,IAAI,CAACsuD,4BAA4B,CAACtzB,IAAI,EAAEz3B,QAAQ,CAAC;QACnE,IACE,IAAI,CAAC7B,eAAe,CAAC,YAAY,EAAE,wBAAwB,CAAC,KAC1D,KAAK,IACP7U,IAAI,CAACmT,UAAU,KAAKg7B,IAAI,EACxB;UACA,IAAI,CAAC52B,KAAK,CACR9H,MAAM,CAAClO,oCAAoC,EAC3CqxE,cACF,CAAC;QACH;MACF,CAAC,MAAM;QACLzkC,IAAI,GAAG,IAAI,CAAC/H,eAAe,CAAC,KAAK,CAAC;QAElC,OAAO,IAAI,CAAC3R,GAAG,CAAA,EAAO,CAAC,EAAE;UACvB,MAAMz0B,IAAI,GAAG,IAAI,CAAC0gC,WAAW,CAAqBhqB,QAAQ,CAAC;UAC3D1W,IAAI,CAACqR,MAAM,GAAG88B,IAAI;UAClB,IAAI,IAAI,CAACpc,KAAK,CAAA,GAAe,CAAC,EAAE;YAC9B,IAAI,CAAC5a,UAAU,CAACC,cAAc,CAC5B,IAAI,CAACgB,KAAK,CAACpL,KAAK,EAChB,IAAI,CAACoL,KAAK,CAAC1B,QACb,CAAC;YACD1W,IAAI,CAAC6+B,QAAQ,GAAG,IAAI,CAACjqB,gBAAgB,EAAE;UACzC,CAAC,MAAM;YACL5U,IAAI,CAAC6+B,QAAQ,GAAG,IAAI,CAACuH,eAAe,CAAC,IAAI,CAAC;UAC5C;UACApmC,IAAI,CAAC6V,QAAQ,GAAG,KAAK;UACrBs4B,IAAI,GAAG,IAAI,CAACr4B,UAAU,CAAC9V,IAAI,EAAE,kBAAkB,CAAC;QAClD;QAEAA,IAAI,CAACmT,UAAU,GAAG,IAAI,CAACsuD,4BAA4B,CAACtzB,IAAI,EAAEz3B,QAAQ,CAAC;MACrE;IACF,CAAC,MAAM;MACL1W,IAAI,CAACmT,UAAU,GAAG,IAAI,CAACy2D,mBAAmB,EAAE;IAC9C;IACA,OAAO,IAAI,CAAC9zD,UAAU,CAAC9V,IAAI,EAAE,WAAW,CAAC;EAC3C;EAEAyhE,4BAA4BA,CAE1BtzB,IAAkB,EAClBz3B,QAAkB,EACJ;IACd,IAAI,IAAI,CAAC+d,GAAG,CAAA,EAAU,CAAC,EAAE;MACvB,MAAMz0B,IAAI,GAAG,IAAI,CAAC0gC,WAAW,CAAmBhqB,QAAQ,CAAC;MACzD1W,IAAI,CAAC2X,MAAM,GAAGw2B,IAAI;MAClBnuC,IAAI,CAAC8X,SAAS,GAAG,IAAI,CAACw9B,4BAA4B,GAAU,CAAC;MAC7D,IAAI,CAACrE,gBAAgB,CAACjxC,IAAI,CAAC8X,SAAS,CAAC;MACrC,OAAO,IAAI,CAAChC,UAAU,CAAC9V,IAAI,EAAE,gBAAgB,CAAC;IAChD;IAEA,OAAOmuC,IAAI;EACb;EAUAmjC,2BAA2BA,CACzBtxE,IAAoD,EACpDukE,OAAgB,EACwB;IACxC,IAAI,CAACr8C,IAAI,CAAA,CAAE;IAEX,IAAI,IAAI,CAACwV,gBAAgB,EAAE,EAAE;MAC3B19B,IAAI,CAACwa,KAAK,GAAG,IAAI;IACnB,CAAC,MAAM;MACLxa,IAAI,CAACwa,KAAK,GAAG,IAAI,CAAC4rB,eAAe,EAAE;MACnC,IAAI,CAACzI,SAAS,CAAA,CAAE;IAClB;IAEA,IAAI,CAAC2mC,mBAAmB,CAACtkE,IAAI,EAAEukE,OAAO,CAAC;IAEvC,OAAO,IAAI,CAACzuD,UAAU,CACpB9V,IAAI,EACJukE,OAAO,GAAG,gBAAgB,GAAG,mBAC/B,CAAC;EACH;EAEAD,mBAAmBA,CACjBtkE,IAAoD,EACpDukE,OAAgB,EAChB;IACA,IAAIz9C,CAAC;IACL,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC1O,KAAK,CAACyW,MAAM,CAACrW,MAAM,EAAE,EAAEsO,CAAC,EAAE;MAC7C,MAAM+rD,GAAG,GAAG,IAAI,CAACz6D,KAAK,CAACyW,MAAM,CAAC/H,CAAC,CAAC;MAChC,IAAI9mB,IAAI,CAACwa,KAAK,IAAI,IAAI,IAAIq4D,GAAG,CAAC1sE,IAAI,KAAKnG,IAAI,CAACwa,KAAK,CAACrU,IAAI,EAAE;QACtD,IAAI0sE,GAAG,CAACxyE,IAAI,IAAI,IAAI,KAAKkkE,OAAO,IAAIsO,GAAG,CAACxyE,IAAI,MAAuB,CAAC,EAAE;UACpE;QACF;QACA,IAAIL,IAAI,CAACwa,KAAK,IAAI+pD,OAAO,EAAE;MAC7B;IACF;IACA,IAAIz9C,CAAC,KAAK,IAAI,CAAC1O,KAAK,CAACyW,MAAM,CAACrW,MAAM,EAAE;MAClC,MAAMvY,IAAI,GAAGskE,OAAO,GAAG,gBAAgB,GAAG,mBAAmB;MAC7D,IAAI,CAAChtD,KAAK,CAAC9H,MAAM,CAACtM,oBAAoB,EAAEnD,IAAI,EAAE;QAAEC;MAAK,CAAC,CAAC;IACzD;EACF;EAEAsxE,sBAAsBA,CACpBvxE,IAAiC,EACZ;IACrB,IAAI,CAACkoB,IAAI,CAAA,CAAE;IACX,IAAI,CAACyV,SAAS,CAAA,CAAE;IAChB,OAAO,IAAI,CAAC7nB,UAAU,CAAC9V,IAAI,EAAE,mBAAmB,CAAC;EACnD;EAEA8yE,qBAAqBA,CAAAA,EAA6B;IAChD,IAAI,CAACj1C,MAAM,CAAA,EAAU,CAAC;IACtB,MAAM5K,GAAG,GAAG,IAAI,CAAC6S,eAAe,EAAE;IAClC,IAAI,CAACjI,MAAM,CAAA,EAAU,CAAC;IACtB,OAAO5K,GAAG;EACZ;EAGAu+C,qBAAqBA,CAEnBxxE,IAAgC,EACZ;IACpB,IAAI,CAACkoB,IAAI,CAAA,CAAE;IACX,IAAI,CAAC9P,KAAK,CAACyW,MAAM,CAAChT,IAAI,CAACwzD,SAAS,CAAC;IAGjCrvE,IAAI,CAAC0U,IAAI,GAIP,IAAI,CAACm6D,kCAAkC,CAAC,MAEtC,IAAI,CAACsC,cAAc,CAAA,CACrB,CAAC;IAEH,IAAI,CAAC/4D,KAAK,CAACyW,MAAM,CAACxI,GAAG,EAAE;IAEvB,IAAI,CAACwX,MAAM,CAAA,EAAU,CAAC;IACtB79B,IAAI,CAACgnB,IAAI,GAAG,IAAI,CAAC8rD,qBAAqB,EAAE;IACxC,IAAI,CAACr+C,GAAG,CAAA,EAAQ,CAAC;IACjB,OAAO,IAAI,CAAC3e,UAAU,CAAC9V,IAAI,EAAE,kBAAkB,CAAC;EAClD;EAUAyxE,iBAAiBA,CAEfzxE,IAAwC,EAC7B;IACX,IAAI,CAACkoB,IAAI,CAAA,CAAE;IACX,IAAI,CAAC9P,KAAK,CAACyW,MAAM,CAAChT,IAAI,CAACwzD,SAAS,CAAC;IAEjC,IAAI0D,OAAO,GAAG,IAAI;IAElB,IAAI,IAAI,CAACh2C,YAAY,CAAU,EAAA,CAAC,IAAI,IAAI,CAACssC,oBAAoB,CAAA,CAAE,EAAE;MAC/D0J,OAAO,GAAG,IAAI,CAAC36D,KAAK,CAAC1B,QAAQ;MAC7B,IAAI,CAACwR,IAAI,CAAA,CAAE;IACb;IACA,IAAI,CAAC2B,KAAK,CAACF,KAAK,EAAgB,CAAC;IACjC,IAAI,CAACkU,MAAM,CAAA,EAAU,CAAC;IAEtB,IAAI,IAAI,CAAC9L,KAAK,CAAA,EAAQ,CAAC,EAAE;MACvB,IAAIghD,OAAO,KAAK,IAAI,EAAE;QACpB,IAAI,CAAC7tE,UAAU,CAAC6tE,OAAO,CAAC;MAC1B;MACA,OAAO,IAAI,CAACC,QAAQ,CAAChzE,IAAI,EAA4B,IAAI,CAAC;IAC5D;IAEA,MAAMizE,aAAa,GAAG,IAAI,CAACl2C,YAAY,IAAQ,CAAC;IAChD;MACE,MAAMm2C,oBAAoB,GACxB,IAAI,CAACn2C,YAAY,CAAA,EAAU,CAAC,IAAI,IAAI,CAAC+zC,gBAAgB,EAAE;MACzD,MAAMqC,yBAAyB,GAC7BD,oBAAoB,IACnB,IAAI,CAACn2C,YAAY,CAAU,GAAA,CAAC,IAAI,IAAI,CAAC8zC,gBAAgB,EAAG;MAC3D,MAAMuC,YAAY,GACfH,aAAa,IAAI,IAAI,CAACxC,uBAAuB,CAAA,CAAE,IAChD0C,yBAAyB;MAE3B,IAAI,IAAI,CAACphD,KAAK,CAAA,EAAQ,CAAC,IAAI,IAAI,CAACA,KAAK,CAAA,EAAU,CAAC,IAAIqhD,YAAY,EAAE;QAChE,MAAMC,QAAQ,GAAG,IAAI,CAAC19D,SAAS,EAAyB;QACxD,IAAItV,IAAI;QACR,IAAI6yE,oBAAoB,EAAE;UACxB7yE,IAAI,GAAG,aAAa;UACpB,IAAI,CAAC,IAAI,CAACgpE,oBAAoB,EAAE,EAAE;YAChC,IAAI,CAAC9xD,KAAK,CAAC9H,MAAM,CAAC9O,2BAA2B,EAAE,IAAI,CAACyX,KAAK,CAAC1B,QAAQ,CAAC;UACrE;UACA,IAAI,CAACwR,IAAI,CAAA,CAAE;QACb,CAAC,MAAM;UACL7nB,IAAI,GAAG,IAAI,CAAC+X,KAAK,CAACpL,KAAK;QACzB;QACA,IAAI,CAACkb,IAAI,CAAA,CAAE;QACX,IAAI,CAACorD,QAAQ,CAACD,QAAQ,EAAE,IAAI,EAAEhzE,IAAI,CAAC;QACnC,MAAM8uB,IAAI,GAAG,IAAI,CAACrZ,UAAU,CAACu9D,QAAQ,EAAE,qBAAqB,CAAC;QAE7D,MAAME,OAAO,GAAG,IAAI,CAACxhD,KAAK,GAAO,CAAC;QAClC,IAAIwhD,OAAO,IAAIJ,yBAAyB,EAAE;UACxC,IAAI,CAAC57D,KAAK,CAAC9H,MAAM,CAAC1M,UAAU,EAAEosB,IAAI,CAAC;QACrC;QACA,IACE,CAACokD,OAAO,IAAI,IAAI,CAACx2C,YAAY,CAAO,GAAA,CAAC,KACrC5N,IAAI,CAAC6wC,YAAY,CAACxnD,MAAM,KAAK,CAAC,EAC9B;UACA,OAAO,IAAI,CAACg7D,UAAU,CAACxzE,IAAI,EAAuBmvB,IAAI,EAAE4jD,OAAO,CAAC;QAClE;QACA,IAAIA,OAAO,KAAK,IAAI,EAAE;UACpB,IAAI,CAAC7tE,UAAU,CAAC6tE,OAAO,CAAC;QAC1B;QACA,OAAO,IAAI,CAACC,QAAQ,CAAChzE,IAAI,EAA4BmvB,IAAI,CAAC;MAC5D;IACF;IAIA,MAAMskD,eAAe,GAAG,IAAI,CAAC12C,YAAY,GAAU,CAAC;IAEpD,MAAMpmB,mBAAmB,GAAG,IAAIipB,gBAAgB,EAAE;IAClD,MAAMzQ,IAAI,GAAG,IAAI,CAAC2W,eAAe,CAAC,IAAI,EAAEnvB,mBAAmB,CAAC;IAC5D,MAAM+8D,OAAO,GAAG,IAAI,CAAC32C,YAAY,IAAO,CAAC;IACzC,IAAI22C,OAAO,EAAE;MAEX,IAAIT,aAAa,EAAE;QACjB,IAAI,CAAC17D,KAAK,CAAC9H,MAAM,CAACxM,QAAQ,EAAEksB,IAAI,CAAC;MACnC;MAEA,IAEE4jD,OAAO,KAAK,IAAI,IAChBU,eAAe,IACftkD,IAAI,CAAClvB,IAAI,KAAK,YAAY,EAC1B;QAKA,IAAI,CAACsX,KAAK,CAAC9H,MAAM,CAACzM,UAAU,EAAEmsB,IAAI,CAAC;MACrC;IACF;IACA,IAAIukD,OAAO,IAAI,IAAI,CAAC3hD,KAAK,CAAA,EAAO,CAAC,EAAE;MACjC,IAAI,CAAC4N,yBAAyB,CAAChpB,mBAAmB,CAAC;MACnD,IAAI,CAACM,YAAY,CAACkY,IAAI,EAAc,IAAI,CAAC;MACzC,MAAMlvB,IAAI,GAAGyzE,OAAO,GAAG,gBAAgB,GAAG,gBAAgB;MAC1D,IAAI,CAACxmB,SAAS,CAAC/9B,IAAI,EAAE;QAAElvB;MAAK,CAAC,CAAC;MAC9B,OAAO,IAAI,CAACuzE,UAAU,CACpBxzE,IAAI,EAEJmvB,IAAI,EACJ4jD,OACF,CAAC;IACH,CAAC,MAAM;MACL,IAAI,CAAC10C,qBAAqB,CAAC1nB,mBAAmB,EAAE,IAAI,CAAC;IACvD;IACA,IAAIo8D,OAAO,KAAK,IAAI,EAAE;MACpB,IAAI,CAAC7tE,UAAU,CAAC6tE,OAAO,CAAC;IAC1B;IACA,OAAO,IAAI,CAACC,QAAQ,CAAChzE,IAAI,EAA4BmvB,IAAI,CAAC;EAC5D;EAGAiuC,sBAAsBA,CAEpBp9D,IAAmC,EACnC0T,OAAgB,EAChBigE,oBAA6B,EACN;IACvB,IAAI,CAACzrD,IAAI,CAAA,CAAE;IACX,OAAO,IAAI,CAAC6jD,aAAa,CACvB/rE,IAAI,EACJ4zE,KACGD,oBAAoB,OAA0C,CAAC,CAAC,IAChEjgE,OAAO,OAA6B,CAAC,CAC1C,CAAC;EACH;EAGAg+D,gBAAgBA,CAAe1xE,IAA2B,EAAE;IAC1D,IAAI,CAACkoB,IAAI,CAAA,CAAE;IACXloB,IAAI,CAACgnB,IAAI,GAAG,IAAI,CAAC8rD,qBAAqB,EAAE;IAGxC9yE,IAAI,CAAC0uC,UAAU,GAAG,IAAI,CAAC81B,+CAA+C,EAAE;IACxExkE,IAAI,CAAC+uC,SAAS,GAAG,IAAI,CAACta,GAAG,CAAA,EAAS,CAAC,GAC/B,IAAI,CAAC+vC,+CAA+C,CAAE,CAAA,GACtD,IAAI;IACR,OAAO,IAAI,CAAC1uD,UAAU,CAAC9V,IAAI,EAAE,aAAa,CAAC;EAC7C;EAEA2xE,oBAAoBA,CAAe3xE,IAA+B,EAAE;IAClE,IACE,CAAC,IAAI,CAACs/B,SAAS,CAAC5C,SAAS,IACzB,EAAE,IAAI,CAAC9qB,WAAW,IAAyC,CAAC,EAC5D;MACA,IAAI,CAAC2F,KAAK,CAAC9H,MAAM,CAACpM,aAAa,EAAE,IAAI,CAAC+U,KAAK,CAAC1B,QAAQ,CAAC;IACvD;IAEA,IAAI,CAACwR,IAAI,CAAA,CAAE;IAMX,IAAI,IAAI,CAACwV,gBAAgB,EAAE,EAAE;MAC3B19B,IAAI,CAAC8O,QAAQ,GAAG,IAAI;IACtB,CAAC,MAAM;MACL9O,IAAI,CAAC8O,QAAQ,GAAG,IAAI,CAACg3B,eAAe,EAAE;MACtC,IAAI,CAACnI,SAAS,CAAA,CAAE;IAClB;IAEA,OAAO,IAAI,CAAC7nB,UAAU,CAAC9V,IAAI,EAAE,iBAAiB,CAAC;EACjD;EAGA4xE,oBAAoBA,CAAe5xE,IAA+B,EAAE;IAClE,IAAI,CAACkoB,IAAI,CAAA,CAAE;IACXloB,IAAI,CAAC6zE,YAAY,GAAG,IAAI,CAACf,qBAAqB,EAAE;IAChD,MAAMgB,KAAiC,GAAI9zE,IAAI,CAAC8zE,KAAK,GAAG,EAAG;IAC3D,IAAI,CAACj2C,MAAM,CAAA,CAAU,CAAC;IACtB,IAAI,CAACzlB,KAAK,CAACyW,MAAM,CAAChT,IAAI,CAACyzD,WAAW,CAAC;IACnC,IAAI,CAACzlD,KAAK,CAACF,KAAK,EAAgB,CAAC;IAMjC,IAAIoqD,GAAG;IACP,KAAK,IAAIC,UAAU,EAAE,CAAC,IAAI,CAACjiD,KAAK,CAAU,CAAA,CAAC,GAAI;MAC7C,IAAI,IAAI,CAACA,KAAK,CAAS,EAAA,CAAC,IAAI,IAAI,CAACA,KAAK,CAAY,EAAA,CAAC,EAAE;QACnD,MAAMkiD,MAAM,GAAG,IAAI,CAACliD,KAAK,GAAS,CAAC;QACnC,IAAIgiD,GAAG,EAAE,IAAI,CAACj+D,UAAU,CAACi+D,GAAG,EAAE,YAAY,CAAC;QAE3CD,KAAK,CAACj4D,IAAI,CAAEk4D,GAAG,GAAG,IAAI,CAACp+D,SAAS,CAAiB,CAAA,CAAC;QAClDo+D,GAAG,CAACrlC,UAAU,GAAG,EAAE;QACnB,IAAI,CAACxmB,IAAI,CAAA,CAAE;QACX,IAAI+rD,MAAM,EAAE;UACVF,GAAG,CAAC/sD,IAAI,GAAG,IAAI,CAAC8e,eAAe,EAAE;QACnC,CAAC,MAAM;UACL,IAAIkuC,UAAU,EAAE;YACd,IAAI,CAACz8D,KAAK,CACR9H,MAAM,CAACvI,wBAAwB,EAC/B,IAAI,CAACkR,KAAK,CAACC,eACb,CAAC;UACH;UACA27D,UAAU,GAAG,IAAI;UACjBD,GAAG,CAAC/sD,IAAI,GAAG,IAAI;QACjB;QACA,IAAI,CAAC6W,MAAM,CAAA,EAAS,CAAC;MACvB,CAAC,MAAM;QACL,IAAIk2C,GAAG,EAAE;UACPA,GAAG,CAACrlC,UAAU,CAAC7yB,IAAI,CAAC,IAAI,CAACo1D,sBAAsB,CAAE,CAAA,CAAC;QACpD,CAAC,MAAM;UACL,IAAI,CAAC/rE,UAAU,CAAA,CAAE;QACnB;MACF;IACF;IACA,IAAI,CAAC2kB,KAAK,CAACD,IAAI,EAAE;IACjB,IAAImqD,GAAG,EAAE,IAAI,CAACj+D,UAAU,CAACi+D,GAAG,EAAE,YAAY,CAAC;IAC3C,IAAI,CAAC7rD,IAAI,CAAA,CAAE;IACX,IAAI,CAAC9P,KAAK,CAACyW,MAAM,CAACxI,GAAG,EAAE;IACvB,OAAO,IAAI,CAACvQ,UAAU,CAAC9V,IAAI,EAAE,iBAAiB,CAAC;EACjD;EAEA6xE,mBAAmBA,CAAe7xE,IAA8B,EAAE;IAChE,IAAI,CAACkoB,IAAI,CAAA,CAAE;IACX,IAAI,IAAI,CAACsV,qBAAqB,EAAE,EAAE;MAChC,IAAI,CAACjmB,KAAK,CAAC9H,MAAM,CAACtI,iBAAiB,EAAE,IAAI,CAACiR,KAAK,CAACsB,aAAa,CAAC;IAChE;IACA1Z,IAAI,CAAC8O,QAAQ,GAAG,IAAI,CAACg3B,eAAe,EAAE;IACtC,IAAI,CAACnI,SAAS,CAAA,CAAE;IAChB,OAAO,IAAI,CAAC7nB,UAAU,CAAC9V,IAAI,EAAE,gBAAgB,CAAC;EAChD;EAEA+hE,qBAAqBA,CAAAA,EAA0B;IAC7C,MAAMv0B,KAAK,GAAG,IAAI,CAACmG,gBAAgB,EAAE;IAErC,IAAI,CAAC9pB,KAAK,CAACF,KAAK,CACd,IAAI,CAACzY,OAAO,CAACH,MAAM,IAAIy8B,KAAK,CAACvtC,IAAI,KAAK,YAAY,OAE9C,CACN,CAAC;IACD,IAAI,CAACitD,SAAS,CACZ1f,KAAK,EACL;MAAEvtC,IAAI,EAAE;IAAc,CAAC,GAEzB,CAAC;IAED,OAAOutC,KAAK;EACd;EAEAskC,iBAAiBA,CAEf9xE,IAA4B,EACZ;IAChB,IAAI,CAACkoB,IAAI,CAAA,CAAE;IAEXloB,IAAI,CAACk0E,KAAK,GAAG,IAAI,CAACxP,UAAU,EAAE;IAC9B1kE,IAAI,CAACm0E,OAAO,GAAG,IAAI;IAEnB,IAAI,IAAI,CAACpiD,KAAK,CAAA,EAAU,CAAC,EAAE;MACzB,MAAMqiD,MAAM,GAAG,IAAI,CAACz+D,SAAS,EAAiB;MAC9C,IAAI,CAACuS,IAAI,CAAA,CAAE;MACX,IAAI,IAAI,CAAC6J,KAAK,CAAA,EAAU,CAAC,EAAE;QACzB,IAAI,CAAC8L,MAAM,CAAA,EAAU,CAAC;QACtBu2C,MAAM,CAAC5mC,KAAK,GAAG,IAAI,CAACu0B,qBAAqB,EAAE;QAC3C,IAAI,CAAClkC,MAAM,CAAA,EAAU,CAAC;MACxB,CAAC,MAAM;QACLu2C,MAAM,CAAC5mC,KAAK,GAAG,IAAI;QACnB,IAAI,CAAC3jB,KAAK,CAACF,KAAK,EAAgB,CAAC;MACnC;MAGAyqD,MAAM,CAAC1/D,IAAI,GAGT,IAAI,CAACm6D,kCAAkC,CAAC,MAEtC,IAAI,CAACnK,UAAU,CAAC,KAAK,EAAE,KAAK,CAC9B,CAAC;MAEH,IAAI,CAAC76C,KAAK,CAACD,IAAI,EAAE;MACjB5pB,IAAI,CAACm0E,OAAO,GAAG,IAAI,CAACr+D,UAAU,CAACs+D,MAAM,EAAE,aAAa,CAAC;IACvD;IAEAp0E,IAAI,CAACq0E,SAAS,GAAG,IAAI,CAAC5/C,GAAG,CAAA,EAAY,CAAC,GAAG,IAAI,CAACiwC,UAAU,CAAE,CAAA,GAAG,IAAI;IAEjE,IAAI,CAAC1kE,IAAI,CAACm0E,OAAO,IAAI,CAACn0E,IAAI,CAACq0E,SAAS,EAAE;MACpC,IAAI,CAAC98D,KAAK,CAAC9H,MAAM,CAACrI,gBAAgB,EAAEpH,IAAI,CAAC;IAC3C;IAEA,OAAO,IAAI,CAAC8V,UAAU,CAAC9V,IAAI,EAAE,cAAc,CAAC;EAC9C;EAIAs9D,iBAAiBA,CAEft9D,IAAmC,EACnCK,IAAuD,EACvD0/D,uBAAgC,GAAG,KAAK,EACjB;IACvB,IAAI,CAAC73C,IAAI,CAAA,CAAE;IACX,IAAI,CAACorD,QAAQ,CAACtzE,IAAI,EAAE,KAAK,EAAEK,IAAI,EAAE0/D,uBAAuB,CAAC;IACzD,IAAI,CAACpiC,SAAS,CAAA,CAAE;IAChB,OAAO,IAAI,CAAC7nB,UAAU,CAAC9V,IAAI,EAAE,qBAAqB,CAAC;EACrD;EAGA+xE,mBAAmBA,CAEjB/xE,IAA8B,EACZ;IAClB,IAAI,CAACkoB,IAAI,CAAA,CAAE;IACXloB,IAAI,CAACgnB,IAAI,GAAG,IAAI,CAAC8rD,qBAAqB,EAAE;IACxC,IAAI,CAAC16D,KAAK,CAACyW,MAAM,CAAChT,IAAI,CAACwzD,SAAS,CAAC;IAGjCrvE,IAAI,CAAC0U,IAAI,GAIP,IAAI,CAACm6D,kCAAkC,CAAC,MAEtC,IAAI,CAACsC,cAAc,CAAA,CACrB,CAAC;IAEH,IAAI,CAAC/4D,KAAK,CAACyW,MAAM,CAACxI,GAAG,EAAE;IAEvB,OAAO,IAAI,CAACvQ,UAAU,CAAC9V,IAAI,EAAE,gBAAgB,CAAC;EAChD;EAEAgyE,kBAAkBA,CAEhBhyE,IAA6B,EACZ;IACjB,IAAI,IAAI,CAACoY,KAAK,CAACgP,MAAM,EAAE;MACrB,IAAI,CAAC7P,KAAK,CAAC9H,MAAM,CAAC5D,UAAU,EAAE,IAAI,CAACuM,KAAK,CAAC1B,QAAQ,CAAC;IACpD;IACA,IAAI,CAACwR,IAAI,CAAA,CAAE;IACXloB,IAAI,CAACqR,MAAM,GAAG,IAAI,CAACyhE,qBAAqB,EAAE;IAG1C9yE,IAAI,CAAC0U,IAAI,GAKP,IAAI,CAACm6D,kCAAkC,CAAC,MAEtC,IAAI,CAACsC,cAAc,CAAA,CACrB,CAAC;IAEH,OAAO,IAAI,CAACr7D,UAAU,CAAC9V,IAAI,EAAE,eAAe,CAAC;EAC/C;EAEAiyE,mBAAmBA,CAACjyE,IAA8B,EAAoB;IACpE,IAAI,CAACkoB,IAAI,CAAA,CAAE;IACX,OAAO,IAAI,CAACpS,UAAU,CAAC9V,IAAI,EAAE,gBAAgB,CAAC;EAChD;EAGAqyE,qBAAqBA,CAEnBryE,IAAgC,EAChCoyE,SAAiB,EACjBjkC,IAAkB,EAClBp8B,KAAyB,EACL;IACpB,KAAK,MAAMyI,KAAK,IAAI,IAAI,CAACpC,KAAK,CAACyW,MAAM,EAAE;MACrC,IAAIrU,KAAK,CAACrU,IAAI,KAAKisE,SAAS,EAAE;QAC5B,IAAI,CAAC76D,KAAK,CAAC9H,MAAM,CAACjK,kBAAkB,EAAE2oC,IAAI,EAAE;UAC1C1oC,SAAS,EAAE2sE;QACb,CAAC,CAAC;MACJ;IACF;IAEA,MAAM/xE,IAAI,GAAGmlB,WAAW,CAAC,IAAI,CAACpN,KAAK,CAACnY,IAAI,CAAC,OAErC,IAAI,CAAC8xB,KAAK,CAAA,EAAW,CAAC,OAEpB,IAAI;IACV,KAAK,IAAIjL,CAAC,GAAG,IAAI,CAAC1O,KAAK,CAACyW,MAAM,CAACrW,MAAM,GAAG,CAAC,EAAEsO,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MACtD,MAAMtM,KAAK,GAAG,IAAI,CAACpC,KAAK,CAACyW,MAAM,CAAC/H,CAAC,CAAC;MAClC,IAAItM,KAAK,CAAC85D,cAAc,KAAKt0E,IAAI,CAACpC,KAAK,EAAE;QACvC4c,KAAK,CAAC85D,cAAc,GAAG,IAAI,CAACzpD,iBAAiB,CAAC,IAAI,CAACzS,KAAK,CAACxa,KAAK,CAAC;QAC/D4c,KAAK,CAACna,IAAI,GAAGA,IAAI;MACnB,CAAC,MAAM;QACL;MACF;IACF;IAEA,IAAI,CAAC+X,KAAK,CAACyW,MAAM,CAAChT,IAAI,CAAC;MACrB1V,IAAI,EAAEisE,SAAS;MACf/xE,IAAI,EAAEA,IAAI;MACVi0E,cAAc,EAAE,IAAI,CAACzpD,iBAAiB,CAAC,IAAI,CAACzS,KAAK,CAACxa,KAAK;IACzD,CAAC,CAAC;IAEFoC,IAAI,CAAC0U,IAAI,GACP3C,KAAK,IAA0C,GAC3C,IAAI,CAACyyD,+CAA+C,CAAC,IAAI,CAAC,GAC1D,IAAI,CAAC2M,cAAc,CAAA,CAAE;IAE3B,IAAI,CAAC/4D,KAAK,CAACyW,MAAM,CAACxI,GAAG,EAAE;IACvBrmB,IAAI,CAACwa,KAAK,GAAG2zB,IAAI;IACjB,OAAO,IAAI,CAACr4B,UAAU,CAAC9V,IAAI,EAAE,kBAAkB,CAAC;EAClD;EAEAkuC,wBAAwBA,CACtBluC,IAAmC,EACnCmuC,IAAkB,EAElBj2B,UAAgC,EAChC;IACAlY,IAAI,CAACmT,UAAU,GAAGg7B,IAAI;IACtB,IAAI,CAACxQ,SAAS,CAAA,CAAE;IAChB,OAAO,IAAI,CAAC7nB,UAAU,CAAC9V,IAAI,EAAE,qBAAqB,CAAC;EACrD;EAMA0kE,UAAUA,CAERtwD,eAAwB,GAAG,KAAK,EAChCuwD,qBAA8B,GAAG,IAAI,EACrCrwD,eAA2D,EACzC;IAClB,MAAMtU,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAoB;IAC/C,IAAIvB,eAAe,EAAE;MACnB,IAAI,CAACgE,KAAK,CAAC4W,YAAY,CAAC4G,KAAK,EAAE;IACjC;IACA,IAAI,CAACiI,MAAM,CAAA,CAAU,CAAC;IACtB,IAAI8mC,qBAAqB,EAAE;MACzB,IAAI,CAAC96C,KAAK,CAACF,KAAK,EAAgB,CAAC;IACnC;IACA,IAAI,CAACxV,cAAc,CACjBnU,IAAI,EACJoU,eAAe,EACf,KAAK,EAELE,CAAAA,EAAAA,eACF,CAAC;IACD,IAAIqwD,qBAAqB,EAAE;MACzB,IAAI,CAAC96C,KAAK,CAACD,IAAI,EAAE;IACnB;IACA,OAAO,IAAI,CAAC9T,UAAU,CAAC9V,IAAI,EAAE,gBAAgB,CAAC;EAChD;EAEAgU,gBAAgBA,CAACT,IAAiB,EAAW;IAC3C,OACEA,IAAI,CAACtT,IAAI,KAAK,qBAAqB,IACnCsT,IAAI,CAACJ,UAAU,CAAClT,IAAI,KAAK,eAAe,IACxC,CAACsT,IAAI,CAACJ,UAAU,CAACE,KAAK,CAACa,aAAa;EAExC;EAEAC,cAAcA,CAEZnU,IAAkC,EAClCoU,eAA2C,EAC3CC,QAAiB,EACjBxW,GAAc,EACdyW,eAA2D,EACrD;IACN,MAAMI,IAAkC,GAAI1U,IAAI,CAAC0U,IAAI,GAAG,EAAG;IAC3D,MAAMF,UAA8C,GAAIxU,IAAI,CAACwU,UAAU,GACrE,EAAG;IACL,IAAI,CAAC0nD,2BAA2B,CAC9BxnD,IAAI,EACJN,eAAe,GAAGI,UAAU,GAAG3E,SAAS,EACxCwE,QAAQ,EACRxW,GAAG,EACHyW,eACF,CAAC;EACH;EAKA4nD,2BAA2BA,CAEzBxnD,IAAmB,EACnBF,UAA4C,EAC5CH,QAAiB,EACjBxW,GAAc,EACdyW,eAA2D,EACrD;IACN,MAAM2tD,SAAS,GAAG,IAAI,CAAC7pD,KAAK,CAACgP,MAAM;IACnC,IAAI4mD,sBAAsB,GAAG,KAAK;IAClC,IAAIuG,kBAAkB,GAAG,KAAK;IAE9B,OAAO,CAAC,IAAI,CAACxiD,KAAK,CAACl0B,GAAG,CAAC,EAAE;MACvB,MAAM0V,IAAI,GAAGc,QAAQ,GACjB,IAAI,CAAC08D,eAAe,CAAA,CAAE,GACtB,IAAI,CAACE,sBAAsB,EAAE;MAEjC,IAAIz8D,UAAU,IAAI,CAAC+/D,kBAAkB,EAAE;QACrC,IAAI,IAAI,CAACvgE,gBAAgB,CAACT,IAAI,CAAC,EAAE;UAC/B,MAAML,SAAS,GAAG,IAAI,CAACq9D,eAAe,CAACh9D,IAAI,CAAC;UAC5CiB,UAAU,CAACqH,IAAI,CAAC3I,SAAS,CAAC;UAE1B,IACE,CAAC86D,sBAAsB,IACvB96D,SAAS,CAAClG,KAAK,CAACA,KAAK,KAAK,YAAY,EACtC;YACAghE,sBAAsB,GAAG,IAAI;YAC7B,IAAI,CAACv4C,SAAS,CAAC,IAAI,CAAC;UACtB;UAEA;QACF;QACA8+C,kBAAkB,GAAG,IAAI;QAEzB,IAAI,CAACn8D,KAAK,CAAC4W,YAAY,CAAC4G,KAAK,EAAE;MACjC;MACAlhB,IAAI,CAACmH,IAAI,CAACtI,IAAI,CAAC;IACjB;IAEAe,eAAe,IAAA,IAAA,IAAfA,eAAe,CAAE0/B,IAAI,CAAC,IAAI,EAAEg6B,sBAAsB,CAAC;IAEnD,IAAI,CAAC/L,SAAS,EAAE;MACd,IAAI,CAACxsC,SAAS,CAAC,KAAK,CAAC;IACvB;IAEA,IAAI,CAACvN,IAAI,CAAA,CAAE;EACb;EAMA8qD,QAAQA,CAENhzE,IAA4B,EAC5BmvB,IAAkD,EAClC;IAChBnvB,IAAI,CAACmvB,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACwO,SAAS,CAAgB,KAAK,CAAC;IACpC39B,IAAI,CAACgnB,IAAI,GAAG,IAAI,CAAC+K,KAAK,CAAA,EAAQ,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC+T,eAAe,EAAE;IAC/D,IAAI,CAACnI,SAAS,CAAgB,KAAK,CAAC;IACpC39B,IAAI,CAACupE,MAAM,GAAG,IAAI,CAACx3C,KAAK,CAAA,EAAU,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC+T,eAAe,EAAE;IACnE,IAAI,CAACjI,MAAM,CAAA,EAAU,CAAC;IAGtB79B,IAAI,CAAC0U,IAAI,GAIP,IAAI,CAACm6D,kCAAkC,CAAC,MAEtC,IAAI,CAACsC,cAAc,CAAA,CACrB,CAAC;IAEH,IAAI,CAACtnD,KAAK,CAACD,IAAI,EAAE;IACjB,IAAI,CAACxR,KAAK,CAACyW,MAAM,CAACxI,GAAG,EAAE;IAEvB,OAAO,IAAI,CAACvQ,UAAU,CAAC9V,IAAI,EAAE,cAAc,CAAC;EAC9C;EAKAwzE,UAAUA,CAERxzE,IAAuB,EACvBmvB,IAAiD,EACjD4jD,OAAyB,EACd;IACX,MAAMQ,OAAO,GAAG,IAAI,CAACxhD,KAAK,GAAO,CAAC;IAClC,IAAI,CAAC7J,IAAI,CAAA,CAAE;IAEX,IAAIqrD,OAAO,EAAE;MACX,IAAIR,OAAO,KAAK,IAAI,EAAE,IAAI,CAAC7tE,UAAU,CAAC6tE,OAAO,CAAC;IAChD,CAAC,MAAM;MACL/yE,IAAI,CAACw0E,KAAK,GAAGzB,OAAO,KAAK,IAAI;IAC/B;IAEA,IACE5jD,IAAI,CAAClvB,IAAI,KAAK,qBAAqB,IACnCkvB,IAAI,CAAC6wC,YAAY,CAAC,CAAC,CAAC,CAAC7wC,IAAI,IAAI,IAAI,KAChC,CAACokD,OAAO,IACP,CAAC,IAAI,CAACriE,OAAO,CAACH,MAAM,IACpB,IAAI,CAACqH,KAAK,CAACgP,MAAM,IACjB+H,IAAI,CAAC9uB,IAAI,KAAK,KAAK,IACnB8uB,IAAI,CAAC6wC,YAAY,CAAC,CAAC,CAAC,CAAChrD,EAAE,CAAC/U,IAAI,KAAK,YAAY,CAAC,EAChD;MACA,IAAI,CAACsX,KAAK,CAAC9H,MAAM,CAAC3M,sBAAsB,EAAEqsB,IAAI,EAAE;QAC9ClvB,IAAI,EAAEszE,OAAO,GAAG,gBAAgB,GAAG;MACrC,CAAC,CAAC;IACJ;IAEA,IAAIpkD,IAAI,CAAClvB,IAAI,KAAK,mBAAmB,EAAE;MACrC,IAAI,CAACsX,KAAK,CAAC9H,MAAM,CAAC9K,UAAU,EAAEwqB,IAAI,EAAE;QAClCvqB,QAAQ,EAAE;UAAE3E,IAAI,EAAE;QAAe;MACnC,CAAC,CAAC;IACJ;IAEAD,IAAI,CAAC+wC,IAAI,GAAG5hB,IAAI;IAChBnvB,IAAI,CAACopC,KAAK,GAAGmqC,OAAO,GAChB,IAAI,CAACztC,eAAe,EAAE,GACtB,IAAI,CAACmJ,uBAAuB,EAAE;IAClC,IAAI,CAACpR,MAAM,CAAA,EAAU,CAAC;IAGtB79B,IAAI,CAAC0U,IAAI,GAIP,IAAI,CAACm6D,kCAAkC,CAAC,MAEtC,IAAI,CAACsC,cAAc,CAAA,CACrB,CAAC;IAEH,IAAI,CAACtnD,KAAK,CAACD,IAAI,EAAE;IACjB,IAAI,CAACxR,KAAK,CAACyW,MAAM,CAACxI,GAAG,EAAE;IAEvB,OAAO,IAAI,CAACvQ,UAAU,CAAC9V,IAAI,EAAEuzE,OAAO,GAAG,gBAAgB,GAAG,gBAAgB,CAAC;EAC7E;EAIAD,QAAQA,CAENtzE,IAAmC,EACnCy0E,KAAc,EACdp0E,IAAuD,EACvD0/D,uBAAgC,GAAG,KAAK,EACT;IAC/B,MAAMC,YAAoC,GAAIhgE,IAAI,CAACggE,YAAY,GAAG,EAAG;IACrEhgE,IAAI,CAACK,IAAI,GAAGA,IAAI;IAChB,SAAS;MACP,MAAMyzC,IAAI,GAAG,IAAI,CAACn+B,SAAS,EAAwB;MACnD,IAAI,CAACk+B,UAAU,CAACC,IAAI,EAAEzzC,IAAI,CAAC;MAC3ByzC,IAAI,CAAC3kB,IAAI,GAAG,CAAC,IAAI,CAACsF,GAAG,CAAA,EAAM,CAAC,GACxB,IAAI,GACJggD,KAAK,GACH,IAAI,CAAC/M,0BAA0B,CAAE,CAAA,GACjC,IAAI,CAACz4B,uBAAuB,CAAA,CAAE;MAEpC,IAAI6E,IAAI,CAAC3kB,IAAI,KAAK,IAAI,IAAI,CAAC4wC,uBAAuB,EAAE;QAClD,IACEjsB,IAAI,CAAC9+B,EAAE,CAAC/U,IAAI,KAAK,YAAY,IAC7B,EAAEw0E,KAAK,KAAK,IAAI,CAAC1iD,KAAK,CAAA,EAAO,CAAC,IAAI,IAAI,CAACgL,YAAY,CAAO,GAAA,CAAC,CAAC,CAAC,EAC7D;UACA,IAAI,CAACxlB,KAAK,CACR9H,MAAM,CAACnO,6BAA6B,EACpC,IAAI,CAAC8W,KAAK,CAACsB,aAAa,EACxB;YACErZ,IAAI,EAAE;UACR,CACF,CAAC;QACH,CAAC,MAAM,IACL,CAACA,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,aAAa,KAC/D,EAAE,IAAI,CAAC0xB,KAAK,CAAA,EAAO,CAAC,IAAI,IAAI,CAACgL,YAAY,CAAA,GAAO,CAAC,CAAC,EAClD;UACA,IAAI,CAACxlB,KAAK,CACR9H,MAAM,CAACnO,6BAA6B,EACpC,IAAI,CAAC8W,KAAK,CAACsB,aAAa,EACxB;YAAErZ;UAAK,CACT,CAAC;QACH;MACF;MACA2/D,YAAY,CAACnkD,IAAI,CAAC,IAAI,CAAC/F,UAAU,CAACg+B,IAAI,EAAE,oBAAoB,CAAC,CAAC;MAC9D,IAAI,CAAC,IAAI,CAACrf,GAAG,CAAA,EAAS,CAAC,EAAE;IAC3B;IACA,OAAOz0B,IAAI;EACb;EAEA6zC,UAAUA,CAERC,IAAkC,EAClCzzC,IAAuD,EACjD;IACN,MAAM2U,EAAE,GAAG,IAAI,CAAC2+B,gBAAgB,EAAE;IAClC,IAAItzC,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,aAAa,EAAE;MAC9C,IAAI2U,EAAE,CAAC/U,IAAI,KAAK,cAAc,IAAI+U,EAAE,CAAC/U,IAAI,KAAK,eAAe,EAAE;QAC7D,IAAI,CAACsX,KAAK,CAAC9H,MAAM,CAAC1E,iCAAiC,EAAEiK,EAAE,CAAC/G,GAAG,CAACrQ,KAAK,CAAC;MACpE;IACF;IACA,IAAI,CAACsvD,SAAS,CACZl4C,EAAE,EACF;MAAE/U,IAAI,EAAE;IAAqB,CAAC,EAC9BI,IAAI,KAAK,KAAK,WAChB,CAAC;IACDyzC,IAAI,CAAC9+B,EAAE,GAAGA,EAAE;EACd;EAGAq2D,4BAA4BA,CAE1BrrE,IAAkC,EACZ;IACtB,OAAO,IAAI,CAAC+rE,aAAa,CAAC/rE,IAAI,GAAyB,CAAC;EAC1D;EAKA+rE,aAAaA,CAEX/rE,IAAe,EACf+R,KAAwB,IAA+B,EACpD;IACH,MAAM2iE,kBAAkB,GAAG3iE,KAAK,IAAuC;IACvE,MAAM4iE,aAAa,GAAG,CAAC,EAAE5iE,KAAK,IAAgC,CAAC;IAC/D,MAAM8yD,SAAS,GAAG8P,aAAa,IAAI,EAAE5iE,KAAK,IAA+B,CAAC;IAC1E,MAAM2B,OAAO,GAAG,CAAC,EAAE3B,KAAK,IAA0B,CAAC;IAEnD,IAAI,CAAC0B,YAAY,CAACzT,IAAI,EAAE0T,OAAO,CAAC;IAEhC,IAAI,IAAI,CAACqe,KAAK,CAAA,EAAQ,CAAC,EAAE;MACvB,IAAI2iD,kBAAkB,EAAE;QACtB,IAAI,CAACn9D,KAAK,CACR9H,MAAM,CAACvM,iCAAiC,EACxC,IAAI,CAACkV,KAAK,CAAC1B,QACb,CAAC;MACH;MACA,IAAI,CAACwR,IAAI,CAAA,CAAE;MACXloB,IAAI,CAAC8tE,SAAS,GAAG,IAAI;IACvB;IAEA,IAAI6G,aAAa,EAAE;MACjB30E,IAAI,CAACgV,EAAE,GAAG,IAAI,CAAC4vD,eAAe,CAACC,SAAS,CAAC;IAC3C;IAEA,MAAM/G,yBAAyB,GAAG,IAAI,CAAC1lD,KAAK,CAACgX,sBAAsB;IACnE,IAAI,CAAChX,KAAK,CAACgX,sBAAsB,GAAG,KAAK;IACzC,IAAI,CAACvF,KAAK,CAACF,KAAK,EAAmB,CAAC;IACpC,IAAI,CAAC2V,SAAS,CAAC3V,KAAK,CAACiT,aAAa,CAAClpB,OAAO,EAAE1T,IAAI,CAAC8tE,SAAS,CAAC,CAAC;IAE5D,IAAI,CAAC6G,aAAa,EAAE;MAClB30E,IAAI,CAACgV,EAAE,GAAG,IAAI,CAAC4vD,eAAe,EAAE;IAClC;IAEA,IAAI,CAAChxB,mBAAmB,CAAC5zC,IAAI,EAAsB,KAAK,CAAC;IAKzD,IAAI,CAAC6uE,kCAAkC,CAAC,MAAM;MAE5C,IAAI,CAAC9gC,0BAA0B,CAC7B/tC,IAAI,EACJ20E,aAAa,GAAG,qBAAqB,GAAG,oBAC1C,CAAC;IACH,CAAC,CAAC;IAEF,IAAI,CAACr1C,SAAS,CAAC1V,IAAI,EAAE;IACrB,IAAI,CAACC,KAAK,CAACD,IAAI,EAAE;IAEjB,IAAI+qD,aAAa,IAAI,CAACD,kBAAkB,EAAE;MAIxC,IAAI,CAACnW,2BAA2B,CAACv+D,IAAS,CAAC;IAC7C;IAEA,IAAI,CAACoY,KAAK,CAACgX,sBAAsB,GAAG0uC,yBAAyB;IAC7D,OAAO99D,IAAI;EACb;EAEA4kE,eAAeA,CAACC,SAAmB,EAAmC;IACpE,OAAOA,SAAS,IAAI7/C,iBAAiB,CAAC,IAAI,CAAC5M,KAAK,CAACnY,IAAI,CAAC,GAClD,IAAI,CAACmmC,eAAe,CAAE,CAAA,GACtB,IAAI;EACV;EAEAwN,mBAAmBA,CAEjB5zC,IAAwB,EACxBuV,aAAuB,EACjB;IACN,IAAI,CAACsoB,MAAM,CAAA,EAAU,CAAC;IACtB,IAAI,CAAC2B,eAAe,CAAC7V,KAAK,CAACsS,4BAA4B,CAAE,CAAA,CAAC;IAC1Dj8B,IAAI,CAAC+T,MAAM,GAAG,IAAI,CAACs4C,gBAAgB,SAGjCC,KACG/2C,aAAa,OAAiD,CAAC,CACpE,CAAC;IAED,IAAI,CAACiqB,eAAe,CAAC5V,IAAI,EAAE;EAC7B;EAEA20C,2BAA2BA,CAACv+D,IAAgB,EAAQ;IAClD,IAAI,CAACA,IAAI,CAACgV,EAAE,EAAE;IAMd,IAAI,CAAC6U,KAAK,CAACC,WAAW,CACpB9pB,IAAI,CAACgV,EAAE,CAAC7O,IAAI,EACZ,CAAC,IAAI,CAAC+K,OAAO,CAACH,MAAM,IAAI,IAAI,CAACqH,KAAK,CAACgP,MAAM,IAAIpnB,IAAI,CAAC8tE,SAAS,IAAI9tE,IAAI,CAAC40C,KAAK,GACrE,IAAI,CAAC/qB,KAAK,CAACL,mBAAmB,WAEJ,KACD,EAC7BxpB,IAAI,CAACgV,EAAE,CAAC/G,GAAG,CAACrQ,KACd,CAAC;EACH;EAKAy/D,UAAUA,CAERr9D,IAAe,EACfswC,WAAiD,EACjDC,UAAoB,EACjB;IACH,IAAI,CAACroB,IAAI,CAAA,CAAE;IAGX,MAAM+5C,SAAS,GAAG,IAAI,CAAC7pD,KAAK,CAACgP,MAAM;IACnC,IAAI,CAAChP,KAAK,CAACgP,MAAM,GAAG,IAAI;IAExB,IAAI,CAACipB,YAAY,CAACrwC,IAAI,EAAEswC,WAAW,EAAEC,UAAU,CAAC;IAChD,IAAI,CAACyB,eAAe,CAAChyC,IAAI,CAAC;IAE1BA,IAAI,CAAC0U,IAAI,GAAG,IAAI,CAACowD,cAAc,CAAC,CAAC,CAAC9kE,IAAI,CAACwR,UAAU,EAAEywD,SAAS,CAAC;IAE7D,OAAO,IAAI,CAACnsD,UAAU,CACpB9V,IAAI,EACJswC,WAAW,GAAG,kBAAkB,GAAG,iBACrC,CAAC;EACH;EAEAoB,eAAeA,CAAAA,EAAY;IACzB,OAAO,IAAI,CAAC3f,KAAK,CAAM,EAAA,CAAC,IAAI,IAAI,CAACA,KAAK,CAAA,EAAQ,CAAC,IAAI,IAAI,CAACA,KAAK,EAAU,CAAC;EAC1E;EAEA0f,aAAaA,CAAAA,EAAY;IACvB,OAAO,IAAI,CAAC1f,KAAK,CAAA,EAAU,CAAC;EAC9B;EAEAhc,iBAAiBA,CAAClP,GAAiC,EAAW;IAC5D,OACGA,GAAG,CAAC5G,IAAI,KAAK,YAAY,IAAI4G,GAAG,CAACV,IAAI,KAAK,aAAa,IACvDU,GAAG,CAAC5G,IAAI,KAAK,eAAe,IAAI4G,GAAG,CAACmG,KAAK,KAAK,aAAc;EAEjE;EAEA2kC,sBAAsBA,CAAC79B,MAAuC,EAAW;IACvE,OACE,CAACA,MAAM,CAAC+B,QAAQ,IAAI,CAAC/B,MAAM,CAACg3B,MAAM,IAAI,IAAI,CAAC/0B,iBAAiB,CAACjC,MAAM,CAACjN,GAAG,CAAC;EAE5E;EAGAi+D,cAAcA,CAEZtE,aAAsB,EACtByB,SAAkB,EACL;IACb,IAAI,CAAC9qD,UAAU,CAACwS,KAAK,EAAE;IAEvB,MAAMvR,KAA8B,GAAG;MACrCw8D,cAAc,EAAE,KAAK;MACrBpU;KACD;IACD,IAAItoD,UAAyB,GAAG,EAAE;IAClC,MAAMu4B,SAAS,GAAG,IAAI,CAAC96B,SAAS,EAAe;IAC/C86B,SAAS,CAAC/7B,IAAI,GAAG,EAAE;IAEnB,IAAI,CAACmpB,MAAM,CAAA,CAAU,CAAC;IAItB,IAAI,CAACgxC,kCAAkC,CAAC,MAAM;MAE5C,OAAO,CAAC,IAAI,CAAC98C,KAAK,CAAA,CAAU,CAAC,EAAE;QAC7B,IAAI,IAAI,CAAC0C,GAAG,CAAA,EAAQ,CAAC,EAAE;UACrB,IAAIvc,UAAU,CAACM,MAAM,GAAG,CAAC,EAAE;YACzB,MAAM,IAAI,CAACjB,KAAK,CACd9H,MAAM,CAAC7N,kBAAkB,EACzB,IAAI,CAACwW,KAAK,CAACsB,aACb,CAAC;UACH;UACA;QACF;QAEA,IAAI,IAAI,CAACqY,KAAK,CAAA,EAAM,CAAC,EAAE;UACrB7Z,UAAU,CAAC2D,IAAI,CAAC,IAAI,CAAC+wC,cAAc,CAAE,CAAA,CAAC;UACtC;QACF;QAEA,MAAMlc,MAAM,GAAG,IAAI,CAAC/6B,SAAS,EAAiB;QAG9C,IAAIuC,UAAU,CAACM,MAAM,EAAE;UAErBk4B,MAAM,CAACx4B,UAAU,GAAGA,UAAU;UAC9B,IAAI,CAACyoB,0BAA0B,CAAC+P,MAAM,EAAEx4B,UAAU,CAAC,CAAC,CAAC,CAAC;UACtDA,UAAU,GAAG,EAAE;QACjB;QAEA,IAAI,CAACs4B,gBAAgB,CAACC,SAAS,EAAEC,MAAM,EAAEt4B,KAAK,CAAC;QAE/C,IAEEs4B,MAAM,CAACrwC,IAAI,KAAK,aAAa,IAE7BqwC,MAAM,CAACx4B,UAAU,IAEjBw4B,MAAM,CAACx4B,UAAU,CAACM,MAAM,GAAG,CAAC,EAC5B;UACA,IAAI,CAACjB,KAAK,CAAC9H,MAAM,CAAC/N,oBAAoB,EAAEgvC,MAAM,CAAC;QACjD;MACF;IACF,CAAC,CAAC;IAEF,IAAI,CAACt4B,KAAK,CAACgP,MAAM,GAAG66C,SAAS;IAE7B,IAAI,CAAC/5C,IAAI,CAAA,CAAE;IAEX,IAAIhQ,UAAU,CAACM,MAAM,EAAE;MACrB,MAAM,IAAI,CAACjB,KAAK,CAAC9H,MAAM,CAAC9G,iBAAiB,EAAE,IAAI,CAACyP,KAAK,CAAC1B,QAAQ,CAAC;IACjE;IAEA,IAAI,CAACS,UAAU,CAACyS,IAAI,EAAE;IAEtB,OAAO,IAAI,CAAC9T,UAAU,CAAC26B,SAAS,EAAE,WAAW,CAAC;EAChD;EAIAE,4BAA4BA,CAE1BF,SAA8B,EAC9BC,MAA6B,EACpB;IACT,MAAM7pC,GAAG,GAAG,IAAI,CAACu/B,eAAe,CAAC,IAAI,CAAC;IAEtC,IAAI,IAAI,CAACqL,aAAa,EAAE,EAAE;MACxB,MAAM39B,MAAqB,GAAG48B,MAAa;MAG3C58B,MAAM,CAACzT,IAAI,GAAG,QAAQ;MACtByT,MAAM,CAAC+B,QAAQ,GAAG,KAAK;MACvB/B,MAAM,CAACjN,GAAG,GAAGA,GAAG;MAChBiN,MAAM,CAACg3B,MAAM,GAAG,KAAK;MACrB,IAAI,CAAC8G,eAAe,CAClBnB,SAAS,EACT38B,MAAM,EACN,KAAK,EACL,KAAK,EACe,KAAK,EACzB,KACF,CAAC;MACD,OAAO,IAAI;IACb,CAAC,MAAM,IAAI,IAAI,CAAC49B,eAAe,EAAE,EAAE;MACjC,MAAMr7B,IAAqB,GAAGq6B,MAAa;MAG3Cr6B,IAAI,CAACR,QAAQ,GAAG,KAAK;MACrBQ,IAAI,CAACxP,GAAG,GAAGA,GAAG;MACdwP,IAAI,CAACy0B,MAAM,GAAG,KAAK;MACnB2F,SAAS,CAAC/7B,IAAI,CAACmH,IAAI,CAAC,IAAI,CAAC7F,kBAAkB,CAACK,IAAI,CAAC,CAAC;MAClD,OAAO,IAAI;IACb;IACA,IAAI,CAACoX,iCAAiC,CAAC5mB,GAAG,CAAC;IAC3C,OAAO,KAAK;EACd;EAEA2pC,gBAAgBA,CAEdC,SAA8B,EAC9BC,MAA6B,EAC7Bt4B,KAA8B,EACxB;IACN,MAAMyyB,QAAQ,GAAG,IAAI,CAAC9N,YAAY,IAAW,CAAC;IAE9C,IAAI8N,QAAQ,EAAE;MACZ,IAAI,IAAI,CAAC8F,4BAA4B,CAACF,SAAS,EAAEC,MAAM,CAAC,EAAE;QAExD;MACF;MACA,IAAI,IAAI,CAACjc,GAAG,CAAA,CAAU,CAAC,EAAE;QACvB,IAAI,CAAC6rC,qBAAqB,CAAC7vB,SAAS,EAAEC,MAA8B,CAAC;QACrE;MACF;IACF;IAEA,IAAI,CAAC6vB,4BAA4B,CAAC9vB,SAAS,EAAEC,MAAM,EAAEt4B,KAAK,EAAEyyB,QAAQ,CAAC;EACvE;EAEA01B,4BAA4BA,CAE1B9vB,SAA8B,EAC9BC,MAA6B,EAC7Bt4B,KAA8B,EAC9ByyB,QAAiB,EACjB;IACA,MAAMgqC,YAAY,GAAGnkC,MAAuB;IAC5C,MAAMokC,aAAa,GAAGpkC,MAA8B;IACpD,MAAMqkC,UAAU,GAAGrkC,MAAyB;IAC5C,MAAMskC,WAAW,GAAGtkC,MAAgC;IACpD,MAAMukC,YAAY,GAAGvkC,MAAiC;IAEtD,MAAM58B,MAAkD,GAAG+gE,YAAY;IACvE,MAAMK,YAAqD,GAAGL,YAAY;IAE1EnkC,MAAM,CAAC5F,MAAM,GAAGD,QAAQ;IACxB,IAAI,CAACuH,+BAA+B,CAAC1B,MAAM,CAAC;IAE5C,IAAI,IAAI,CAACjc,GAAG,CAAA,EAAQ,CAAC,EAAE;MAErB3gB,MAAM,CAACzT,IAAI,GAAG,QAAQ;MACtB,MAAM4U,aAAa,GAAG,IAAI,CAAC8c,KAAK,IAAe,CAAC;MAChD,IAAI,CAACojD,qBAAqB,CAACrhE,MAAM,CAAC;MAElC,IAAImB,aAAa,EAAE;QAEjB,IAAI,CAAC88B,sBAAsB,CAACtB,SAAS,EAAEqkC,aAAa,EAAE,IAAI,EAAE,KAAK,CAAC;QAClE;MACF;MAEA,IAAI,IAAI,CAACnjC,sBAAsB,CAACkjC,YAAY,CAAC,EAAE;QAC7C,IAAI,CAACt9D,KAAK,CAAC9H,MAAM,CAACpO,sBAAsB,EAAEwzE,YAAY,CAAChuE,GAAG,CAAC;MAC7D;MAEA,IAAI,CAAC+qC,eAAe,CAClBnB,SAAS,EACTokC,YAAY,EACZ,IAAI,EACJ,KAAK,EACe,KAAK,EACzB,KACF,CAAC;MAED;IACF;IAEA,MAAM93C,YAAY,GAChB,CAAC,IAAI,CAAC3kB,KAAK,CAAC0X,WAAW,IAAI9K,iBAAiB,CAAC,IAAI,CAAC5M,KAAK,CAACnY,IAAI,CAAC;IAC/D,MAAM4G,GAAG,GAAG,IAAI,CAACsuE,qBAAqB,CAACzkC,MAAM,CAAC;IAC9C,MAAM0kC,iBAAiB,GAAGr4C,YAAY,GAAIl2B,GAAG,CAAkBV,IAAI,GAAG,IAAI;IAC1E,MAAMkvE,SAAS,GAAG,IAAI,CAACpgE,aAAa,CAACpO,GAAG,CAAC;IACzC,MAAMyuE,0BAA0B,GAAG,IAAI,CAACl9D,KAAK,CAAC1B,QAAQ;IAEtD,IAAI,CAAC+pD,4BAA4B,CAACyU,YAAY,CAAC;IAE/C,IAAI,IAAI,CAACzjC,aAAa,EAAE,EAAE;MACxB39B,MAAM,CAACzT,IAAI,GAAG,QAAQ;MAEtB,IAAIg1E,SAAS,EAAE;QACb,IAAI,CAACtjC,sBAAsB,CAACtB,SAAS,EAAEqkC,aAAa,EAAE,KAAK,EAAE,KAAK,CAAC;QACnE;MACF;MAGA,MAAMv/D,aAAa,GAAG,IAAI,CAACo8B,sBAAsB,CAACkjC,YAAY,CAAC;MAC/D,IAAIhjC,iBAAiB,GAAG,KAAK;MAC7B,IAAIt8B,aAAa,EAAE;QACjBs/D,YAAY,CAACx0E,IAAI,GAAG,aAAa;QAGjC,IAAI+X,KAAK,CAACw8D,cAAc,IAAI,CAAC,IAAI,CAAC3pD,SAAS,CAAC,YAAY,CAAC,EAAE;UACzD,IAAI,CAAC1T,KAAK,CAAC9H,MAAM,CAACxN,oBAAoB,EAAE4E,GAAG,CAAC;QAC9C;QACA,IAAI0O,aAAa,IAAI,IAAI,CAAC0V,SAAS,CAAC,YAAY,CAAC,IAAIylB,MAAM,CAACutB,QAAQ,EAAE;UACpE,IAAI,CAAC1mD,KAAK,CAAC9H,MAAM,CAAC/H,qBAAqB,EAAEb,GAAG,CAAC;QAC/C;QACAuR,KAAK,CAACw8D,cAAc,GAAG,IAAI;QAC3B/iC,iBAAiB,GAAGz5B,KAAK,CAACooD,aAAa;MACzC;MAEA,IAAI,CAAC5uB,eAAe,CAClBnB,SAAS,EACTokC,YAAY,EACZ,KAAK,EACL,KAAK,EACLt/D,aAAa,EACbs8B,iBACF,CAAC;IACH,CAAC,MAAM,IAAI,IAAI,CAACH,eAAe,EAAE,EAAE;MACjC,IAAI2jC,SAAS,EAAE;QACb,IAAI,CAACE,wBAAwB,CAAC9kC,SAAS,EAAEukC,WAAW,CAAC;MACvD,CAAC,MAAM;QACL,IAAI,CAACQ,iBAAiB,CAAC/kC,SAAS,EAAEskC,UAAU,CAAC;MAC/C;IACD,CAAA,MAAM,IAAIK,iBAAiB,KAAK,OAAO,IAAI,CAAC,IAAI,CAAC13C,gBAAgB,CAAA,CAAE,EAAE;MAEpE,IAAI,CAACjQ,iCAAiC,CAAC5mB,GAAG,CAAC;MAC3C,MAAMyO,WAAW,GAAG,IAAI,CAACmf,GAAG,GAAQ,CAAC;MAErC,IAAIygD,YAAY,CAACx9D,QAAQ,EAAE;QACzB,IAAI,CAACxS,UAAU,CAACowE,0BAA0B,CAAC;MAC7C;MAEAxhE,MAAM,CAACzT,IAAI,GAAG,QAAQ;MAEtB,MAAMg1E,SAAS,GAAG,IAAI,CAACtjD,KAAK,IAAe,CAAC;MAC5C,IAAI,CAACojD,qBAAqB,CAACrhE,MAAM,CAAC;MAClC,IAAI,CAAC2sD,4BAA4B,CAACyU,YAAY,CAAC;MAE/C,IAAIG,SAAS,EAAE;QAEb,IAAI,CAACtjC,sBAAsB,CACzBtB,SAAS,EACTqkC,aAAa,EACbx/D,WAAW,EACX,IACF,CAAC;MACH,CAAC,MAAM;QACL,IAAI,IAAI,CAACq8B,sBAAsB,CAACkjC,YAAY,CAAC,EAAE;UAC7C,IAAI,CAACt9D,KAAK,CAAC9H,MAAM,CAACrO,kBAAkB,EAAEyzE,YAAY,CAAChuE,GAAG,CAAC;QACzD;QAEA,IAAI,CAAC+qC,eAAe,CAClBnB,SAAS,EACTokC,YAAY,EACZv/D,WAAW,EACX,IAAI,EACgB,KAAK,EACzB,KACF,CAAC;MACH;IACD,CAAA,MAAM,IACL,CAAC8/D,iBAAiB,KAAK,KAAK,IAAIA,iBAAiB,KAAK,KAAK,KAC3D,EAAE,IAAI,CAACrjD,KAAK,CAAQ,EAAA,CAAC,IAAI,IAAI,CAAC2L,gBAAgB,CAAE,CAAA,CAAC,EACjD;MAGA,IAAI,CAACjQ,iCAAiC,CAAC5mB,GAAG,CAAC;MAC3CiN,MAAM,CAACzT,IAAI,GAAG+0E,iBAAiB;MAE/B,MAAMC,SAAS,GAAG,IAAI,CAACtjD,KAAK,IAAe,CAAC;MAC5C,IAAI,CAACojD,qBAAqB,CAACN,YAAY,CAAC;MAExC,IAAIQ,SAAS,EAAE;QAEb,IAAI,CAACtjC,sBAAsB,CAACtB,SAAS,EAAEqkC,aAAa,EAAE,KAAK,EAAE,KAAK,CAAC;MACrE,CAAC,MAAM;QACL,IAAI,IAAI,CAACnjC,sBAAsB,CAACkjC,YAAY,CAAC,EAAE;UAC7C,IAAI,CAACt9D,KAAK,CAAC9H,MAAM,CAACtO,qBAAqB,EAAE0zE,YAAY,CAAChuE,GAAG,CAAC;QAC5D;QACA,IAAI,CAAC+qC,eAAe,CAClBnB,SAAS,EACTokC,YAAY,EACZ,KAAK,EACL,KAAK,EACe,KAAK,EACzB,KACF,CAAC;MACH;MAEA,IAAI,CAAC1iC,uBAAuB,CAAC0iC,YAAY,CAAC;IAC3C,CAAA,MAAM,IAAIO,iBAAiB,KAAK,UAAU,IAAI,CAAC,IAAI,CAAC13C,gBAAgB,CAAA,CAAE,EAAE;MACvE,IAAI,CAAC/G,YAAY,CAAC,wBAAwB,CAAC;MAC3C,IAAI,CAAClJ,iCAAiC,CAAC5mB,GAAG,CAAC;MAG3C,MAAMwuE,SAAS,GAAG,IAAI,CAACtjD,KAAK,IAAe,CAAC;MAC5C,IAAI,CAACojD,qBAAqB,CAACJ,UAAU,CAAC;MACtC,IAAI,CAACU,yBAAyB,CAAChlC,SAAS,EAAEwkC,YAAY,EAAEI,SAAS,CAAC;IACpE,CAAC,MAAM,IAAI,IAAI,CAAC33C,gBAAgB,EAAE,EAAE;MAElC,IAAI23C,SAAS,EAAE;QACb,IAAI,CAACE,wBAAwB,CAAC9kC,SAAS,EAAEukC,WAAW,CAAC;MACvD,CAAC,MAAM;QACL,IAAI,CAACQ,iBAAiB,CAAC/kC,SAAS,EAAEskC,UAAU,CAAC;MAC/C;IACF,CAAC,MAAM;MACL,IAAI,CAAC7vE,UAAU,CAAA,CAAE;IACnB;EACF;EAGAiwE,qBAAqBA,CAEnBzkC,MAA6B,EACgB;IAC7C,MAAM;MAAEzwC,IAAI;MAAE+M;KAAO,GAAG,IAAI,CAACoL,KAAK;IAClC,IACE,CAACnY,IAAI,KAAY,GAAA,IAAIA,IAAI,KAAc,GAAA,KACvCywC,MAAM,CAAC5F,MAAM,IACb99B,KAAK,KAAK,WAAW,EACrB;MACA,IAAI,CAACuK,KAAK,CAAC9H,MAAM,CAACjH,eAAe,EAAE,IAAI,CAAC4P,KAAK,CAAC1B,QAAQ,CAAC;IACzD;IAEA,IAAIzW,IAAI,QAAmB,EAAE;MAC3B,IAAI+M,KAAK,KAAK,aAAa,EAAE;QAC3B,IAAI,CAACuK,KAAK,CAAC9H,MAAM,CAACvO,4BAA4B,EAAE,IAAI,CAACkX,KAAK,CAAC1B,QAAQ,CAAC;MACtE;MACA,MAAM7P,GAAG,GAAG,IAAI,CAAC+N,gBAAgB,EAAE;MACnC87B,MAAM,CAAC7pC,GAAG,GAAGA,GAAG;MAChB,OAAOA,GAAG;IACZ;IAEA,IAAI,CAACmmD,iBAAiB,CAACtc,MAAM,CAAC;IAC9B,OAAOA,MAAM,CAAC7pC,GAAG;EACnB;EAEAy5D,qBAAqBA,CAEnB7vB,SAA8B,EAC9BC,MAIC,EACD;IAAA,IAAAglC,kBAAA;IAEA,IAAI,CAAC7rD,KAAK,CAACF,KAAK,CACdL,QAAwC,KAC1C,CAAC;IAED,MAAMyV,SAAS,GAAG,IAAI,CAAC3mB,KAAK,CAACyW,MAAM;IACnC,IAAI,CAACzW,KAAK,CAACyW,MAAM,GAAG,EAAE;IAGtB,IAAI,CAACyQ,SAAS,CAAC3V,KAAK,EAAgB,CAAC;IACrC,MAAMjV,IAAmB,GAAIg8B,MAAM,CAACh8B,IAAI,GAAG,EAAG;IAC9C,IAAI,CAACwnD,2BAA2B,CAACxnD,IAAI,EAAE7E,SAAS,EAAE,KAAK,EAAA,CAAW,CAAC;IACnE,IAAI,CAACyvB,SAAS,CAAC1V,IAAI,EAAE;IACrB,IAAI,CAACC,KAAK,CAACD,IAAI,EAAE;IACjB,IAAI,CAACxR,KAAK,CAACyW,MAAM,GAAGkQ,SAAS;IAC7B0R,SAAS,CAAC/7B,IAAI,CAACmH,IAAI,CAAC,IAAI,CAAC/F,UAAU,CAAgB46B,MAAM,EAAE,aAAa,CAAC,CAAC;IAC1E,IAAAglC,CAAAA,kBAAA,GAAIhlC,MAAM,CAACx4B,UAAU,KAAjBw9D,IAAAA,IAAAA,kBAAA,CAAmBl9D,MAAM,EAAE;MAC7B,IAAI,CAACjB,KAAK,CAAC9H,MAAM,CAAC5N,oBAAoB,EAAE6uC,MAAM,CAAC;IACjD;EACF;EAEA8kC,iBAAiBA,CAEf/kC,SAA8B,EAC9Bp6B,IAAqB,EACrB;IACA,IAAI,CAACA,IAAI,CAACR,QAAQ,IAAI,IAAI,CAACE,iBAAiB,CAACM,IAAI,CAACxP,GAAG,CAAC,EAAE;MAGtD,IAAI,CAAC0Q,KAAK,CAAC9H,MAAM,CAACxO,qBAAqB,EAAEoV,IAAI,CAACxP,GAAG,CAAC;IACpD;IAEA4pC,SAAS,CAAC/7B,IAAI,CAACmH,IAAI,CAAC,IAAI,CAAC7F,kBAAkB,CAACK,IAAI,CAAC,CAAC;EACpD;EAEAk/D,wBAAwBA,CAEtB9kC,SAA8B,EAC9Bp6B,IAAoC,EACpC;IACA,MAAMrW,IAAI,GAAG,IAAI,CAACmW,yBAAyB,CAACE,IAAI,CAAC;IACjDo6B,SAAS,CAAC/7B,IAAI,CAACmH,IAAI,CAAC7b,IAAI,CAAC;IAEzB,IAAI,CAACmX,UAAU,CAACsjB,kBAAkB,CAChC,IAAI,CAAC1lB,gBAAgB,CAAC/U,IAAI,CAAC6G,GAAG,CAAC,KAE/B7G,IAAI,CAAC6G,GAAG,CAACoH,GAAG,CAACrQ,KACf,CAAC;EACH;EAEA63E,yBAAyBA,CAEvBhlC,SAA8B,EAC9Bp6B,IAA6B,EAC7Bg/D,SAAkB,EAClB;IACA,IAAI,CAACA,SAAS,IAAI,CAACh/D,IAAI,CAACR,QAAQ,IAAI,IAAI,CAACE,iBAAiB,CAACM,IAAI,CAACxP,GAAG,CAAC,EAAE;MAGpE,IAAI,CAAC0Q,KAAK,CAAC9H,MAAM,CAACxO,qBAAqB,EAAEoV,IAAI,CAACxP,GAAG,CAAC;IACpD;IAEA,MAAM7G,IAAI,GAAG,IAAI,CAAC+gE,0BAA0B,CAAC1qD,IAAI,CAAC;IAClDo6B,SAAS,CAAC/7B,IAAI,CAACmH,IAAI,CAAC7b,IAAI,CAAC;IAEzB,IAAIq1E,SAAS,EAAE;MACb,IAAI,CAACl+D,UAAU,CAACsjB,kBAAkB,CAChC,IAAI,CAAC1lB,gBAAgB,CAAC/U,IAAI,CAAC6G,GAAoB,CAAC,KAEhD7G,IAAI,CAAC6G,GAAG,CAACoH,GAAG,CAACrQ,KACf,CAAC;IACH;EACF;EAEAg0C,eAAeA,CAEbnB,SAA8B,EAC9B38B,MAA6B,EAC7BwB,WAAoB,EACpB5B,OAAgB,EAChB6B,aAAsB,EACtBs8B,iBAA0B,EACpB;IACNpB,SAAS,CAAC/7B,IAAI,CAACmH,IAAI,CACjB,IAAI,CAACxG,WAAW,CACdvB,MAAM,EACNwB,WAAW,EACX5B,OAAO,EACP6B,aAAa,EACbs8B,iBAAiB,EACjB,aAAa,EACb,IACF,CACF,CAAC;EACH;EAEAE,sBAAsBA,CAEpBtB,SAA8B,EAC9B38B,MAAoC,EACpCwB,WAAoB,EACpB5B,OAAgB,EACV;IACN,MAAM1T,IAAI,GAAG,IAAI,CAACqV,WAAW,CAC3BvB,MAAM,EACNwB,WAAW,EACX5B,OAAO,EACa,KAAK,EACzB,KAAK,EACL,oBAAoB,EACpB,IACF,CAAC;IACD+8B,SAAS,CAAC/7B,IAAI,CAACmH,IAAI,CAAC7b,IAAI,CAAC;IAEzB,MAAMK,IAAI,GACRL,IAAI,CAACK,IAAI,KAAK,KAAK,GACfL,IAAI,CAAC8qC,MAAM,QAEuB,GAClC9qC,IAAI,CAACK,IAAI,KAAK,KAAK,GACjBL,IAAI,CAAC8qC,MAAM,QAEuB,IACZ;IAC9B,IAAI,CAACk2B,gCAAgC,CAAChhE,IAAI,EAAEK,IAAI,CAAC;EACnD;EAEA2gE,gCAAgCA,CAC9BhhE,IAAsD,EACtDK,IAAY,EACZ;IACA,IAAI,CAAC8W,UAAU,CAACsjB,kBAAkB,CAChC,IAAI,CAAC1lB,gBAAgB,CAAC/U,IAAI,CAAC6G,GAAoB,CAAC,EAChDxG,IAAI,EACJL,IAAI,CAAC6G,GAAG,CAACoH,GAAG,CAACrQ,KACf,CAAC;EACH;EAGA6iE,4BAA4BA,CAE1BC,YAAqD,EAC/C,CAAC;EAGTvqD,yBAAyBA,CAEvBnW,IAAoC,EACZ;IACxB,IAAI,CAAC21E,gBAAgB,CAAC31E,IAAI,CAAC;IAC3B,IAAI,CAAC29B,SAAS,CAAA,CAAE;IAChB,OAAO,IAAI,CAAC7nB,UAAU,CAAC9V,IAAI,EAAE,sBAAsB,CAAC;EACtD;EAGAgW,kBAAkBA,CAAehW,IAAqB,EAAmB;IACvE,IAAI,CAAC21E,gBAAgB,CAAC31E,IAAI,CAAC;IAC3B,IAAI,CAAC29B,SAAS,CAAA,CAAE;IAChB,OAAO,IAAI,CAAC7nB,UAAU,CAAC9V,IAAI,EAAE,eAAe,CAAC;EAC/C;EAEA+gE,0BAA0BA,CAExB/gE,IAA6B,EACJ;IACzB,IAAI,CAAC21E,gBAAgB,CAAC31E,IAAI,CAAC;IAC3B,IAAI,CAAC29B,SAAS,CAAA,CAAE;IAChB,OAAO,IAAI,CAAC7nB,UAAU,CAAC9V,IAAI,EAAE,uBAAuB,CAAC;EACvD;EAGA21E,gBAAgBA,CAEd31E,IAEC,EACK;IACN,IAAI,CAAC6pB,KAAK,CAACF,KAAK,CAACL,OAAiC,CAAC;IACnD,IAAI,CAACkW,eAAe,CAAC7V,KAAK,CAACyS,kBAAkB,CAAE,CAAA,CAAC;IAChD,IAAI,CAACkD,SAAS,CAAC3V,KAAK,EAAgB,CAAC;IACrC3pB,IAAI,CAACgN,KAAK,GAAG,IAAI,CAACynB,GAAG,CAAA,EAAM,CAAC,GAAG,IAAI,CAACwa,uBAAuB,CAAE,CAAA,GAAG,IAAI;IACpE,IAAI,CAACzP,eAAe,CAAC5V,IAAI,EAAE;IAC3B,IAAI,CAAC0V,SAAS,CAAC1V,IAAI,EAAE;IACrB,IAAI,CAACC,KAAK,CAACD,IAAI,EAAE;EACnB;EAEAymB,YAAYA,CACVrwC,IAAqB,EACrBswC,WAAoB,EACpBC,UAA2B,EAC3BxmB,WAAwB,OAAyB,EAC3C;IACN,IAAI/E,iBAAiB,CAAC,IAAI,CAAC5M,KAAK,CAACnY,IAAI,CAAC,EAAE;MACtCD,IAAI,CAACgV,EAAE,GAAG,IAAI,CAACoxB,eAAe,EAAE;MAChC,IAAIkK,WAAW,EAAE;QACf,IAAI,CAACsd,yBAAyB,CAAC5tD,IAAI,CAACgV,EAAE,EAAE+U,WAAW,CAAC;MACtD;IACF,CAAC,MAAM;MACL,IAAIwmB,UAAU,IAAI,CAACD,WAAW,EAAE;QAC9BtwC,IAAI,CAACgV,EAAE,GAAG,IAAI;MAChB,CAAC,MAAM;QACL,MAAM,IAAI,CAACuC,KAAK,CAAC9H,MAAM,CAAC5J,gBAAgB,EAAE,IAAI,CAACuS,KAAK,CAAC1B,QAAQ,CAAC;MAChE;IACF;EACF;EAGAs7B,eAAeA,CAAehyC,IAAqB,EAAQ;IACzDA,IAAI,CAACwR,UAAU,GAAG,IAAI,CAACijB,GAAG,CAAA,EAAY,CAAC,GAAG,IAAI,CAACm1C,mBAAmB,CAAE,CAAA,GAAG,IAAI;EAC7E;EAKA3xD,WAAWA,CAETjY,IAIC,EACDkY,UAAgC,EACnB;IACb,MAAMukD,sBAAsB,GAAG,IAAI,CAACiD,qBAAqB,CACvD1/D,IAAI,EACW,IACjB,CAAC;IACD,MAAM41E,UAAU,GAAG,IAAI,CAAC5Q,gCAAgC,CACtDhlE,IAAI,EACJy8D,sBACF,CAAC;IACD,MAAMoZ,iBAAiB,GAAG,CAACD,UAAU,IAAI,IAAI,CAACnhD,GAAG,CAAA,EAAS,CAAC;IAC3D,MAAMqhD,OAAO,GAAGD,iBAAiB,IAAI,IAAI,CAAC3lC,aAAa,CAAClwC,IAAI,CAAC;IAC7D,MAAMowC,YAAY,GAChB0lC,OAAO,IAAI,IAAI,CAAC3lC,kCAAkC,CAACnwC,IAAI,CAAC;IAC1D,MAAM+1E,mBAAmB,GACvBF,iBAAiB,KAAK,CAACzlC,YAAY,IAAI,IAAI,CAAC3b,GAAG,CAAS,EAAA,CAAC,CAAC;IAC5D,MAAMuhD,cAAc,GAAGJ,UAAU,IAAIE,OAAO;IAE5C,IAAIA,OAAO,IAAI,CAAC1lC,YAAY,EAAE;MAC5B,IAAIwlC,UAAU,EAAE,IAAI,CAAC1wE,UAAU,EAAE;MACjC,IAAIgT,UAAU,EAAE;QACd,MAAM,IAAI,CAACX,KAAK,CAAC9H,MAAM,CAACxF,0BAA0B,EAAEjK,IAAI,CAAC;MAC3D;MACA,IAAI,CAACiwC,eAAe,CAACjwC,IAAI,EAAE,IAAI,CAAC;MAEhC,OAAO,IAAI,CAAC8V,UAAU,CAAC9V,IAAI,EAAE,sBAAsB,CAAC;IACtD;IAEA,MAAMi2E,aAAa,GAAG,IAAI,CAACC,+BAA+B,CAACl2E,IAAI,CAAC;IAEhE,IAAI41E,UAAU,IAAIC,iBAAiB,IAAI,CAACC,OAAO,IAAI,CAACG,aAAa,EAAE;MACjE,IAAI,CAAC/wE,UAAU,CAAC,IAAI,GAAW,CAAC;IAClC;IAEA,IAAIkrC,YAAY,IAAI2lC,mBAAmB,EAAE;MACvC,IAAI,CAAC7wE,UAAU,CAAC,IAAI,IAAU,CAAC;IACjC;IAEA,IAAIixE,cAAc;IAClB,IAAIH,cAAc,IAAIC,aAAa,EAAE;MACnCE,cAAc,GAAG,KAAK;MACtB,IAAIj+D,UAAU,EAAE;QACd,MAAM,IAAI,CAACX,KAAK,CAAC9H,MAAM,CAACxF,0BAA0B,EAAEjK,IAAI,CAAC;MAC3D;MACA,IAAI,CAACiwC,eAAe,CAClBjwC,IAAI,EACJg2E,cACF,CAAC;IACH,CAAC,MAAM;MACLG,cAAc,GAAG,IAAI,CAACC,2BAA2B,CAC/Cp2E,IACF,CAAC;IACH;IAEA,IAAIg2E,cAAc,IAAIC,aAAa,IAAIE,cAAc,EAAE;MAAA,IAAAE,kBAAA;MACrD,MAAMjqC,KAAK,GAAGpsC,IAAwC;MACtD,IAAI,CAACklE,WAAW,CAAC94B,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAACA,KAAK,CAACv0B,MAAM,CAAC;MACpD,IAAI,CAAAw+D,CAAAA,kBAAA,GAAAjqC,KAAK,CAAC1zB,WAAW,KAAjB29D,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,kBAAA,CAAmBp2E,IAAI,MAAK,kBAAkB,EAAE;QAClD,IAAI,CAACkiE,mBAAmB,CAACjqD,UAAU,EAAEk0B,KAAK,CAAC1zB,WAAW,EAAE0zB,KAAK,CAAC;MAC/D,CAAA,MAAM,IAAIl0B,UAAU,EAAE;QACrB,MAAM,IAAI,CAACX,KAAK,CAAC9H,MAAM,CAACxF,0BAA0B,EAAEjK,IAAI,CAAC;MAC3D;MACA,OAAO,IAAI,CAAC8V,UAAU,CAACs2B,KAAK,EAAE,wBAAwB,CAAC;IACzD;IAEA,IAAI,IAAI,CAAC3X,GAAG,CAAA,EAAY,CAAC,EAAE;MACzB,MAAM2X,KAAK,GAAGpsC,IAA0C;MAExD,MAAM8zC,IAAI,GAAG,IAAI,CAACxF,4BAA4B,EAAE;MAChDlC,KAAK,CAAC1zB,WAAW,GAAGo7B,IAAI;MAExB,IAAIA,IAAI,CAAC7zC,IAAI,KAAK,kBAAkB,EAAE;QACpC,IAAI,CAACkiE,mBAAmB,CAACjqD,UAAU,EAAE47B,IAAI,EAAwB1H,KAAK,CAAC;MACxE,CAAA,MAAM,IAAIl0B,UAAU,EAAE;QACrB,MAAM,IAAI,CAACX,KAAK,CAAC9H,MAAM,CAACxF,0BAA0B,EAAEjK,IAAI,CAAC;MAC3D;MAEA,IAAI,CAACklE,WAAW,CAAC94B,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC;MAEnC,OAAO,IAAI,CAACt2B,UAAU,CAACs2B,KAAK,EAAE,0BAA0B,CAAC;IAC3D;IAEA,IAAI,CAAClnC,UAAU,CAAC,IAAI,GAAW,CAAC;EAClC;EAEAgrC,aAAaA,CACXlwC,IAAoB,EAC+C;IACnE,OAAO,IAAI,CAACy0B,GAAG,CAAA,EAAQ,CAAC;EAC1B;EAEAuwC,gCAAgCA,CAC9BhlE,IAIC,EACDy8D,sBAA2C,EACD;IAC1C,IAAIA,sBAAsB,IAAI,IAAI,CAACpuB,wBAAwB,EAAE,EAAE;MAE7D,IAAI,CAAC1X,YAAY,CAAC,mBAAmB,EAAE8lC,sBAAsB,IAAtBA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,sBAAsB,CAAExuD,GAAG,CAACrQ,KAAK,CAAC;MACzE,MAAMoX,EAAE,GAAGynD,sBAAsB,IAAI,IAAI,CAACr2B,eAAe,CAAC,IAAI,CAAC;MAC/D,MAAMuM,SAAS,GAAG,IAAI,CAACx5B,eAAe,CAA2BnE,EAAE,CAAC;MACpE29B,SAAS,CAACr6B,QAAQ,GAAGtD,EAAE;MACtBhV,IAAI,CAAsCuY,UAAU,GAAG,CACtD,IAAI,CAACzC,UAAU,CAAC68B,SAAS,EAAE,wBAAwB,CAAC,CACrD;MACD,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd;EAEAxC,kCAAkCA,CAChCnwC,IAA+D,EACrB;IAC1C,IAAI,IAAI,CAAC+8B,YAAY,CAAA,EAAO,CAAC,EAAE;MAAA,IAAA1tB,IAAA,EAAAinE,eAAA;MAC7B,CAAAA,eAAA,GAAA,CAAAjnE,IAAA,GAACrP,IAAI,EAAsCuY,UAAU,KAAA+9D,IAAAA,GAAAA,eAAA,GAArDjnE,IAAA,CAA2CkJ,UAAU,GAAK,EAAE;MAE5D,MAAMo6B,SAAS,GAAG,IAAI,CAACjS,WAAW,CAChC,IAAI,CAACtoB,KAAK,CAACC,eACb,CAAC;MAED,IAAI,CAAC6P,IAAI,CAAA,CAAE;MAEXyqB,SAAS,CAACr6B,QAAQ,GAAG,IAAI,CAACgrD,qBAAqB,EAAE;MAChDtjE,IAAI,CAAsCuY,UAAU,CAACsD,IAAI,CACxD,IAAI,CAAC/F,UAAU,CAAC68B,SAAS,EAAE,0BAA0B,CACvD,CAAC;MACD,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd;EAEAujC,+BAA+BA,CAC7Bl2E,IAAoB,EACsB;IAC1C,IAAI,IAAI,CAAC+xB,KAAK,CAAA,CAAU,CAAC,EAAE;MACzB,MAAMqa,KAAK,GAAGpsC,IAAwC;MAEtD,IAAI,CAACosC,KAAK,CAAC7zB,UAAU,EAAE6zB,KAAK,CAAC7zB,UAAU,GAAG,EAAE;MAC5C,MAAMg+D,YAAY,GAAGnqC,KAAK,CAACvE,UAAU,KAAK,MAAM;MAChDuE,KAAK,CAAC7zB,UAAU,CAACsD,IAAI,CAAC,GAAG,IAAI,CAACm0B,qBAAqB,CAACumC,YAAY,CAAC,CAAC;MAElEnqC,KAAK,CAACv0B,MAAM,GAAG,IAAI;MACnBu0B,KAAK,CAAC1zB,WAAW,GAAG,IAAI;MACxB,IAAqC,IAAI,CAACuS,SAAS,CAAC,kBAAkB,CAAC,EAAE;QACvEmhB,KAAK,CAACoqC,UAAU,GAAG,EAAE;MACvB;MAEA,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd;EAEAJ,2BAA2BA,CAEzBp2E,IAAsC,EAC7B;IACT,IAAI,IAAI,CAACouC,4BAA4B,EAAE,EAAE;MACvCpuC,IAAI,CAACuY,UAAU,GAAG,EAAE;MACpBvY,IAAI,CAAC6X,MAAM,GAAG,IAAI;MAClB,IAAqC,IAAI,CAACoT,SAAS,CAAC,kBAAkB,CAAC,EAAE;QACvEjrB,IAAI,CAACw2E,UAAU,GAAG,EAAE;MACtB;MACAx2E,IAAI,CAAC0Y,WAAW,GAAG,IAAI,CAACo3B,sBAAsB,CAAC9vC,IAAI,CAAC;MACpD,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd;EAEAmyE,eAAeA,CAAAA,EAAY;IACzB,IAAI,CAAC,IAAI,CAACp1C,YAAY,GAAU,CAAC,EAAE,OAAO,KAAK;IAC/C,MAAM7U,IAAI,GAAG,IAAI,CAACiN,oBAAoB,EAAE;IACxC,OAAO,IAAI,CAAC6H,oBAAoB,CAAC9U,IAAI,EAAE,UAAU,CAAC;EACpD;EAEAomB,4BAA4BA,CAAAA,EAEiB;IAC3C,MAAMH,IAAI,GAAG,IAAI,CAACx4B,SAAS,EAAE;IAE7B,IAAI,IAAI,CAACoc,KAAK,CAAA,EAAa,CAAC,EAAE;MAC5B,IAAI,CAAC7J,IAAI,CAAA,CAAE;MACX,OAAO,IAAI,CAAC6jD,aAAa,CACvB59B,IAAI,EACJylC,KACF,CAAC;IACH,CAAC,MAAM,IAAI,IAAI,CAACzB,eAAe,EAAE,EAAE;MACjC,IAAI,CAACjqD,IAAI,CAAA,CAAE;MACX,IAAI,CAACA,IAAI,CAAA,CAAE;MACX,OAAO,IAAI,CAAC6jD,aAAa,CACvB59B,IAAI,EACJylC,KAC8B,IAEhC,CAAC;IACH;IAEA,IAAI,IAAI,CAAC7hD,KAAK,CAAA,EAAU,CAAC,EAAE;MACzB,OAAO,IAAI,CAACsrC,UAAU,CAAClvB,IAAI,EAA+B,IAAI,EAAE,IAAI,CAAC;IACvE;IAEA,IAAI,IAAI,CAACpc,KAAK,CAAA,EAAM,CAAC,EAAE;MACrB,IACE,IAAI,CAAC9G,SAAS,CAAC,YAAY,CAAC,IAC5B,IAAI,CAACpW,eAAe,CAAC,YAAY,EAAE,wBAAwB,CAAC,KAAK,IAAI,EACrE;QACA,IAAI,CAAC0C,KAAK,CAAC9H,MAAM,CAACjO,qBAAqB,EAAE,IAAI,CAAC4W,KAAK,CAAC1B,QAAQ,CAAC;MAC/D;MACA,OAAO,IAAI,CAAC2mD,UAAU,CACpB,IAAI,CAAC8E,mBAAmB,CACtB,IAAI,CAAC4I,eAAe,CAAC,KAAK,CAAC,EAC3B,IAAI,CAACp1D,SAAS,CAAA,CAChB,CAAC,EACD,IAAI,EACJ,IACF,CAAC;IACH;IAEA,IAAI,IAAI,CAACoc,KAAK,CAAU,EAAA,CAAC,IAAI,IAAI,CAACA,KAAK,CAAA,EAAQ,CAAC,IAAI,IAAI,CAAC6V,KAAK,EAAE,EAAE;MAChE,MAAM,IAAI,CAACrwB,KAAK,CAAC9H,MAAM,CAACvF,wBAAwB,EAAE,IAAI,CAACkO,KAAK,CAAC1B,QAAQ,CAAC;IACxE;IAEA,MAAM0a,GAAG,GAAG,IAAI,CAAC6d,uBAAuB,EAAE;IAC1C,IAAI,CAACtR,SAAS,CAAA,CAAE;IAChB,OAAOvM,GAAG;EACZ;EAGA0e,sBAAsBA,CAGpB9vC,IAAsC,EACJ;IAClC,IAAI,IAAI,CAAC+xB,KAAK,CAAA,EAAU,CAAC,EAAE;MACzB,MAAM/xB,IAAI,GAAG,IAAI,CAACq9D,UAAU,CAC1B,IAAI,CAAC1nD,SAAS,EAAsB,EACpC,IAAI,EACJ,KACF,CAAC;MACD,OAAO3V,IAAI;IACb;IACA,OAAO,IAAI,CAACixE,sBAAsB,EAAE;EACtC;EAEA5iC,wBAAwBA,CAAAA,EAAY;IAClC,MAAM;MAAEpuC;KAAM,GAAG,IAAI,CAACmY,KAAK;IAC3B,IAAI4M,iBAAiB,CAAC/kB,IAAI,CAAC,EAAE;MAC3B,IAAKA,IAAI,KAAA,EAAc,IAAI,CAAC,IAAI,CAACmY,KAAK,CAAC0X,WAAW,IAAK7vB,IAAI,KAAA,GAAY,EAAE;QACvE,OAAO,KAAK;MACd;MACA,IACE,CAACA,IAAI,KAAa,GAAA,IAAIA,IAAI,KAAA,GAAkB,KAC5C,CAAC,IAAI,CAACmY,KAAK,CAAC0X,WAAW,EACvB;QACA,MAAM;UAAE7vB,IAAI,EAAEw2E;QAAS,CAAC,GAAG,IAAI,CAAC7hD,SAAS,EAAE;QAK3C,IACG5P,iBAAiB,CAACyxD,QAAQ,CAAC,IAAIA,QAAQ,KAAa,EAAA,IACrDA,QAAQ,KAAA,CAAc,EACtB;UACA,IAAI,CAAC38C,eAAe,CAAC,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;UAC5C,OAAO,KAAK;QACd;MACF;IACD,CAAA,MAAM,IAAI,CAAC,IAAI,CAAC/H,KAAK,CAAA,EAAY,CAAC,EAAE;MACnC,OAAO,KAAK;IACd;IAEA,MAAM7J,IAAI,GAAG,IAAI,CAAC6M,cAAc,EAAE;IAClC,MAAM2hD,OAAO,GAAG,IAAI,CAAC15C,oBAAoB,CAAC9U,IAAI,EAAE,MAAM,CAAC;IACvD,IACE,IAAI,CAACkF,KAAK,CAACC,UAAU,CAACnF,IAAI,CAAC,KAAoB,EAAA,IAC9ClD,iBAAiB,CAAC,IAAI,CAAC5M,KAAK,CAACnY,IAAI,CAAC,IAAIy2E,OAAQ,EAC/C;MACA,OAAO,IAAI;IACb;IAEA,IAAI,IAAI,CAAC3kD,KAAK,GAAY,CAAC,IAAI2kD,OAAO,EAAE;MACtC,MAAMC,aAAa,GAAG,IAAI,CAACvpD,KAAK,CAACC,UAAU,CACzC,IAAI,CAAC2H,mBAAmB,CAAC9M,IAAI,GAAG,CAAC,CACnC,CAAC;MACD,OACEyuD,aAAa,KAAA,EAA4B,IACzCA,aAAa,KAAyB,EAAA;IAE1C;IACA,OAAO,KAAK;EACd;EAEA1mC,eAAeA,CAEbjwC,IAA+D,EAC/D69B,MAAgB,EACV;IACN,IAAI,IAAI,CAACR,aAAa,CAAA,EAAS,CAAC,EAAE;MAChCr9B,IAAI,CAAC6X,MAAM,GAAG,IAAI,CAAC0tD,iBAAiB,EAAE;MACtC,IAAI,CAACL,WAAW,CAACllE,IAAI,CAAC;MACtB,IAAI,CAAC42E,0BAA0B,CAAC52E,IAAI,CAAC;MACrC,IAAI,CAAC62E,qBAAqB,CAAC72E,IAAI,CAAC;IACjC,CAAA,MAAM,IAAI69B,MAAM,EAAE;MACjB,IAAI,CAAC34B,UAAU,CAAA,CAAE;IACnB;IAEA,IAAI,CAACy4B,SAAS,CAAA,CAAE;EAClB;EAEAyQ,4BAA4BA,CAAAA,EAAY;IACtC,MAAM;MAAEnuC;KAAM,GAAG,IAAI,CAACmY,KAAK;IAC3B,IAAInY,IAAI,OAAU,EAAE;MAClB,IAAI,CAAC65B,eAAe,CAAC,CAAC,YAAY,EAAE,mBAAmB,CAAC,CAAC;MACzD,IAAI,IAAI,CAAC7O,SAAS,CAAC,YAAY,CAAC,EAAE;QAChC,IACE,IAAI,CAACpW,eAAe,CAAC,YAAY,EAAE,wBAAwB,CAAC,KAAK,IAAI,EACrE;UACA,IAAI,CAAC0C,KAAK,CAAC9H,MAAM,CAACjO,qBAAqB,EAAE,IAAI,CAAC4W,KAAK,CAAC1B,QAAQ,CAAC;QAC/D;QAEA,OAAO,IAAI;MACb;IACF;IAEA,IAAI,IAAI,CAACqmB,YAAY,CAAA,GAAU,CAAC,EAAE;MAChC,IAAI,CAACxlB,KAAK,CAAC9H,MAAM,CAAC3E,sBAAsB,EAAE,IAAI,CAACsN,KAAK,CAAC1B,QAAQ,CAAC;MAC9D,OAAO,IAAI;IACb;IAEA,IAAI,IAAI,CAACqmB,YAAY,CAAU,EAAA,CAAC,IAAI,IAAI,CAAC+zC,gBAAgB,CAAA,CAAE,EAAE;MAC3D,IAAI,CAACv5D,KAAK,CAAC9H,MAAM,CAAC3E,sBAAsB,EAAE,IAAI,CAACsN,KAAK,CAAC1B,QAAQ,CAAC;MAC9D,OAAO,IAAI;IACb;IAEA,OACEzW,IAAI,OAAY,IAChBA,IAAI,OAAc,IAClBA,IAAI,KAAiB,EAAA,IACrBA,IAAI,KAAA,EAAc,IAClB,IAAI,CAAC2nC,KAAK,CAAE,CAAA,IACZ,IAAI,CAACuqC,eAAe,CAAA,CAAE;EAE1B;EAEAjN,WAAWA,CACTllE,IAIC,EACD82E,UAAoB,EACpBC,SAAmB,EACnBC,MAAgB,EACV;IACN,IAAIF,UAAU,EAAE;MAAA,IAAAG,gBAAA;MAEd,IAAIF,SAAS,EAAE;QAEb,IAAI,CAACvX,qBAAqB,CAACx/D,IAAI,EAAE,SAAS,CAAC;QAC3C,IAAI,IAAI,CAACirB,SAAS,CAAC,mBAAmB,CAAC,EAAE;UAAA,IAAAisD,kBAAA;UACvC,MAAMx+D,WAAW,GAAI1Y,IAAI,CACtB0Y,WAAW;UACd,IACEA,WAAW,CAACzY,IAAI,KAAK,YAAY,IACjCyY,WAAW,CAACvS,IAAI,KAAK,MAAM,IAC3BuS,WAAW,CAAC7a,GAAG,GAAG6a,WAAW,CAAC9a,KAAK,KAAK,CAAC,IACzC,GAAAs5E,kBAAA,GAACx+D,WAAW,CAACrF,KAAK,KAAA,IAAA,IAAjB6jE,kBAAA,CAAmBhjE,aAAa,CACjC,EAAA;YACA,IAAI,CAACqD,KAAK,CAAC9H,MAAM,CAAC5M,6BAA6B,EAAE6V,WAAW,CAAC;UAC/D;QACF;OAED,MAAM,IAAAu+D,CAAAA,gBAAA,GAAIj3E,IAAI,CAACuY,UAAU,KAAf0+D,IAAAA,IAAAA,gBAAA,CAAiBz+D,MAAM,EAAE;QAGlC,KAAK,MAAMm6B,SAAS,IAAI3yC,IAAI,CAACuY,UAAU,EAAE;UACvC,MAAM;YAAED;UAAU,CAAA,GAAGq6B,SAAS;UAC9B,MAAMvwC,UAAU,GACdkW,QAAQ,CAACrY,IAAI,KAAK,YAAY,GAAGqY,QAAQ,CAACnS,IAAI,GAAGmS,QAAQ,CAACtL,KAAK;UACjE,IAAI,CAACwyD,qBAAqB,CAAC7sB,SAAS,EAAEvwC,UAAU,CAAC;UACjD,IAAI,CAAC40E,MAAM,IAAIrkC,SAAS,CAACC,KAAK,EAAE;YAC9B,MAAM;cAAEA;YAAO,CAAA,GAAGD,SAAS;YAC3B,IAAIC,KAAK,CAAC3yC,IAAI,KAAK,YAAY,EAAE;cAC/B,IAAI,CAACsX,KAAK,CAAC9H,MAAM,CAAC9M,qBAAqB,EAAEgwC,SAAS,EAAE;gBAClD/vC,SAAS,EAAEgwC,KAAK,CAAC5lC,KAAK;gBACtB5K;cACF,CAAC,CAAC;YACJ,CAAC,MAAM;cAEL,IAAI,CAACsxC,iBAAiB,CAACd,KAAK,CAACzsC,IAAI,EAAEysC,KAAK,CAAC3kC,GAAG,CAACrQ,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC;cAEhE,IAAI,CAACisB,KAAK,CAACO,gBAAgB,CAACwoB,KAAK,CAAC;YACpC;UACF;QACF;MACF,CAAC,MAAM,IAAK5yC,IAAI,CAAsC0Y,WAAW,EAAE;QACjE,MAAMo7B,IAAI,GAAI9zC,IAAI,CAAsC0Y,WAAW;QAEnE,IACEo7B,IAAI,CAAC7zC,IAAI,KAAK,qBAAqB,IACnC6zC,IAAI,CAAC7zC,IAAI,KAAK,kBAAkB,EAChC;UACA,MAAM;YAAE+U;UAAI,CAAA,GAAG8+B,IAAI;UACnB,IAAI,CAAC9+B,EAAE,EAAE,MAAM,IAAI7D,KAAK,CAAC,mBAAmB,CAAC;UAE7C,IAAI,CAACquD,qBAAqB,CAACx/D,IAAI,EAAEgV,EAAE,CAAC7O,IAAI,CAAC;QAC3C,CAAC,MAAM,IAAI2tC,IAAI,CAAC7zC,IAAI,KAAK,qBAAqB,EAAE;UAC9C,KAAK,MAAMyY,WAAW,IAAIo7B,IAAI,CAACksB,YAAY,EAAE;YAC3C,IAAI,CAACrsD,gBAAgB,CAAC+E,WAAW,CAAC1D,EAAE,CAAC;UACvC;QACF;MACF;IACF;EACF;EAEArB,gBAAgBA,CAAC3T,IAAkC,EAAQ;IACzD,IAAIA,IAAI,CAACC,IAAI,KAAK,YAAY,EAAE;MAC9B,IAAI,CAACu/D,qBAAqB,CAACx/D,IAAI,EAAEA,IAAI,CAACmG,IAAI,CAAC;IAC7C,CAAC,MAAM,IAAInG,IAAI,CAACC,IAAI,KAAK,eAAe,EAAE;MACxC,KAAK,MAAMoW,IAAI,IAAIrW,IAAI,CAACstB,UAAU,EAAE;QAClC,IAAI,CAAC3Z,gBAAgB,CAAC0C,IAAI,CAAC;MAC7B;IACF,CAAC,MAAM,IAAIrW,IAAI,CAACC,IAAI,KAAK,cAAc,EAAE;MACvC,KAAK,MAAM8sE,IAAI,IAAI/sE,IAAI,CAACisB,QAAQ,EAAE;QAChC,IAAI8gD,IAAI,EAAE;UACR,IAAI,CAACp5D,gBAAgB,CAACo5D,IAAI,CAAC;QAC7B;MACF;IACF,CAAC,MAAM,IAAI/sE,IAAI,CAACC,IAAI,KAAK,gBAAgB,EAAE;MAEzC,IAAI,CAAC0T,gBAAgB,CAAC3T,IAAI,CAACgN,KAAK,CAAC;IACnC,CAAC,MAAM,IAAIhN,IAAI,CAACC,IAAI,KAAK,aAAa,EAAE;MACtC,IAAI,CAAC0T,gBAAgB,CAAC3T,IAAI,CAAC8O,QAAQ,CAAC;IACtC,CAAC,MAAM,IAAI9O,IAAI,CAACC,IAAI,KAAK,mBAAmB,EAAE;MAC5C,IAAI,CAAC0T,gBAAgB,CAAC3T,IAAI,CAAC+wC,IAAI,CAAC;IAClC;EACF;EAEAyuB,qBAAqBA,CACnBx/D,IAMC,EACDoC,UAAkB,EACZ;IACN,IAAI,IAAI,CAAC68B,mBAAmB,CAACrX,GAAG,CAACxlB,UAAU,CAAC,EAAE;MAC5C,IAAIA,UAAU,KAAK,SAAS,EAAE;QAC5B,IAAI,CAACmV,KAAK,CAAC9H,MAAM,CAACvN,sBAAsB,EAAElC,IAAI,CAAC;MACjD,CAAC,MAAM;QACL,IAAI,CAACuX,KAAK,CAAC9H,MAAM,CAACtN,eAAe,EAAEnC,IAAI,EAAE;UAAEoC;QAAW,CAAC,CAAC;MAC1D;IACF;IACA,IAAI,CAAC68B,mBAAmB,CAACxU,GAAG,CAACroB,UAAU,CAAC;EAC1C;EAIA4tC,qBAAqBA,CAAC0yB,cAAuB,EAA4B;IACvE,MAAMyU,KAAK,GAAG,EAAE;IAChB,IAAIzqC,KAAK,GAAG,IAAI;IAGhB,IAAI,CAAC7O,MAAM,CAAA,CAAU,CAAC;IAEtB,OAAO,CAAC,IAAI,CAACpJ,GAAG,CAAA,CAAU,CAAC,EAAE;MAC3B,IAAIiY,KAAK,EAAE;QACTA,KAAK,GAAG,KAAK;MACf,CAAC,MAAM;QACL,IAAI,CAAC7O,MAAM,CAAA,EAAS,CAAC;QACrB,IAAI,IAAI,CAACpJ,GAAG,CAAA,CAAU,CAAC,EAAE;MAC3B;MACA,MAAM2e,eAAe,GAAG,IAAI,CAACrW,YAAY,IAAS,CAAC;MACnD,MAAM0lC,QAAQ,GAAG,IAAI,CAAC1wC,KAAK,IAAU,CAAC;MACtC,MAAM/xB,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAqB;MAChD3V,IAAI,CAAC4yC,KAAK,GAAG,IAAI,CAAC0wB,qBAAqB,EAAkB;MACzD6T,KAAK,CAACt7D,IAAI,CACR,IAAI,CAAC2mD,oBAAoB,CACvBxiE,IAAI,EACJyiE,QAAQ,EACRC,cAAc,EACdtvB,eACF,CACF,CAAC;IACH;IAEA,OAAO+jC,KAAK;EACd;EAEA3U,oBAAoBA,CAClBxiE,IAAS,EACTyiE,QAAiB,EAEjBC,cAAuB,EACvBtvB,eAAwB,EAEL;IACnB,IAAI,IAAI,CAAC/V,aAAa,CAAA,EAAO,CAAC,EAAE;MAC9Br9B,IAAI,CAACsY,QAAQ,GAAG,IAAI,CAACgrD,qBAAqB,EAAE;IAC7C,CAAA,MAAM,IAAIb,QAAQ,EAAE;MACnBziE,IAAI,CAACsY,QAAQ,GAAGkoB,kBAAkB,CAACxgC,IAAI,CAAC4yC,KAAK,CAAC;IAChD,CAAC,MAAM,IAAI,CAAC5yC,IAAI,CAACsY,QAAQ,EAAE;MACzBtY,IAAI,CAACsY,QAAQ,GAAG8nB,eAAe,CAACpgC,IAAI,CAAC4yC,KAAK,CAAC;IAC7C;IACA,OAAO,IAAI,CAAC98B,UAAU,CAAoB9V,IAAI,EAAE,iBAAiB,CAAC;EACpE;EAGAsjE,qBAAqBA,CAAAA,EAAmC;IACtD,IAAI,IAAI,CAACvxC,KAAK,CAAA,GAAU,CAAC,EAAE;MACzB,MAAM2d,MAAM,GAAG,IAAI,CAAC78B,kBAAkB,CAAC,IAAI,CAACuF,KAAK,CAACpL,KAAK,CAAC;MACxD,MAAMoqE,SAAS,GAAG7H,aAAa,CAACv9C,IAAI,CAAC0d,MAAM,CAAC1iC,KAAK,CAAC;MAClD,IAAIoqE,SAAS,EAAE;QACb,IAAI,CAAC7/D,KAAK,CAAC9H,MAAM,CAAC3I,gCAAgC,EAAE4oC,MAAM,EAAE;UAC1D3oC,iBAAiB,EAAEqwE,SAAS,CAAC,CAAC,CAAC,CAAC/pD,UAAU,CAAC,CAAC;QAC9C,CAAC,CAAC;MACJ;MACA,OAAOqiB,MAAM;IACf;IACA,OAAO,IAAI,CAACtJ,eAAe,CAAC,IAAI,CAAC;EACnC;EAEAixC,kBAAkBA,CAChBr3E,IAEC,EACQ;IACT,IAAIA,IAAI,CAACw2E,UAAU,IAAI,IAAI,EAAE;MAC3B,OAAOx2E,IAAI,CAACw2E,UAAU,CAACx8C,IAAI,CAAC,CAAC;QAAEnzB,GAAG;QAAEmG;MAAM,CAAC,KAAK;QAC9C,OACEA,KAAK,CAACA,KAAK,KAAK,MAAM,KACrBnG,GAAG,CAAC5G,IAAI,KAAK,YAAY,GACtB4G,GAAG,CAACV,IAAI,KAAK,MAAM,GACnBU,GAAG,CAACmG,KAAK,KAAK,MAAM,CAAC;MAE7B,CAAC,CAAC;IACJ;IACA,OAAO,KAAK;EACd;EAEAwlC,qBAAqBA,CAACxyC,IAAiC,EAAE;IACvD,MAAM;MAAEuY;IAAY,CAAA,GAAGvY,IAAI;IAC3B,MAAMs3E,iBAAiB,GACrB/+D,UAAU,CAACC,MAAM,KAAK,CAAC,GAAGD,UAAU,CAAC,CAAC,CAAC,CAACtY,IAAI,GAAG,IAAI;IAErD,IAAID,IAAI,CAACwC,KAAK,KAAK,QAAQ,EAAE;MAC3B,IAAI80E,iBAAiB,KAAK,wBAAwB,EAAE;QAClD,IAAI,CAAC//D,KAAK,CACR9H,MAAM,CAAClH,gCAAgC,EACvCgQ,UAAU,CAAC,CAAC,CAAC,CAACtK,GAAG,CAACrQ,KACpB,CAAC;MACH;IACF,CAAC,MAAM,IAAIoC,IAAI,CAACwC,KAAK,KAAK,OAAO,EAAE;MACjC,IAAI80E,iBAAiB,KAAK,0BAA0B,EAAE;QACpD,IAAI,CAAC//D,KAAK,CACR9H,MAAM,CAAC3N,4BAA4B,EACnCyW,UAAU,CAAC,CAAC,CAAC,CAACtK,GAAG,CAACrQ,KACpB,CAAC;MACH;IACF,CAAC,MAAM,IAAIoC,IAAI,CAACyyC,MAAM,EAAE;MAAA,IAAA8kC,gBAAA;MACtB,IAAID,iBAAiB,KAAK,wBAAwB,EAAE;QAClD,IAAI,CAAC//D,KAAK,CAAC9H,MAAM,CAAC3L,0BAA0B,EAAEyU,UAAU,CAAC,CAAC,CAAC,CAACtK,GAAG,CAACrQ,KAAK,CAAC;MACxE;MACA,IAAI,CAAA25E,CAAAA,gBAAA,GAAAv3E,IAAI,CAACw2E,UAAU,KAAfe,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,gBAAA,CAAiB/+D,MAAM,IAAG,CAAC,EAAE;QAC/B,IAAI,CAACjB,KAAK,CACR9H,MAAM,CAAC5L,4BAA4B,EACnC0U,UAAU,CAAC,CAAC,CAAC,CAACtK,GAAG,CAACrQ,KACpB,CAAC;MACH;IACF;EACF;EAEAi5E,qBAAqBA,CACnB72E,IAEC,EACD;IAEA,IAAI,IAAI,CAACq3E,kBAAkB,CAACr3E,IAAI,CAAC,IAAIA,IAAI,CAACC,IAAI,KAAK,sBAAsB,EAAE;MAEzE,MAAM;QAAEsY;MAAY,CAAA,GAAGvY,IAAI;MAC3B,IAAIuY,UAAU,IAAI,IAAI,EAAE;QAEtB,MAAMi/D,wBAAwB,GAAGj/D,UAAU,CAACk/D,IAAI,CAAC9kC,SAAS,IAAI;UAC5D,IAAIW,QAAQ;UACZ,IAAIX,SAAS,CAAC1yC,IAAI,KAAK,iBAAiB,EAAE;YACxCqzC,QAAQ,GAAGX,SAAS,CAACC,KAAK;UAC5B,CAAC,MAAM,IAAID,SAAS,CAAC1yC,IAAI,KAAK,iBAAiB,EAAE;YAC/CqzC,QAAQ,GAAGX,SAAS,CAACW,QAAQ;UAC/B;UACA,IAAIA,QAAQ,KAAKzjC,SAAS,EAAE;YAC1B,OAAOyjC,QAAQ,CAACrzC,IAAI,KAAK,YAAY,GACjCqzC,QAAQ,CAACntC,IAAI,KAAK,SAAS,GAC3BmtC,QAAQ,CAACtmC,KAAK,KAAK,SAAS;UAClC;QACF,CAAC,CAAC;QACF,IAAIwqE,wBAAwB,KAAK3nE,SAAS,EAAE;UAC1C,IAAI,CAAC0H,KAAK,CACR9H,MAAM,CAAC7L,2BAA2B,EAClC4zE,wBAAwB,CAACvpE,GAAG,CAACrQ,KAC/B,CAAC;QACH;MACF;IACF;EACF;EAEAk1C,sBAAsBA,CAACC,QAAiB,EAAW;IACjD,IAAIA,QAAQ,EAAE,OAAO,KAAK;IAC1B,OACE,IAAI,CAAChW,YAAY,CAAW,GAAA,CAAC,IAC7B,IAAI,CAACA,YAAY,CAAA,EAAU,CAAC,IACM,IAAI,CAACA,YAAY,IAAW,CAAC;EAEnE;EAEAiW,gBAAgBA,CACdhzC,IAA4D,EAC5D+yC,QAAiB,EACjBvwC,KAAoB,EACpByL,GAAc,EACR;IACN,IAAI8kC,QAAQ,EAAE;MAWZ;IACF;IAEA,IAAqCvwC,KAAK,KAAK,QAAQ,EAAE;MACvD,IAAI,CAACm0B,YAAY,CAAC,kBAAkB,EAAE1oB,GAAG,CAAC;MACzCjO,IAAI,CAAyByyC,MAAM,GAAG,IAAI;IAC5C,CAAA,MAAM,IAAI,IAAI,CAACxnB,SAAS,CAAC,kBAAkB,CAAC,EAAE;MAC5CjrB,IAAI,CAAyByyC,MAAM,GAAG,KAAK;IAC9C;IAEA,IAAIjwC,KAAK,KAAK,QAAQ,EAAE;MACtB,IAAI,CAACm0B,YAAY,CAAC,oBAAoB,EAAE1oB,GAAG,CAAC;MAC3CjO,IAAI,CAAyBwC,KAAK,GAAG,QAAQ;IAChD,CAAC,MAAM,IAAIA,KAAK,KAAK,OAAO,EAAE;MAC5B,IAAI,CAACm0B,YAAY,CAAC,0BAA0B,EAAE1oB,GAAG,CAAC;MACjDjO,IAAI,CAAyBwC,KAAK,GAAG,OAAO;IAC9C,CAAA,MAAM,IAAI,IAAI,CAACyoB,SAAS,CAAC,oBAAoB,CAAC,EAAE;MAC9CjrB,IAAI,CAAyBwC,KAAK,GAAG,IAAI;IAC5C;EACF;EAaAk9D,qBAAqBA,CACnB1/D,IAA+D,EAC/D+yC,QAAiB,EACI;IACrB,IAAI,CAAC,IAAI,CAACD,sBAAsB,CAACC,QAAQ,CAAC,EAAE;MAC1C,IAAI,CAACC,gBAAgB,CACnBhzC,IAAI,EACJ+yC,QAAQ,EACR,IACF,CAAC;MACD,OAAO,IAAI;IACb;IAEA,MAAM2kC,eAAe,GAAG,IAAI,CAACtxC,eAAe,CAAC,IAAI,CAAC;IAElD,MAAM;MAAEnmC;KAAM,GAAG,IAAI,CAACmY,KAAK;IAC3B,MAAMu/D,aAAa,GAAGzyD,0BAA0B,CAACjlB,IAAI,CAAC,GAOlDA,IAAI,KAAA,EAAa,IAAI,IAAI,CAACi1B,iBAAiB,CAAE,CAAA,KAAyB,GAAA,GAQtEj1B,IAAI,KAAa,EAAA;IAErB,IAAI03E,aAAa,EAAE;MACjB,IAAI,CAACjqD,sCAAsC,CAACgqD,eAAe,CAAC;MAC5D,IAAI,CAAC1kC,gBAAgB,CACnBhzC,IAAI,EACJ+yC,QAAQ,EACR2kC,eAAe,CAACvxE,IAAI,EACpBuxE,eAAe,CAACzpE,GAAG,CAACrQ,KACtB,CAAC;MACD,OAAO,IAAI;IACb,CAAC,MAAM;MACL,IAAI,CAACo1C,gBAAgB,CACnBhzC,IAAI,EACJ+yC,QAAQ,EACR,IACF,CAAC;MAED,OAAO2kC,eAAe;IACxB;EACF;EAEAE,wBAAwBA,CAEtBp1E,KAAa,EACb;IACA,MAAM;MAAEvC;KAAM,GAAG,IAAI,CAACmY,KAAK;IAC3B,OAAO4M,iBAAiB,CAAC/kB,IAAI,CAAC,GAO1BA,IAAI,KAAa,EAAA,IAAI,IAAI,CAACi1B,iBAAiB,EAAE,KAAyB,GAAA,GAQtEj1B,IAAI,KAAa,EAAA;EACvB;EAKAwnC,WAAWA,CAAeznC,IAAiC,EAAe;IACxE,IAAI,IAAI,CAAC+xB,KAAK,CAAA,GAAU,CAAC,EAAE;MAEzB,OAAO,IAAI,CAAC8lD,8BAA8B,CAAC73E,IAAI,CAAC;IAClD;IAEA,OAAO,IAAI,CAAC2/D,6BAA6B,CACvC3/D,IAAI,EACJ,IAAI,CAAC0/D,qBAAqB,CAAC1/D,IAAI,EAAiB,KAAK,CACvD,CAAC;EACH;EAEA2/D,6BAA6BA,CAE3B3/D,IAAiC,EACjCy8D,sBAA2C,EAC9B;IACbz8D,IAAI,CAACuY,UAAU,GAAG,EAAE;IAIpB,MAAMq9D,UAAU,GAAG,IAAI,CAACkC,gCAAgC,CACtD93E,IAAI,EACJy8D,sBACF,CAAC;IAOD,MAAMsb,SAAS,GAAG,CAACnC,UAAU,IAAI,IAAI,CAACnhD,GAAG,CAAA,EAAS,CAAC;IAGnD,MAAMqhD,OAAO,GAAGiC,SAAS,IAAI,IAAI,CAAC1S,6BAA6B,CAACrlE,IAAI,CAAC;IAGrE,IAAI+3E,SAAS,IAAI,CAACjC,OAAO,EAAE,IAAI,CAACxQ,0BAA0B,CAACtlE,IAAI,CAAC;IAChE,IAAI,CAACs9B,gBAAgB,CAAA,EAAS,CAAC;IAE/B,OAAO,IAAI,CAACu6C,8BAA8B,CAAC73E,IAAI,CAAC;EAClD;EAEA63E,8BAA8BA,CAE5B73E,IAAiC,EACpB;IAAA,IAAAg4E,iBAAA;IACb,CAAAA,iBAAA,GAAAh4E,IAAI,CAACuY,UAAU,KAAA,IAAA,GAAAy/D,iBAAA,GAAfh4E,IAAI,CAACuY,UAAU,GAAK,EAAE;IACtBvY,IAAI,CAAC6X,MAAM,GAAG,IAAI,CAAC0tD,iBAAiB,EAAE;IACtC,IAAI,CAACqR,0BAA0B,CAAC52E,IAAI,CAAC;IACrC,IAAI,CAACwyC,qBAAqB,CAACxyC,IAAI,CAAC;IAChC,IAAI,CAAC62E,qBAAqB,CAAC72E,IAAI,CAAC;IAEhC,IAAI,CAAC29B,SAAS,CAAA,CAAE;IAChB,OAAO,IAAI,CAAC7nB,UAAU,CAAC9V,IAAI,EAAE,mBAAmB,CAAC;EACnD;EAEAulE,iBAAiBA,CAAAA,EAAgC;IAC/C,IAAI,CAAC,IAAI,CAACxzC,KAAK,CAAA,GAAU,CAAC,EAAE,IAAI,CAAC7sB,UAAU,EAAE;IAC7C,OAAO,IAAI,CAACqiC,aAAa,EAAE;EAC7B;EAEAmL,yBAAyBA,CAMvB1yC,IAAiC,EACjC2yC,SAAoB,EACpB1yC,IAAe,EACT;IACN0yC,SAAS,CAACC,KAAK,GAAG,IAAI,CAACxM,eAAe,EAAE;IACxCpmC,IAAI,CAACuY,UAAU,CAACsD,IAAI,CAAC,IAAI,CAACg3B,qBAAqB,CAACF,SAAS,EAAE1yC,IAAI,CAAC,CAAC;EACnE;EAEA4yC,qBAAqBA,CAMnBF,SAAoB,EACpB1yC,IAAe,EACf8pB,WAAwB,OAA2B,EACnD;IACA,IAAI,CAACmjC,SAAS,CAACva,SAAS,CAACC,KAAK,EAAE;MAAE3yC;IAAM,CAAA,EAAE8pB,WAAW,CAAC;IACtD,OAAO,IAAI,CAACjU,UAAU,CAAC68B,SAAS,EAAE1yC,IAAI,CAAC;EACzC;EAOAg4E,qBAAqBA,CAAAA,EAAwB;IAC3C,IAAI,CAACp6C,MAAM,CAAA,CAAU,CAAC;IAEtB,MAAMq6C,KAAK,GAAG,EAAE;IAChB,MAAMC,SAAS,GAAG,IAAIpsE,GAAG,EAAE;IAE3B,GAAG;MACD,IAAI,IAAI,CAACgmB,KAAK,CAAA,CAAU,CAAC,EAAE;QACzB;MACF;MAEA,MAAM/xB,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAqB;MAGhD,MAAMg4D,OAAO,GAAG,IAAI,CAACv1D,KAAK,CAACpL,KAAK;MAIhC,IAAImrE,SAAS,CAACvwD,GAAG,CAAC+lD,OAAO,CAAC,EAAE;QAC1B,IAAI,CAACp2D,KAAK,CACR9H,MAAM,CAAC7I,iCAAiC,EACxC,IAAI,CAACwR,KAAK,CAAC1B,QAAQ,EACnB;UACE7P,GAAG,EAAE8mE;QACP,CACF,CAAC;MACH;MACAwK,SAAS,CAAC1tD,GAAG,CAACkjD,OAAO,CAAC;MACtB,IAAI,IAAI,CAAC57C,KAAK,CAAA,GAAU,CAAC,EAAE;QACzB/xB,IAAI,CAAC6G,GAAG,GAAG,IAAI,CAACgM,kBAAkB,CAAC86D,OAAO,CAAC;MAC7C,CAAC,MAAM;QACL3tE,IAAI,CAAC6G,GAAG,GAAG,IAAI,CAACu/B,eAAe,CAAC,IAAI,CAAC;MACvC;MACA,IAAI,CAACvI,MAAM,CAAA,EAAS,CAAC;MAErB,IAAI,CAAC,IAAI,CAAC9L,KAAK,CAAA,GAAU,CAAC,EAAE;QAC1B,MAAM,IAAI,CAACxa,KAAK,CACd9H,MAAM,CAAC9I,2BAA2B,EAClC,IAAI,CAACyR,KAAK,CAAC1B,QACb,CAAC;MACH;MACA1W,IAAI,CAACgN,KAAK,GAAG,IAAI,CAAC6F,kBAAkB,CAAC,IAAI,CAACuF,KAAK,CAACpL,KAAK,CAAC;MACtDkrE,KAAK,CAACr8D,IAAI,CAAC,IAAI,CAAC/F,UAAU,CAAC9V,IAAI,EAAE,iBAAiB,CAAC,CAAC;IACtD,CAAC,QAAQ,IAAI,CAACy0B,GAAG,GAAS,CAAC;IAE3B,IAAI,CAACoJ,MAAM,CAAA,CAAU,CAAC;IAEtB,OAAOq6C,KAAK;EACd;EAMAE,qBAAqBA,CAAAA,EAAG;IACtB,MAAMF,KAA0B,GAAG,EAAE;IACrC,MAAMngE,UAAU,GAAG,IAAIhM,GAAG,EAAE;IAC5B,GAAG;MACD,MAAM/L,IAAI,GAAG,IAAI,CAAC2V,SAAS,EAAqB;MAChD3V,IAAI,CAAC6G,GAAG,GAAG,IAAI,CAACu/B,eAAe,CAAC,IAAI,CAAC;MAErC,IAAIpmC,IAAI,CAAC6G,GAAG,CAACV,IAAI,KAAK,MAAM,EAAE;QAC5B,IAAI,CAACoR,KAAK,CAAC9H,MAAM,CAAC/I,gCAAgC,EAAE1G,IAAI,CAAC6G,GAAG,CAAC;MAC/D;MAEA,IAAIkR,UAAU,CAAC6P,GAAG,CAAC5nB,IAAI,CAAC6G,GAAG,CAACV,IAAI,CAAC,EAAE;QACjC,IAAI,CAACoR,KAAK,CAAC9H,MAAM,CAAC7I,iCAAiC,EAAE5G,IAAI,CAAC6G,GAAG,EAAE;UAC7DA,GAAG,EAAE7G,IAAI,CAAC6G,GAAG,CAACV;QAChB,CAAC,CAAC;MACJ;MACA4R,UAAU,CAAC0S,GAAG,CAACzqB,IAAI,CAAC6G,GAAG,CAACV,IAAI,CAAC;MAC7B,IAAI,CAAC03B,MAAM,CAAA,EAAS,CAAC;MACrB,IAAI,CAAC,IAAI,CAAC9L,KAAK,CAAA,GAAU,CAAC,EAAE;QAC1B,MAAM,IAAI,CAACxa,KAAK,CACd9H,MAAM,CAAC9I,2BAA2B,EAClC,IAAI,CAACyR,KAAK,CAAC1B,QACb,CAAC;MACH;MACA1W,IAAI,CAACgN,KAAK,GAAG,IAAI,CAAC6F,kBAAkB,CAAC,IAAI,CAACuF,KAAK,CAACpL,KAAK,CAAC;MACtDkrE,KAAK,CAACr8D,IAAI,CAAC,IAAI,CAAC/F,UAAU,CAAC9V,IAAI,EAAE,iBAAiB,CAAC,CAAC;IACtD,CAAC,QAAQ,IAAI,CAACy0B,GAAG,GAAS,CAAC;IAE3B,OAAOyjD,KAAK;EACd;EAEAtB,0BAA0BA,CACxB52E,IAEC,EACD;IACA,IAAI+X,UAA+B;IACA;MAEjC,IAAIsgE,OAAO,GAAG,KAAK;IACrB;IAGA,IAAI,IAAI,CAACtmD,KAAK,CAAA,EAAS,CAAC,EAAE;MACxB,IACE,IAAI,CAACyL,qBAAqB,CAAE,CAAA,IAC5B,IAAI,CAACtI,iBAAiB,CAAA,CAAE,KAAA,EAA8B,EACtD;QAGA;MACF;MAEA,IAAI,CAAChN,IAAI,CAAA,CAAE;MAEX,IAAqC,IAAI,CAAC+C,SAAS,CAAC,kBAAkB,CAAC,EAAE;QACvElT,UAAU,GAAG,IAAI,CAACqgE,qBAAqB,EAAE;MAC3C,CAAC,MAAM;QACLrgE,UAAU,GAAG,IAAI,CAACkgE,qBAAqB,EAAE;MAC3C;MACmC;QACjCI,OAAO,GAAG,IAAI;MAChB;IACF,CAAC,MAAM,IAAI,IAAI,CAACt7C,YAAY,CAAW,EAAA,CAAC,IAAI,CAAC,IAAI,CAACS,qBAAqB,EAAE,EAAE;MACzE,IACE,CAAC,IAAI,CAACvS,SAAS,CAAC,wBAAwB,CAAC,IACR,CAAC,IAAI,CAACA,SAAS,CAAC,kBAAkB,CAAC,EACpE;QACA,IAAI,CAAC1T,KAAK,CAAC9H,MAAM,CAACnM,yBAAyB,EAAE,IAAI,CAAC8U,KAAK,CAAC1B,QAAQ,CAAC;MACnE;MACA,IAAoC,CAAC,IAAI,CAACuU,SAAS,CAAC,kBAAkB,CAAC,EAAE;QACvE,IAAI,CAAC6R,QAAQ,CAAC98B,IAAI,EAAE,wBAAwB,EAAE,IAAI,CAAC;MACrD;MACA,IAAI,CAACkoB,IAAI,CAAA,CAAE;MACXnQ,UAAU,GAAG,IAAI,CAACkgE,qBAAqB,EAAE;IAC3C,CAAC,MAAM;MACLlgE,UAAU,GAAG,EAAE;IACjB;IAEA,IAEE,CAACsgE,OAAO,IACR,IAAI,CAACptD,SAAS,CAAC,kBAAkB,CAAC,EAClC;MACAjrB,IAAI,CAACw2E,UAAU,GAAGz+D,UAAU;IAC9B,CAAC,MAAM;MACL/X,IAAI,CAAC+X,UAAU,GAAGA,UAAU;IAC9B;EACF;EAEA+/D,gCAAgCA,CAC9B93E,IAAiC,EACjCy8D,sBAA2C,EAClC;IAET,IAAIA,sBAAsB,EAAE;MAC1B,MAAM9pB,SAAS,GAAG,IAAI,CAACx5B,eAAe,CACpCsjD,sBACF,CAAC;MACD9pB,SAAS,CAACC,KAAK,GAAG6pB,sBAAsB;MACxCz8D,IAAI,CAACuY,UAAU,CAACsD,IAAI,CAClB,IAAI,CAACg3B,qBAAqB,CAACF,SAAS,EAAE,wBAAwB,CAChE,CAAC;MACD,OAAO,IAAI;IACZ,CAAA,MAAM,IAELztB,0BAA0B,CAAC,IAAI,CAAC9M,KAAK,CAACnY,IAAI,CAAC,EAC3C;MACA,IAAI,CAACyyC,yBAAyB,CAC5B1yC,IAAI,EACJ,IAAI,CAAC2V,SAAS,CAAA,CAA4B,EAC1C,wBACF,CAAC;MACD,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd;EAEA0vD,6BAA6BA,CAACrlE,IAAiC,EAAW;IACxE,IAAI,IAAI,CAAC+xB,KAAK,CAAA,EAAQ,CAAC,EAAE;MACvB,MAAM4gB,SAAS,GAAG,IAAI,CAACh9B,SAAS,EAA8B;MAC9D,IAAI,CAACuS,IAAI,CAAA,CAAE;MACX,IAAI,CAACoV,gBAAgB,CAAA,EAAO,CAAC;MAE7B,IAAI,CAACoV,yBAAyB,CAC5B1yC,IAAI,EACJ2yC,SAAS,EACT,0BACF,CAAC;MACD,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd;EAEA2yB,0BAA0BA,CAACtlE,IAAiC,EAAE;IAC5D,IAAI0sC,KAAK,GAAG,IAAI;IAChB,IAAI,CAAC7O,MAAM,CAAA,CAAU,CAAC;IACtB,OAAO,CAAC,IAAI,CAACpJ,GAAG,CAAA,CAAU,CAAC,EAAE;MAC3B,IAAIiY,KAAK,EAAE;QACTA,KAAK,GAAG,KAAK;MACf,CAAC,MAAM;QAEL,IAAI,IAAI,CAACjY,GAAG,CAAA,EAAS,CAAC,EAAE;UACtB,MAAM,IAAI,CAACld,KAAK,CAAC9H,MAAM,CAACzN,sBAAsB,EAAE,IAAI,CAACoW,KAAK,CAAC1B,QAAQ,CAAC;QACtE;QAEA,IAAI,CAACmnB,MAAM,CAAA,EAAS,CAAC;QACrB,IAAI,IAAI,CAACpJ,GAAG,CAAA,CAAU,CAAC,EAAE;MAC3B;MAEA,MAAMke,SAAS,GAAG,IAAI,CAACh9B,SAAS,EAAqB;MACrD,MAAMu9B,gBAAgB,GAAG,IAAI,CAACnhB,KAAK,IAAU,CAAC;MAC9C,MAAMqhB,eAAe,GAAG,IAAI,CAACrW,YAAY,IAAS,CAAC;MACnD4V,SAAS,CAACW,QAAQ,GAAG,IAAI,CAACgwB,qBAAqB,EAAE;MACjD,MAAMgV,eAAe,GAAG,IAAI,CAACrlC,oBAAoB,CAC/CN,SAAS,EACTO,gBAAgB,EAChBlzC,IAAI,CAACykC,UAAU,KAAK,MAAM,IAAIzkC,IAAI,CAACykC,UAAU,KAAK,QAAQ,EAC1D2O,eAAe,EACfvjC,SACF,CAAC;MACD7P,IAAI,CAACuY,UAAU,CAACsD,IAAI,CAACy8D,eAAe,CAAC;IACvC;EACF;EAGArlC,oBAAoBA,CAClBN,SAAoC,EACpCO,gBAAyB,EAEzBC,kBAA2B,EAC3BC,eAAwB,EACxBrpB,WAAoC,EACjB;IACnB,IAAI,IAAI,CAACsT,aAAa,CAAA,EAAO,CAAC,EAAE;MAC9BsV,SAAS,CAACC,KAAK,GAAG,IAAI,CAACxM,eAAe,EAAE;IAC1C,CAAC,MAAM;MACL,MAAM;QAAEkN;MAAU,CAAA,GAAGX,SAAS;MAC9B,IAAIO,gBAAgB,EAAE;QACpB,MAAM,IAAI,CAAC37B,KAAK,CAAC9H,MAAM,CAAClM,qBAAqB,EAAEovC,SAAS,EAAE;UACxDnvC,UAAU,EAAG8vC,QAAQ,CAAqBtmC;QAC5C,CAAC,CAAC;MACJ;MACA,IAAI,CAAC0mC,iBAAiB,CACnBJ,QAAQ,CAAkBntC,IAAI,EAC/BwsC,SAAS,CAAC1kC,GAAG,CAACrQ,KAAK,EACnB,IAAI,EACJ,IACF,CAAC;MACD,IAAI,CAAC+0C,SAAS,CAACC,KAAK,EAAE;QACpBD,SAAS,CAACC,KAAK,GAAGxS,eAAe,CAACkT,QAAQ,CAAC;MAC7C;IACF;IACA,OAAO,IAAI,CAACT,qBAAqB,CAC/BF,SAAS,EACT,iBAAiB,EACjB5oB,WACF,CAAC;EACH;EAIA+nB,WAAWA,CACTtE,KAAuD,EAC9C;IACT,OAAOA,KAAK,CAACvtC,IAAI,KAAK,YAAY,IAAIutC,KAAK,CAACrnC,IAAI,KAAK,MAAM;EAC7D;AACF;ACj3Ge,MAAMoyE,MAAM,SAASpI,eAAe,CAAC;EAOlD7yE,WAAWA,CACT4T,OAAmC,EACnCkc,KAAa,EACb44C,UAAsB,EACtB;IACA90D,OAAO,GAAGF,UAAU,CAACE,OAAO,CAAC;IAC7B,KAAK,CAACA,OAAO,EAAEkc,KAAK,CAAC;IAErB,IAAI,CAAClc,OAAO,GAAGA,OAAO;IACtB,IAAI,CAAC4tB,gBAAgB,CAAA,CAAE;IACvB,IAAI,CAACvuB,OAAO,GAAGy1D,UAAU;IACzB,IAAI,CAACloE,QAAQ,GAAGoT,OAAO,CAACtB,cAAc;IACtC,IAAI,CAACE,UAAU,GAAGoB,OAAO,CAACpB,UAAU;IAEpC,IAAI8B,WAAW,GAAG,CAAC;IACnB,IAAIV,OAAO,CAACjB,yBAAyB,EAAE;MACrC2B,WAAW,KAAyC;IACtD;IACA,IAAIV,OAAO,CAAChB,0BAA0B,EAAE;MACtC0B,WAAW,KAA0C;IACvD;IACA,IAAIV,OAAO,CAACd,2BAA2B,EAAE;MACvCwB,WAAW,KAA2C;IACxD;IACA,IAAIV,OAAO,CAACb,uBAAuB,EAAE;MACnCuB,WAAW,MAAuC;IACpD;IACA,IAAIV,OAAO,CAACZ,sBAAsB,EAAE;MAClCsB,WAAW,MAAsC;IACnD;IACA,IAAIV,OAAO,CAACf,6BAA6B,EAAE;MACzCyB,WAAW,KAA6C;IAC1D;IACA,IAAIV,OAAO,CAACT,MAAM,EAAE;MAClBmB,WAAW,MAAsB;IACnC;IACA,IAAIV,OAAO,CAACR,MAAM,EAAE;MAClBkB,WAAW,OAAsB;IACnC;IACA,IAAIV,OAAO,CAACP,uBAAuB,EAAE;MACnCiB,WAAW,OAAuC;IACpD;IACA,IAAIV,OAAO,CAACN,8BAA8B,EAAE;MAC1CgB,WAAW,OAA8C;IAC3D;IACA,IAAIV,OAAO,CAACL,aAAa,EAAE;MACzBe,WAAW,QAA6B;IAC1C;IACA,IAAIV,OAAO,CAACJ,aAAa,EAAE;MACzBc,WAAW,QAA6B;IAC1C;IACA,IAAIV,OAAO,CAACH,MAAM,EAAE;MAClBa,WAAW,QAAsB;IACnC;IAEA,IAAI,CAACA,WAAW,GAAGA,WAAW;EAChC;EAGAwtB,eAAeA,CAAAA,EAAuC;IACpD,OAAO3W,YAAY;EACrB;EAEA/W,KAAKA,CAAAA,EAAW;IACd,IAAI,CAAC+tB,kBAAkB,CAAA,CAAE;IACzB,MAAM9tB,IAAI,GAAG,IAAI,CAACgE,SAAS,EAAU;IACrC,MAAMogC,OAAO,GAAG,IAAI,CAACpgC,SAAS,EAAa;IAC3C,IAAI,CAAC6e,SAAS,CAAA,CAAE;IAChB7iB,IAAI,CAAC2c,MAAM,GAAG,IAAI;IAClB,IAAI,CAACwnB,aAAa,CAACnkC,IAAI,EAAEokC,OAAO,CAAC;IACjCpkC,IAAI,CAAC2c,MAAM,GAAG,IAAI,CAAClW,KAAK,CAACkW,MAAM;IAC/B3c,IAAI,CAAC8Z,QAAQ,CAACjT,MAAM,GAAG,IAAI,CAACJ,KAAK,CAACmU,WAAW;IAC7C,OAAO5a,IAAI;EACb;AACF;ACrEO,SAASD,KAAKA,CAAC0b,KAAa,EAAElc,OAAiB,EAAQ;EAAA,IAAAsnE,QAAA;EAC5D,IAAI,CAAA,CAAAA,QAAA,GAAAtnE,OAAO,KAAA,IAAA,GAAA,KAAA,CAAA,GAAPsnE,QAAA,CAAS7oE,UAAU,MAAK,aAAa,EAAE;IACzCuB,OAAO,GAAAjE,MAAA,CAAAwB,MAAA,CAAA,CAAA,CAAA,EACFyC,OAAO,CACX;IACD,IAAI;MACFA,OAAO,CAACvB,UAAU,GAAG,QAAQ;MAC7B,MAAM+Y,MAAM,GAAG+vD,SAAS,CAACvnE,OAAO,EAAEkc,KAAK,CAAC;MACxC,MAAMsrD,GAAG,GAAGhwD,MAAM,CAAChX,KAAK,EAAE;MAE1B,IAAIgX,MAAM,CAACiC,iBAAiB,EAAE;QAC5B,OAAO+tD,GAAG;MACZ;MAEA,IAAIhwD,MAAM,CAACkC,2BAA2B,EAAE;QAMtC,IAAI;UACF1Z,OAAO,CAACvB,UAAU,GAAG,QAAQ;UAC7B,OAAO8oE,SAAS,CAACvnE,OAAO,EAAEkc,KAAK,CAAC,CAAC1b,KAAK,CAAA,CAAE;QAC1C,CAAC,CAAC,OAAAa,OAAA,EAAM,CAAC;MACX,CAAC,MAAM;QAGLmmE,GAAG,CAAC3iC,OAAO,CAACpmC,UAAU,GAAG,QAAQ;MACnC;MAEA,OAAO+oE,GAAG;IACX,CAAA,CAAC,OAAOC,WAAW,EAAE;MACpB,IAAI;QACFznE,OAAO,CAACvB,UAAU,GAAG,QAAQ;QAC7B,OAAO8oE,SAAS,CAACvnE,OAAO,EAAEkc,KAAK,CAAC,CAAC1b,KAAK,CAAA,CAAE;MAC1C,CAAC,CAAC,OAAA2oD,QAAA,EAAM,CAAC;MAET,MAAMse,WAAW;IACnB;EACF,CAAC,MAAM;IACL,OAAOF,SAAS,CAACvnE,OAAO,EAAEkc,KAAK,CAAC,CAAC1b,KAAK,CAAA,CAAE;EAC1C;AACF;AAEO,SAASo0B,eAAeA,CAAC1Y,KAAa,EAAElc,OAAiB,EAAc;EAC5E,MAAMwX,MAAM,GAAG+vD,SAAS,CAACvnE,OAAO,EAAEkc,KAAK,CAAC;EACxC,IAAI1E,MAAM,CAACxX,OAAO,CAACV,UAAU,EAAE;IAC7BkY,MAAM,CAACtQ,KAAK,CAACgP,MAAM,GAAG,IAAI;EAC5B;EACA,OAAOsB,MAAM,CAAC65C,aAAa,EAAE;AAC/B;AAEA,SAASqW,0BAA0BA,CACjCC,kBAAsC,EACH;EACnC,MAAM19D,UAA6C,GAAG,CAAA,CAAE;EACxD,KAAK,MAAM05C,QAAQ,IAAI5nD,MAAM,CAACkC,IAAI,CAChC0pE,kBACF,CAAC,EAAkC;IACjC19D,UAAU,CAAC05C,QAAQ,CAAC,GAAG1uC,gBAAgB,CAAC0yD,kBAAkB,CAAChkB,QAAQ,CAAC,CAAC;EACvE;EACA,OAAO15C,UAAU;AACnB;MAEa29D,QAAQ,GAAGF,0BAA0B,CAACC,EAAkB,CAAC;AAEtE,SAASJ,SAASA,CAACvnE,OAAmC,EAAEkc,KAAa,EAAU;EAC7E,IAAI0yC,GAAG,GAAGyY,MAAM;EAChB,MAAMvS,UAAsB,GAAG,IAAIlrD,GAAG,EAAE;EACxC,IAAI5J,OAAO,IAAA,IAAA,IAAPA,OAAO,CAAEX,OAAO,EAAE;IACpB,KAAK,MAAM+a,MAAM,IAAIpa,OAAO,CAACX,OAAO,EAAE;MACpC,IAAIpK,IAAI,EAAE8K,IAAI;MACd,IAAI,OAAOqa,MAAM,KAAK,QAAQ,EAAE;QAC9BnlB,IAAI,GAAGmlB,MAAM;MACf,CAAC,MAAM;QACL,CAACnlB,IAAI,EAAE8K,IAAI,CAAC,GAAGqa,MAAM;MACvB;MACA,IAAI,CAAC06C,UAAU,CAACp+C,GAAG,CAACzhB,IAAI,CAAC,EAAE;QACzB6/D,UAAU,CAACr3D,GAAG,CAACxI,IAAI,EAAE8K,IAAI,IAAI,CAAE,CAAA,CAAC;MAClC;IACF;IACA80D,eAAe,CAACC,UAAU,CAAC;IAC3BlG,GAAG,GAAGiZ,cAAc,CAAC/S,UAAU,CAAC;EAClC;EAEA,OAAO,IAAIlG,GAAG,CAAC5uD,OAAO,EAAEkc,KAAK,EAAE44C,UAAU,CAAC;AAC5C;AAEA,MAAMgT,gBAAgB,GAAG,IAAIl+D,GAAG,EAAwC;AAGxE,SAASi+D,cAAcA,CACrB/S,UAA4B,EACE;EAC9B,MAAMiT,UAAU,GAAG,EAAE;EACrB,KAAK,MAAM9yE,IAAI,IAAI4gE,gBAAgB,EAAE;IACnC,IAAIf,UAAU,CAACp+C,GAAG,CAACzhB,IAAI,CAAC,EAAE;MACxB8yE,UAAU,CAACp9D,IAAI,CAAC1V,IAAI,CAAC;IACvB;EACF;EACA,MAAMU,GAAG,GAAGoyE,UAAU,CAAC3yE,IAAI,CAAC,GAAG,CAAC;EAChC,IAAIw5D,GAAG,GAAGkZ,gBAAgB,CAACtqE,GAAG,CAAC7H,GAAG,CAAC;EACnC,IAAI,CAACi5D,GAAG,EAAE;IACRA,GAAG,GAAGyY,MAAM;IACZ,KAAK,MAAMjtD,MAAM,IAAI2tD,UAAU,EAAE;MAE/BnZ,GAAG,GAAGgH,YAAY,CAACx7C,MAAM,CAAC,CAACw0C,GAAG,CAAC;IACjC;IACAkZ,gBAAgB,CAACrqE,GAAG,CAAC9H,GAAG,EAAEi5D,GAAG,CAAC;EAChC;EACA,OAAOA,GAAG;AACZ;;;"}