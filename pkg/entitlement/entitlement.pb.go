// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/entitlement/entitlement.proto

package entitlement

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type EntitlementRequest struct {
	Action     string `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	LabelValue string `protobuf:"bytes,2,opt,name=labelValue,proto3" json:"labelValue,omitempty"`
	OrgID      string `protobuf:"bytes,3,opt,name=orgID,proto3" json:"orgID,omitempty"`
	UserID     string `protobuf:"bytes,4,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (m *EntitlementRequest) Reset()      { *m = EntitlementRequest{} }
func (*EntitlementRequest) ProtoMessage() {}
func (*EntitlementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_754ec3bf97950ba7, []int{0}
}
func (m *EntitlementRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntitlementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntitlementRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntitlementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntitlementRequest.Merge(m, src)
}
func (m *EntitlementRequest) XXX_Size() int {
	return m.Size()
}
func (m *EntitlementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EntitlementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EntitlementRequest proto.InternalMessageInfo

func (m *EntitlementRequest) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *EntitlementRequest) GetLabelValue() string {
	if m != nil {
		return m.LabelValue
	}
	return ""
}

func (m *EntitlementRequest) GetOrgID() string {
	if m != nil {
		return m.OrgID
	}
	return ""
}

func (m *EntitlementRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type EntitlementResponse struct {
	Entitled bool `protobuf:"varint,1,opt,name=entitled,proto3" json:"entitled,omitempty"`
}

func (m *EntitlementResponse) Reset()      { *m = EntitlementResponse{} }
func (*EntitlementResponse) ProtoMessage() {}
func (*EntitlementResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_754ec3bf97950ba7, []int{1}
}
func (m *EntitlementResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntitlementResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntitlementResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntitlementResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntitlementResponse.Merge(m, src)
}
func (m *EntitlementResponse) XXX_Size() int {
	return m.Size()
}
func (m *EntitlementResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EntitlementResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EntitlementResponse proto.InternalMessageInfo

func (m *EntitlementResponse) GetEntitled() bool {
	if m != nil {
		return m.Entitled
	}
	return false
}

func init() {
	proto.RegisterType((*EntitlementRequest)(nil), "entitlement.EntitlementRequest")
	proto.RegisterType((*EntitlementResponse)(nil), "entitlement.EntitlementResponse")
}

func init() { proto.RegisterFile("pkg/entitlement/entitlement.proto", fileDescriptor_754ec3bf97950ba7) }

var fileDescriptor_754ec3bf97950ba7 = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2c, 0xc8, 0x4e, 0xd7,
	0x4f, 0xcd, 0x2b, 0xc9, 0x2c, 0xc9, 0x49, 0xcd, 0x4d, 0xcd, 0x2b, 0x41, 0x66, 0xeb, 0x15, 0x14,
	0xe5, 0x97, 0xe4, 0x0b, 0x71, 0x23, 0x09, 0x29, 0x55, 0x71, 0x09, 0xb9, 0x22, 0xb8, 0x41, 0xa9,
	0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x62, 0x5c, 0x6c, 0x89, 0xc9, 0x25, 0x99, 0xf9, 0x79, 0x12,
	0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x50, 0x9e, 0x90, 0x1c, 0x17, 0x57, 0x4e, 0x62, 0x52, 0x6a,
	0x4e, 0x58, 0x62, 0x4e, 0x69, 0xaa, 0x04, 0x13, 0x58, 0x0e, 0x49, 0x44, 0x48, 0x84, 0x8b, 0x35,
	0xbf, 0x28, 0xdd, 0xd3, 0x45, 0x82, 0x19, 0x2c, 0x05, 0xe1, 0x80, 0x4c, 0x2b, 0x2d, 0x4e, 0x2d,
	0xf2, 0x74, 0x91, 0x60, 0x81, 0x98, 0x06, 0xe1, 0x29, 0x19, 0x72, 0x09, 0xa3, 0xd8, 0x5d, 0x5c,
	0x90, 0x9f, 0x57, 0x9c, 0x2a, 0x24, 0xc5, 0xc5, 0x01, 0x75, 0x61, 0x0a, 0xd8, 0x7a, 0x8e, 0x20,
	0x38, 0xdf, 0x28, 0x86, 0x8b, 0x1b, 0x49, 0x8b, 0x90, 0x2f, 0x17, 0x07, 0x94, 0x9b, 0x22, 0x24,
	0xaf, 0x87, 0xec, 0x55, 0x4c, 0x4f, 0x49, 0x29, 0xe0, 0x56, 0x00, 0xb1, 0xd9, 0x29, 0xf2, 0xc2,
	0x43, 0x39, 0x86, 0x1b, 0x0f, 0xe5, 0x18, 0x3e, 0x3c, 0x94, 0x63, 0x6c, 0x78, 0x24, 0xc7, 0xb8,
	0xe2, 0x91, 0x1c, 0xe3, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7,
	0xf8, 0xe2, 0x91, 0x1c, 0xc3, 0x87, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c,
	0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x94, 0x72, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72,
	0x7e, 0xae, 0x7e, 0x7a, 0x51, 0x62, 0x5a, 0x62, 0x5e, 0xa2, 0x7e, 0x4e, 0x7e, 0x76, 0x26, 0x72,
	0xd0, 0x27, 0xb1, 0x81, 0xc3, 0xde, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xbb, 0x11, 0x04, 0x54,
	0xa0, 0x01, 0x00, 0x00,
}

func (this *EntitlementRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EntitlementRequest)
	if !ok {
		that2, ok := that.(EntitlementRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	if this.LabelValue != that1.LabelValue {
		return false
	}
	if this.OrgID != that1.OrgID {
		return false
	}
	if this.UserID != that1.UserID {
		return false
	}
	return true
}
func (this *EntitlementResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EntitlementResponse)
	if !ok {
		that2, ok := that.(EntitlementResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Entitled != that1.Entitled {
		return false
	}
	return true
}
func (this *EntitlementRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&entitlement.EntitlementRequest{")
	s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	s = append(s, "LabelValue: "+fmt.Sprintf("%#v", this.LabelValue)+",\n")
	s = append(s, "OrgID: "+fmt.Sprintf("%#v", this.OrgID)+",\n")
	s = append(s, "UserID: "+fmt.Sprintf("%#v", this.UserID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EntitlementResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&entitlement.EntitlementResponse{")
	s = append(s, "Entitled: "+fmt.Sprintf("%#v", this.Entitled)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringEntitlement(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EntitlementClient is the client API for Entitlement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EntitlementClient interface {
	Entitled(ctx context.Context, in *EntitlementRequest, opts ...grpc.CallOption) (*EntitlementResponse, error)
}

type entitlementClient struct {
	cc *grpc.ClientConn
}

func NewEntitlementClient(cc *grpc.ClientConn) EntitlementClient {
	return &entitlementClient{cc}
}

func (c *entitlementClient) Entitled(ctx context.Context, in *EntitlementRequest, opts ...grpc.CallOption) (*EntitlementResponse, error) {
	out := new(EntitlementResponse)
	err := c.cc.Invoke(ctx, "/entitlement.Entitlement/Entitled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntitlementServer is the server API for Entitlement service.
type EntitlementServer interface {
	Entitled(context.Context, *EntitlementRequest) (*EntitlementResponse, error)
}

func RegisterEntitlementServer(s *grpc.Server, srv EntitlementServer) {
	s.RegisterService(&_Entitlement_serviceDesc, srv)
}

func _Entitlement_Entitled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntitlementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntitlementServer).Entitled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entitlement.Entitlement/Entitled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntitlementServer).Entitled(ctx, req.(*EntitlementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Entitlement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "entitlement.Entitlement",
	HandlerType: (*EntitlementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Entitled",
			Handler:    _Entitlement_Entitled_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/entitlement/entitlement.proto",
}

func (m *EntitlementRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntitlementRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Action) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEntitlement(dAtA, i, uint64(len(m.Action)))
		i += copy(dAtA[i:], m.Action)
	}
	if len(m.LabelValue) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEntitlement(dAtA, i, uint64(len(m.LabelValue)))
		i += copy(dAtA[i:], m.LabelValue)
	}
	if len(m.OrgID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEntitlement(dAtA, i, uint64(len(m.OrgID)))
		i += copy(dAtA[i:], m.OrgID)
	}
	if len(m.UserID) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEntitlement(dAtA, i, uint64(len(m.UserID)))
		i += copy(dAtA[i:], m.UserID)
	}
	return i, nil
}

func (m *EntitlementResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntitlementResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Entitled {
		dAtA[i] = 0x8
		i++
		if m.Entitled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintEntitlement(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EntitlementRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovEntitlement(uint64(l))
	}
	l = len(m.LabelValue)
	if l > 0 {
		n += 1 + l + sovEntitlement(uint64(l))
	}
	l = len(m.OrgID)
	if l > 0 {
		n += 1 + l + sovEntitlement(uint64(l))
	}
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovEntitlement(uint64(l))
	}
	return n
}

func (m *EntitlementResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Entitled {
		n += 2
	}
	return n
}

func sovEntitlement(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEntitlement(x uint64) (n int) {
	return sovEntitlement(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *EntitlementRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EntitlementRequest{`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`LabelValue:` + fmt.Sprintf("%v", this.LabelValue) + `,`,
		`OrgID:` + fmt.Sprintf("%v", this.OrgID) + `,`,
		`UserID:` + fmt.Sprintf("%v", this.UserID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EntitlementResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EntitlementResponse{`,
		`Entitled:` + fmt.Sprintf("%v", this.Entitled) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringEntitlement(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *EntitlementRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntitlement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntitlementRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntitlementRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntitlement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntitlement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntitlement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntitlement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntitlement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntitlement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntitlement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntitlement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntitlement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntitlement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntitlement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntitlement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntitlement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntitlement
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntitlement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntitlementResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntitlement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntitlementResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntitlementResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entitled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntitlement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Entitled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEntitlement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntitlement
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntitlement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEntitlement(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEntitlement
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntitlement
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntitlement
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEntitlement
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthEntitlement
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEntitlement
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEntitlement(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthEntitlement
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEntitlement = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEntitlement   = fmt.Errorf("proto: integer overflow")
)
