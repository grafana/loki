// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/compactor/deletion/deletionproto/types.proto

package deletionproto

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_prometheus_common_model "github.com/prometheus/common/model"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DeleteRequest struct {
	RequestID   string                                  `protobuf:"bytes,1,opt,name=requestID,proto3" json:"request_id"`
	StartTime   github_com_prometheus_common_model.Time `protobuf:"varint,2,opt,name=startTime,proto3,customtype=github.com/prometheus/common/model.Time" json:"start_time"`
	EndTime     github_com_prometheus_common_model.Time `protobuf:"varint,3,opt,name=endTime,proto3,customtype=github.com/prometheus/common/model.Time" json:"end_time"`
	Query       string                                  `protobuf:"bytes,4,opt,name=query,proto3" json:"query"`
	Status      DeleteRequestStatus                     `protobuf:"bytes,5,opt,name=status,proto3,customtype=DeleteRequestStatus" json:"status"`
	CreatedAt   github_com_prometheus_common_model.Time `protobuf:"varint,6,opt,name=createdAt,proto3,customtype=github.com/prometheus/common/model.Time" json:"created_at"`
	UserID      string                                  `protobuf:"bytes,7,opt,name=userID,proto3" json:"user_id"`
	SequenceNum int64                                   `protobuf:"varint,8,opt,name=sequenceNum,proto3" json:"-"`
}

func (m *DeleteRequest) Reset()      { *m = DeleteRequest{} }
func (*DeleteRequest) ProtoMessage() {}
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a14ac54fc425be6, []int{0}
}
func (m *DeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRequest.Merge(m, src)
}
func (m *DeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRequest proto.InternalMessageInfo

func (m *DeleteRequest) GetRequestID() string {
	if m != nil {
		return m.RequestID
	}
	return ""
}

func (m *DeleteRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *DeleteRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *DeleteRequest) GetSequenceNum() int64 {
	if m != nil {
		return m.SequenceNum
	}
	return 0
}

func init() {
	proto.RegisterType((*DeleteRequest)(nil), "deletionproto.DeleteRequest")
}

func init() {
	proto.RegisterFile("pkg/compactor/deletion/deletionproto/types.proto", fileDescriptor_8a14ac54fc425be6)
}

var fileDescriptor_8a14ac54fc425be6 = []byte{
	// 426 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xbf, 0x6e, 0xd4, 0x40,
	0x10, 0xc6, 0xbd, 0x1c, 0x77, 0x17, 0x6f, 0x14, 0x0a, 0x43, 0x61, 0x51, 0xec, 0x46, 0x20, 0x94,
	0x14, 0x70, 0x8b, 0x94, 0x12, 0x45, 0x88, 0xd3, 0x35, 0x69, 0x28, 0x0c, 0x34, 0x50, 0x9c, 0x36,
	0xf6, 0xe0, 0x58, 0xb9, 0xf5, 0x3a, 0xfb, 0x07, 0x29, 0x1d, 0x8f, 0xc0, 0x63, 0xf0, 0x28, 0x29,
	0xaf, 0x8c, 0x28, 0x2c, 0xce, 0xd7, 0x20, 0x57, 0x79, 0x00, 0x0a, 0xb4, 0x6b, 0xc3, 0xe5, 0x3a,
	0xa0, 0x9a, 0x4f, 0x33, 0xdf, 0xfe, 0x76, 0x66, 0x76, 0xf1, 0xf3, 0xea, 0x3c, 0x67, 0xa9, 0x14,
	0x15, 0x4f, 0x8d, 0x54, 0x2c, 0x83, 0x05, 0x98, 0x42, 0x96, 0x7f, 0x44, 0xa5, 0xa4, 0x91, 0xcc,
	0x5c, 0x56, 0xa0, 0x27, 0x5e, 0x47, 0x7b, 0x5b, 0xa5, 0x87, 0x0f, 0x72, 0x99, 0xcb, 0xce, 0xe5,
	0x54, 0x67, 0x7a, 0xf4, 0x73, 0x80, 0xf7, 0x66, 0xce, 0x07, 0x09, 0x5c, 0x58, 0xd0, 0x26, 0x7a,
	0x8a, 0x43, 0xd5, 0xc9, 0x93, 0x59, 0x8c, 0xf6, 0xd1, 0x61, 0x38, 0xbd, 0xd7, 0xd6, 0x14, 0xf7,
	0xc9, 0x79, 0x91, 0x25, 0x1b, 0x43, 0xf4, 0x01, 0x87, 0xda, 0x70, 0x65, 0xde, 0x16, 0x02, 0xe2,
	0x3b, 0xfb, 0xe8, 0x70, 0x30, 0x3d, 0xbe, 0xaa, 0x69, 0xf0, 0xad, 0xa6, 0x07, 0x79, 0x61, 0xce,
	0xec, 0xe9, 0x24, 0x95, 0x82, 0x55, 0x4a, 0x0a, 0x30, 0x67, 0x60, 0xb5, 0x9b, 0x41, 0xc8, 0x92,
	0x09, 0x99, 0xc1, 0x62, 0xe2, 0x8e, 0x39, 0xb8, 0x67, 0xcc, 0x4d, 0x21, 0x20, 0xd9, 0xf0, 0xa2,
	0x77, 0x78, 0x0c, 0x65, 0xe6, 0xd1, 0x03, 0x8f, 0x7e, 0xf1, 0xef, 0xe8, 0x1d, 0x28, 0xb3, 0x0e,
	0xfc, 0x9b, 0x15, 0x51, 0x3c, 0xbc, 0xb0, 0xa0, 0x2e, 0xe3, 0xbb, 0x7e, 0xba, 0xb0, 0xad, 0x69,
	0x97, 0x48, 0xba, 0x10, 0x1d, 0xe3, 0x91, 0x36, 0xdc, 0x58, 0x1d, 0x0f, 0xbd, 0xe3, 0x49, 0x7f,
	0xed, 0xfd, 0xad, 0x4d, 0xbd, 0xf1, 0x96, 0xb6, 0xa6, 0xbd, 0x39, 0xe9, 0xa3, 0xdb, 0x49, 0xaa,
	0x80, 0x1b, 0xc8, 0x5e, 0x99, 0x78, 0xf4, 0xdf, 0x3b, 0xe9, 0x19, 0x73, 0x6e, 0x92, 0x0d, 0x2f,
	0x7a, 0x8c, 0x47, 0x56, 0x83, 0x3a, 0x99, 0xc5, 0x63, 0xdf, 0xdb, 0x6e, 0x5b, 0xd3, 0xb1, 0xcb,
	0xb8, 0x87, 0xe9, 0x4b, 0xd1, 0x01, 0xde, 0xd5, 0xae, 0xc9, 0x32, 0x85, 0xd7, 0x56, 0xc4, 0x3b,
	0xbe, 0x87, 0x61, 0x5b, 0x53, 0xf4, 0x2c, 0xb9, 0x5d, 0x99, 0xda, 0xe5, 0x8a, 0x04, 0xd7, 0x2b,
	0x12, 0xdc, 0xac, 0x08, 0xfa, 0xdc, 0x10, 0xf4, 0xb5, 0x21, 0xe8, 0xaa, 0x21, 0x68, 0xd9, 0x10,
	0xf4, 0xbd, 0x21, 0xe8, 0x47, 0x43, 0x82, 0x9b, 0x86, 0xa0, 0x2f, 0x6b, 0x12, 0x2c, 0xd7, 0x24,
	0xb8, 0x5e, 0x93, 0xe0, 0xfd, 0xcb, 0x5b, 0x53, 0xe4, 0x8a, 0x7f, 0xe4, 0x25, 0x67, 0x0b, 0x79,
	0x5e, 0xb0, 0x4f, 0x47, 0xec, 0x6f, 0xbe, 0xe9, 0xe9, 0xc8, 0x87, 0xa3, 0x5f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x0a, 0x61, 0x43, 0x38, 0xd5, 0x02, 0x00, 0x00,
}

func (this *DeleteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteRequest)
	if !ok {
		that2, ok := that.(DeleteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RequestID != that1.RequestID {
		return false
	}
	if !this.StartTime.Equal(that1.StartTime) {
		return false
	}
	if !this.EndTime.Equal(that1.EndTime) {
		return false
	}
	if this.Query != that1.Query {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if this.UserID != that1.UserID {
		return false
	}
	if this.SequenceNum != that1.SequenceNum {
		return false
	}
	return true
}
func (this *DeleteRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&deletionproto.DeleteRequest{")
	s = append(s, "RequestID: "+fmt.Sprintf("%#v", this.RequestID)+",\n")
	s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	s = append(s, "EndTime: "+fmt.Sprintf("%#v", this.EndTime)+",\n")
	s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "UserID: "+fmt.Sprintf("%#v", this.UserID)+",\n")
	s = append(s, "SequenceNum: "+fmt.Sprintf("%#v", this.SequenceNum)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *DeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SequenceNum != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SequenceNum))
		i--
		dAtA[i] = 0x40
	}
	if len(m.UserID) > 0 {
		i -= len(m.UserID)
		copy(dAtA[i:], m.UserID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.UserID)))
		i--
		dAtA[i] = 0x3a
	}
	if m.CreatedAt != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0x22
	}
	if m.EndTime != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x18
	}
	if m.StartTime != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RequestID) > 0 {
		i -= len(m.RequestID)
		copy(dAtA[i:], m.RequestID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RequestID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovTypes(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovTypes(uint64(m.EndTime))
	}
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovTypes(uint64(m.CreatedAt))
	}
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SequenceNum != 0 {
		n += 1 + sovTypes(uint64(m.SequenceNum))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DeleteRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteRequest{`,
		`RequestID:` + fmt.Sprintf("%v", this.RequestID) + `,`,
		`StartTime:` + fmt.Sprintf("%v", this.StartTime) + `,`,
		`EndTime:` + fmt.Sprintf("%v", this.EndTime) + `,`,
		`Query:` + fmt.Sprintf("%v", this.Query) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`CreatedAt:` + fmt.Sprintf("%v", this.CreatedAt) + `,`,
		`UserID:` + fmt.Sprintf("%v", this.UserID) + `,`,
		`SequenceNum:` + fmt.Sprintf("%v", this.SequenceNum) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= github_com_prometheus_common_model.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= github_com_prometheus_common_model.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = DeleteRequestStatus(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= github_com_prometheus_common_model.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceNum", wireType)
			}
			m.SequenceNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTypes
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)
