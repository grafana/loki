// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/compactor/client/grpc/grpc.proto

package grpc

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// JobType represents the type of job
type JobType int32

const (
	JOB_TYPE_DELETION JobType = 0
)

var JobType_name = map[int32]string{
	0: "JOB_TYPE_DELETION",
}

var JobType_value = map[string]int32{
	"JOB_TYPE_DELETION": 0,
}

func (JobType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_24a5f361c0f660df, []int{0}
}

type GetDeleteRequestsRequest struct {
	ForQuerytimeFiltering bool `protobuf:"varint,1,opt,name=forQuerytimeFiltering,proto3" json:"forQuerytimeFiltering,omitempty"`
}

func (m *GetDeleteRequestsRequest) Reset()      { *m = GetDeleteRequestsRequest{} }
func (*GetDeleteRequestsRequest) ProtoMessage() {}
func (*GetDeleteRequestsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_24a5f361c0f660df, []int{0}
}
func (m *GetDeleteRequestsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDeleteRequestsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDeleteRequestsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDeleteRequestsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeleteRequestsRequest.Merge(m, src)
}
func (m *GetDeleteRequestsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetDeleteRequestsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeleteRequestsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeleteRequestsRequest proto.InternalMessageInfo

func (m *GetDeleteRequestsRequest) GetForQuerytimeFiltering() bool {
	if m != nil {
		return m.ForQuerytimeFiltering
	}
	return false
}

type GetDeleteRequestsResponse struct {
	DeleteRequests []*DeleteRequest `protobuf:"bytes,1,rep,name=deleteRequests,proto3" json:"deleteRequests,omitempty"`
}

func (m *GetDeleteRequestsResponse) Reset()      { *m = GetDeleteRequestsResponse{} }
func (*GetDeleteRequestsResponse) ProtoMessage() {}
func (*GetDeleteRequestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_24a5f361c0f660df, []int{1}
}
func (m *GetDeleteRequestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDeleteRequestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDeleteRequestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDeleteRequestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeleteRequestsResponse.Merge(m, src)
}
func (m *GetDeleteRequestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetDeleteRequestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeleteRequestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeleteRequestsResponse proto.InternalMessageInfo

func (m *GetDeleteRequestsResponse) GetDeleteRequests() []*DeleteRequest {
	if m != nil {
		return m.DeleteRequests
	}
	return nil
}

type DeleteRequest struct {
	RequestID string `protobuf:"bytes,1,opt,name=requestID,proto3" json:"requestID,omitempty"`
	StartTime int64  `protobuf:"varint,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime   int64  `protobuf:"varint,3,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Query     string `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	Status    string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt int64  `protobuf:"varint,6,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (m *DeleteRequest) Reset()      { *m = DeleteRequest{} }
func (*DeleteRequest) ProtoMessage() {}
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_24a5f361c0f660df, []int{2}
}
func (m *DeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRequest.Merge(m, src)
}
func (m *DeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRequest proto.InternalMessageInfo

func (m *DeleteRequest) GetRequestID() string {
	if m != nil {
		return m.RequestID
	}
	return ""
}

func (m *DeleteRequest) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *DeleteRequest) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *DeleteRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *DeleteRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *DeleteRequest) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

type GetCacheGenNumbersRequest struct {
}

func (m *GetCacheGenNumbersRequest) Reset()      { *m = GetCacheGenNumbersRequest{} }
func (*GetCacheGenNumbersRequest) ProtoMessage() {}
func (*GetCacheGenNumbersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_24a5f361c0f660df, []int{3}
}
func (m *GetCacheGenNumbersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCacheGenNumbersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCacheGenNumbersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCacheGenNumbersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCacheGenNumbersRequest.Merge(m, src)
}
func (m *GetCacheGenNumbersRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCacheGenNumbersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCacheGenNumbersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCacheGenNumbersRequest proto.InternalMessageInfo

type GetCacheGenNumbersResponse struct {
	ResultsCacheGen string `protobuf:"bytes,1,opt,name=resultsCacheGen,proto3" json:"resultsCacheGen,omitempty"`
}

func (m *GetCacheGenNumbersResponse) Reset()      { *m = GetCacheGenNumbersResponse{} }
func (*GetCacheGenNumbersResponse) ProtoMessage() {}
func (*GetCacheGenNumbersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_24a5f361c0f660df, []int{4}
}
func (m *GetCacheGenNumbersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCacheGenNumbersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCacheGenNumbersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCacheGenNumbersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCacheGenNumbersResponse.Merge(m, src)
}
func (m *GetCacheGenNumbersResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCacheGenNumbersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCacheGenNumbersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCacheGenNumbersResponse proto.InternalMessageInfo

func (m *GetCacheGenNumbersResponse) GetResultsCacheGen() string {
	if m != nil {
		return m.ResultsCacheGen
	}
	return ""
}

// Job represents a single job in the queue
type Job struct {
	Id      string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type    JobType `protobuf:"varint,2,opt,name=type,proto3,enum=grpc.JobType" json:"type,omitempty"`
	Payload []byte  `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Job) Reset()      { *m = Job{} }
func (*Job) ProtoMessage() {}
func (*Job) Descriptor() ([]byte, []int) {
	return fileDescriptor_24a5f361c0f660df, []int{5}
}
func (m *Job) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Job) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Job.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Job) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Job.Merge(m, src)
}
func (m *Job) XXX_Size() int {
	return m.Size()
}
func (m *Job) XXX_DiscardUnknown() {
	xxx_messageInfo_Job.DiscardUnknown(m)
}

var xxx_messageInfo_Job proto.InternalMessageInfo

func (m *Job) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Job) GetType() JobType {
	if m != nil {
		return m.Type
	}
	return JOB_TYPE_DELETION
}

func (m *Job) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// DequeueRequest is used to request a job from the queue
type DequeueRequest struct {
}

func (m *DequeueRequest) Reset()      { *m = DequeueRequest{} }
func (*DequeueRequest) ProtoMessage() {}
func (*DequeueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_24a5f361c0f660df, []int{6}
}
func (m *DequeueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DequeueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DequeueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DequeueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DequeueRequest.Merge(m, src)
}
func (m *DequeueRequest) XXX_Size() int {
	return m.Size()
}
func (m *DequeueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DequeueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DequeueRequest proto.InternalMessageInfo

// DequeueResponse contains the dequeued job
type DequeueResponse struct {
	Job *Job `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
}

func (m *DequeueResponse) Reset()      { *m = DequeueResponse{} }
func (*DequeueResponse) ProtoMessage() {}
func (*DequeueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_24a5f361c0f660df, []int{7}
}
func (m *DequeueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DequeueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DequeueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DequeueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DequeueResponse.Merge(m, src)
}
func (m *DequeueResponse) XXX_Size() int {
	return m.Size()
}
func (m *DequeueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DequeueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DequeueResponse proto.InternalMessageInfo

func (m *DequeueResponse) GetJob() *Job {
	if m != nil {
		return m.Job
	}
	return nil
}

// ReportJobResultRequest is used to report the result of executing a job
type ReportJobResultRequest struct {
	JobId   string  `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	JobType JobType `protobuf:"varint,2,opt,name=job_type,json=jobType,proto3,enum=grpc.JobType" json:"job_type,omitempty"`
	Error   string  `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	Result  []byte  `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *ReportJobResultRequest) Reset()      { *m = ReportJobResultRequest{} }
func (*ReportJobResultRequest) ProtoMessage() {}
func (*ReportJobResultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_24a5f361c0f660df, []int{8}
}
func (m *ReportJobResultRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportJobResultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReportJobResultRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReportJobResultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportJobResultRequest.Merge(m, src)
}
func (m *ReportJobResultRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReportJobResultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportJobResultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReportJobResultRequest proto.InternalMessageInfo

func (m *ReportJobResultRequest) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *ReportJobResultRequest) GetJobType() JobType {
	if m != nil {
		return m.JobType
	}
	return JOB_TYPE_DELETION
}

func (m *ReportJobResultRequest) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ReportJobResultRequest) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

// ReportJobResultResponse is the response to reporting a job result
type ReportJobResultResponse struct {
}

func (m *ReportJobResultResponse) Reset()      { *m = ReportJobResultResponse{} }
func (*ReportJobResultResponse) ProtoMessage() {}
func (*ReportJobResultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_24a5f361c0f660df, []int{9}
}
func (m *ReportJobResultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportJobResultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReportJobResultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReportJobResultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportJobResultResponse.Merge(m, src)
}
func (m *ReportJobResultResponse) XXX_Size() int {
	return m.Size()
}
func (m *ReportJobResultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportJobResultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReportJobResultResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("grpc.JobType", JobType_name, JobType_value)
	proto.RegisterType((*GetDeleteRequestsRequest)(nil), "grpc.GetDeleteRequestsRequest")
	proto.RegisterType((*GetDeleteRequestsResponse)(nil), "grpc.GetDeleteRequestsResponse")
	proto.RegisterType((*DeleteRequest)(nil), "grpc.DeleteRequest")
	proto.RegisterType((*GetCacheGenNumbersRequest)(nil), "grpc.GetCacheGenNumbersRequest")
	proto.RegisterType((*GetCacheGenNumbersResponse)(nil), "grpc.GetCacheGenNumbersResponse")
	proto.RegisterType((*Job)(nil), "grpc.Job")
	proto.RegisterType((*DequeueRequest)(nil), "grpc.DequeueRequest")
	proto.RegisterType((*DequeueResponse)(nil), "grpc.DequeueResponse")
	proto.RegisterType((*ReportJobResultRequest)(nil), "grpc.ReportJobResultRequest")
	proto.RegisterType((*ReportJobResultResponse)(nil), "grpc.ReportJobResultResponse")
}

func init() {
	proto.RegisterFile("pkg/compactor/client/grpc/grpc.proto", fileDescriptor_24a5f361c0f660df)
}

var fileDescriptor_24a5f361c0f660df = []byte{
	// 654 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x54, 0x3d, 0x53, 0xdb, 0x4a,
	0x14, 0xd5, 0x62, 0xb0, 0xf1, 0x05, 0x0c, 0xec, 0xc3, 0x3c, 0x21, 0x78, 0x8b, 0x9f, 0x26, 0x85,
	0x27, 0x05, 0x9e, 0x71, 0x28, 0x32, 0x93, 0x2a, 0x60, 0x60, 0xf0, 0x64, 0xf8, 0xd0, 0x78, 0x26,
	0x49, 0xc5, 0x48, 0xd6, 0xe2, 0xc8, 0xb1, 0xbd, 0x62, 0xb5, 0x2a, 0xdc, 0xa5, 0x4b, 0x9b, 0x2a,
	0xbf, 0x21, 0x6d, 0xda, 0xfc, 0x82, 0x94, 0x94, 0x94, 0x41, 0x34, 0x29, 0xf9, 0x09, 0x99, 0xdd,
	0x95, 0x4c, 0x30, 0x76, 0x63, 0xef, 0x3d, 0xe7, 0xee, 0xdd, 0x73, 0xcf, 0xdd, 0x15, 0x3c, 0x0b,
	0x3f, 0x76, 0x6a, 0x6d, 0xd6, 0x0f, 0xdd, 0xb6, 0x60, 0xbc, 0xd6, 0xee, 0x05, 0x74, 0x20, 0x6a,
	0x1d, 0x1e, 0xb6, 0xd5, 0xcf, 0x4e, 0xc8, 0x99, 0x60, 0x78, 0x56, 0xae, 0xad, 0x8d, 0x0e, 0x63,
	0x9d, 0x1e, 0xad, 0x29, 0xcc, 0x8b, 0x2f, 0x6b, 0xee, 0x60, 0xa8, 0x13, 0xac, 0xed, 0x71, 0x4a,
	0x04, 0x7d, 0x1a, 0x09, 0xb7, 0x1f, 0xea, 0x04, 0xfb, 0x0c, 0xcc, 0x23, 0x2a, 0x1a, 0xb4, 0x47,
	0x05, 0x75, 0xe8, 0x55, 0x4c, 0x23, 0x11, 0xa5, 0xff, 0x78, 0x17, 0xca, 0x97, 0x8c, 0x9f, 0xc7,
	0x94, 0x0f, 0xe5, 0xb6, 0xc3, 0xa0, 0x27, 0x28, 0x0f, 0x06, 0x1d, 0x13, 0x55, 0x50, 0x75, 0xde,
	0x99, 0x4c, 0xda, 0xef, 0x60, 0x63, 0x42, 0xc5, 0x28, 0x64, 0x83, 0x88, 0xe2, 0x57, 0x50, 0xf2,
	0x1f, 0x31, 0x26, 0xaa, 0xe4, 0xaa, 0x0b, 0xf5, 0x7f, 0x76, 0x54, 0x57, 0x8f, 0x76, 0x39, 0x63,
	0xa9, 0xf6, 0x77, 0x04, 0x4b, 0x8f, 0x32, 0xf0, 0x16, 0x14, 0xb9, 0x5e, 0x1e, 0x37, 0x94, 0xaa,
	0xa2, 0xf3, 0x00, 0x48, 0x36, 0x12, 0x2e, 0x17, 0xad, 0xa0, 0x4f, 0xcd, 0x99, 0x0a, 0xaa, 0xe6,
	0x9c, 0x07, 0x00, 0x9b, 0x50, 0xa0, 0x03, 0x5f, 0x71, 0x39, 0xc5, 0x65, 0x21, 0x5e, 0x83, 0xb9,
	0x2b, 0xd9, 0x97, 0x39, 0xab, 0x2a, 0xea, 0x00, 0xaf, 0x43, 0x3e, 0x12, 0xae, 0x88, 0x23, 0x73,
	0x4e, 0xc1, 0x69, 0x24, 0x4f, 0x69, 0x73, 0xea, 0x0a, 0xea, 0xbf, 0x16, 0x66, 0x5e, 0x9f, 0x32,
	0x02, 0xec, 0x4d, 0xe5, 0xc6, 0xbe, 0xdb, 0xfe, 0x40, 0x8f, 0xe8, 0xe0, 0x24, 0xee, 0x7b, 0x94,
	0x67, 0x06, 0xdb, 0x87, 0x60, 0x4d, 0x22, 0x53, 0xaf, 0xaa, 0xb0, 0xcc, 0x69, 0x14, 0xf7, 0x44,
	0x94, 0x65, 0xa4, 0x2d, 0x8e, 0xc3, 0xb6, 0x03, 0xb9, 0x26, 0xf3, 0x70, 0x09, 0x66, 0x02, 0x3f,
	0xcd, 0x99, 0x09, 0x7c, 0xfc, 0x3f, 0xcc, 0x8a, 0x61, 0xa8, 0x5b, 0x2f, 0xd5, 0x97, 0xb4, 0xc5,
	0x4d, 0xe6, 0xb5, 0x86, 0x21, 0x75, 0x14, 0x25, 0x4d, 0x08, 0xdd, 0x61, 0x8f, 0xb9, 0xbe, 0x32,
	0x61, 0xd1, 0xc9, 0x42, 0x7b, 0x05, 0x4a, 0x0d, 0x29, 0x33, 0xce, 0xcc, 0xb6, 0x77, 0x60, 0x79,
	0x84, 0xa4, 0x12, 0x37, 0x21, 0xd7, 0x65, 0x9e, 0x3a, 0x72, 0xa1, 0x5e, 0x1c, 0x1d, 0xe0, 0x48,
	0xd4, 0xfe, 0x8c, 0x60, 0xdd, 0xa1, 0x21, 0xe3, 0x42, 0x42, 0x4a, 0x72, 0x36, 0xb7, 0x32, 0xe4,
	0xbb, 0xcc, 0xbb, 0x18, 0xa9, 0x9d, 0xeb, 0x32, 0xef, 0xd8, 0xc7, 0x55, 0x98, 0x97, 0xf0, 0x74,
	0xd1, 0x85, 0xae, 0x5e, 0xc8, 0x11, 0x51, 0xce, 0x19, 0x57, 0xaa, 0x8b, 0x8e, 0x0e, 0xe4, 0x88,
	0xb4, 0x35, 0x6a, 0x72, 0x8b, 0x4e, 0x1a, 0xd9, 0x1b, 0xf0, 0xef, 0x13, 0x21, 0xba, 0x83, 0xe7,
	0x15, 0x28, 0xa4, 0xc5, 0x71, 0x19, 0x56, 0x9b, 0xa7, 0x7b, 0x17, 0xad, 0xf7, 0x67, 0x07, 0x17,
	0x8d, 0x83, 0x37, 0x07, 0xad, 0xe3, 0xd3, 0x93, 0x15, 0xa3, 0xfe, 0x03, 0x41, 0x71, 0x3f, 0x7b,
	0x88, 0xb8, 0x05, 0xab, 0x4f, 0x6e, 0x37, 0x26, 0x5a, 0xe5, 0xb4, 0x87, 0x64, 0x6d, 0x4f, 0xe5,
	0x53, 0x1f, 0xdf, 0x02, 0x7e, 0x7a, 0x11, 0xf0, 0xc3, 0xb6, 0xc9, 0xf7, 0xc7, 0xaa, 0x4c, 0x4f,
	0xd0, 0x85, 0xeb, 0x5f, 0x11, 0xcc, 0x37, 0x99, 0x77, 0x2e, 0xa7, 0x86, 0x5f, 0x42, 0x21, 0x1d,
	0x20, 0x5e, 0xcb, 0xde, 0xdb, 0xdf, 0x13, 0xb6, 0xca, 0x63, 0xa8, 0x2e, 0x62, 0x1b, 0xf8, 0x0c,
	0x96, 0xc7, 0x0c, 0xc4, 0x5b, 0x3a, 0x77, 0xf2, 0x80, 0xad, 0xff, 0xa6, 0xb0, 0x59, 0xc5, 0xbd,
	0xdd, 0xeb, 0x5b, 0x62, 0xdc, 0xdc, 0x12, 0xe3, 0xfe, 0x96, 0xa0, 0x4f, 0x09, 0x41, 0xdf, 0x12,
	0x82, 0x7e, 0x26, 0x04, 0x5d, 0x27, 0x04, 0xfd, 0x4a, 0x08, 0xfa, 0x9d, 0x10, 0xe3, 0x3e, 0x21,
	0xe8, 0xcb, 0x1d, 0x31, 0xae, 0xef, 0x88, 0x71, 0x73, 0x47, 0x0c, 0x2f, 0xaf, 0x3e, 0x5a, 0x2f,
	0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0xa0, 0xd0, 0xfc, 0xd1, 0x1e, 0x05, 0x00, 0x00,
}

func (x JobType) String() string {
	s, ok := JobType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *GetDeleteRequestsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetDeleteRequestsRequest)
	if !ok {
		that2, ok := that.(GetDeleteRequestsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ForQuerytimeFiltering != that1.ForQuerytimeFiltering {
		return false
	}
	return true
}
func (this *GetDeleteRequestsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetDeleteRequestsResponse)
	if !ok {
		that2, ok := that.(GetDeleteRequestsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.DeleteRequests) != len(that1.DeleteRequests) {
		return false
	}
	for i := range this.DeleteRequests {
		if !this.DeleteRequests[i].Equal(that1.DeleteRequests[i]) {
			return false
		}
	}
	return true
}
func (this *DeleteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteRequest)
	if !ok {
		that2, ok := that.(DeleteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RequestID != that1.RequestID {
		return false
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.EndTime != that1.EndTime {
		return false
	}
	if this.Query != that1.Query {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.CreatedAt != that1.CreatedAt {
		return false
	}
	return true
}
func (this *GetCacheGenNumbersRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetCacheGenNumbersRequest)
	if !ok {
		that2, ok := that.(GetCacheGenNumbersRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetCacheGenNumbersResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetCacheGenNumbersResponse)
	if !ok {
		that2, ok := that.(GetCacheGenNumbersResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ResultsCacheGen != that1.ResultsCacheGen {
		return false
	}
	return true
}
func (this *Job) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Job)
	if !ok {
		that2, ok := that.(Job)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	return true
}
func (this *DequeueRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DequeueRequest)
	if !ok {
		that2, ok := that.(DequeueRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DequeueResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DequeueResponse)
	if !ok {
		that2, ok := that.(DequeueResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Job.Equal(that1.Job) {
		return false
	}
	return true
}
func (this *ReportJobResultRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReportJobResultRequest)
	if !ok {
		that2, ok := that.(ReportJobResultRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.JobId != that1.JobId {
		return false
	}
	if this.JobType != that1.JobType {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	if !bytes.Equal(this.Result, that1.Result) {
		return false
	}
	return true
}
func (this *ReportJobResultResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReportJobResultResponse)
	if !ok {
		that2, ok := that.(ReportJobResultResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetDeleteRequestsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.GetDeleteRequestsRequest{")
	s = append(s, "ForQuerytimeFiltering: "+fmt.Sprintf("%#v", this.ForQuerytimeFiltering)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetDeleteRequestsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.GetDeleteRequestsResponse{")
	if this.DeleteRequests != nil {
		s = append(s, "DeleteRequests: "+fmt.Sprintf("%#v", this.DeleteRequests)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&grpc.DeleteRequest{")
	s = append(s, "RequestID: "+fmt.Sprintf("%#v", this.RequestID)+",\n")
	s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	s = append(s, "EndTime: "+fmt.Sprintf("%#v", this.EndTime)+",\n")
	s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetCacheGenNumbersRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&grpc.GetCacheGenNumbersRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetCacheGenNumbersResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.GetCacheGenNumbersResponse{")
	s = append(s, "ResultsCacheGen: "+fmt.Sprintf("%#v", this.ResultsCacheGen)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Job) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&grpc.Job{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DequeueRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&grpc.DequeueRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DequeueResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&grpc.DequeueResponse{")
	if this.Job != nil {
		s = append(s, "Job: "+fmt.Sprintf("%#v", this.Job)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReportJobResultRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&grpc.ReportJobResultRequest{")
	s = append(s, "JobId: "+fmt.Sprintf("%#v", this.JobId)+",\n")
	s = append(s, "JobType: "+fmt.Sprintf("%#v", this.JobType)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReportJobResultResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&grpc.ReportJobResultResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGrpc(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CompactorClient is the client API for Compactor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CompactorClient interface {
	GetDeleteRequests(ctx context.Context, in *GetDeleteRequestsRequest, opts ...grpc.CallOption) (*GetDeleteRequestsResponse, error)
	GetCacheGenNumbers(ctx context.Context, in *GetCacheGenNumbersRequest, opts ...grpc.CallOption) (*GetCacheGenNumbersResponse, error)
}

type compactorClient struct {
	cc *grpc.ClientConn
}

func NewCompactorClient(cc *grpc.ClientConn) CompactorClient {
	return &compactorClient{cc}
}

func (c *compactorClient) GetDeleteRequests(ctx context.Context, in *GetDeleteRequestsRequest, opts ...grpc.CallOption) (*GetDeleteRequestsResponse, error) {
	out := new(GetDeleteRequestsResponse)
	err := c.cc.Invoke(ctx, "/grpc.Compactor/GetDeleteRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compactorClient) GetCacheGenNumbers(ctx context.Context, in *GetCacheGenNumbersRequest, opts ...grpc.CallOption) (*GetCacheGenNumbersResponse, error) {
	out := new(GetCacheGenNumbersResponse)
	err := c.cc.Invoke(ctx, "/grpc.Compactor/GetCacheGenNumbers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompactorServer is the server API for Compactor service.
type CompactorServer interface {
	GetDeleteRequests(context.Context, *GetDeleteRequestsRequest) (*GetDeleteRequestsResponse, error)
	GetCacheGenNumbers(context.Context, *GetCacheGenNumbersRequest) (*GetCacheGenNumbersResponse, error)
}

// UnimplementedCompactorServer can be embedded to have forward compatible implementations.
type UnimplementedCompactorServer struct {
}

func (*UnimplementedCompactorServer) GetDeleteRequests(ctx context.Context, req *GetDeleteRequestsRequest) (*GetDeleteRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeleteRequests not implemented")
}
func (*UnimplementedCompactorServer) GetCacheGenNumbers(ctx context.Context, req *GetCacheGenNumbersRequest) (*GetCacheGenNumbersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCacheGenNumbers not implemented")
}

func RegisterCompactorServer(s *grpc.Server, srv CompactorServer) {
	s.RegisterService(&_Compactor_serviceDesc, srv)
}

func _Compactor_GetDeleteRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeleteRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompactorServer).GetDeleteRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Compactor/GetDeleteRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompactorServer).GetDeleteRequests(ctx, req.(*GetDeleteRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compactor_GetCacheGenNumbers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCacheGenNumbersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompactorServer).GetCacheGenNumbers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Compactor/GetCacheGenNumbers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompactorServer).GetCacheGenNumbers(ctx, req.(*GetCacheGenNumbersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Compactor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Compactor",
	HandlerType: (*CompactorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeleteRequests",
			Handler:    _Compactor_GetDeleteRequests_Handler,
		},
		{
			MethodName: "GetCacheGenNumbers",
			Handler:    _Compactor_GetCacheGenNumbers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/compactor/client/grpc/grpc.proto",
}

// JobQueueClient is the client API for JobQueue service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JobQueueClient interface {
	// Dequeue retrieves the next job from the queue
	Dequeue(ctx context.Context, in *DequeueRequest, opts ...grpc.CallOption) (*DequeueResponse, error)
	// ReportJobResult reports the result of executing a job
	ReportJobResult(ctx context.Context, in *ReportJobResultRequest, opts ...grpc.CallOption) (*ReportJobResultResponse, error)
}

type jobQueueClient struct {
	cc *grpc.ClientConn
}

func NewJobQueueClient(cc *grpc.ClientConn) JobQueueClient {
	return &jobQueueClient{cc}
}

func (c *jobQueueClient) Dequeue(ctx context.Context, in *DequeueRequest, opts ...grpc.CallOption) (*DequeueResponse, error) {
	out := new(DequeueResponse)
	err := c.cc.Invoke(ctx, "/grpc.JobQueue/Dequeue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobQueueClient) ReportJobResult(ctx context.Context, in *ReportJobResultRequest, opts ...grpc.CallOption) (*ReportJobResultResponse, error) {
	out := new(ReportJobResultResponse)
	err := c.cc.Invoke(ctx, "/grpc.JobQueue/ReportJobResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobQueueServer is the server API for JobQueue service.
type JobQueueServer interface {
	// Dequeue retrieves the next job from the queue
	Dequeue(context.Context, *DequeueRequest) (*DequeueResponse, error)
	// ReportJobResult reports the result of executing a job
	ReportJobResult(context.Context, *ReportJobResultRequest) (*ReportJobResultResponse, error)
}

// UnimplementedJobQueueServer can be embedded to have forward compatible implementations.
type UnimplementedJobQueueServer struct {
}

func (*UnimplementedJobQueueServer) Dequeue(ctx context.Context, req *DequeueRequest) (*DequeueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dequeue not implemented")
}
func (*UnimplementedJobQueueServer) ReportJobResult(ctx context.Context, req *ReportJobResultRequest) (*ReportJobResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportJobResult not implemented")
}

func RegisterJobQueueServer(s *grpc.Server, srv JobQueueServer) {
	s.RegisterService(&_JobQueue_serviceDesc, srv)
}

func _JobQueue_Dequeue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DequeueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobQueueServer).Dequeue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.JobQueue/Dequeue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobQueueServer).Dequeue(ctx, req.(*DequeueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobQueue_ReportJobResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportJobResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobQueueServer).ReportJobResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.JobQueue/ReportJobResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobQueueServer).ReportJobResult(ctx, req.(*ReportJobResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _JobQueue_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.JobQueue",
	HandlerType: (*JobQueueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Dequeue",
			Handler:    _JobQueue_Dequeue_Handler,
		},
		{
			MethodName: "ReportJobResult",
			Handler:    _JobQueue_ReportJobResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/compactor/client/grpc/grpc.proto",
}

func (m *GetDeleteRequestsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeleteRequestsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDeleteRequestsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ForQuerytimeFiltering {
		i--
		if m.ForQuerytimeFiltering {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetDeleteRequestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeleteRequestsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDeleteRequestsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeleteRequests) > 0 {
		for iNdEx := len(m.DeleteRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DeleteRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGrpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != 0 {
		i = encodeVarintGrpc(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintGrpc(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintGrpc(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0x22
	}
	if m.EndTime != 0 {
		i = encodeVarintGrpc(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x18
	}
	if m.StartTime != 0 {
		i = encodeVarintGrpc(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RequestID) > 0 {
		i -= len(m.RequestID)
		copy(dAtA[i:], m.RequestID)
		i = encodeVarintGrpc(dAtA, i, uint64(len(m.RequestID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCacheGenNumbersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCacheGenNumbersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCacheGenNumbersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetCacheGenNumbersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCacheGenNumbersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCacheGenNumbersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ResultsCacheGen) > 0 {
		i -= len(m.ResultsCacheGen)
		copy(dAtA[i:], m.ResultsCacheGen)
		i = encodeVarintGrpc(dAtA, i, uint64(len(m.ResultsCacheGen)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Job) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Job) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Job) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintGrpc(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintGrpc(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintGrpc(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DequeueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DequeueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DequeueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DequeueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DequeueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DequeueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Job != nil {
		{
			size, err := m.Job.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGrpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReportJobResultRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportJobResultRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportJobResultRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintGrpc(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintGrpc(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x1a
	}
	if m.JobType != 0 {
		i = encodeVarintGrpc(dAtA, i, uint64(m.JobType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.JobId) > 0 {
		i -= len(m.JobId)
		copy(dAtA[i:], m.JobId)
		i = encodeVarintGrpc(dAtA, i, uint64(len(m.JobId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReportJobResultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportJobResultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportJobResultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintGrpc(dAtA []byte, offset int, v uint64) int {
	offset -= sovGrpc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetDeleteRequestsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForQuerytimeFiltering {
		n += 2
	}
	return n
}

func (m *GetDeleteRequestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DeleteRequests) > 0 {
		for _, e := range m.DeleteRequests {
			l = e.Size()
			n += 1 + l + sovGrpc(uint64(l))
		}
	}
	return n
}

func (m *DeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestID)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovGrpc(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovGrpc(uint64(m.EndTime))
	}
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovGrpc(uint64(m.CreatedAt))
	}
	return n
}

func (m *GetCacheGenNumbersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetCacheGenNumbersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ResultsCacheGen)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	return n
}

func (m *Job) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovGrpc(uint64(m.Type))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	return n
}

func (m *DequeueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DequeueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Job != nil {
		l = m.Job.Size()
		n += 1 + l + sovGrpc(uint64(l))
	}
	return n
}

func (m *ReportJobResultRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	if m.JobType != 0 {
		n += 1 + sovGrpc(uint64(m.JobType))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovGrpc(uint64(l))
	}
	return n
}

func (m *ReportJobResultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovGrpc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGrpc(x uint64) (n int) {
	return sovGrpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GetDeleteRequestsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetDeleteRequestsRequest{`,
		`ForQuerytimeFiltering:` + fmt.Sprintf("%v", this.ForQuerytimeFiltering) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetDeleteRequestsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDeleteRequests := "[]*DeleteRequest{"
	for _, f := range this.DeleteRequests {
		repeatedStringForDeleteRequests += strings.Replace(f.String(), "DeleteRequest", "DeleteRequest", 1) + ","
	}
	repeatedStringForDeleteRequests += "}"
	s := strings.Join([]string{`&GetDeleteRequestsResponse{`,
		`DeleteRequests:` + repeatedStringForDeleteRequests + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteRequest{`,
		`RequestID:` + fmt.Sprintf("%v", this.RequestID) + `,`,
		`StartTime:` + fmt.Sprintf("%v", this.StartTime) + `,`,
		`EndTime:` + fmt.Sprintf("%v", this.EndTime) + `,`,
		`Query:` + fmt.Sprintf("%v", this.Query) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`CreatedAt:` + fmt.Sprintf("%v", this.CreatedAt) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetCacheGenNumbersRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetCacheGenNumbersRequest{`,
		`}`,
	}, "")
	return s
}
func (this *GetCacheGenNumbersResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetCacheGenNumbersResponse{`,
		`ResultsCacheGen:` + fmt.Sprintf("%v", this.ResultsCacheGen) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Job) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Job{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DequeueRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DequeueRequest{`,
		`}`,
	}, "")
	return s
}
func (this *DequeueResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DequeueResponse{`,
		`Job:` + strings.Replace(this.Job.String(), "Job", "Job", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReportJobResultRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReportJobResultRequest{`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`JobType:` + fmt.Sprintf("%v", this.JobType) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReportJobResultResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReportJobResultResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringGrpc(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GetDeleteRequestsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDeleteRequestsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDeleteRequestsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForQuerytimeFiltering", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForQuerytimeFiltering = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDeleteRequestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDeleteRequestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDeleteRequestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeleteRequests = append(m.DeleteRequests, &DeleteRequest{})
			if err := m.DeleteRequests[len(m.DeleteRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCacheGenNumbersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCacheGenNumbersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCacheGenNumbersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCacheGenNumbersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCacheGenNumbersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCacheGenNumbersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultsCacheGen", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultsCacheGen = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Job) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Job: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Job: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= JobType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DequeueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DequeueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DequeueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DequeueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DequeueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DequeueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Job", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Job == nil {
				m.Job = &Job{}
			}
			if err := m.Job.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportJobResultRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportJobResultRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportJobResultRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobType", wireType)
			}
			m.JobType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JobType |= JobType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGrpc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportJobResultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportJobResultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportJobResultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGrpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGrpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGrpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGrpc
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthGrpc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGrpc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGrpc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthGrpc
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGrpc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGrpc   = fmt.Errorf("proto: integer overflow")
)
