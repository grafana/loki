// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/compactor/jobqueue/queue.proto

package jobqueue

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// JobType represents the type of job
type JobType int32

const (
	JOB_TYPE_DELETION JobType = 0
)

var JobType_name = map[int32]string{
	0: "JOB_TYPE_DELETION",
}

var JobType_value = map[string]int32{
	"JOB_TYPE_DELETION": 0,
}

func (JobType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_220f68f506b923fa, []int{0}
}

// Job represents a single job in the queue
type Job struct {
	Id      string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type    JobType `protobuf:"varint,2,opt,name=type,proto3,enum=jobqueue.JobType" json:"type,omitempty"`
	Payload []byte  `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Job) Reset()      { *m = Job{} }
func (*Job) ProtoMessage() {}
func (*Job) Descriptor() ([]byte, []int) {
	return fileDescriptor_220f68f506b923fa, []int{0}
}
func (m *Job) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Job) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Job.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Job) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Job.Merge(m, src)
}
func (m *Job) XXX_Size() int {
	return m.Size()
}
func (m *Job) XXX_DiscardUnknown() {
	xxx_messageInfo_Job.DiscardUnknown(m)
}

var xxx_messageInfo_Job proto.InternalMessageInfo

func (m *Job) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Job) GetType() JobType {
	if m != nil {
		return m.Type
	}
	return JOB_TYPE_DELETION
}

func (m *Job) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// DequeueRequest is used to request a job from the queue
type DequeueRequest struct {
}

func (m *DequeueRequest) Reset()      { *m = DequeueRequest{} }
func (*DequeueRequest) ProtoMessage() {}
func (*DequeueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_220f68f506b923fa, []int{1}
}
func (m *DequeueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DequeueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DequeueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DequeueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DequeueRequest.Merge(m, src)
}
func (m *DequeueRequest) XXX_Size() int {
	return m.Size()
}
func (m *DequeueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DequeueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DequeueRequest proto.InternalMessageInfo

// DequeueResponse contains the dequeued job
type DequeueResponse struct {
	Job *Job `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
}

func (m *DequeueResponse) Reset()      { *m = DequeueResponse{} }
func (*DequeueResponse) ProtoMessage() {}
func (*DequeueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_220f68f506b923fa, []int{2}
}
func (m *DequeueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DequeueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DequeueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DequeueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DequeueResponse.Merge(m, src)
}
func (m *DequeueResponse) XXX_Size() int {
	return m.Size()
}
func (m *DequeueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DequeueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DequeueResponse proto.InternalMessageInfo

func (m *DequeueResponse) GetJob() *Job {
	if m != nil {
		return m.Job
	}
	return nil
}

// JobResponse represents the result of executing a job
type JobResponse struct {
	JobId   string     `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	JobType JobType    `protobuf:"varint,2,opt,name=job_type,json=jobType,proto3,enum=jobqueue.JobType" json:"job_type,omitempty"`
	Error   string     `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	Result  *types.Any `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *JobResponse) Reset()      { *m = JobResponse{} }
func (*JobResponse) ProtoMessage() {}
func (*JobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_220f68f506b923fa, []int{3}
}
func (m *JobResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobResponse.Merge(m, src)
}
func (m *JobResponse) XXX_Size() int {
	return m.Size()
}
func (m *JobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JobResponse proto.InternalMessageInfo

func (m *JobResponse) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobResponse) GetJobType() JobType {
	if m != nil {
		return m.JobType
	}
	return JOB_TYPE_DELETION
}

func (m *JobResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *JobResponse) GetResult() *types.Any {
	if m != nil {
		return m.Result
	}
	return nil
}

// ReportJobResponseRequest is used to report the result of executing a job
type ReportJobResponseRequest struct {
	Response *JobResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (m *ReportJobResponseRequest) Reset()      { *m = ReportJobResponseRequest{} }
func (*ReportJobResponseRequest) ProtoMessage() {}
func (*ReportJobResponseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_220f68f506b923fa, []int{4}
}
func (m *ReportJobResponseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportJobResponseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReportJobResponseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReportJobResponseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportJobResponseRequest.Merge(m, src)
}
func (m *ReportJobResponseRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReportJobResponseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportJobResponseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReportJobResponseRequest proto.InternalMessageInfo

func (m *ReportJobResponseRequest) GetResponse() *JobResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// ReportJobResponseResponse is the response to reporting a job result
type ReportJobResponseResponse struct {
}

func (m *ReportJobResponseResponse) Reset()      { *m = ReportJobResponseResponse{} }
func (*ReportJobResponseResponse) ProtoMessage() {}
func (*ReportJobResponseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_220f68f506b923fa, []int{5}
}
func (m *ReportJobResponseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportJobResponseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReportJobResponseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReportJobResponseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportJobResponseResponse.Merge(m, src)
}
func (m *ReportJobResponseResponse) XXX_Size() int {
	return m.Size()
}
func (m *ReportJobResponseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportJobResponseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReportJobResponseResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("jobqueue.JobType", JobType_name, JobType_value)
	proto.RegisterType((*Job)(nil), "jobqueue.Job")
	proto.RegisterType((*DequeueRequest)(nil), "jobqueue.DequeueRequest")
	proto.RegisterType((*DequeueResponse)(nil), "jobqueue.DequeueResponse")
	proto.RegisterType((*JobResponse)(nil), "jobqueue.JobResponse")
	proto.RegisterType((*ReportJobResponseRequest)(nil), "jobqueue.ReportJobResponseRequest")
	proto.RegisterType((*ReportJobResponseResponse)(nil), "jobqueue.ReportJobResponseResponse")
}

func init() {
	proto.RegisterFile("pkg/compactor/jobqueue/queue.proto", fileDescriptor_220f68f506b923fa)
}

var fileDescriptor_220f68f506b923fa = []byte{
	// 486 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xf6, 0x26, 0x6d, 0x92, 0x4e, 0x21, 0x34, 0xab, 0x46, 0x72, 0x82, 0xb4, 0x8d, 0x8c, 0x90,
	0x22, 0x54, 0xd9, 0x22, 0xbc, 0x00, 0x54, 0xcd, 0xa1, 0x11, 0x50, 0xb0, 0x22, 0x24, 0x38, 0x10,
	0x79, 0x93, 0xad, 0xb1, 0x9b, 0x64, 0x8c, 0xbd, 0x3e, 0xf8, 0xc6, 0x23, 0x70, 0xe2, 0x19, 0x38,
	0xf0, 0x20, 0x1c, 0x73, 0xec, 0x91, 0x38, 0x17, 0x8e, 0x7d, 0x04, 0xe4, 0xbf, 0x94, 0x40, 0xda,
	0x8b, 0xd7, 0x33, 0xf3, 0xcd, 0x7e, 0xdf, 0x37, 0xa3, 0x05, 0xcd, 0xbb, 0xb4, 0x8d, 0x31, 0xce,
	0x3c, 0x6b, 0x2c, 0xd1, 0x37, 0x5c, 0xe4, 0x9f, 0x43, 0x11, 0x0a, 0x23, 0xfd, 0xea, 0x9e, 0x8f,
	0x12, 0x69, 0xad, 0xc8, 0xb6, 0x8f, 0x6c, 0x44, 0x7b, 0x2a, 0x8c, 0x34, 0xcf, 0xc3, 0x0b, 0x43,
	0x3a, 0x33, 0x11, 0x48, 0x6b, 0xe6, 0x65, 0xd0, 0x76, 0xeb, 0x5f, 0x80, 0x35, 0x8f, 0xb2, 0x92,
	0xf6, 0x0e, 0xca, 0x03, 0xe4, 0xb4, 0x0e, 0x25, 0x67, 0xa2, 0x92, 0x0e, 0xe9, 0xee, 0x99, 0x25,
	0x67, 0x42, 0x1f, 0xc3, 0x8e, 0x8c, 0x3c, 0xa1, 0x96, 0x3a, 0xa4, 0x5b, 0xef, 0x35, 0xf4, 0x82,
	0x4b, 0x1f, 0x20, 0x1f, 0x46, 0x9e, 0x30, 0xd3, 0x32, 0x55, 0xa1, 0xea, 0x59, 0xd1, 0x14, 0xad,
	0x89, 0x5a, 0xee, 0x90, 0xee, 0x3d, 0xb3, 0x08, 0xb5, 0x03, 0xa8, 0x9f, 0x8a, 0xb4, 0xc5, 0x4c,
	0x8e, 0x40, 0x6a, 0x3d, 0x78, 0xb0, 0xce, 0x04, 0x1e, 0xce, 0x03, 0x41, 0x8f, 0xa0, 0xec, 0x22,
	0x4f, 0x69, 0xf7, 0x7b, 0xf7, 0x37, 0x48, 0xcc, 0xa4, 0xa2, 0x7d, 0x23, 0xb0, 0x9f, 0x04, 0x45,
	0x43, 0x13, 0x2a, 0x2e, 0xf2, 0xd1, 0x5a, 0xea, 0xae, 0x8b, 0xfc, 0x6c, 0x42, 0x8f, 0x21, 0x19,
	0xc6, 0xe8, 0x6e, 0xc5, 0x55, 0x37, 0xfb, 0xa1, 0x87, 0xb0, 0x2b, 0x7c, 0x1f, 0xfd, 0x54, 0xf2,
	0x9e, 0x99, 0x05, 0xf4, 0x18, 0x2a, 0xbe, 0x08, 0xc2, 0xa9, 0x54, 0x77, 0x52, 0x39, 0x87, 0x7a,
	0x36, 0x34, 0xbd, 0x18, 0x9a, 0xfe, 0x62, 0x1e, 0x99, 0x39, 0x46, 0x7b, 0x05, 0xaa, 0x29, 0x3c,
	0xf4, 0xe5, 0x5f, 0xea, 0x72, 0xa3, 0xf4, 0x29, 0xd4, 0xfc, 0x3c, 0x95, 0x5b, 0x6b, 0x6e, 0x5a,
	0x2b, 0xf0, 0x6b, 0x98, 0xf6, 0x10, 0x5a, 0x5b, 0xae, 0xcb, 0xce, 0x27, 0x1d, 0xa8, 0xe6, 0x1e,
	0x68, 0x13, 0x1a, 0x83, 0xf3, 0x93, 0xd1, 0xf0, 0xfd, 0x9b, 0xfe, 0xe8, 0xb4, 0xff, 0xb2, 0x3f,
	0x3c, 0x3b, 0x7f, 0x7d, 0xa0, 0xf4, 0x7e, 0x10, 0xa8, 0x0d, 0x90, 0xbf, 0x4d, 0x18, 0xe8, 0x73,
	0xa8, 0xe6, 0x73, 0xa6, 0xea, 0x0d, 0xef, 0xe6, 0x32, 0xda, 0xad, 0x2d, 0x95, 0x5c, 0x8b, 0x42,
	0x3f, 0x42, 0xe3, 0x3f, 0x35, 0x54, 0xbb, 0xe9, 0xb8, 0xcd, 0x79, 0xfb, 0xd1, 0x9d, 0x98, 0xe2,
	0xfe, 0x93, 0xc9, 0x62, 0xc9, 0x94, 0xab, 0x25, 0x53, 0xae, 0x97, 0x8c, 0x7c, 0x89, 0x19, 0xf9,
	0x1e, 0x33, 0xf2, 0x33, 0x66, 0x64, 0x11, 0x33, 0xf2, 0x2b, 0x66, 0xe4, 0x77, 0xcc, 0x94, 0xeb,
	0x98, 0x91, 0xaf, 0x2b, 0xa6, 0x2c, 0x56, 0x4c, 0xb9, 0x5a, 0x31, 0xe5, 0x83, 0x6e, 0x3b, 0xf2,
	0x53, 0xc8, 0xf5, 0x31, 0xce, 0x0c, 0xdb, 0xb7, 0x2e, 0xac, 0xb9, 0x65, 0x4c, 0xf1, 0xd2, 0x31,
	0xb6, 0xbf, 0x15, 0x5e, 0x49, 0x17, 0xf7, 0xec, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8c, 0x84,
	0x95, 0x4c, 0x4c, 0x03, 0x00, 0x00,
}

func (x JobType) String() string {
	s, ok := JobType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Job) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Job)
	if !ok {
		that2, ok := that.(Job)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	return true
}
func (this *DequeueRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DequeueRequest)
	if !ok {
		that2, ok := that.(DequeueRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DequeueResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DequeueResponse)
	if !ok {
		that2, ok := that.(DequeueResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Job.Equal(that1.Job) {
		return false
	}
	return true
}
func (this *JobResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JobResponse)
	if !ok {
		that2, ok := that.(JobResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.JobId != that1.JobId {
		return false
	}
	if this.JobType != that1.JobType {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *ReportJobResponseRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReportJobResponseRequest)
	if !ok {
		that2, ok := that.(ReportJobResponseRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Response.Equal(that1.Response) {
		return false
	}
	return true
}
func (this *ReportJobResponseResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReportJobResponseResponse)
	if !ok {
		that2, ok := that.(ReportJobResponseResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Job) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&jobqueue.Job{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DequeueRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&jobqueue.DequeueRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DequeueResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&jobqueue.DequeueResponse{")
	if this.Job != nil {
		s = append(s, "Job: "+fmt.Sprintf("%#v", this.Job)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JobResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&jobqueue.JobResponse{")
	s = append(s, "JobId: "+fmt.Sprintf("%#v", this.JobId)+",\n")
	s = append(s, "JobType: "+fmt.Sprintf("%#v", this.JobType)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReportJobResponseRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&jobqueue.ReportJobResponseRequest{")
	if this.Response != nil {
		s = append(s, "Response: "+fmt.Sprintf("%#v", this.Response)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReportJobResponseResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&jobqueue.ReportJobResponseResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringQueue(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// JobQueueClient is the client API for JobQueue service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JobQueueClient interface {
	// Dequeue retrieves the next job from the queue
	Dequeue(ctx context.Context, in *DequeueRequest, opts ...grpc.CallOption) (*DequeueResponse, error)
	// ReportJobResponse reports the result of executing a job
	ReportJobResponse(ctx context.Context, in *ReportJobResponseRequest, opts ...grpc.CallOption) (*ReportJobResponseResponse, error)
}

type jobQueueClient struct {
	cc *grpc.ClientConn
}

func NewJobQueueClient(cc *grpc.ClientConn) JobQueueClient {
	return &jobQueueClient{cc}
}

func (c *jobQueueClient) Dequeue(ctx context.Context, in *DequeueRequest, opts ...grpc.CallOption) (*DequeueResponse, error) {
	out := new(DequeueResponse)
	err := c.cc.Invoke(ctx, "/jobqueue.JobQueue/Dequeue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobQueueClient) ReportJobResponse(ctx context.Context, in *ReportJobResponseRequest, opts ...grpc.CallOption) (*ReportJobResponseResponse, error) {
	out := new(ReportJobResponseResponse)
	err := c.cc.Invoke(ctx, "/jobqueue.JobQueue/ReportJobResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobQueueServer is the server API for JobQueue service.
type JobQueueServer interface {
	// Dequeue retrieves the next job from the queue
	Dequeue(context.Context, *DequeueRequest) (*DequeueResponse, error)
	// ReportJobResponse reports the result of executing a job
	ReportJobResponse(context.Context, *ReportJobResponseRequest) (*ReportJobResponseResponse, error)
}

// UnimplementedJobQueueServer can be embedded to have forward compatible implementations.
type UnimplementedJobQueueServer struct {
}

func (*UnimplementedJobQueueServer) Dequeue(ctx context.Context, req *DequeueRequest) (*DequeueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dequeue not implemented")
}
func (*UnimplementedJobQueueServer) ReportJobResponse(ctx context.Context, req *ReportJobResponseRequest) (*ReportJobResponseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportJobResponse not implemented")
}

func RegisterJobQueueServer(s *grpc.Server, srv JobQueueServer) {
	s.RegisterService(&_JobQueue_serviceDesc, srv)
}

func _JobQueue_Dequeue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DequeueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobQueueServer).Dequeue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobqueue.JobQueue/Dequeue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobQueueServer).Dequeue(ctx, req.(*DequeueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobQueue_ReportJobResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportJobResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobQueueServer).ReportJobResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobqueue.JobQueue/ReportJobResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobQueueServer).ReportJobResponse(ctx, req.(*ReportJobResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _JobQueue_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jobqueue.JobQueue",
	HandlerType: (*JobQueueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Dequeue",
			Handler:    _JobQueue_Dequeue_Handler,
		},
		{
			MethodName: "ReportJobResponse",
			Handler:    _JobQueue_ReportJobResponse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/compactor/jobqueue/queue.proto",
}

func (m *Job) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Job) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Job) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintQueue(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintQueue(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQueue(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DequeueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DequeueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DequeueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DequeueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DequeueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DequeueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Job != nil {
		{
			size, err := m.Job.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueue(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JobResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueue(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintQueue(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x1a
	}
	if m.JobType != 0 {
		i = encodeVarintQueue(dAtA, i, uint64(m.JobType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.JobId) > 0 {
		i -= len(m.JobId)
		copy(dAtA[i:], m.JobId)
		i = encodeVarintQueue(dAtA, i, uint64(len(m.JobId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReportJobResponseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportJobResponseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportJobResponseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueue(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReportJobResponseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportJobResponseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportJobResponseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintQueue(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueue(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Job) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQueue(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovQueue(uint64(m.Type))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovQueue(uint64(l))
	}
	return n
}

func (m *DequeueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DequeueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Job != nil {
		l = m.Job.Size()
		n += 1 + l + sovQueue(uint64(l))
	}
	return n
}

func (m *JobResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovQueue(uint64(l))
	}
	if m.JobType != 0 {
		n += 1 + sovQueue(uint64(m.JobType))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovQueue(uint64(l))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovQueue(uint64(l))
	}
	return n
}

func (m *ReportJobResponseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovQueue(uint64(l))
	}
	return n
}

func (m *ReportJobResponseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovQueue(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueue(x uint64) (n int) {
	return sovQueue(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Job) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Job{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DequeueRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DequeueRequest{`,
		`}`,
	}, "")
	return s
}
func (this *DequeueResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DequeueResponse{`,
		`Job:` + strings.Replace(this.Job.String(), "Job", "Job", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobResponse{`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`JobType:` + fmt.Sprintf("%v", this.JobType) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "Any", "types.Any", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReportJobResponseRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReportJobResponseRequest{`,
		`Response:` + strings.Replace(this.Response.String(), "JobResponse", "JobResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReportJobResponseResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReportJobResponseResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringQueue(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Job) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Job: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Job: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= JobType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQueue
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueue
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQueue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DequeueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DequeueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DequeueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQueue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueue
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQueue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DequeueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DequeueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DequeueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Job", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueue
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Job == nil {
				m.Job = &Job{}
			}
			if err := m.Job.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueue
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQueue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobType", wireType)
			}
			m.JobType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JobType |= JobType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueue
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &types.Any{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueue
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQueue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportJobResponseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportJobResponseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportJobResponseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueue
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &JobResponse{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueue
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQueue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportJobResponseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportJobResponseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportJobResponseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQueue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueue
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQueue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueue(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueue
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueue
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthQueue
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowQueue
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipQueue(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthQueue
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthQueue = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueue   = fmt.Errorf("proto: integer overflow")
)
