// Code generated by goyacc -p expr -o pkg/logql/expr.y.go pkg/logql/expr.y. DO NOT EDIT.

package logql

import __yyfmt__ "fmt"


import (
	"github.com/prometheus/prometheus/pkg/labels"
	"time"
)

type exprSymType struct {
	yys                   int
	Expr                  Expr
	Filter                labels.MatchType
	Grouping              *grouping
	Labels                []string
	LogExpr               LogSelectorExpr
	LogRangeExpr          *logRange
	Matcher               *labels.Matcher
	Matchers              []*labels.Matcher
	RangeAggregationExpr  SampleExpr
	RangeOp               string
	Selector              []*labels.Matcher
	VectorAggregationExpr SampleExpr
	MetricExpr            SampleExpr
	VectorOp              string
	BinOpExpr             SampleExpr
	binOp                 string
	str                   string
	duration              time.Duration
	LiteralExpr           *literalExpr
}

const IDENTIFIER = 57346
const STRING = 57347
const NUMBER = 57348
const DURATION = 57349
const MATCHERS = 57350
const LABELS = 57351
const EQ = 57352
const RE = 57353
const NRE = 57354
const OPEN_BRACE = 57355
const CLOSE_BRACE = 57356
const OPEN_BRACKET = 57357
const CLOSE_BRACKET = 57358
const COMMA = 57359
const DOT = 57360
const PIPE_MATCH = 57361
const PIPE_EXACT = 57362
const OPEN_PARENTHESIS = 57363
const CLOSE_PARENTHESIS = 57364
const BY = 57365
const WITHOUT = 57366
const COUNT_OVER_TIME = 57367
const RATE = 57368
const SUM = 57369
const AVG = 57370
const MAX = 57371
const MIN = 57372
const COUNT = 57373
const STDDEV = 57374
const STDVAR = 57375
const BOTTOMK = 57376
const TOPK = 57377
const BYTES_OVER_TIME = 57378
const BYTES_RATE = 57379
const OR = 57380
const AND = 57381
const UNLESS = 57382
const CMP_EQ = 57383
const NEQ = 57384
const LT = 57385
const LTE = 57386
const GT = 57387
const GTE = 57388
const ADD = 57389
const SUB = 57390
const MUL = 57391
const DIV = 57392
const MOD = 57393
const POW = 57394

var exprToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"NUMBER",
	"DURATION",
	"MATCHERS",
	"LABELS",
	"EQ",
	"RE",
	"NRE",
	"OPEN_BRACE",
	"CLOSE_BRACE",
	"OPEN_BRACKET",
	"CLOSE_BRACKET",
	"COMMA",
	"DOT",
	"PIPE_MATCH",
	"PIPE_EXACT",
	"OPEN_PARENTHESIS",
	"CLOSE_PARENTHESIS",
	"BY",
	"WITHOUT",
	"COUNT_OVER_TIME",
	"RATE",
	"SUM",
	"AVG",
	"MAX",
	"MIN",
	"COUNT",
	"STDDEV",
	"STDVAR",
	"BOTTOMK",
	"TOPK",
	"BYTES_OVER_TIME",
	"BYTES_RATE",
	"OR",
	"AND",
	"UNLESS",
	"CMP_EQ",
	"NEQ",
	"LT",
	"LTE",
	"GT",
	"GTE",
	"ADD",
	"SUB",
	"MUL",
	"DIV",
	"MOD",
	"POW",
}
var exprStatenames = [...]string{}

const exprEofCode = 1
const exprErrCode = 2
const exprInitialStackSize = 16


var exprExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	1, 2,
	22, 2,
	38, 2,
	39, 2,
	40, 2,
	41, 2,
	43, 2,
	44, 2,
	45, 2,
	46, 2,
	47, 2,
	48, 2,
	49, 2,
	50, 2,
	51, 2,
	52, 2,
	-2, 0,
	-1, 52,
	38, 2,
	39, 2,
	40, 2,
	41, 2,
	43, 2,
	44, 2,
	45, 2,
	46, 2,
	47, 2,
	48, 2,
	49, 2,
	50, 2,
	51, 2,
	52, 2,
	-2, 0,
}

const exprPrivate = 57344

const exprLast = 256

var exprAct = [...]int{

	60, 4, 45, 114, 56, 3, 92, 38, 51, 88,
	90, 91, 52, 30, 31, 32, 39, 40, 43, 44,
	41, 42, 33, 34, 35, 36, 37, 38, 14, 33,
	34, 35, 36, 37, 38, 11, 35, 36, 37, 38,
	126, 89, 59, 6, 61, 62, 122, 17, 18, 21,
	22, 24, 25, 23, 26, 27, 28, 29, 19, 20,
	123, 95, 61, 62, 93, 125, 111, 82, 99, 15,
	16, 31, 32, 39, 40, 43, 44, 41, 42, 33,
	34, 35, 36, 37, 38, 123, 11, 98, 97, 112,
	124, 100, 58, 87, 94, 105, 64, 63, 104, 113,
	109, 110, 118, 116, 103, 117, 102, 85, 46, 96,
	10, 127, 120, 105, 121, 101, 11, 81, 49, 84,
	80, 55, 86, 57, 6, 47, 48, 128, 17, 18,
	21, 22, 24, 25, 23, 26, 27, 28, 29, 19,
	20, 53, 2, 115, 57, 9, 13, 8, 50, 5,
	15, 16, 39, 40, 43, 44, 41, 42, 33, 34,
	35, 36, 37, 38, 12, 7, 54, 1, 0, 0,
	0, 0, 65, 66, 67, 68, 69, 70, 71, 72,
	73, 74, 75, 76, 77, 78, 79, 46, 0, 0,
	0, 106, 108, 0, 0, 0, 106, 49, 0, 0,
	0, 49, 0, 0, 47, 48, 49, 83, 47, 48,
	0, 119, 46, 47, 48, 46, 107, 108, 0, 0,
	0, 0, 49, 0, 0, 49, 0, 50, 0, 47,
	48, 50, 47, 48, 0, 83, 50, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 50,
}
var exprPact = [...]int{

	22, -1000, -25, 106, -1000, -1000, 22, -1000, -1000, -1000,
	-1000, 119, 71, 21, -1000, 91, 90, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 115, -1000, -1000, -1000, -1000,
	-1000, 45, 213, -25, 105, 79, -1000, -1, 73, 103,
	67, 66, 47, -1000, -1000, 32, 111, 111, -13, -13,
	-45, -45, -45, -45, -18, -18, -18, -18, -18, -18,
	-1000, -1000, -1000, -1000, -1000, -1000, 140, -1000, 110, 101,
	99, 93, 194, 210, 73, 44, 72, 22, 139, 139,
	-1000, -1000, -1000, -1000, -1000, 100, -1000, -1000, -1000, 185,
	189, 39, 22, 24, 68, -1000, 43, -1000, -1000, -1000,
	-1000, 18, -1000, 107, -1000, -1000, 39, -1000, -1000,
}
var exprPgo = [...]int{

	0, 167, 141, 2, 0, 3, 5, 1, 6, 4,
	166, 165, 164, 149, 147, 146, 145, 110, 110,
}
var exprR1 = [...]int{

	0, 1, 2, 2, 7, 7, 7, 7, 7, 6,
	6, 6, 6, 6, 8, 8, 8, 8, 8, 11,
	14, 14, 14, 14, 14, 3, 3, 3, 3, 13,
	13, 13, 10, 10, 9, 9, 9, 9, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 18, 17, 17, 17, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 12, 12, 12, 12,
	5, 5, 4, 4,
}
var exprR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	3, 3, 3, 2, 2, 3, 3, 3, 2, 4,
	4, 5, 5, 6, 7, 1, 1, 1, 1, 3,
	3, 3, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 4, 4,
}
var exprChk = [...]int{

	-1000, -1, -2, -6, -7, -13, 21, -11, -14, -16,
	-17, 13, -12, -15, 6, 47, 48, 25, 26, 36,
	37, 27, 28, 31, 29, 30, 32, 33, 34, 35,
	38, 39, 40, 47, 48, 49, 50, 51, 52, 41,
	42, 45, 46, 43, 44, -3, 2, 19, 20, 12,
	42, -7, -6, -2, -10, 2, -9, 4, 21, 21,
	-4, 23, 24, 6, 6, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	5, 2, 22, 22, 14, 2, 17, 14, 10, 42,
	11, 12, -8, -6, 21, -7, 6, 21, 21, 21,
	-9, 5, 5, 5, 5, -3, 2, 22, 7, -6,
	-8, 22, 17, -7, -5, 4, -5, 5, 2, 22,
	-4, -7, 22, 17, 22, 22, 22, 4, -4,
}
var exprDef = [...]int{

	0, -2, 1, -2, 3, 9, 0, 4, 5, 6,
	7, 0, 0, 0, 54, 0, 0, 66, 67, 68,
	69, 57, 58, 59, 60, 61, 62, 63, 64, 65,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 13, 25, 26, 27,
	28, 3, -2, 0, 0, 0, 32, 0, 0, 0,
	0, 0, 0, 55, 56, 38, 39, 40, 41, 42,
	43, 44, 45, 46, 47, 48, 49, 50, 51, 52,
	10, 12, 8, 11, 29, 30, 0, 31, 0, 0,
	0, 0, 0, 0, 0, 3, 54, 0, 0, 0,
	33, 34, 35, 36, 37, 0, 18, 19, 14, 0,
	0, 20, 0, 3, 0, 70, 0, 15, 17, 16,
	22, 3, 21, 0, 72, 73, 23, 71, 24,
}
var exprTok1 = [...]int{

	1,
}
var exprTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52,
}
var exprTok3 = [...]int{
	0,
}

var exprErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}


/*	parser for yacc output	*/

var (
	exprDebug        = 0
	exprErrorVerbose = false
)

type exprLexer interface {
	Lex(lval *exprSymType) int
	Error(s string)
}

type exprParser interface {
	Parse(exprLexer) int
	Lookahead() int
}

type exprParserImpl struct {
	lval  exprSymType
	stack [exprInitialStackSize]exprSymType
	char  int
}

func (p *exprParserImpl) Lookahead() int {
	return p.char
}

func exprNewParser() exprParser {
	return &exprParserImpl{}
}

const exprFlag = -1000

func exprTokname(c int) string {
	if c >= 1 && c-1 < len(exprToknames) {
		if exprToknames[c-1] != "" {
			return exprToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func exprStatname(s int) string {
	if s >= 0 && s < len(exprStatenames) {
		if exprStatenames[s] != "" {
			return exprStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func exprErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !exprErrorVerbose {
		return "syntax error"
	}

	for _, e := range exprErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + exprTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := exprPact[state]
	for tok := TOKSTART; tok-1 < len(exprToknames); tok++ {
		if n := base + tok; n >= 0 && n < exprLast && exprChk[exprAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if exprDef[state] == -2 {
		i := 0
		for exprExca[i] != -1 || exprExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; exprExca[i] >= 0; i += 2 {
			tok := exprExca[i]
			if tok < TOKSTART || exprExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if exprExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += exprTokname(tok)
	}
	return res
}

func exprlex1(lex exprLexer, lval *exprSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = exprTok1[0]
		goto out
	}
	if char < len(exprTok1) {
		token = exprTok1[char]
		goto out
	}
	if char >= exprPrivate {
		if char < exprPrivate+len(exprTok2) {
			token = exprTok2[char-exprPrivate]
			goto out
		}
	}
	for i := 0; i < len(exprTok3); i += 2 {
		token = exprTok3[i+0]
		if token == char {
			token = exprTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = exprTok2[1] /* unknown char */
	}
	if exprDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", exprTokname(token), uint(char))
	}
	return char, token
}

func exprParse(exprlex exprLexer) int {
	return exprNewParser().Parse(exprlex)
}

func (exprrcvr *exprParserImpl) Parse(exprlex exprLexer) int {
	var exprn int
	var exprVAL exprSymType
	var exprDollar []exprSymType
	_ = exprDollar // silence set and not used
	exprS := exprrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	exprstate := 0
	exprrcvr.char = -1
	exprtoken := -1 // exprrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		exprstate = -1
		exprrcvr.char = -1
		exprtoken = -1
	}()
	exprp := -1
	goto exprstack

ret0:
	return 0

ret1:
	return 1

exprstack:
	/* put a state and value onto the stack */
	if exprDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", exprTokname(exprtoken), exprStatname(exprstate))
	}

	exprp++
	if exprp >= len(exprS) {
		nyys := make([]exprSymType, len(exprS)*2)
		copy(nyys, exprS)
		exprS = nyys
	}
	exprS[exprp] = exprVAL
	exprS[exprp].yys = exprstate

exprnewstate:
	exprn = exprPact[exprstate]
	if exprn <= exprFlag {
		goto exprdefault /* simple state */
	}
	if exprrcvr.char < 0 {
		exprrcvr.char, exprtoken = exprlex1(exprlex, &exprrcvr.lval)
	}
	exprn += exprtoken
	if exprn < 0 || exprn >= exprLast {
		goto exprdefault
	}
	exprn = exprAct[exprn]
	if exprChk[exprn] == exprtoken { /* valid shift */
		exprrcvr.char = -1
		exprtoken = -1
		exprVAL = exprrcvr.lval
		exprstate = exprn
		if Errflag > 0 {
			Errflag--
		}
		goto exprstack
	}

exprdefault:
	/* default state action */
	exprn = exprDef[exprstate]
	if exprn == -2 {
		if exprrcvr.char < 0 {
			exprrcvr.char, exprtoken = exprlex1(exprlex, &exprrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if exprExca[xi+0] == -1 && exprExca[xi+1] == exprstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			exprn = exprExca[xi+0]
			if exprn < 0 || exprn == exprtoken {
				break
			}
		}
		exprn = exprExca[xi+1]
		if exprn < 0 {
			goto ret0
		}
	}
	if exprn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			exprlex.Error(exprErrorMessage(exprstate, exprtoken))
			Nerrs++
			if exprDebug >= 1 {
				__yyfmt__.Printf("%s", exprStatname(exprstate))
				__yyfmt__.Printf(" saw %s\n", exprTokname(exprtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for exprp >= 0 {
				exprn = exprPact[exprS[exprp].yys] + exprErrCode
				if exprn >= 0 && exprn < exprLast {
					exprstate = exprAct[exprn] /* simulate a shift of "error" */
					if exprChk[exprstate] == exprErrCode {
						goto exprstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if exprDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", exprS[exprp].yys)
				}
				exprp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if exprDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", exprTokname(exprtoken))
			}
			if exprtoken == exprEofCode {
				goto ret1
			}
			exprrcvr.char = -1
			exprtoken = -1
			goto exprnewstate /* try again in the same state */
		}
	}

	/* reduction by production exprn */
	if exprDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", exprn, exprStatname(exprstate))
	}

	exprnt := exprn
	exprpt := exprp
	_ = exprpt // guard against "declared and not used"

	exprp -= exprR2[exprn]
	// exprp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if exprp+1 >= len(exprS) {
		nyys := make([]exprSymType, len(exprS)*2)
		copy(nyys, exprS)
		exprS = nyys
	}
	exprVAL = exprS[exprp+1]

	/* consult goto table to find next state */
	exprn = exprR1[exprn]
	exprg := exprPgo[exprn]
	exprj := exprg + exprS[exprp].yys + 1

	if exprj >= exprLast {
		exprstate = exprAct[exprg]
	} else {
		exprstate = exprAct[exprj]
		if exprChk[exprstate] != -exprn {
			exprstate = exprAct[exprg]
		}
	}
	// dummy call; replaced with literal code
	switch exprnt {

	case 1:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprlex.(*lexer).expr = exprDollar[1].Expr
		}
	case 2:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Expr = exprDollar[1].LogExpr
		}
	case 3:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Expr = exprDollar[1].MetricExpr
		}
	case 4:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricExpr = exprDollar[1].RangeAggregationExpr
		}
	case 5:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricExpr = exprDollar[1].VectorAggregationExpr
		}
	case 6:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricExpr = exprDollar[1].BinOpExpr
		}
	case 7:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.MetricExpr = exprDollar[1].LiteralExpr
		}
	case 8:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.MetricExpr = exprDollar[2].MetricExpr
		}
	case 9:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.LogExpr = newMatcherExpr(exprDollar[1].Selector)
		}
	case 10:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogExpr = NewFilterExpr(exprDollar[1].LogExpr, exprDollar[2].Filter, exprDollar[3].str)
		}
	case 11:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogExpr = exprDollar[2].LogExpr
		}
	case 14:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LogRangeExpr = newLogRange(exprDollar[1].LogExpr, exprDollar[2].duration)
		}
	case 15:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogRangeExpr = addFilterToLogRangeExpr(exprDollar[1].LogRangeExpr, exprDollar[2].Filter, exprDollar[3].str)
		}
	case 16:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.LogRangeExpr = exprDollar[2].LogRangeExpr
		}
	case 19:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.RangeAggregationExpr = newRangeAggregationExpr(exprDollar[3].LogRangeExpr, exprDollar[1].RangeOp)
		}
	case 20:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[3].MetricExpr, exprDollar[1].VectorOp, nil, nil)
		}
	case 21:
		exprDollar = exprS[exprpt-5 : exprpt+1]
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[4].MetricExpr, exprDollar[1].VectorOp, exprDollar[2].Grouping, nil)
		}
	case 22:
		exprDollar = exprS[exprpt-5 : exprpt+1]
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[3].MetricExpr, exprDollar[1].VectorOp, exprDollar[5].Grouping, nil)
		}
	case 23:
		exprDollar = exprS[exprpt-6 : exprpt+1]
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[5].MetricExpr, exprDollar[1].VectorOp, nil, &exprDollar[3].str)
		}
	case 24:
		exprDollar = exprS[exprpt-7 : exprpt+1]
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[5].MetricExpr, exprDollar[1].VectorOp, exprDollar[7].Grouping, &exprDollar[3].str)
		}
	case 25:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Filter = labels.MatchRegexp
		}
	case 26:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Filter = labels.MatchEqual
		}
	case 27:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Filter = labels.MatchNotRegexp
		}
	case 28:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Filter = labels.MatchNotEqual
		}
	case 29:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Selector = exprDollar[2].Matchers
		}
	case 30:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Selector = exprDollar[2].Matchers
		}
	case 31:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
		}
	case 32:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Matchers = []*labels.Matcher{exprDollar[1].Matcher}
		}
	case 33:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Matchers = append(exprDollar[1].Matchers, exprDollar[3].Matcher)
		}
	case 34:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Matcher = mustNewMatcher(labels.MatchEqual, exprDollar[1].str, exprDollar[3].str)
		}
	case 35:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Matcher = mustNewMatcher(labels.MatchNotEqual, exprDollar[1].str, exprDollar[3].str)
		}
	case 36:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Matcher = mustNewMatcher(labels.MatchRegexp, exprDollar[1].str, exprDollar[3].str)
		}
	case 37:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Matcher = mustNewMatcher(labels.MatchNotRegexp, exprDollar[1].str, exprDollar[3].str)
		}
	case 38:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("or", exprDollar[1].Expr, exprDollar[3].Expr)
		}
	case 39:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("and", exprDollar[1].Expr, exprDollar[3].Expr)
		}
	case 40:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("unless", exprDollar[1].Expr, exprDollar[3].Expr)
		}
	case 41:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("+", exprDollar[1].Expr, exprDollar[3].Expr)
		}
	case 42:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("-", exprDollar[1].Expr, exprDollar[3].Expr)
		}
	case 43:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("*", exprDollar[1].Expr, exprDollar[3].Expr)
		}
	case 44:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("/", exprDollar[1].Expr, exprDollar[3].Expr)
		}
	case 45:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("%", exprDollar[1].Expr, exprDollar[3].Expr)
		}
	case 46:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("^", exprDollar[1].Expr, exprDollar[3].Expr)
		}
	case 47:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("==", exprDollar[1].Expr, exprDollar[3].Expr)
		}
	case 48:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("!=", exprDollar[1].Expr, exprDollar[3].Expr)
		}
	case 49:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr(">", exprDollar[1].Expr, exprDollar[3].Expr)
		}
	case 50:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr(">=", exprDollar[1].Expr, exprDollar[3].Expr)
		}
	case 51:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("<", exprDollar[1].Expr, exprDollar[3].Expr)
		}
	case 52:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("<=", exprDollar[1].Expr, exprDollar[3].Expr)
		}
	case 54:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.LiteralExpr = mustNewLiteralExpr(exprDollar[1].str, false)
		}
	case 55:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LiteralExpr = mustNewLiteralExpr(exprDollar[2].str, false)
		}
	case 56:
		exprDollar = exprS[exprpt-2 : exprpt+1]
		{
			exprVAL.LiteralExpr = mustNewLiteralExpr(exprDollar[2].str, true)
		}
	case 57:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.VectorOp = OpTypeSum
		}
	case 58:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.VectorOp = OpTypeAvg
		}
	case 59:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.VectorOp = OpTypeCount
		}
	case 60:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.VectorOp = OpTypeMax
		}
	case 61:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.VectorOp = OpTypeMin
		}
	case 62:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.VectorOp = OpTypeStddev
		}
	case 63:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.VectorOp = OpTypeStdvar
		}
	case 64:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.VectorOp = OpTypeBottomK
		}
	case 65:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.VectorOp = OpTypeTopK
		}
	case 66:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.RangeOp = OpRangeTypeCount
		}
	case 67:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.RangeOp = OpRangeTypeRate
		}
	case 68:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.RangeOp = OpRangeTypeBytes
		}
	case 69:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.RangeOp = OpRangeTypeBytesRate
		}
	case 70:
		exprDollar = exprS[exprpt-1 : exprpt+1]
		{
			exprVAL.Labels = []string{exprDollar[1].str}
		}
	case 71:
		exprDollar = exprS[exprpt-3 : exprpt+1]
		{
			exprVAL.Labels = append(exprDollar[1].Labels, exprDollar[3].str)
		}
	case 72:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.Grouping = &grouping{without: false, groups: exprDollar[3].Labels}
		}
	case 73:
		exprDollar = exprS[exprpt-4 : exprpt+1]
		{
			exprVAL.Grouping = &grouping{without: true, groups: exprDollar[3].Labels}
		}
	}
	goto exprstack /* stack new state and value */
}
