// Code generated by goyacc -p expr -o pkg/logql/expr.y.go pkg/logql/expr.y. DO NOT EDIT.

//line pkg/logql/expr.y:2
package logql

import __yyfmt__ "fmt"

//line pkg/logql/expr.y:2

import (
	"fmt"
	"time"

	"github.com/grafana/loki/pkg/logql/log"
	"github.com/prometheus/prometheus/pkg/labels"
)

//line pkg/logql/expr.y:14
type exprSymType struct {
	yys                   int
	Expr                  Expr
	Filter                labels.MatchType
	Grouping              *grouping
	Labels                []string
	LogExpr               LogSelectorExpr
	LogRangeExpr          *LogRange
	Matcher               *labels.Matcher
	Matchers              []*labels.Matcher
	RangeAggregationExpr  SampleExpr
	RangeOp               string
	ConvOp                string
	Selector              []*labels.Matcher
	VectorAggregationExpr SampleExpr
	MetricExpr            SampleExpr
	VectorOp              string
	FilterOp              string
	BinOpExpr             SampleExpr
	LabelReplaceExpr      SampleExpr
	binOp                 string
	bytes                 uint64
	str                   string
	number                float64
	duration              time.Duration
	LiteralExpr           *LiteralExpr
	BinOpModifier         *BinOpOptions
	BoolModifier          *BinOpOptions
	LabelParser           *LabelParserExpr
	LineFilters           *LineFilterExpr
	LineFilter            *LineFilterExpr
	PipelineExpr          MultiStageExpr
	PipelineStage         StageExpr
	BytesFilter           log.LabelFilterer
	NumberFilter          log.LabelFilterer
	DurationFilter        log.LabelFilterer
	LabelFilter           log.LabelFilterer
	UnitFilter            log.LabelFilterer
	IPLabelFilter         log.LabelFilterer
	LineFormatExpr        *LineFmtExpr
	LabelFormatExpr       *LabelFmtExpr
	SignedNumber          string
	LabelFormat           log.LabelFmt
	LabelsFormat          []log.LabelFmt
	JSONExpressionParser  *JSONExpressionParser
	JSONExpression        log.JSONExpression
	JSONExpressionList    []log.JSONExpression
	UnwrapExpr            *UnwrapExpr
	OffsetExpr            *OffsetExpr
}

const BYTES = 57346
const IDENTIFIER = 57347
const STRING = 57348
const NUMBER = 57349
const DURATION = 57350
const RANGE = 57351
const MATCHERS = 57352
const LABELS = 57353
const EQ = 57354
const RE = 57355
const NRE = 57356
const OPEN_BRACE = 57357
const CLOSE_BRACE = 57358
const OPEN_BRACKET = 57359
const CLOSE_BRACKET = 57360
const COMMA = 57361
const DOT = 57362
const PIPE_MATCH = 57363
const PIPE_EXACT = 57364
const OPEN_PARENTHESIS = 57365
const CLOSE_PARENTHESIS = 57366
const BY = 57367
const WITHOUT = 57368
const COUNT_OVER_TIME = 57369
const RATE = 57370
const SUM = 57371
const AVG = 57372
const MAX = 57373
const MIN = 57374
const COUNT = 57375
const STDDEV = 57376
const STDVAR = 57377
const BOTTOMK = 57378
const TOPK = 57379
const BYTES_OVER_TIME = 57380
const BYTES_RATE = 57381
const BOOL = 57382
const JSON = 57383
const REGEXP = 57384
const LOGFMT = 57385
const PIPE = 57386
const LINE_FMT = 57387
const LABEL_FMT = 57388
const UNWRAP = 57389
const AVG_OVER_TIME = 57390
const SUM_OVER_TIME = 57391
const MIN_OVER_TIME = 57392
const MAX_OVER_TIME = 57393
const STDVAR_OVER_TIME = 57394
const STDDEV_OVER_TIME = 57395
const QUANTILE_OVER_TIME = 57396
const BYTES_CONV = 57397
const DURATION_CONV = 57398
const DURATION_SECONDS_CONV = 57399
const FIRST_OVER_TIME = 57400
const LAST_OVER_TIME = 57401
const ABSENT_OVER_TIME = 57402
const LABEL_REPLACE = 57403
const UNPACK = 57404
const OFFSET = 57405
const PATTERN = 57406
const IP = 57407
const ON = 57408
const IGNORING = 57409
const OR = 57410
const AND = 57411
const UNLESS = 57412
const CMP_EQ = 57413
const NEQ = 57414
const LT = 57415
const LTE = 57416
const GT = 57417
const GTE = 57418
const ADD = 57419
const SUB = 57420
const MUL = 57421
const DIV = 57422
const MOD = 57423
const POW = 57424

var exprToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"BYTES",
	"IDENTIFIER",
	"STRING",
	"NUMBER",
	"DURATION",
	"RANGE",
	"MATCHERS",
	"LABELS",
	"EQ",
	"RE",
	"NRE",
	"OPEN_BRACE",
	"CLOSE_BRACE",
	"OPEN_BRACKET",
	"CLOSE_BRACKET",
	"COMMA",
	"DOT",
	"PIPE_MATCH",
	"PIPE_EXACT",
	"OPEN_PARENTHESIS",
	"CLOSE_PARENTHESIS",
	"BY",
	"WITHOUT",
	"COUNT_OVER_TIME",
	"RATE",
	"SUM",
	"AVG",
	"MAX",
	"MIN",
	"COUNT",
	"STDDEV",
	"STDVAR",
	"BOTTOMK",
	"TOPK",
	"BYTES_OVER_TIME",
	"BYTES_RATE",
	"BOOL",
	"JSON",
	"REGEXP",
	"LOGFMT",
	"PIPE",
	"LINE_FMT",
	"LABEL_FMT",
	"UNWRAP",
	"AVG_OVER_TIME",
	"SUM_OVER_TIME",
	"MIN_OVER_TIME",
	"MAX_OVER_TIME",
	"STDVAR_OVER_TIME",
	"STDDEV_OVER_TIME",
	"QUANTILE_OVER_TIME",
	"BYTES_CONV",
	"DURATION_CONV",
	"DURATION_SECONDS_CONV",
	"FIRST_OVER_TIME",
	"LAST_OVER_TIME",
	"ABSENT_OVER_TIME",
	"LABEL_REPLACE",
	"UNPACK",
	"OFFSET",
	"PATTERN",
	"IP",
	"ON",
	"IGNORING",
	"OR",
	"AND",
	"UNLESS",
	"CMP_EQ",
	"NEQ",
	"LT",
	"LTE",
	"GT",
	"GTE",
	"ADD",
	"SUB",
	"MUL",
	"DIV",
	"MOD",
	"POW",
}

var exprStatenames = [...]string{}

const exprEofCode = 1
const exprErrCode = 2
const exprInitialStackSize = 16

//line pkg/logql/expr.y:454

//line yacctab:1
var exprExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const exprPrivate = 57344

const exprLast = 486

var exprAct = [...]int{
	244, 193, 77, 4, 174, 59, 162, 5, 167, 202,
	68, 112, 51, 58, 122, 135, 46, 47, 48, 49,
	50, 51, 247, 66, 73, 48, 49, 50, 51, 239,
	64, 65, 40, 238, 15, 146, 147, 70, 2, 43,
	44, 45, 52, 53, 56, 57, 54, 55, 46, 47,
	48, 49, 50, 51, 252, 249, 310, 131, 133, 134,
	85, 62, 310, 204, 100, 286, 236, 330, 104, 40,
	235, 261, 248, 124, 233, 247, 301, 40, 232, 325,
	139, 67, 268, 137, 144, 44, 45, 52, 53, 56,
	57, 54, 55, 46, 47, 48, 49, 50, 51, 318,
	249, 230, 41, 42, 40, 229, 76, 249, 78, 79,
	136, 140, 224, 317, 186, 40, 223, 132, 78, 79,
	189, 145, 101, 171, 148, 149, 150, 151, 152, 153,
	154, 155, 156, 157, 158, 159, 160, 161, 287, 41,
	42, 184, 278, 315, 261, 200, 196, 41, 42, 300,
	296, 194, 277, 205, 197, 52, 53, 56, 57, 54,
	55, 46, 47, 48, 49, 50, 51, 176, 133, 134,
	210, 211, 212, 222, 41, 42, 201, 119, 204, 307,
	220, 259, 185, 40, 219, 41, 42, 261, 289, 290,
	291, 164, 263, 242, 245, 116, 251, 266, 254, 137,
	100, 257, 104, 258, 198, 227, 246, 243, 40, 226,
	255, 221, 225, 228, 231, 234, 237, 240, 265, 267,
	250, 271, 269, 189, 126, 66, 182, 177, 180, 181,
	178, 179, 64, 65, 40, 294, 125, 276, 261, 12,
	275, 218, 12, 262, 204, 256, 279, 138, 281, 283,
	138, 285, 100, 41, 42, 195, 284, 295, 280, 66,
	192, 100, 66, 206, 297, 66, 64, 65, 328, 64,
	65, 204, 64, 65, 189, 253, 286, 209, 41, 42,
	119, 304, 305, 67, 208, 183, 100, 306, 143, 195,
	203, 313, 195, 308, 309, 195, 190, 142, 116, 314,
	141, 119, 80, 75, 41, 42, 40, 324, 247, 299,
	320, 249, 321, 322, 12, 164, 260, 67, 217, 116,
	67, 216, 6, 67, 326, 119, 17, 18, 31, 32,
	34, 35, 33, 36, 37, 38, 39, 19, 20, 164,
	213, 207, 199, 116, 215, 191, 130, 21, 22, 23,
	24, 25, 26, 27, 214, 323, 250, 28, 29, 30,
	16, 66, 192, 66, 165, 163, 119, 66, 64, 65,
	64, 65, 119, 312, 64, 65, 41, 42, 128, 311,
	164, 248, 292, 282, 116, 82, 119, 81, 165, 163,
	116, 195, 127, 61, 329, 129, 293, 195, 273, 274,
	3, 83, 327, 316, 116, 303, 302, 69, 107, 109,
	108, 270, 117, 118, 252, 272, 249, 264, 175, 67,
	241, 67, 107, 109, 108, 67, 117, 118, 188, 110,
	163, 111, 187, 186, 185, 172, 170, 169, 72, 319,
	298, 74, 168, 110, 74, 111, 86, 87, 88, 89,
	90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
	175, 113, 114, 166, 103, 173, 106, 105, 60, 120,
	115, 121, 102, 84, 11, 10, 9, 123, 14, 8,
	288, 13, 7, 71, 63, 1,
}

var exprPact = [...]int{
	299, -1000, -29, -1000, -1000, 349, 299, -1000, -1000, -1000,
	-1000, -1000, 436, 280, 83, -1000, 279, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 380, 378, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 349, -1000,
	9, 381, -1000, 8, -1000, -1000, -1000, -1000, 212, 200,
	-29, 376, 330, -1000, 45, 227, 299, 277, 274, 265,
	299, -1000, -1000, 299, -31, -1000, 299, 299, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	-1000, -1000, -1000, -1000, 296, -1000, -1000, 437, -1000, 431,
	-1000, 430, -1000, -1000, -1000, -1000, 275, 429, 455, 155,
	-1000, -1000, -1000, 262, -1000, -1000, -1000, -1000, -1000, 439,
	-1000, 428, 427, 426, 422, 272, 326, 353, 224, 180,
	323, 299, 266, 239, 322, 16, 261, 254, 84, 84,
	-54, -54, -70, -70, -70, -70, -61, -61, -61, -61,
	-61, -61, 296, 275, 275, 275, 321, -1000, 342, -1000,
	-1000, 320, -1000, 302, -1000, 306, 176, 108, 201, 97,
	70, 62, 25, 414, -1000, -1000, -1000, -1000, -1000, -1000,
	93, 224, 245, 63, 347, 367, 251, 221, 93, 299,
	157, 297, 219, -1000, -1000, 168, -1000, 411, 173, 58,
	172, 296, 361, 437, 405, -1000, 413, 393, 217, -1000,
	-1000, -1000, 214, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 128, -1000, 118, 248, 11, 248, 375, -41, 275,
	-41, 56, 133, 373, 372, 211, -1000, -1000, 126, -1000,
	299, 435, -1000, -1000, 290, 125, -1000, 52, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 400, 399, -1000, 93, 11,
	248, 11, -1000, -1000, 296, -1000, -41, -1000, 156, -1000,
	-1000, -1000, 12, 370, 364, 267, 93, 119, -1000, 397,
	-1000, -1000, 89, 75, -1000, 11, -1000, 434, 18, 11,
	7, -41, -41, 346, -1000, -1000, 288, -1000, -1000, 55,
	11, -1000, -1000, -41, 396, -1000, -1000, 249, 388, 43,
	-1000,
}

var exprPgo = [...]int{
	0, 485, 37, 484, 2, 9, 400, 3, 15, 11,
	483, 482, 481, 480, 7, 479, 478, 477, 476, 475,
	474, 401, 473, 472, 13, 5, 471, 470, 469, 6,
	468, 61, 467, 466, 4, 465, 464, 8, 463, 1,
	462, 461, 0, 34,
}

var exprR1 = [...]int{
	0, 1, 2, 2, 7, 7, 7, 7, 7, 7,
	6, 6, 6, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8, 8, 39,
	39, 39, 13, 13, 13, 11, 11, 11, 11, 15,
	15, 15, 15, 15, 15, 20, 3, 3, 3, 3,
	14, 14, 14, 10, 10, 9, 9, 9, 9, 24,
	24, 25, 25, 25, 25, 25, 25, 17, 31, 31,
	30, 30, 23, 23, 23, 23, 23, 36, 32, 34,
	34, 35, 35, 35, 33, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 37, 38, 38, 41, 41, 40,
	40, 28, 28, 28, 28, 28, 28, 28, 26, 26,
	26, 26, 26, 26, 26, 27, 27, 27, 27, 27,
	27, 27, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 21, 21, 21,
	21, 21, 22, 22, 19, 43, 43, 43, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 42, 5, 5, 4, 4, 4, 4,
}

var exprR2 = [...]int{
	0, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 2, 3, 2, 3, 4, 5, 3, 4, 5,
	6, 3, 4, 5, 6, 3, 4, 5, 6, 4,
	5, 6, 7, 3, 4, 4, 5, 3, 2, 3,
	6, 3, 1, 1, 1, 4, 6, 5, 7, 4,
	5, 5, 6, 7, 7, 12, 1, 1, 1, 1,
	3, 3, 3, 1, 3, 3, 3, 3, 3, 1,
	2, 1, 2, 2, 2, 2, 2, 1, 2, 5,
	1, 2, 1, 1, 2, 1, 2, 2, 2, 3,
	3, 1, 3, 3, 2, 1, 1, 1, 1, 3,
	2, 3, 3, 3, 3, 1, 3, 6, 6, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 1, 5, 4,
	5, 4, 0, 1, 1, 1, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 3, 4, 4, 3, 3,
}

var exprChk = [...]int{
	-1000, -1, -2, -6, -7, -14, 23, -11, -15, -18,
	-19, -20, 15, -12, -16, -43, 61, 27, 28, 38,
	39, 48, 49, 50, 51, 52, 53, 54, 58, 59,
	60, 29, 30, 33, 31, 32, 34, 35, 36, 37,
	7, 77, 78, 68, 69, 70, 77, 78, 79, 80,
	81, 82, 71, 72, 75, 76, 73, 74, -24, -25,
	-30, 44, -31, -3, 21, 22, 14, 72, -7, -6,
	-2, -10, 2, -9, 5, 23, 23, -4, 25, 26,
	23, 7, 7, -21, -22, 40, -21, -21, -21, -21,
	-21, -21, -21, -21, -21, -21, -21, -21, -21, -21,
	-25, -31, -23, -36, -29, -32, -33, 41, 43, 42,
	62, 64, -9, -41, -40, -27, 23, 45, 46, 5,
	-28, -26, 6, -17, 65, 24, 24, 16, 2, 19,
	16, 12, 72, 13, 14, -8, -43, -14, 23, -7,
	-43, 23, 23, 23, -7, -2, 66, 67, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -29, 69, 19, 68, -38, -37, 5, 6,
	6, -29, 6, -35, -34, 5, 12, 72, 75, 76,
	73, 74, 71, 23, -9, 6, 6, 6, 6, 2,
	24, 19, 9, -39, -24, 44, -14, -8, 24, 19,
	-7, -43, -5, 24, 5, -5, 24, 19, 23, 23,
	-29, -29, -29, 19, 12, 24, 19, 12, 65, 8,
	4, -43, 65, 8, 4, -43, 8, 4, -43, 8,
	4, -43, 8, 4, -43, 8, 4, -43, 8, 4,
	-43, 6, -4, -8, -42, -39, -24, 63, 9, 44,
	9, -39, 47, 24, -39, -24, 24, -4, -7, 24,
	19, 19, 24, 24, 6, -5, 24, -5, 24, -37,
	6, -34, 2, 5, 6, 23, 23, 24, 24, -39,
	-24, -39, 8, -42, -29, -42, 9, 5, -13, 55,
	56, 57, 9, 24, 24, -39, 24, -7, 5, 19,
	24, 24, 6, 6, -4, -39, -42, 23, -42, -39,
	44, 9, 9, 24, -4, 24, 6, 24, 24, 5,
	-39, -42, -42, 9, 19, 24, -42, 6, 19, 6,
	24,
}

var exprDef = [...]int{
	0, -2, 1, 2, 3, 10, 0, 4, 5, 6,
	7, 8, 0, 0, 0, 154, 0, 167, 168, 169,
	170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
	180, 158, 159, 160, 161, 162, 163, 164, 165, 166,
	155, 0, 0, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 11, 69,
	71, 0, 80, 0, 56, 57, 58, 59, 3, 2,
	0, 0, 0, 63, 0, 0, 0, 0, 0, 0,
	0, 156, 157, 0, 147, 153, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	70, 81, 72, 73, 74, 75, 76, 82, 83, 0,
	85, 0, 95, 96, 97, 98, 0, 0, 0, 0,
	109, 110, 78, 0, 77, 9, 12, 60, 61, 0,
	62, 0, 0, 0, 0, 0, 0, 0, 0, 3,
	154, 0, 0, 0, 3, 132, 0, 0, 133, 134,
	135, 136, 137, 138, 139, 140, 141, 142, 143, 144,
	145, 146, 100, 0, 0, 0, 87, 105, 0, 84,
	86, 0, 88, 94, 91, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 64, 65, 66, 67, 68, 38,
	45, 0, 13, 0, 0, 0, 0, 0, 49, 0,
	3, 154, 0, 186, 182, 0, 187, 0, 0, 0,
	101, 102, 103, 0, 0, 99, 0, 0, 0, 116,
	123, 130, 0, 115, 122, 129, 111, 118, 125, 112,
	119, 126, 113, 120, 127, 114, 121, 128, 117, 124,
	131, 0, 47, 0, 14, 17, 33, 0, 21, 0,
	25, 0, 0, 0, 0, 0, 37, 51, 3, 50,
	0, 0, 184, 185, 0, 0, 149, 0, 151, 106,
	104, 92, 93, 89, 90, 0, 0, 79, 46, 18,
	34, 35, 181, 22, 41, 26, 29, 39, 0, 42,
	43, 44, 15, 0, 0, 0, 52, 3, 183, 0,
	148, 150, 0, 0, 48, 36, 30, 0, 16, 19,
	0, 23, 27, 0, 53, 54, 0, 107, 108, 0,
	20, 24, 28, 31, 0, 40, 32, 0, 0, 0,
	55,
}

var exprTok1 = [...]int{
	1,
}

var exprTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82,
}

var exprTok3 = [...]int{
	0,
}

var exprErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	exprDebug        = 0
	exprErrorVerbose = false
)

type exprLexer interface {
	Lex(lval *exprSymType) int
	Error(s string)
}

type exprParser interface {
	Parse(exprLexer) int
	Lookahead() int
}

type exprParserImpl struct {
	lval  exprSymType
	stack [exprInitialStackSize]exprSymType
	char  int
}

func (p *exprParserImpl) Lookahead() int {
	return p.char
}

func exprNewParser() exprParser {
	return &exprParserImpl{}
}

const exprFlag = -1000

func exprTokname(c int) string {
	if c >= 1 && c-1 < len(exprToknames) {
		if exprToknames[c-1] != "" {
			return exprToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func exprStatname(s int) string {
	if s >= 0 && s < len(exprStatenames) {
		if exprStatenames[s] != "" {
			return exprStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func exprErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !exprErrorVerbose {
		return "syntax error"
	}

	for _, e := range exprErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + exprTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := exprPact[state]
	for tok := TOKSTART; tok-1 < len(exprToknames); tok++ {
		if n := base + tok; n >= 0 && n < exprLast && exprChk[exprAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if exprDef[state] == -2 {
		i := 0
		for exprExca[i] != -1 || exprExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; exprExca[i] >= 0; i += 2 {
			tok := exprExca[i]
			if tok < TOKSTART || exprExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if exprExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += exprTokname(tok)
	}
	return res
}

func exprlex1(lex exprLexer, lval *exprSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = exprTok1[0]
		goto out
	}
	if char < len(exprTok1) {
		token = exprTok1[char]
		goto out
	}
	if char >= exprPrivate {
		if char < exprPrivate+len(exprTok2) {
			token = exprTok2[char-exprPrivate]
			goto out
		}
	}
	for i := 0; i < len(exprTok3); i += 2 {
		token = exprTok3[i+0]
		if token == char {
			token = exprTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = exprTok2[1] /* unknown char */
	}
	if exprDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", exprTokname(token), uint(char))
	}
	return char, token
}

func exprParse(exprlex exprLexer) int {
	return exprNewParser().Parse(exprlex)
}

func (exprrcvr *exprParserImpl) Parse(exprlex exprLexer) int {
	var exprn int
	var exprVAL exprSymType
	var exprDollar []exprSymType
	_ = exprDollar // silence set and not used
	exprS := exprrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	exprstate := 0
	exprrcvr.char = -1
	exprtoken := -1 // exprrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		exprstate = -1
		exprrcvr.char = -1
		exprtoken = -1
	}()
	exprp := -1
	goto exprstack

ret0:
	return 0

ret1:
	return 1

exprstack:
	/* put a state and value onto the stack */
	if exprDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", exprTokname(exprtoken), exprStatname(exprstate))
	}

	exprp++
	if exprp >= len(exprS) {
		nyys := make([]exprSymType, len(exprS)*2)
		copy(nyys, exprS)
		exprS = nyys
	}
	exprS[exprp] = exprVAL
	exprS[exprp].yys = exprstate

exprnewstate:
	exprn = exprPact[exprstate]
	if exprn <= exprFlag {
		goto exprdefault /* simple state */
	}
	if exprrcvr.char < 0 {
		exprrcvr.char, exprtoken = exprlex1(exprlex, &exprrcvr.lval)
	}
	exprn += exprtoken
	if exprn < 0 || exprn >= exprLast {
		goto exprdefault
	}
	exprn = exprAct[exprn]
	if exprChk[exprn] == exprtoken { /* valid shift */
		exprrcvr.char = -1
		exprtoken = -1
		exprVAL = exprrcvr.lval
		exprstate = exprn
		if Errflag > 0 {
			Errflag--
		}
		goto exprstack
	}

exprdefault:
	/* default state action */
	exprn = exprDef[exprstate]
	if exprn == -2 {
		if exprrcvr.char < 0 {
			exprrcvr.char, exprtoken = exprlex1(exprlex, &exprrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if exprExca[xi+0] == -1 && exprExca[xi+1] == exprstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			exprn = exprExca[xi+0]
			if exprn < 0 || exprn == exprtoken {
				break
			}
		}
		exprn = exprExca[xi+1]
		if exprn < 0 {
			goto ret0
		}
	}
	if exprn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			exprlex.Error(exprErrorMessage(exprstate, exprtoken))
			Nerrs++
			if exprDebug >= 1 {
				__yyfmt__.Printf("%s", exprStatname(exprstate))
				__yyfmt__.Printf(" saw %s\n", exprTokname(exprtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for exprp >= 0 {
				exprn = exprPact[exprS[exprp].yys] + exprErrCode
				if exprn >= 0 && exprn < exprLast {
					exprstate = exprAct[exprn] /* simulate a shift of "error" */
					if exprChk[exprstate] == exprErrCode {
						goto exprstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if exprDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", exprS[exprp].yys)
				}
				exprp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if exprDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", exprTokname(exprtoken))
			}
			if exprtoken == exprEofCode {
				goto ret1
			}
			exprrcvr.char = -1
			exprtoken = -1
			goto exprnewstate /* try again in the same state */
		}
	}

	/* reduction by production exprn */
	if exprDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", exprn, exprStatname(exprstate))
	}

	exprnt := exprn
	exprpt := exprp
	_ = exprpt // guard against "declared and not used"

	exprp -= exprR2[exprn]
	// exprp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if exprp+1 >= len(exprS) {
		nyys := make([]exprSymType, len(exprS)*2)
		copy(nyys, exprS)
		exprS = nyys
	}
	exprVAL = exprS[exprp+1]

	/* consult goto table to find next state */
	exprn = exprR1[exprn]
	exprg := exprPgo[exprn]
	exprj := exprg + exprS[exprp].yys + 1

	if exprj >= exprLast {
		exprstate = exprAct[exprg]
	} else {
		exprstate = exprAct[exprj]
		if exprChk[exprstate] != -exprn {
			exprstate = exprAct[exprg]
		}
	}
	// dummy call; replaced with literal code
	switch exprnt {

	case 1:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:129
		{
			exprlex.(*parser).expr = exprDollar[1].Expr
		}
	case 2:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:132
		{
			exprVAL.Expr = exprDollar[1].LogExpr
		}
	case 3:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:133
		{
			exprVAL.Expr = exprDollar[1].MetricExpr
		}
	case 4:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:137
		{
			exprVAL.MetricExpr = exprDollar[1].RangeAggregationExpr
		}
	case 5:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:138
		{
			exprVAL.MetricExpr = exprDollar[1].VectorAggregationExpr
		}
	case 6:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:139
		{
			exprVAL.MetricExpr = exprDollar[1].BinOpExpr
		}
	case 7:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:140
		{
			exprVAL.MetricExpr = exprDollar[1].LiteralExpr
		}
	case 8:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:141
		{
			exprVAL.MetricExpr = exprDollar[1].LabelReplaceExpr
		}
	case 9:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:142
		{
			exprVAL.MetricExpr = exprDollar[2].MetricExpr
		}
	case 10:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:146
		{
			exprVAL.LogExpr = newMatcherExpr(exprDollar[1].Selector)
		}
	case 11:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:147
		{
			exprVAL.LogExpr = newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].PipelineExpr)
		}
	case 12:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:148
		{
			exprVAL.LogExpr = exprDollar[2].LogExpr
		}
	case 13:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:152
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].duration, nil, nil)
		}
	case 14:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:153
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].duration, nil, exprDollar[3].OffsetExpr)
		}
	case 15:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:154
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[4].duration, nil, nil)
		}
	case 16:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/expr.y:155
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[4].duration, nil, exprDollar[5].OffsetExpr)
		}
	case 17:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:156
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].duration, exprDollar[3].UnwrapExpr, nil)
		}
	case 18:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:157
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].duration, exprDollar[4].UnwrapExpr, exprDollar[3].OffsetExpr)
		}
	case 19:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/expr.y:158
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[4].duration, exprDollar[5].UnwrapExpr, nil)
		}
	case 20:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/expr.y:159
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[4].duration, exprDollar[6].UnwrapExpr, exprDollar[5].OffsetExpr)
		}
	case 21:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:160
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[3].duration, exprDollar[2].UnwrapExpr, nil)
		}
	case 22:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:161
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[3].duration, exprDollar[2].UnwrapExpr, exprDollar[4].OffsetExpr)
		}
	case 23:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/expr.y:162
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[5].duration, exprDollar[3].UnwrapExpr, nil)
		}
	case 24:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/expr.y:163
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[5].duration, exprDollar[3].UnwrapExpr, exprDollar[6].OffsetExpr)
		}
	case 25:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:164
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].PipelineExpr), exprDollar[3].duration, nil, nil)
		}
	case 26:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:165
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].PipelineExpr), exprDollar[3].duration, nil, exprDollar[4].OffsetExpr)
		}
	case 27:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/expr.y:166
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[2].Selector), exprDollar[3].PipelineExpr), exprDollar[5].duration, nil, nil)
		}
	case 28:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/expr.y:167
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[2].Selector), exprDollar[3].PipelineExpr), exprDollar[5].duration, nil, exprDollar[6].OffsetExpr)
		}
	case 29:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:168
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].PipelineExpr), exprDollar[4].duration, exprDollar[3].UnwrapExpr, nil)
		}
	case 30:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/expr.y:169
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].PipelineExpr), exprDollar[4].duration, exprDollar[3].UnwrapExpr, exprDollar[5].OffsetExpr)
		}
	case 31:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/expr.y:170
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[2].Selector), exprDollar[3].PipelineExpr), exprDollar[6].duration, exprDollar[4].UnwrapExpr, nil)
		}
	case 32:
		exprDollar = exprS[exprpt-7 : exprpt+1]
//line pkg/logql/expr.y:171
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[2].Selector), exprDollar[3].PipelineExpr), exprDollar[6].duration, exprDollar[4].UnwrapExpr, exprDollar[7].OffsetExpr)
		}
	case 33:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:172
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[3].PipelineExpr), exprDollar[2].duration, nil, nil)
		}
	case 34:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:173
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[4].PipelineExpr), exprDollar[2].duration, nil, exprDollar[3].OffsetExpr)
		}
	case 35:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:174
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[3].PipelineExpr), exprDollar[2].duration, exprDollar[4].UnwrapExpr, nil)
		}
	case 36:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/expr.y:175
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[4].PipelineExpr), exprDollar[2].duration, exprDollar[5].UnwrapExpr, exprDollar[3].OffsetExpr)
		}
	case 37:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:176
		{
			exprVAL.LogRangeExpr = exprDollar[2].LogRangeExpr
		}
	case 39:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:181
		{
			exprVAL.UnwrapExpr = newUnwrapExpr(exprDollar[3].str, "")
		}
	case 40:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/expr.y:182
		{
			exprVAL.UnwrapExpr = newUnwrapExpr(exprDollar[5].str, exprDollar[3].ConvOp)
		}
	case 41:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:183
		{
			exprVAL.UnwrapExpr = exprDollar[1].UnwrapExpr.addPostFilter(exprDollar[3].LabelFilter)
		}
	case 42:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:187
		{
			exprVAL.ConvOp = OpConvBytes
		}
	case 43:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:188
		{
			exprVAL.ConvOp = OpConvDuration
		}
	case 44:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:189
		{
			exprVAL.ConvOp = OpConvDurationSeconds
		}
	case 45:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:193
		{
			exprVAL.RangeAggregationExpr = newRangeAggregationExpr(exprDollar[3].LogRangeExpr, exprDollar[1].RangeOp, nil, nil)
		}
	case 46:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/expr.y:194
		{
			exprVAL.RangeAggregationExpr = newRangeAggregationExpr(exprDollar[5].LogRangeExpr, exprDollar[1].RangeOp, nil, &exprDollar[3].SignedNumber)
		}
	case 47:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/expr.y:195
		{
			exprVAL.RangeAggregationExpr = newRangeAggregationExpr(exprDollar[3].LogRangeExpr, exprDollar[1].RangeOp, exprDollar[5].Grouping, nil)
		}
	case 48:
		exprDollar = exprS[exprpt-7 : exprpt+1]
//line pkg/logql/expr.y:196
		{
			exprVAL.RangeAggregationExpr = newRangeAggregationExpr(exprDollar[5].LogRangeExpr, exprDollar[1].RangeOp, exprDollar[7].Grouping, &exprDollar[3].SignedNumber)
		}
	case 49:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:201
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[3].MetricExpr, exprDollar[1].VectorOp, nil, nil)
		}
	case 50:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/expr.y:202
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[4].MetricExpr, exprDollar[1].VectorOp, exprDollar[2].Grouping, nil)
		}
	case 51:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/expr.y:203
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[3].MetricExpr, exprDollar[1].VectorOp, exprDollar[5].Grouping, nil)
		}
	case 52:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/expr.y:205
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[5].MetricExpr, exprDollar[1].VectorOp, nil, &exprDollar[3].SignedNumber)
		}
	case 53:
		exprDollar = exprS[exprpt-7 : exprpt+1]
//line pkg/logql/expr.y:206
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[5].MetricExpr, exprDollar[1].VectorOp, exprDollar[7].Grouping, &exprDollar[3].SignedNumber)
		}
	case 54:
		exprDollar = exprS[exprpt-7 : exprpt+1]
//line pkg/logql/expr.y:207
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[6].MetricExpr, exprDollar[1].VectorOp, exprDollar[2].Grouping, &exprDollar[4].SignedNumber)
		}
	case 55:
		exprDollar = exprS[exprpt-12 : exprpt+1]
//line pkg/logql/expr.y:212
		{
			exprVAL.LabelReplaceExpr = mustNewLabelReplaceExpr(exprDollar[3].MetricExpr, exprDollar[5].str, exprDollar[7].str, exprDollar[9].str, exprDollar[11].str)
		}
	case 56:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:216
		{
			exprVAL.Filter = labels.MatchRegexp
		}
	case 57:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:217
		{
			exprVAL.Filter = labels.MatchEqual
		}
	case 58:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:218
		{
			exprVAL.Filter = labels.MatchNotRegexp
		}
	case 59:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:219
		{
			exprVAL.Filter = labels.MatchNotEqual
		}
	case 60:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:223
		{
			exprVAL.Selector = exprDollar[2].Matchers
		}
	case 61:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:224
		{
			exprVAL.Selector = exprDollar[2].Matchers
		}
	case 62:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:225
		{
		}
	case 63:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:229
		{
			exprVAL.Matchers = []*labels.Matcher{exprDollar[1].Matcher}
		}
	case 64:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:230
		{
			exprVAL.Matchers = append(exprDollar[1].Matchers, exprDollar[3].Matcher)
		}
	case 65:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:234
		{
			exprVAL.Matcher = mustNewMatcher(labels.MatchEqual, exprDollar[1].str, exprDollar[3].str)
		}
	case 66:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:235
		{
			exprVAL.Matcher = mustNewMatcher(labels.MatchNotEqual, exprDollar[1].str, exprDollar[3].str)
		}
	case 67:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:236
		{
			exprVAL.Matcher = mustNewMatcher(labels.MatchRegexp, exprDollar[1].str, exprDollar[3].str)
		}
	case 68:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:237
		{
			exprVAL.Matcher = mustNewMatcher(labels.MatchNotRegexp, exprDollar[1].str, exprDollar[3].str)
		}
	case 69:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:241
		{
			exprVAL.PipelineExpr = MultiStageExpr{exprDollar[1].PipelineStage}
		}
	case 70:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:242
		{
			exprVAL.PipelineExpr = append(exprDollar[1].PipelineExpr, exprDollar[2].PipelineStage)
		}
	case 71:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:246
		{
			exprVAL.PipelineStage = exprDollar[1].LineFilters
		}
	case 72:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:247
		{
			exprVAL.PipelineStage = exprDollar[2].LabelParser
		}
	case 73:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:248
		{
			exprVAL.PipelineStage = exprDollar[2].JSONExpressionParser
		}
	case 74:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:249
		{
			exprVAL.PipelineStage = &LabelFilterExpr{LabelFilterer: exprDollar[2].LabelFilter}
		}
	case 75:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:250
		{
			exprVAL.PipelineStage = exprDollar[2].LineFormatExpr
		}
	case 76:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:251
		{
			exprVAL.PipelineStage = exprDollar[2].LabelFormatExpr
		}
	case 77:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:255
		{
			exprVAL.FilterOp = OpFilterIP
		}
	case 78:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:259
		{
			exprVAL.LineFilter = newLineFilterExpr(exprDollar[1].Filter, "", exprDollar[2].str)
		}
	case 79:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/expr.y:260
		{
			exprVAL.LineFilter = newLineFilterExpr(exprDollar[1].Filter, exprDollar[2].FilterOp, exprDollar[4].str)
		}
	case 80:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:264
		{
			exprVAL.LineFilters = exprDollar[1].LineFilter
		}
	case 81:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:265
		{
			exprVAL.LineFilters = newNestedLineFilterExpr(exprDollar[1].LineFilters, exprDollar[2].LineFilter)
		}
	case 82:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:269
		{
			exprVAL.LabelParser = newLabelParserExpr(OpParserTypeJSON, "")
		}
	case 83:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:270
		{
			exprVAL.LabelParser = newLabelParserExpr(OpParserTypeLogfmt, "")
		}
	case 84:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:271
		{
			exprVAL.LabelParser = newLabelParserExpr(OpParserTypeRegexp, exprDollar[2].str)
		}
	case 85:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:272
		{
			exprVAL.LabelParser = newLabelParserExpr(OpParserTypeUnpack, "")
		}
	case 86:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:273
		{
			exprVAL.LabelParser = newLabelParserExpr(OpParserTypePattern, exprDollar[2].str)
		}
	case 87:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:277
		{
			exprVAL.JSONExpressionParser = newJSONExpressionParser(exprDollar[2].JSONExpressionList)
		}
	case 88:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:279
		{
			exprVAL.LineFormatExpr = newLineFmtExpr(exprDollar[2].str)
		}
	case 89:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:282
		{
			exprVAL.LabelFormat = log.NewRenameLabelFmt(exprDollar[1].str, exprDollar[3].str)
		}
	case 90:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:283
		{
			exprVAL.LabelFormat = log.NewTemplateLabelFmt(exprDollar[1].str, exprDollar[3].str)
		}
	case 91:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:287
		{
			exprVAL.LabelsFormat = []log.LabelFmt{exprDollar[1].LabelFormat}
		}
	case 92:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:288
		{
			exprVAL.LabelsFormat = append(exprDollar[1].LabelsFormat, exprDollar[3].LabelFormat)
		}
	case 94:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:292
		{
			exprVAL.LabelFormatExpr = newLabelFmtExpr(exprDollar[2].LabelsFormat)
		}
	case 95:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:295
		{
			exprVAL.LabelFilter = log.NewStringLabelFilter(exprDollar[1].Matcher)
		}
	case 96:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:296
		{
			exprVAL.LabelFilter = exprDollar[1].IPLabelFilter
		}
	case 97:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:297
		{
			exprVAL.LabelFilter = exprDollar[1].UnitFilter
		}
	case 98:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:298
		{
			exprVAL.LabelFilter = exprDollar[1].NumberFilter
		}
	case 99:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:299
		{
			exprVAL.LabelFilter = exprDollar[2].LabelFilter
		}
	case 100:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:300
		{
			exprVAL.LabelFilter = log.NewAndLabelFilter(exprDollar[1].LabelFilter, exprDollar[2].LabelFilter)
		}
	case 101:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:301
		{
			exprVAL.LabelFilter = log.NewAndLabelFilter(exprDollar[1].LabelFilter, exprDollar[3].LabelFilter)
		}
	case 102:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:302
		{
			exprVAL.LabelFilter = log.NewAndLabelFilter(exprDollar[1].LabelFilter, exprDollar[3].LabelFilter)
		}
	case 103:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:303
		{
			exprVAL.LabelFilter = log.NewOrLabelFilter(exprDollar[1].LabelFilter, exprDollar[3].LabelFilter)
		}
	case 104:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:307
		{
			exprVAL.JSONExpression = log.NewJSONExpr(exprDollar[1].str, exprDollar[3].str)
		}
	case 105:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:310
		{
			exprVAL.JSONExpressionList = []log.JSONExpression{exprDollar[1].JSONExpression}
		}
	case 106:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:311
		{
			exprVAL.JSONExpressionList = append(exprDollar[1].JSONExpressionList, exprDollar[3].JSONExpression)
		}
	case 107:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/expr.y:315
		{
			exprVAL.IPLabelFilter = log.NewIPLabelFilter(exprDollar[5].str, exprDollar[1].str, log.LabelFilterEqual)
		}
	case 108:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/expr.y:316
		{
			exprVAL.IPLabelFilter = log.NewIPLabelFilter(exprDollar[5].str, exprDollar[1].str, log.LabelFilterNotEqual)
		}
	case 109:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:320
		{
			exprVAL.UnitFilter = exprDollar[1].DurationFilter
		}
	case 110:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:321
		{
			exprVAL.UnitFilter = exprDollar[1].BytesFilter
		}
	case 111:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:324
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterGreaterThan, exprDollar[1].str, exprDollar[3].duration)
		}
	case 112:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:325
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterGreaterThanOrEqual, exprDollar[1].str, exprDollar[3].duration)
		}
	case 113:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:326
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterLesserThan, exprDollar[1].str, exprDollar[3].duration)
		}
	case 114:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:327
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterLesserThanOrEqual, exprDollar[1].str, exprDollar[3].duration)
		}
	case 115:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:328
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterNotEqual, exprDollar[1].str, exprDollar[3].duration)
		}
	case 116:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:329
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterEqual, exprDollar[1].str, exprDollar[3].duration)
		}
	case 117:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:330
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterEqual, exprDollar[1].str, exprDollar[3].duration)
		}
	case 118:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:334
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterGreaterThan, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 119:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:335
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterGreaterThanOrEqual, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 120:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:336
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterLesserThan, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 121:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:337
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterLesserThanOrEqual, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 122:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:338
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterNotEqual, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 123:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:339
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterEqual, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 124:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:340
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterEqual, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 125:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:344
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterGreaterThan, exprDollar[1].str, mustNewFloat(exprDollar[3].SignedNumber))
		}
	case 126:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:345
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterGreaterThanOrEqual, exprDollar[1].str, mustNewFloat(exprDollar[3].SignedNumber))
		}
	case 127:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:346
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterLesserThan, exprDollar[1].str, mustNewFloat(exprDollar[3].SignedNumber))
		}
	case 128:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:347
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterLesserThanOrEqual, exprDollar[1].str, mustNewFloat(exprDollar[3].SignedNumber))
		}
	case 129:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:348
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterNotEqual, exprDollar[1].str, mustNewFloat(exprDollar[3].SignedNumber))
		}
	case 130:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:349
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterEqual, exprDollar[1].str, mustNewFloat(exprDollar[3].SignedNumber))
		}
	case 131:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:350
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterEqual, exprDollar[1].str, mustNewFloat(exprDollar[3].SignedNumber))
		}
	case 132:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:355
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("or", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 133:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:356
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("and", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 134:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:357
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("unless", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 135:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:358
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("+", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 136:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:359
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("-", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 137:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:360
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("*", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 138:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:361
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("/", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 139:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:362
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("%", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 140:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:363
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("^", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 141:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:364
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("==", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 142:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:365
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("!=", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 143:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:366
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr(">", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 144:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:367
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr(">=", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 145:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:368
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("<", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 146:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:369
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("<=", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 147:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:373
		{
			exprVAL.BinOpModifier = exprDollar[1].BoolModifier
		}
	case 148:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/expr.y:375
		{
			exprVAL.BinOpModifier = exprDollar[1].BoolModifier
			exprVAL.BinOpModifier.VectorMatching = &VectorMatching{On: true, Include: exprDollar[4].Labels}
		}
	case 149:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:380
		{
			exprVAL.BinOpModifier = exprDollar[1].BoolModifier
			exprVAL.BinOpModifier.VectorMatching = &VectorMatching{On: true, Include: nil}
		}
	case 150:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/expr.y:385
		{
			exprVAL.BinOpModifier = exprDollar[1].BoolModifier
			exprVAL.BinOpModifier.VectorMatching = &VectorMatching{On: false, Include: exprDollar[4].Labels}
		}
	case 151:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:390
		{
			exprVAL.BinOpModifier = exprDollar[1].BoolModifier
			exprVAL.BinOpModifier.VectorMatching = &VectorMatching{On: false, Include: nil}
		}
	case 152:
		exprDollar = exprS[exprpt-0 : exprpt+1]
//line pkg/logql/expr.y:397
		{
			exprVAL.BoolModifier = &BinOpOptions{}
		}
	case 153:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:398
		{
			exprVAL.BoolModifier = &BinOpOptions{ReturnBool: true}
		}
	case 154:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:402
		{
			exprVAL.LiteralExpr = mustNewLiteralExpr(exprDollar[1].SignedNumber, false)
		}
	case 155:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:406
		{
			exprVAL.SignedNumber = fmt.Sprintf("%v", exprDollar[1].number)
		}
	case 156:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:407
		{
			exprVAL.SignedNumber = fmt.Sprintf("%v", exprDollar[2].number)
		}
	case 157:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:408
		{
			exprVAL.SignedNumber = fmt.Sprintf("%v", -exprDollar[2].number)
		}
	case 158:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:412
		{
			exprVAL.VectorOp = OpTypeSum
		}
	case 159:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:413
		{
			exprVAL.VectorOp = OpTypeAvg
		}
	case 160:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:414
		{
			exprVAL.VectorOp = OpTypeCount
		}
	case 161:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:415
		{
			exprVAL.VectorOp = OpTypeMax
		}
	case 162:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:416
		{
			exprVAL.VectorOp = OpTypeMin
		}
	case 163:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:417
		{
			exprVAL.VectorOp = OpTypeStddev
		}
	case 164:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:418
		{
			exprVAL.VectorOp = OpTypeStdvar
		}
	case 165:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:419
		{
			exprVAL.VectorOp = OpTypeBottomK
		}
	case 166:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:420
		{
			exprVAL.VectorOp = OpTypeTopK
		}
	case 167:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:424
		{
			exprVAL.RangeOp = OpRangeTypeCount
		}
	case 168:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:425
		{
			exprVAL.RangeOp = OpRangeTypeRate
		}
	case 169:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:426
		{
			exprVAL.RangeOp = OpRangeTypeBytes
		}
	case 170:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:427
		{
			exprVAL.RangeOp = OpRangeTypeBytesRate
		}
	case 171:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:428
		{
			exprVAL.RangeOp = OpRangeTypeAvg
		}
	case 172:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:429
		{
			exprVAL.RangeOp = OpRangeTypeSum
		}
	case 173:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:430
		{
			exprVAL.RangeOp = OpRangeTypeMin
		}
	case 174:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:431
		{
			exprVAL.RangeOp = OpRangeTypeMax
		}
	case 175:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:432
		{
			exprVAL.RangeOp = OpRangeTypeStdvar
		}
	case 176:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:433
		{
			exprVAL.RangeOp = OpRangeTypeStddev
		}
	case 177:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:434
		{
			exprVAL.RangeOp = OpRangeTypeQuantile
		}
	case 178:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:435
		{
			exprVAL.RangeOp = OpRangeTypeFirst
		}
	case 179:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:436
		{
			exprVAL.RangeOp = OpRangeTypeLast
		}
	case 180:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:437
		{
			exprVAL.RangeOp = OpRangeTypeAbsent
		}
	case 181:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:441
		{
			exprVAL.OffsetExpr = newOffsetExpr(exprDollar[2].duration)
		}
	case 182:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:444
		{
			exprVAL.Labels = []string{exprDollar[1].str}
		}
	case 183:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:445
		{
			exprVAL.Labels = append(exprDollar[1].Labels, exprDollar[3].str)
		}
	case 184:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:449
		{
			exprVAL.Grouping = &grouping{without: false, groups: exprDollar[3].Labels}
		}
	case 185:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:450
		{
			exprVAL.Grouping = &grouping{without: true, groups: exprDollar[3].Labels}
		}
	case 186:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:451
		{
			exprVAL.Grouping = &grouping{without: false, groups: nil}
		}
	case 187:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:452
		{
			exprVAL.Grouping = &grouping{without: true, groups: nil}
		}
	}
	goto exprstack /* stack new state and value */
}
