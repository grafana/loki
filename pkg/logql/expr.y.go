// Code generated by goyacc -p expr -o pkg/logql/expr.y.go pkg/logql/expr.y. DO NOT EDIT.

//line pkg/logql/expr.y:2
package logql

import __yyfmt__ "fmt"

//line pkg/logql/expr.y:2
import (
	"github.com/grafana/loki/pkg/logql/log"
	"github.com/prometheus/prometheus/pkg/labels"
	"time"
)

//line pkg/logql/expr.y:12
type exprSymType struct {
	yys                   int
	Expr                  Expr
	Filter                labels.MatchType
	Grouping              *grouping
	Labels                []string
	LogExpr               LogSelectorExpr
	LogRangeExpr          *logRange
	Matcher               *labels.Matcher
	Matchers              []*labels.Matcher
	RangeAggregationExpr  SampleExpr
	RangeOp               string
	ConvOp                string
	Selector              []*labels.Matcher
	VectorAggregationExpr SampleExpr
	MetricExpr            SampleExpr
	VectorOp              string
	BinOpExpr             SampleExpr
	LabelReplaceExpr      SampleExpr
	binOp                 string
	bytes                 uint64
	str                   string
	duration              time.Duration
	LiteralExpr           *literalExpr
	BinOpModifier         BinOpOptions
	LabelParser           *labelParserExpr
	LineFilters           *lineFilterExpr
	PipelineExpr          MultiStageExpr
	PipelineStage         StageExpr
	BytesFilter           log.LabelFilterer
	NumberFilter          log.LabelFilterer
	DurationFilter        log.LabelFilterer
	LabelFilter           log.LabelFilterer
	UnitFilter            log.LabelFilterer
	LineFormatExpr        *lineFmtExpr
	LabelFormatExpr       *labelFmtExpr
	LabelFormat           log.LabelFmt
	LabelsFormat          []log.LabelFmt
	JSONExpressionParser  *jsonExpressionParser
	JSONExpression        log.JSONExpression
	JSONExpressionList    []log.JSONExpression
	UnwrapExpr            *unwrapExpr
	OffsetExpr            *offsetExpr
}

const BYTES = 57346
const IDENTIFIER = 57347
const STRING = 57348
const NUMBER = 57349
const DURATION = 57350
const RANGE = 57351
const MATCHERS = 57352
const LABELS = 57353
const EQ = 57354
const RE = 57355
const NRE = 57356
const OPEN_BRACE = 57357
const CLOSE_BRACE = 57358
const OPEN_BRACKET = 57359
const CLOSE_BRACKET = 57360
const COMMA = 57361
const DOT = 57362
const PIPE_MATCH = 57363
const PIPE_EXACT = 57364
const OPEN_PARENTHESIS = 57365
const CLOSE_PARENTHESIS = 57366
const BY = 57367
const WITHOUT = 57368
const COUNT_OVER_TIME = 57369
const RATE = 57370
const SUM = 57371
const AVG = 57372
const MAX = 57373
const MIN = 57374
const COUNT = 57375
const STDDEV = 57376
const STDVAR = 57377
const BOTTOMK = 57378
const TOPK = 57379
const BYTES_OVER_TIME = 57380
const BYTES_RATE = 57381
const BOOL = 57382
const JSON = 57383
const REGEXP = 57384
const LOGFMT = 57385
const PIPE = 57386
const LINE_FMT = 57387
const LABEL_FMT = 57388
const UNWRAP = 57389
const AVG_OVER_TIME = 57390
const SUM_OVER_TIME = 57391
const MIN_OVER_TIME = 57392
const MAX_OVER_TIME = 57393
const STDVAR_OVER_TIME = 57394
const STDDEV_OVER_TIME = 57395
const QUANTILE_OVER_TIME = 57396
const BYTES_CONV = 57397
const DURATION_CONV = 57398
const DURATION_SECONDS_CONV = 57399
const FIRST_OVER_TIME = 57400
const LAST_OVER_TIME = 57401
const ABSENT_OVER_TIME = 57402
const LABEL_REPLACE = 57403
const UNPACK = 57404
const OFFSET = 57405
const OR = 57406
const AND = 57407
const UNLESS = 57408
const CMP_EQ = 57409
const NEQ = 57410
const LT = 57411
const LTE = 57412
const GT = 57413
const GTE = 57414
const ADD = 57415
const SUB = 57416
const MUL = 57417
const DIV = 57418
const MOD = 57419
const POW = 57420

var exprToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"BYTES",
	"IDENTIFIER",
	"STRING",
	"NUMBER",
	"DURATION",
	"RANGE",
	"MATCHERS",
	"LABELS",
	"EQ",
	"RE",
	"NRE",
	"OPEN_BRACE",
	"CLOSE_BRACE",
	"OPEN_BRACKET",
	"CLOSE_BRACKET",
	"COMMA",
	"DOT",
	"PIPE_MATCH",
	"PIPE_EXACT",
	"OPEN_PARENTHESIS",
	"CLOSE_PARENTHESIS",
	"BY",
	"WITHOUT",
	"COUNT_OVER_TIME",
	"RATE",
	"SUM",
	"AVG",
	"MAX",
	"MIN",
	"COUNT",
	"STDDEV",
	"STDVAR",
	"BOTTOMK",
	"TOPK",
	"BYTES_OVER_TIME",
	"BYTES_RATE",
	"BOOL",
	"JSON",
	"REGEXP",
	"LOGFMT",
	"PIPE",
	"LINE_FMT",
	"LABEL_FMT",
	"UNWRAP",
	"AVG_OVER_TIME",
	"SUM_OVER_TIME",
	"MIN_OVER_TIME",
	"MAX_OVER_TIME",
	"STDVAR_OVER_TIME",
	"STDDEV_OVER_TIME",
	"QUANTILE_OVER_TIME",
	"BYTES_CONV",
	"DURATION_CONV",
	"DURATION_SECONDS_CONV",
	"FIRST_OVER_TIME",
	"LAST_OVER_TIME",
	"ABSENT_OVER_TIME",
	"LABEL_REPLACE",
	"UNPACK",
	"OFFSET",
	"OR",
	"AND",
	"UNLESS",
	"CMP_EQ",
	"NEQ",
	"LT",
	"LTE",
	"GT",
	"GTE",
	"ADD",
	"SUB",
	"MUL",
	"DIV",
	"MOD",
	"POW",
}
var exprStatenames = [...]string{}

const exprEofCode = 1
const exprErrCode = 2
const exprInitialStackSize = 16

//line pkg/logql/expr.y:396

//line yacctab:1
var exprExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const exprPrivate = 57344

const exprLast = 530

var exprAct = [...]int{

	229, 183, 75, 4, 165, 58, 154, 5, 159, 192,
	66, 108, 50, 57, 232, 128, 68, 2, 45, 46,
	47, 48, 49, 50, 71, 42, 43, 44, 51, 52,
	55, 56, 53, 54, 45, 46, 47, 48, 49, 50,
	43, 44, 51, 52, 55, 56, 53, 54, 45, 46,
	47, 48, 49, 50, 47, 48, 49, 50, 124, 126,
	127, 64, 237, 97, 167, 126, 127, 101, 62, 63,
	61, 234, 284, 82, 74, 265, 76, 77, 132, 302,
	284, 130, 264, 297, 137, 51, 52, 55, 56, 53,
	54, 45, 46, 47, 48, 49, 50, 287, 138, 232,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 125, 65, 289, 234, 162, 173,
	168, 171, 172, 169, 170, 267, 268, 269, 76, 77,
	98, 264, 179, 233, 174, 233, 235, 274, 190, 186,
	182, 64, 114, 179, 184, 64, 195, 187, 62, 63,
	271, 272, 62, 63, 256, 238, 156, 194, 244, 114,
	111, 281, 198, 199, 200, 241, 234, 235, 234, 114,
	234, 185, 64, 156, 64, 185, 196, 111, 203, 62,
	63, 62, 63, 227, 230, 188, 236, 111, 239, 130,
	97, 242, 101, 243, 194, 65, 231, 228, 119, 65,
	240, 118, 185, 182, 185, 179, 114, 246, 64, 252,
	250, 300, 248, 193, 64, 62, 63, 296, 157, 155,
	156, 62, 63, 232, 111, 246, 65, 180, 65, 277,
	247, 257, 136, 259, 261, 135, 263, 97, 185, 114,
	64, 262, 273, 258, 185, 134, 97, 62, 63, 275,
	12, 80, 73, 156, 123, 245, 204, 111, 131, 278,
	279, 201, 65, 197, 97, 280, 155, 129, 65, 189,
	60, 282, 283, 181, 121, 12, 205, 288, 202, 295,
	286, 15, 285, 131, 292, 270, 293, 294, 120, 12,
	260, 122, 254, 255, 65, 79, 298, 6, 157, 155,
	78, 19, 20, 33, 34, 36, 37, 35, 38, 39,
	40, 41, 21, 22, 210, 301, 176, 211, 209, 299,
	290, 251, 23, 24, 25, 26, 27, 28, 29, 191,
	249, 178, 30, 31, 32, 18, 207, 12, 175, 208,
	206, 253, 177, 176, 166, 6, 175, 16, 17, 19,
	20, 33, 34, 36, 37, 35, 38, 39, 40, 41,
	21, 22, 225, 163, 222, 226, 224, 223, 221, 161,
	23, 24, 25, 26, 27, 28, 29, 133, 153, 117,
	30, 31, 32, 18, 219, 12, 216, 220, 218, 217,
	215, 70, 291, 6, 72, 16, 17, 19, 20, 33,
	34, 36, 37, 35, 38, 39, 40, 41, 21, 22,
	3, 276, 213, 81, 114, 214, 212, 67, 23, 24,
	25, 26, 27, 28, 29, 160, 72, 166, 30, 31,
	32, 18, 111, 109, 158, 100, 164, 103, 102, 59,
	115, 110, 116, 16, 17, 99, 11, 10, 9, 14,
	104, 106, 105, 8, 112, 113, 237, 83, 84, 85,
	86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
	96, 107, 114, 266, 13, 7, 69, 1, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 106,
	105, 0, 112, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 107,
}
var exprPact = [...]int{

	274, -1000, -39, -1000, -1000, 226, 274, -1000, -1000, -1000,
	-1000, -1000, 389, 229, 51, -1000, 293, 288, 228, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 226, -1000, 47,
	467, 373, -1000, -1000, -1000, -1000, 177, 174, -39, 272,
	238, -1000, 46, 260, 370, 222, 212, 209, -1000, -1000,
	274, 274, -1000, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, -1000, 372, -1000,
	-1000, 234, -1000, -1000, 420, -1000, 363, -1000, -1000, -1000,
	-1000, 164, 357, 422, 52, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 421, -1000, 340, 337, 336, 325, 203, 254,
	194, 235, 161, 250, 322, 189, 152, 244, -25, 18,
	18, -21, -21, -66, -66, -66, -66, -55, -55, -55,
	-55, -55, -55, -1000, 234, 164, 164, 164, 242, -1000,
	266, -1000, 154, -1000, 237, -1000, 264, 332, 310, 408,
	382, 380, 360, 358, -1000, -1000, -1000, -1000, -1000, -1000,
	103, 235, 160, 124, 158, 409, 131, 141, 103, 274,
	134, 236, 206, -1000, -1000, 188, -1000, 324, 137, 234,
	201, 420, 315, -1000, 339, 287, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 130, 200,
	27, 200, 282, -49, 164, -49, 122, 70, 276, 126,
	127, -1000, -1000, 113, -1000, 274, 406, -1000, -1000, 210,
	-1000, -1000, -1000, -1000, -1000, -1000, 103, 27, 200, 27,
	-1000, -1000, 234, -1000, -49, -1000, 138, -1000, -1000, -1000,
	36, 273, 271, 73, 103, 92, -1000, 314, -1000, 27,
	-1000, 387, 28, 27, 15, -49, -49, 270, -1000, -1000,
	198, 59, 27, -1000, -1000, -49, 313, -1000, -1000, 192,
	309, 55, -1000,
}
var exprPgo = [...]int{

	0, 477, 16, 70, 2, 9, 410, 3, 15, 11,
	476, 475, 474, 473, 7, 453, 449, 448, 447, 446,
	413, 445, 13, 5, 442, 441, 440, 6, 439, 438,
	437, 4, 436, 435, 8, 434, 1, 433, 0,
}
var exprR1 = [...]int{

	0, 1, 2, 2, 7, 7, 7, 7, 7, 7,
	6, 6, 6, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8, 8, 36,
	36, 36, 13, 13, 13, 11, 11, 11, 11, 15,
	15, 15, 15, 15, 15, 19, 3, 3, 3, 3,
	14, 14, 14, 10, 10, 9, 9, 9, 9, 22,
	22, 23, 23, 23, 23, 23, 23, 28, 28, 21,
	21, 21, 21, 33, 29, 31, 31, 32, 32, 32,
	30, 27, 27, 27, 27, 27, 27, 27, 27, 34,
	35, 35, 37, 37, 26, 26, 26, 26, 26, 26,
	26, 24, 24, 24, 24, 24, 24, 24, 25, 25,
	25, 25, 25, 25, 25, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	20, 20, 18, 18, 18, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 38, 5,
	5, 4, 4, 4, 4,
}
var exprR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 2, 3, 2, 3, 4, 5, 3, 4, 5,
	6, 3, 4, 5, 6, 3, 4, 5, 6, 4,
	5, 6, 7, 3, 4, 4, 5, 3, 2, 3,
	6, 3, 1, 1, 1, 4, 6, 5, 7, 4,
	5, 5, 6, 7, 7, 12, 1, 1, 1, 1,
	3, 3, 3, 1, 3, 3, 3, 3, 3, 1,
	2, 1, 2, 2, 2, 2, 2, 2, 3, 1,
	1, 2, 1, 2, 2, 3, 3, 1, 3, 3,
	2, 1, 1, 1, 3, 2, 3, 3, 3, 3,
	1, 3, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	0, 1, 1, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	3, 4, 4, 3, 3,
}
var exprChk = [...]int{

	-1000, -1, -2, -6, -7, -14, 23, -11, -15, -17,
	-18, -19, 15, -12, -16, 7, 73, 74, 61, 27,
	28, 38, 39, 48, 49, 50, 51, 52, 53, 54,
	58, 59, 60, 29, 30, 33, 31, 32, 34, 35,
	36, 37, 64, 65, 66, 73, 74, 75, 76, 77,
	78, 67, 68, 71, 72, 69, 70, -22, -23, -28,
	44, -3, 21, 22, 14, 68, -7, -6, -2, -10,
	2, -9, 5, 23, 23, -4, 25, 26, 7, 7,
	23, -20, 40, -20, -20, -20, -20, -20, -20, -20,
	-20, -20, -20, -20, -20, -20, -20, -23, -3, -21,
	-33, -27, -29, -30, 41, 43, 42, 62, -9, -37,
	-25, 23, 45, 46, 5, -26, -24, 6, 24, 24,
	16, 2, 19, 16, 12, 68, 13, 14, -8, 7,
	-14, 23, -7, 7, 23, 23, 23, -7, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 6, -27, 65, 19, 64, -35, -34,
	5, 6, -27, 6, -32, -31, 5, 12, 68, 71,
	72, 69, 70, 67, -9, 6, 6, 6, 6, 2,
	24, 19, 9, -36, -22, 44, -14, -8, 24, 19,
	-7, 7, -5, 24, 5, -5, 24, 19, -27, -27,
	-27, 19, 12, 24, 19, 12, 8, 4, 7, 8,
	4, 7, 8, 4, 7, 8, 4, 7, 8, 4,
	7, 8, 4, 7, 8, 4, 7, -4, -8, -38,
	-36, -22, 63, 9, 44, 9, -36, 47, 24, -36,
	-22, 24, -4, -7, 24, 19, 19, 24, 24, 6,
	-34, 6, -31, 2, 5, 6, 24, -36, -22, -36,
	8, -38, -27, -38, 9, 5, -13, 55, 56, 57,
	9, 24, 24, -36, 24, -7, 5, 19, -4, -36,
	-38, 23, -38, -36, 44, 9, 9, 24, -4, 24,
	6, 5, -36, -38, -38, 9, 19, 24, -38, 6,
	19, 6, 24,
}
var exprDef = [...]int{

	0, -2, 1, 2, 3, 10, 0, 4, 5, 6,
	7, 8, 0, 0, 0, 142, 0, 0, 0, 154,
	155, 156, 157, 158, 159, 160, 161, 162, 163, 164,
	165, 166, 167, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 11, 69, 71,
	0, 0, 56, 57, 58, 59, 3, 2, 0, 0,
	0, 63, 0, 0, 0, 0, 0, 0, 143, 144,
	0, 0, 141, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 70, 0, 72,
	73, 74, 75, 76, 79, 80, 0, 82, 91, 92,
	93, 0, 0, 0, 0, 102, 103, 77, 9, 12,
	60, 61, 0, 62, 0, 0, 0, 0, 0, 0,
	0, 0, 3, 142, 0, 0, 0, 3, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 138, 139, 78, 95, 0, 0, 0, 83, 100,
	0, 81, 0, 84, 90, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 64, 65, 66, 67, 68, 38,
	45, 0, 13, 0, 0, 0, 0, 0, 49, 0,
	3, 142, 0, 173, 169, 0, 174, 0, 96, 97,
	98, 0, 0, 94, 0, 0, 109, 116, 123, 108,
	115, 122, 104, 111, 118, 105, 112, 119, 106, 113,
	120, 107, 114, 121, 110, 117, 124, 47, 0, 14,
	17, 33, 0, 21, 0, 25, 0, 0, 0, 0,
	0, 37, 51, 3, 50, 0, 0, 171, 172, 0,
	101, 99, 88, 89, 85, 86, 46, 18, 34, 35,
	168, 22, 41, 26, 29, 39, 0, 42, 43, 44,
	15, 0, 0, 0, 52, 3, 170, 0, 48, 36,
	30, 0, 16, 19, 0, 23, 27, 0, 53, 54,
	0, 0, 20, 24, 28, 31, 0, 40, 32, 0,
	0, 0, 55,
}
var exprTok1 = [...]int{

	1,
}
var exprTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78,
}
var exprTok3 = [...]int{
	0,
}

var exprErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	exprDebug        = 0
	exprErrorVerbose = false
)

type exprLexer interface {
	Lex(lval *exprSymType) int
	Error(s string)
}

type exprParser interface {
	Parse(exprLexer) int
	Lookahead() int
}

type exprParserImpl struct {
	lval  exprSymType
	stack [exprInitialStackSize]exprSymType
	char  int
}

func (p *exprParserImpl) Lookahead() int {
	return p.char
}

func exprNewParser() exprParser {
	return &exprParserImpl{}
}

const exprFlag = -1000

func exprTokname(c int) string {
	if c >= 1 && c-1 < len(exprToknames) {
		if exprToknames[c-1] != "" {
			return exprToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func exprStatname(s int) string {
	if s >= 0 && s < len(exprStatenames) {
		if exprStatenames[s] != "" {
			return exprStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func exprErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !exprErrorVerbose {
		return "syntax error"
	}

	for _, e := range exprErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + exprTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := exprPact[state]
	for tok := TOKSTART; tok-1 < len(exprToknames); tok++ {
		if n := base + tok; n >= 0 && n < exprLast && exprChk[exprAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if exprDef[state] == -2 {
		i := 0
		for exprExca[i] != -1 || exprExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; exprExca[i] >= 0; i += 2 {
			tok := exprExca[i]
			if tok < TOKSTART || exprExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if exprExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += exprTokname(tok)
	}
	return res
}

func exprlex1(lex exprLexer, lval *exprSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = exprTok1[0]
		goto out
	}
	if char < len(exprTok1) {
		token = exprTok1[char]
		goto out
	}
	if char >= exprPrivate {
		if char < exprPrivate+len(exprTok2) {
			token = exprTok2[char-exprPrivate]
			goto out
		}
	}
	for i := 0; i < len(exprTok3); i += 2 {
		token = exprTok3[i+0]
		if token == char {
			token = exprTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = exprTok2[1] /* unknown char */
	}
	if exprDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", exprTokname(token), uint(char))
	}
	return char, token
}

func exprParse(exprlex exprLexer) int {
	return exprNewParser().Parse(exprlex)
}

func (exprrcvr *exprParserImpl) Parse(exprlex exprLexer) int {
	var exprn int
	var exprVAL exprSymType
	var exprDollar []exprSymType
	_ = exprDollar // silence set and not used
	exprS := exprrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	exprstate := 0
	exprrcvr.char = -1
	exprtoken := -1 // exprrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		exprstate = -1
		exprrcvr.char = -1
		exprtoken = -1
	}()
	exprp := -1
	goto exprstack

ret0:
	return 0

ret1:
	return 1

exprstack:
	/* put a state and value onto the stack */
	if exprDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", exprTokname(exprtoken), exprStatname(exprstate))
	}

	exprp++
	if exprp >= len(exprS) {
		nyys := make([]exprSymType, len(exprS)*2)
		copy(nyys, exprS)
		exprS = nyys
	}
	exprS[exprp] = exprVAL
	exprS[exprp].yys = exprstate

exprnewstate:
	exprn = exprPact[exprstate]
	if exprn <= exprFlag {
		goto exprdefault /* simple state */
	}
	if exprrcvr.char < 0 {
		exprrcvr.char, exprtoken = exprlex1(exprlex, &exprrcvr.lval)
	}
	exprn += exprtoken
	if exprn < 0 || exprn >= exprLast {
		goto exprdefault
	}
	exprn = exprAct[exprn]
	if exprChk[exprn] == exprtoken { /* valid shift */
		exprrcvr.char = -1
		exprtoken = -1
		exprVAL = exprrcvr.lval
		exprstate = exprn
		if Errflag > 0 {
			Errflag--
		}
		goto exprstack
	}

exprdefault:
	/* default state action */
	exprn = exprDef[exprstate]
	if exprn == -2 {
		if exprrcvr.char < 0 {
			exprrcvr.char, exprtoken = exprlex1(exprlex, &exprrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if exprExca[xi+0] == -1 && exprExca[xi+1] == exprstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			exprn = exprExca[xi+0]
			if exprn < 0 || exprn == exprtoken {
				break
			}
		}
		exprn = exprExca[xi+1]
		if exprn < 0 {
			goto ret0
		}
	}
	if exprn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			exprlex.Error(exprErrorMessage(exprstate, exprtoken))
			Nerrs++
			if exprDebug >= 1 {
				__yyfmt__.Printf("%s", exprStatname(exprstate))
				__yyfmt__.Printf(" saw %s\n", exprTokname(exprtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for exprp >= 0 {
				exprn = exprPact[exprS[exprp].yys] + exprErrCode
				if exprn >= 0 && exprn < exprLast {
					exprstate = exprAct[exprn] /* simulate a shift of "error" */
					if exprChk[exprstate] == exprErrCode {
						goto exprstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if exprDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", exprS[exprp].yys)
				}
				exprp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if exprDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", exprTokname(exprtoken))
			}
			if exprtoken == exprEofCode {
				goto ret1
			}
			exprrcvr.char = -1
			exprtoken = -1
			goto exprnewstate /* try again in the same state */
		}
	}

	/* reduction by production exprn */
	if exprDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", exprn, exprStatname(exprstate))
	}

	exprnt := exprn
	exprpt := exprp
	_ = exprpt // guard against "declared and not used"

	exprp -= exprR2[exprn]
	// exprp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if exprp+1 >= len(exprS) {
		nyys := make([]exprSymType, len(exprS)*2)
		copy(nyys, exprS)
		exprS = nyys
	}
	exprVAL = exprS[exprp+1]

	/* consult goto table to find next state */
	exprn = exprR1[exprn]
	exprg := exprPgo[exprn]
	exprj := exprg + exprS[exprp].yys + 1

	if exprj >= exprLast {
		exprstate = exprAct[exprg]
	} else {
		exprstate = exprAct[exprj]
		if exprChk[exprstate] != -exprn {
			exprstate = exprAct[exprg]
		}
	}
	// dummy call; replaced with literal code
	switch exprnt {

	case 1:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:115
		{
			exprlex.(*parser).expr = exprDollar[1].Expr
		}
	case 2:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:118
		{
			exprVAL.Expr = exprDollar[1].LogExpr
		}
	case 3:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:119
		{
			exprVAL.Expr = exprDollar[1].MetricExpr
		}
	case 4:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:123
		{
			exprVAL.MetricExpr = exprDollar[1].RangeAggregationExpr
		}
	case 5:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:124
		{
			exprVAL.MetricExpr = exprDollar[1].VectorAggregationExpr
		}
	case 6:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:125
		{
			exprVAL.MetricExpr = exprDollar[1].BinOpExpr
		}
	case 7:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:126
		{
			exprVAL.MetricExpr = exprDollar[1].LiteralExpr
		}
	case 8:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:127
		{
			exprVAL.MetricExpr = exprDollar[1].LabelReplaceExpr
		}
	case 9:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:128
		{
			exprVAL.MetricExpr = exprDollar[2].MetricExpr
		}
	case 10:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:132
		{
			exprVAL.LogExpr = newMatcherExpr(exprDollar[1].Selector)
		}
	case 11:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:133
		{
			exprVAL.LogExpr = newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].PipelineExpr)
		}
	case 12:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:134
		{
			exprVAL.LogExpr = exprDollar[2].LogExpr
		}
	case 13:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:138
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].duration, nil, nil)
		}
	case 14:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:139
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].duration, nil, exprDollar[3].OffsetExpr)
		}
	case 15:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:140
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[4].duration, nil, nil)
		}
	case 16:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/expr.y:141
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[4].duration, nil, exprDollar[5].OffsetExpr)
		}
	case 17:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:142
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].duration, exprDollar[3].UnwrapExpr, nil)
		}
	case 18:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:143
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].duration, exprDollar[4].UnwrapExpr, exprDollar[3].OffsetExpr)
		}
	case 19:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/expr.y:144
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[4].duration, exprDollar[5].UnwrapExpr, nil)
		}
	case 20:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/expr.y:145
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[4].duration, exprDollar[6].UnwrapExpr, exprDollar[5].OffsetExpr)
		}
	case 21:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:146
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[3].duration, exprDollar[2].UnwrapExpr, nil)
		}
	case 22:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:147
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[3].duration, exprDollar[2].UnwrapExpr, exprDollar[4].OffsetExpr)
		}
	case 23:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/expr.y:148
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[5].duration, exprDollar[3].UnwrapExpr, nil)
		}
	case 24:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/expr.y:149
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[5].duration, exprDollar[3].UnwrapExpr, exprDollar[6].OffsetExpr)
		}
	case 25:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:150
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].PipelineExpr), exprDollar[3].duration, nil, nil)
		}
	case 26:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:151
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].PipelineExpr), exprDollar[3].duration, nil, exprDollar[4].OffsetExpr)
		}
	case 27:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/expr.y:152
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[2].Selector), exprDollar[3].PipelineExpr), exprDollar[5].duration, nil, nil)
		}
	case 28:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/expr.y:153
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[2].Selector), exprDollar[3].PipelineExpr), exprDollar[5].duration, nil, exprDollar[6].OffsetExpr)
		}
	case 29:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:154
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].PipelineExpr), exprDollar[4].duration, exprDollar[3].UnwrapExpr, nil)
		}
	case 30:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/expr.y:155
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].PipelineExpr), exprDollar[4].duration, exprDollar[3].UnwrapExpr, exprDollar[5].OffsetExpr)
		}
	case 31:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/expr.y:156
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[2].Selector), exprDollar[3].PipelineExpr), exprDollar[6].duration, exprDollar[4].UnwrapExpr, nil)
		}
	case 32:
		exprDollar = exprS[exprpt-7 : exprpt+1]
//line pkg/logql/expr.y:157
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[2].Selector), exprDollar[3].PipelineExpr), exprDollar[6].duration, exprDollar[4].UnwrapExpr, exprDollar[7].OffsetExpr)
		}
	case 33:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:158
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[3].PipelineExpr), exprDollar[2].duration, nil, nil)
		}
	case 34:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:159
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[4].PipelineExpr), exprDollar[2].duration, nil, exprDollar[3].OffsetExpr)
		}
	case 35:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:160
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[3].PipelineExpr), exprDollar[2].duration, exprDollar[4].UnwrapExpr, nil)
		}
	case 36:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/expr.y:161
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[4].PipelineExpr), exprDollar[2].duration, exprDollar[5].UnwrapExpr, exprDollar[3].OffsetExpr)
		}
	case 37:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:162
		{
			exprVAL.LogRangeExpr = exprDollar[2].LogRangeExpr
		}
	case 39:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:167
		{
			exprVAL.UnwrapExpr = newUnwrapExpr(exprDollar[3].str, "")
		}
	case 40:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/expr.y:168
		{
			exprVAL.UnwrapExpr = newUnwrapExpr(exprDollar[5].str, exprDollar[3].ConvOp)
		}
	case 41:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:169
		{
			exprVAL.UnwrapExpr = exprDollar[1].UnwrapExpr.addPostFilter(exprDollar[3].LabelFilter)
		}
	case 42:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:173
		{
			exprVAL.ConvOp = OpConvBytes
		}
	case 43:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:174
		{
			exprVAL.ConvOp = OpConvDuration
		}
	case 44:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:175
		{
			exprVAL.ConvOp = OpConvDurationSeconds
		}
	case 45:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:179
		{
			exprVAL.RangeAggregationExpr = newRangeAggregationExpr(exprDollar[3].LogRangeExpr, exprDollar[1].RangeOp, nil, nil)
		}
	case 46:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/expr.y:180
		{
			exprVAL.RangeAggregationExpr = newRangeAggregationExpr(exprDollar[5].LogRangeExpr, exprDollar[1].RangeOp, nil, &exprDollar[3].str)
		}
	case 47:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/expr.y:181
		{
			exprVAL.RangeAggregationExpr = newRangeAggregationExpr(exprDollar[3].LogRangeExpr, exprDollar[1].RangeOp, exprDollar[5].Grouping, nil)
		}
	case 48:
		exprDollar = exprS[exprpt-7 : exprpt+1]
//line pkg/logql/expr.y:182
		{
			exprVAL.RangeAggregationExpr = newRangeAggregationExpr(exprDollar[5].LogRangeExpr, exprDollar[1].RangeOp, exprDollar[7].Grouping, &exprDollar[3].str)
		}
	case 49:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:187
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[3].MetricExpr, exprDollar[1].VectorOp, nil, nil)
		}
	case 50:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/expr.y:188
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[4].MetricExpr, exprDollar[1].VectorOp, exprDollar[2].Grouping, nil)
		}
	case 51:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/expr.y:189
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[3].MetricExpr, exprDollar[1].VectorOp, exprDollar[5].Grouping, nil)
		}
	case 52:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/expr.y:191
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[5].MetricExpr, exprDollar[1].VectorOp, nil, &exprDollar[3].str)
		}
	case 53:
		exprDollar = exprS[exprpt-7 : exprpt+1]
//line pkg/logql/expr.y:192
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[5].MetricExpr, exprDollar[1].VectorOp, exprDollar[7].Grouping, &exprDollar[3].str)
		}
	case 54:
		exprDollar = exprS[exprpt-7 : exprpt+1]
//line pkg/logql/expr.y:193
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[6].MetricExpr, exprDollar[1].VectorOp, exprDollar[2].Grouping, &exprDollar[4].str)
		}
	case 55:
		exprDollar = exprS[exprpt-12 : exprpt+1]
//line pkg/logql/expr.y:198
		{
			exprVAL.LabelReplaceExpr = mustNewLabelReplaceExpr(exprDollar[3].MetricExpr, exprDollar[5].str, exprDollar[7].str, exprDollar[9].str, exprDollar[11].str)
		}
	case 56:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:202
		{
			exprVAL.Filter = labels.MatchRegexp
		}
	case 57:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:203
		{
			exprVAL.Filter = labels.MatchEqual
		}
	case 58:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:204
		{
			exprVAL.Filter = labels.MatchNotRegexp
		}
	case 59:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:205
		{
			exprVAL.Filter = labels.MatchNotEqual
		}
	case 60:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:209
		{
			exprVAL.Selector = exprDollar[2].Matchers
		}
	case 61:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:210
		{
			exprVAL.Selector = exprDollar[2].Matchers
		}
	case 62:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:211
		{
		}
	case 63:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:215
		{
			exprVAL.Matchers = []*labels.Matcher{exprDollar[1].Matcher}
		}
	case 64:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:216
		{
			exprVAL.Matchers = append(exprDollar[1].Matchers, exprDollar[3].Matcher)
		}
	case 65:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:220
		{
			exprVAL.Matcher = mustNewMatcher(labels.MatchEqual, exprDollar[1].str, exprDollar[3].str)
		}
	case 66:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:221
		{
			exprVAL.Matcher = mustNewMatcher(labels.MatchNotEqual, exprDollar[1].str, exprDollar[3].str)
		}
	case 67:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:222
		{
			exprVAL.Matcher = mustNewMatcher(labels.MatchRegexp, exprDollar[1].str, exprDollar[3].str)
		}
	case 68:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:223
		{
			exprVAL.Matcher = mustNewMatcher(labels.MatchNotRegexp, exprDollar[1].str, exprDollar[3].str)
		}
	case 69:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:227
		{
			exprVAL.PipelineExpr = MultiStageExpr{exprDollar[1].PipelineStage}
		}
	case 70:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:228
		{
			exprVAL.PipelineExpr = append(exprDollar[1].PipelineExpr, exprDollar[2].PipelineStage)
		}
	case 71:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:232
		{
			exprVAL.PipelineStage = exprDollar[1].LineFilters
		}
	case 72:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:233
		{
			exprVAL.PipelineStage = exprDollar[2].LabelParser
		}
	case 73:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:234
		{
			exprVAL.PipelineStage = exprDollar[2].JSONExpressionParser
		}
	case 74:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:235
		{
			exprVAL.PipelineStage = &labelFilterExpr{LabelFilterer: exprDollar[2].LabelFilter}
		}
	case 75:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:236
		{
			exprVAL.PipelineStage = exprDollar[2].LineFormatExpr
		}
	case 76:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:237
		{
			exprVAL.PipelineStage = exprDollar[2].LabelFormatExpr
		}
	case 77:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:241
		{
			exprVAL.LineFilters = newLineFilterExpr(nil, exprDollar[1].Filter, exprDollar[2].str)
		}
	case 78:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:242
		{
			exprVAL.LineFilters = newLineFilterExpr(exprDollar[1].LineFilters, exprDollar[2].Filter, exprDollar[3].str)
		}
	case 79:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:245
		{
			exprVAL.LabelParser = newLabelParserExpr(OpParserTypeJSON, "")
		}
	case 80:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:246
		{
			exprVAL.LabelParser = newLabelParserExpr(OpParserTypeLogfmt, "")
		}
	case 81:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:247
		{
			exprVAL.LabelParser = newLabelParserExpr(OpParserTypeRegexp, exprDollar[2].str)
		}
	case 82:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:248
		{
			exprVAL.LabelParser = newLabelParserExpr(OpParserTypeUnpack, "")
		}
	case 83:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:252
		{
			exprVAL.JSONExpressionParser = newJSONExpressionParser(exprDollar[2].JSONExpressionList)
		}
	case 84:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:254
		{
			exprVAL.LineFormatExpr = newLineFmtExpr(exprDollar[2].str)
		}
	case 85:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:257
		{
			exprVAL.LabelFormat = log.NewRenameLabelFmt(exprDollar[1].str, exprDollar[3].str)
		}
	case 86:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:258
		{
			exprVAL.LabelFormat = log.NewTemplateLabelFmt(exprDollar[1].str, exprDollar[3].str)
		}
	case 87:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:262
		{
			exprVAL.LabelsFormat = []log.LabelFmt{exprDollar[1].LabelFormat}
		}
	case 88:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:263
		{
			exprVAL.LabelsFormat = append(exprDollar[1].LabelsFormat, exprDollar[3].LabelFormat)
		}
	case 90:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:267
		{
			exprVAL.LabelFormatExpr = newLabelFmtExpr(exprDollar[2].LabelsFormat)
		}
	case 91:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:270
		{
			exprVAL.LabelFilter = log.NewStringLabelFilter(exprDollar[1].Matcher)
		}
	case 92:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:271
		{
			exprVAL.LabelFilter = exprDollar[1].UnitFilter
		}
	case 93:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:272
		{
			exprVAL.LabelFilter = exprDollar[1].NumberFilter
		}
	case 94:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:273
		{
			exprVAL.LabelFilter = exprDollar[2].LabelFilter
		}
	case 95:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:274
		{
			exprVAL.LabelFilter = log.NewAndLabelFilter(exprDollar[1].LabelFilter, exprDollar[2].LabelFilter)
		}
	case 96:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:275
		{
			exprVAL.LabelFilter = log.NewAndLabelFilter(exprDollar[1].LabelFilter, exprDollar[3].LabelFilter)
		}
	case 97:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:276
		{
			exprVAL.LabelFilter = log.NewAndLabelFilter(exprDollar[1].LabelFilter, exprDollar[3].LabelFilter)
		}
	case 98:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:277
		{
			exprVAL.LabelFilter = log.NewOrLabelFilter(exprDollar[1].LabelFilter, exprDollar[3].LabelFilter)
		}
	case 99:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:281
		{
			exprVAL.JSONExpression = log.NewJSONExpr(exprDollar[1].str, exprDollar[3].str)
		}
	case 100:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:284
		{
			exprVAL.JSONExpressionList = []log.JSONExpression{exprDollar[1].JSONExpression}
		}
	case 101:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:285
		{
			exprVAL.JSONExpressionList = append(exprDollar[1].JSONExpressionList, exprDollar[3].JSONExpression)
		}
	case 102:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:289
		{
			exprVAL.UnitFilter = exprDollar[1].DurationFilter
		}
	case 103:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:290
		{
			exprVAL.UnitFilter = exprDollar[1].BytesFilter
		}
	case 104:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:293
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterGreaterThan, exprDollar[1].str, exprDollar[3].duration)
		}
	case 105:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:294
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterGreaterThanOrEqual, exprDollar[1].str, exprDollar[3].duration)
		}
	case 106:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:295
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterLesserThan, exprDollar[1].str, exprDollar[3].duration)
		}
	case 107:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:296
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterLesserThanOrEqual, exprDollar[1].str, exprDollar[3].duration)
		}
	case 108:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:297
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterNotEqual, exprDollar[1].str, exprDollar[3].duration)
		}
	case 109:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:298
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterEqual, exprDollar[1].str, exprDollar[3].duration)
		}
	case 110:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:299
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterEqual, exprDollar[1].str, exprDollar[3].duration)
		}
	case 111:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:303
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterGreaterThan, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 112:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:304
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterGreaterThanOrEqual, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 113:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:305
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterLesserThan, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 114:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:306
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterLesserThanOrEqual, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 115:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:307
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterNotEqual, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 116:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:308
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterEqual, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 117:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:309
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterEqual, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 118:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:313
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterGreaterThan, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 119:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:314
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterGreaterThanOrEqual, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 120:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:315
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterLesserThan, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 121:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:316
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterLesserThanOrEqual, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 122:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:317
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterNotEqual, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 123:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:318
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterEqual, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 124:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:319
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterEqual, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 125:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:325
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("or", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 126:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:326
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("and", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 127:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:327
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("unless", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 128:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:328
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("+", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 129:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:329
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("-", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 130:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:330
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("*", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 131:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:331
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("/", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 132:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:332
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("%", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 133:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:333
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("^", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 134:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:334
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("==", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 135:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:335
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("!=", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 136:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:336
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr(">", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 137:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:337
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr(">=", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 138:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:338
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("<", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 139:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:339
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("<=", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 140:
		exprDollar = exprS[exprpt-0 : exprpt+1]
//line pkg/logql/expr.y:343
		{
			exprVAL.BinOpModifier = BinOpOptions{}
		}
	case 141:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:344
		{
			exprVAL.BinOpModifier = BinOpOptions{ReturnBool: true}
		}
	case 142:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:348
		{
			exprVAL.LiteralExpr = mustNewLiteralExpr(exprDollar[1].str, false)
		}
	case 143:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:349
		{
			exprVAL.LiteralExpr = mustNewLiteralExpr(exprDollar[2].str, false)
		}
	case 144:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:350
		{
			exprVAL.LiteralExpr = mustNewLiteralExpr(exprDollar[2].str, true)
		}
	case 145:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:354
		{
			exprVAL.VectorOp = OpTypeSum
		}
	case 146:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:355
		{
			exprVAL.VectorOp = OpTypeAvg
		}
	case 147:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:356
		{
			exprVAL.VectorOp = OpTypeCount
		}
	case 148:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:357
		{
			exprVAL.VectorOp = OpTypeMax
		}
	case 149:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:358
		{
			exprVAL.VectorOp = OpTypeMin
		}
	case 150:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:359
		{
			exprVAL.VectorOp = OpTypeStddev
		}
	case 151:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:360
		{
			exprVAL.VectorOp = OpTypeStdvar
		}
	case 152:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:361
		{
			exprVAL.VectorOp = OpTypeBottomK
		}
	case 153:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:362
		{
			exprVAL.VectorOp = OpTypeTopK
		}
	case 154:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:366
		{
			exprVAL.RangeOp = OpRangeTypeCount
		}
	case 155:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:367
		{
			exprVAL.RangeOp = OpRangeTypeRate
		}
	case 156:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:368
		{
			exprVAL.RangeOp = OpRangeTypeBytes
		}
	case 157:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:369
		{
			exprVAL.RangeOp = OpRangeTypeBytesRate
		}
	case 158:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:370
		{
			exprVAL.RangeOp = OpRangeTypeAvg
		}
	case 159:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:371
		{
			exprVAL.RangeOp = OpRangeTypeSum
		}
	case 160:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:372
		{
			exprVAL.RangeOp = OpRangeTypeMin
		}
	case 161:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:373
		{
			exprVAL.RangeOp = OpRangeTypeMax
		}
	case 162:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:374
		{
			exprVAL.RangeOp = OpRangeTypeStdvar
		}
	case 163:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:375
		{
			exprVAL.RangeOp = OpRangeTypeStddev
		}
	case 164:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:376
		{
			exprVAL.RangeOp = OpRangeTypeQuantile
		}
	case 165:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:377
		{
			exprVAL.RangeOp = OpRangeTypeFirst
		}
	case 166:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:378
		{
			exprVAL.RangeOp = OpRangeTypeLast
		}
	case 167:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:379
		{
			exprVAL.RangeOp = OpRangeTypeAbsent
		}
	case 168:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:383
		{
			exprVAL.OffsetExpr = newOffsetExpr(exprDollar[2].duration)
		}
	case 169:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:386
		{
			exprVAL.Labels = []string{exprDollar[1].str}
		}
	case 170:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:387
		{
			exprVAL.Labels = append(exprDollar[1].Labels, exprDollar[3].str)
		}
	case 171:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:391
		{
			exprVAL.Grouping = &grouping{without: false, groups: exprDollar[3].Labels}
		}
	case 172:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:392
		{
			exprVAL.Grouping = &grouping{without: true, groups: exprDollar[3].Labels}
		}
	case 173:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:393
		{
			exprVAL.Grouping = &grouping{without: false, groups: nil}
		}
	case 174:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:394
		{
			exprVAL.Grouping = &grouping{without: true, groups: nil}
		}
	}
	goto exprstack /* stack new state and value */
}
