// Code generated by goyacc -p expr -o pkg/logql/expr.y.go pkg/logql/expr.y. DO NOT EDIT.

//line pkg/logql/expr.y:2
package logql

import __yyfmt__ "fmt"

//line pkg/logql/expr.y:2
import (
	"github.com/grafana/loki/pkg/logql/log"
	"github.com/prometheus/prometheus/pkg/labels"
	"time"
)

//line pkg/logql/expr.y:12
type exprSymType struct {
	yys                   int
	Expr                  Expr
	Filter                labels.MatchType
	Grouping              *grouping
	Labels                []string
	LogExpr               LogSelectorExpr
	LogRangeExpr          *logRange
	Matcher               *labels.Matcher
	Matchers              []*labels.Matcher
	RangeAggregationExpr  SampleExpr
	RangeOp               string
	ConvOp                string
	Selector              []*labels.Matcher
	VectorAggregationExpr SampleExpr
	MetricExpr            SampleExpr
	VectorOp              string
	BinOpExpr             SampleExpr
	LabelReplaceExpr      SampleExpr
	binOp                 string
	bytes                 uint64
	str                   string
	duration              time.Duration
	LiteralExpr           *literalExpr
	BinOpModifier         BinOpOptions
	LabelParser           *labelParserExpr
	LineFilters           *lineFilterExpr
	PipelineExpr          MultiStageExpr
	PipelineStage         StageExpr
	BytesFilter           log.LabelFilterer
	NumberFilter          log.LabelFilterer
	DurationFilter        log.LabelFilterer
	LabelFilter           log.LabelFilterer
	UnitFilter            log.LabelFilterer
	LineFormatExpr        *lineFmtExpr
	LabelFormatExpr       *labelFmtExpr
	LabelFormat           log.LabelFmt
	LabelsFormat          []log.LabelFmt
	UnwrapExpr            *unwrapExpr
}

const BYTES = 57346
const IDENTIFIER = 57347
const STRING = 57348
const NUMBER = 57349
const DURATION = 57350
const RANGE = 57351
const MATCHERS = 57352
const LABELS = 57353
const EQ = 57354
const RE = 57355
const NRE = 57356
const OPEN_BRACE = 57357
const CLOSE_BRACE = 57358
const OPEN_BRACKET = 57359
const CLOSE_BRACKET = 57360
const COMMA = 57361
const DOT = 57362
const PIPE_MATCH = 57363
const PIPE_EXACT = 57364
const OPEN_PARENTHESIS = 57365
const CLOSE_PARENTHESIS = 57366
const BY = 57367
const WITHOUT = 57368
const COUNT_OVER_TIME = 57369
const RATE = 57370
const SUM = 57371
const AVG = 57372
const MAX = 57373
const MIN = 57374
const COUNT = 57375
const STDDEV = 57376
const STDVAR = 57377
const BOTTOMK = 57378
const TOPK = 57379
const BYTES_OVER_TIME = 57380
const BYTES_RATE = 57381
const BOOL = 57382
const JSON = 57383
const REGEXP = 57384
const LOGFMT = 57385
const PIPE = 57386
const LINE_FMT = 57387
const LABEL_FMT = 57388
const UNWRAP = 57389
const AVG_OVER_TIME = 57390
const SUM_OVER_TIME = 57391
const MIN_OVER_TIME = 57392
const MAX_OVER_TIME = 57393
const STDVAR_OVER_TIME = 57394
const STDDEV_OVER_TIME = 57395
const QUANTILE_OVER_TIME = 57396
const BYTES_CONV = 57397
const DURATION_CONV = 57398
const DURATION_SECONDS_CONV = 57399
const ABSENT_OVER_TIME = 57400
const LABEL_REPLACE = 57401
const OR = 57402
const AND = 57403
const UNLESS = 57404
const CMP_EQ = 57405
const NEQ = 57406
const LT = 57407
const LTE = 57408
const GT = 57409
const GTE = 57410
const ADD = 57411
const SUB = 57412
const MUL = 57413
const DIV = 57414
const MOD = 57415
const POW = 57416

var exprToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"BYTES",
	"IDENTIFIER",
	"STRING",
	"NUMBER",
	"DURATION",
	"RANGE",
	"MATCHERS",
	"LABELS",
	"EQ",
	"RE",
	"NRE",
	"OPEN_BRACE",
	"CLOSE_BRACE",
	"OPEN_BRACKET",
	"CLOSE_BRACKET",
	"COMMA",
	"DOT",
	"PIPE_MATCH",
	"PIPE_EXACT",
	"OPEN_PARENTHESIS",
	"CLOSE_PARENTHESIS",
	"BY",
	"WITHOUT",
	"COUNT_OVER_TIME",
	"RATE",
	"SUM",
	"AVG",
	"MAX",
	"MIN",
	"COUNT",
	"STDDEV",
	"STDVAR",
	"BOTTOMK",
	"TOPK",
	"BYTES_OVER_TIME",
	"BYTES_RATE",
	"BOOL",
	"JSON",
	"REGEXP",
	"LOGFMT",
	"PIPE",
	"LINE_FMT",
	"LABEL_FMT",
	"UNWRAP",
	"AVG_OVER_TIME",
	"SUM_OVER_TIME",
	"MIN_OVER_TIME",
	"MAX_OVER_TIME",
	"STDVAR_OVER_TIME",
	"STDDEV_OVER_TIME",
	"QUANTILE_OVER_TIME",
	"BYTES_CONV",
	"DURATION_CONV",
	"DURATION_SECONDS_CONV",
	"ABSENT_OVER_TIME",
	"LABEL_REPLACE",
	"OR",
	"AND",
	"UNLESS",
	"CMP_EQ",
	"NEQ",
	"LT",
	"LTE",
	"GT",
	"GTE",
	"ADD",
	"SUB",
	"MUL",
	"DIV",
	"MOD",
	"POW",
}
var exprStatenames = [...]string{}

const exprEofCode = 1
const exprErrCode = 2
const exprInitialStackSize = 16

//line pkg/logql/expr.y:358

//line yacctab:1
var exprExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const exprPrivate = 57344

const exprLast = 416

var exprAct = [...]int{

	73, 176, 56, 158, 150, 4, 184, 104, 66, 2,
	55, 48, 64, 225, 5, 222, 124, 260, 59, 80,
	69, 40, 41, 42, 49, 50, 53, 54, 51, 52,
	43, 44, 45, 46, 47, 48, 41, 42, 49, 50,
	53, 54, 51, 52, 43, 44, 45, 46, 47, 48,
	43, 44, 45, 46, 47, 48, 74, 75, 95, 45,
	46, 47, 48, 98, 49, 50, 53, 54, 51, 52,
	43, 44, 45, 46, 47, 48, 96, 245, 128, 160,
	122, 123, 172, 273, 133, 269, 126, 244, 134, 254,
	135, 136, 137, 138, 139, 140, 141, 142, 143, 144,
	145, 146, 147, 148, 241, 223, 244, 120, 122, 123,
	62, 223, 155, 221, 232, 181, 62, 60, 61, 271,
	252, 263, 222, 60, 61, 115, 167, 247, 248, 249,
	166, 161, 164, 165, 162, 163, 183, 177, 175, 187,
	178, 222, 179, 62, 180, 114, 178, 233, 222, 175,
	60, 61, 235, 226, 62, 258, 190, 191, 192, 121,
	63, 60, 61, 119, 62, 132, 63, 72, 62, 74,
	75, 60, 61, 178, 217, 60, 61, 219, 110, 224,
	95, 227, 230, 98, 178, 221, 220, 110, 231, 126,
	228, 218, 152, 63, 178, 110, 107, 193, 237, 62,
	251, 152, 172, 110, 63, 107, 60, 61, 110, 152,
	233, 131, 130, 107, 63, 234, 186, 152, 63, 186,
	222, 107, 242, 95, 229, 172, 107, 243, 125, 58,
	253, 95, 12, 153, 151, 188, 12, 15, 185, 78,
	127, 71, 257, 151, 127, 12, 268, 173, 256, 63,
	153, 151, 259, 6, 110, 264, 117, 19, 20, 31,
	32, 34, 35, 33, 36, 37, 38, 39, 21, 22,
	116, 194, 107, 118, 189, 182, 174, 195, 23, 24,
	25, 26, 27, 28, 29, 129, 267, 77, 30, 18,
	101, 103, 102, 12, 108, 109, 225, 262, 261, 16,
	17, 6, 110, 250, 272, 19, 20, 31, 32, 34,
	35, 33, 36, 37, 38, 39, 21, 22, 79, 200,
	107, 169, 201, 199, 239, 240, 23, 24, 25, 26,
	27, 28, 29, 76, 270, 265, 30, 18, 101, 103,
	102, 215, 108, 109, 216, 214, 236, 16, 17, 197,
	171, 168, 198, 196, 212, 170, 238, 213, 211, 159,
	81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
	91, 92, 93, 94, 209, 3, 206, 210, 208, 207,
	205, 203, 65, 266, 204, 202, 169, 168, 156, 154,
	149, 113, 68, 255, 70, 70, 159, 105, 157, 100,
	99, 57, 111, 106, 112, 97, 11, 10, 9, 14,
	8, 246, 13, 7, 67, 1,
}
var exprPact = [...]int{

	230, -1000, -39, -1000, -1000, 185, 230, -1000, -1000, -1000,
	-1000, -1000, 390, 218, 144, -1000, 326, 280, 216, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-21, -21, -21, -21, -21, -21, -21, -21, -21, -21,
	-21, -21, -21, -21, -21, 185, -1000, 154, 297, 385,
	-1000, -1000, -1000, -1000, 121, 101, -39, 254, 147, -1000,
	95, 221, 278, 189, 188, 142, -1000, -1000, 230, 230,
	-1000, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, -1000, 384, -1000, 190, -1000,
	-1000, -1000, -1000, 383, -1000, -1000, -1000, 203, 382, 391,
	67, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 389, -1000,
	381, 380, 349, 344, 223, 257, 140, 217, 91, 256,
	230, 214, 211, 255, -25, 1, 1, -12, -12, -63,
	-63, -63, -63, -19, -19, -19, -19, -19, -19, -1000,
	190, 203, 203, 203, -1000, 173, -1000, 252, -1000, 265,
	345, 315, 377, 372, 370, 350, 337, -1000, -1000, -1000,
	-1000, -1000, -1000, 31, 217, 150, 104, 102, 249, 129,
	200, 31, 230, 90, 191, -1000, -1000, 128, -1000, 340,
	198, 190, 182, -1000, 354, 319, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 80, -29,
	150, -1000, 203, -1000, 78, 72, 294, 176, 96, -1000,
	-1000, 65, -1000, 388, -1000, -1000, 229, -1000, -1000, -1000,
	-1000, 31, -29, 190, -1000, -1000, 132, -1000, -1000, -1000,
	-27, 289, 288, 97, 31, -1000, 329, -1000, 378, -29,
	-34, -1000, -1000, 277, -1000, 227, 61, -1000, 328, -1000,
	100, 298, 59, -1000,
}
var exprPgo = [...]int{

	0, 415, 8, 18, 0, 6, 375, 5, 16, 7,
	414, 413, 412, 411, 14, 410, 409, 408, 407, 406,
	318, 405, 10, 2, 404, 403, 402, 4, 401, 400,
	399, 3, 398, 1, 397,
}
var exprR1 = [...]int{

	0, 1, 2, 2, 7, 7, 7, 7, 7, 7,
	6, 6, 6, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 33, 33, 33,
	13, 13, 13, 11, 11, 11, 11, 15, 15, 15,
	15, 15, 19, 3, 3, 3, 3, 14, 14, 14,
	10, 10, 9, 9, 9, 9, 22, 22, 23, 23,
	23, 23, 23, 28, 28, 21, 21, 21, 29, 31,
	31, 32, 32, 32, 30, 27, 27, 27, 27, 27,
	27, 27, 27, 34, 34, 26, 26, 26, 26, 26,
	26, 26, 24, 24, 24, 24, 24, 24, 24, 25,
	25, 25, 25, 25, 25, 25, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 20, 20, 18, 18, 18, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 5, 5, 4,
	4, 4, 4,
}
var exprR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 2, 3, 2, 4, 3, 5, 3, 5, 3,
	5, 4, 6, 3, 4, 3, 2, 3, 6, 3,
	1, 1, 1, 4, 6, 5, 7, 4, 5, 5,
	6, 7, 12, 1, 1, 1, 1, 3, 3, 3,
	1, 3, 3, 3, 3, 3, 1, 2, 1, 2,
	2, 2, 2, 2, 3, 1, 1, 2, 2, 3,
	3, 1, 3, 3, 2, 1, 1, 1, 3, 2,
	3, 3, 3, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 0, 1, 1, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 4,
	4, 3, 3,
}
var exprChk = [...]int{

	-1000, -1, -2, -6, -7, -14, 23, -11, -15, -17,
	-18, -19, 15, -12, -16, 7, 69, 70, 59, 27,
	28, 38, 39, 48, 49, 50, 51, 52, 53, 54,
	58, 29, 30, 33, 31, 32, 34, 35, 36, 37,
	60, 61, 62, 69, 70, 71, 72, 73, 74, 63,
	64, 67, 68, 65, 66, -22, -23, -28, 44, -3,
	21, 22, 14, 64, -7, -6, -2, -10, 2, -9,
	5, 23, 23, -4, 25, 26, 7, 7, 23, -20,
	40, -20, -20, -20, -20, -20, -20, -20, -20, -20,
	-20, -20, -20, -20, -20, -23, -3, -21, -27, -29,
	-30, 41, 43, 42, -9, -34, -25, 23, 45, 46,
	5, -26, -24, 6, 24, 24, 16, 2, 19, 16,
	12, 64, 13, 14, -8, 7, -14, 23, -7, 7,
	23, 23, 23, -7, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 6,
	-27, 61, 19, 60, 6, -27, 6, -32, -31, 5,
	12, 64, 67, 68, 65, 66, 63, -9, 6, 6,
	6, 6, 2, 24, 19, 9, -33, -22, 44, -14,
	-8, 24, 19, -7, -5, 24, 5, -5, 24, 19,
	-27, -27, -27, 24, 19, 12, 8, 4, 7, 8,
	4, 7, 8, 4, 7, 8, 4, 7, 8, 4,
	7, 8, 4, 7, 8, 4, 7, -4, -8, -33,
	-22, 9, 44, 9, -33, 47, 24, -33, -22, 24,
	-4, -7, 24, 19, 24, 24, 6, -31, 2, 5,
	6, 24, -33, -27, 9, 5, -13, 55, 56, 57,
	9, 24, 24, -33, 24, 5, 19, -4, 23, -33,
	44, 9, 9, 24, -4, 6, 5, 9, 19, 24,
	6, 19, 6, 24,
}
var exprDef = [...]int{

	0, -2, 1, 2, 3, 10, 0, 4, 5, 6,
	7, 8, 0, 0, 0, 123, 0, 0, 0, 135,
	136, 137, 138, 139, 140, 141, 142, 143, 144, 145,
	146, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 11, 56, 58, 0, 0,
	43, 44, 45, 46, 3, 2, 0, 0, 0, 50,
	0, 0, 0, 0, 0, 0, 124, 125, 0, 0,
	122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 57, 0, 59, 60, 61,
	62, 65, 66, 0, 75, 76, 77, 0, 0, 0,
	0, 83, 84, 63, 9, 12, 47, 48, 0, 49,
	0, 0, 0, 0, 0, 0, 0, 0, 3, 123,
	0, 0, 0, 3, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 64,
	79, 0, 0, 0, 67, 0, 68, 74, 71, 0,
	0, 0, 0, 0, 0, 0, 0, 51, 52, 53,
	54, 55, 26, 33, 0, 13, 0, 0, 0, 0,
	0, 37, 0, 3, 0, 151, 147, 0, 152, 0,
	80, 81, 82, 78, 0, 0, 90, 97, 104, 89,
	96, 103, 85, 92, 99, 86, 93, 100, 87, 94,
	101, 88, 95, 102, 91, 98, 105, 35, 0, 15,
	23, 17, 0, 19, 0, 0, 0, 0, 0, 25,
	39, 3, 38, 0, 149, 150, 0, 72, 73, 69,
	70, 34, 24, 29, 21, 27, 0, 30, 31, 32,
	14, 0, 0, 0, 40, 148, 0, 36, 0, 16,
	0, 18, 20, 0, 41, 0, 0, 22, 0, 28,
	0, 0, 0, 42,
}
var exprTok1 = [...]int{

	1,
}
var exprTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74,
}
var exprTok3 = [...]int{
	0,
}

var exprErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	exprDebug        = 0
	exprErrorVerbose = false
)

type exprLexer interface {
	Lex(lval *exprSymType) int
	Error(s string)
}

type exprParser interface {
	Parse(exprLexer) int
	Lookahead() int
}

type exprParserImpl struct {
	lval  exprSymType
	stack [exprInitialStackSize]exprSymType
	char  int
}

func (p *exprParserImpl) Lookahead() int {
	return p.char
}

func exprNewParser() exprParser {
	return &exprParserImpl{}
}

const exprFlag = -1000

func exprTokname(c int) string {
	if c >= 1 && c-1 < len(exprToknames) {
		if exprToknames[c-1] != "" {
			return exprToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func exprStatname(s int) string {
	if s >= 0 && s < len(exprStatenames) {
		if exprStatenames[s] != "" {
			return exprStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func exprErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !exprErrorVerbose {
		return "syntax error"
	}

	for _, e := range exprErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + exprTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := exprPact[state]
	for tok := TOKSTART; tok-1 < len(exprToknames); tok++ {
		if n := base + tok; n >= 0 && n < exprLast && exprChk[exprAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if exprDef[state] == -2 {
		i := 0
		for exprExca[i] != -1 || exprExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; exprExca[i] >= 0; i += 2 {
			tok := exprExca[i]
			if tok < TOKSTART || exprExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if exprExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += exprTokname(tok)
	}
	return res
}

func exprlex1(lex exprLexer, lval *exprSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = exprTok1[0]
		goto out
	}
	if char < len(exprTok1) {
		token = exprTok1[char]
		goto out
	}
	if char >= exprPrivate {
		if char < exprPrivate+len(exprTok2) {
			token = exprTok2[char-exprPrivate]
			goto out
		}
	}
	for i := 0; i < len(exprTok3); i += 2 {
		token = exprTok3[i+0]
		if token == char {
			token = exprTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = exprTok2[1] /* unknown char */
	}
	if exprDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", exprTokname(token), uint(char))
	}
	return char, token
}

func exprParse(exprlex exprLexer) int {
	return exprNewParser().Parse(exprlex)
}

func (exprrcvr *exprParserImpl) Parse(exprlex exprLexer) int {
	var exprn int
	var exprVAL exprSymType
	var exprDollar []exprSymType
	_ = exprDollar // silence set and not used
	exprS := exprrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	exprstate := 0
	exprrcvr.char = -1
	exprtoken := -1 // exprrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		exprstate = -1
		exprrcvr.char = -1
		exprtoken = -1
	}()
	exprp := -1
	goto exprstack

ret0:
	return 0

ret1:
	return 1

exprstack:
	/* put a state and value onto the stack */
	if exprDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", exprTokname(exprtoken), exprStatname(exprstate))
	}

	exprp++
	if exprp >= len(exprS) {
		nyys := make([]exprSymType, len(exprS)*2)
		copy(nyys, exprS)
		exprS = nyys
	}
	exprS[exprp] = exprVAL
	exprS[exprp].yys = exprstate

exprnewstate:
	exprn = exprPact[exprstate]
	if exprn <= exprFlag {
		goto exprdefault /* simple state */
	}
	if exprrcvr.char < 0 {
		exprrcvr.char, exprtoken = exprlex1(exprlex, &exprrcvr.lval)
	}
	exprn += exprtoken
	if exprn < 0 || exprn >= exprLast {
		goto exprdefault
	}
	exprn = exprAct[exprn]
	if exprChk[exprn] == exprtoken { /* valid shift */
		exprrcvr.char = -1
		exprtoken = -1
		exprVAL = exprrcvr.lval
		exprstate = exprn
		if Errflag > 0 {
			Errflag--
		}
		goto exprstack
	}

exprdefault:
	/* default state action */
	exprn = exprDef[exprstate]
	if exprn == -2 {
		if exprrcvr.char < 0 {
			exprrcvr.char, exprtoken = exprlex1(exprlex, &exprrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if exprExca[xi+0] == -1 && exprExca[xi+1] == exprstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			exprn = exprExca[xi+0]
			if exprn < 0 || exprn == exprtoken {
				break
			}
		}
		exprn = exprExca[xi+1]
		if exprn < 0 {
			goto ret0
		}
	}
	if exprn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			exprlex.Error(exprErrorMessage(exprstate, exprtoken))
			Nerrs++
			if exprDebug >= 1 {
				__yyfmt__.Printf("%s", exprStatname(exprstate))
				__yyfmt__.Printf(" saw %s\n", exprTokname(exprtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for exprp >= 0 {
				exprn = exprPact[exprS[exprp].yys] + exprErrCode
				if exprn >= 0 && exprn < exprLast {
					exprstate = exprAct[exprn] /* simulate a shift of "error" */
					if exprChk[exprstate] == exprErrCode {
						goto exprstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if exprDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", exprS[exprp].yys)
				}
				exprp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if exprDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", exprTokname(exprtoken))
			}
			if exprtoken == exprEofCode {
				goto ret1
			}
			exprrcvr.char = -1
			exprtoken = -1
			goto exprnewstate /* try again in the same state */
		}
	}

	/* reduction by production exprn */
	if exprDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", exprn, exprStatname(exprstate))
	}

	exprnt := exprn
	exprpt := exprp
	_ = exprpt // guard against "declared and not used"

	exprp -= exprR2[exprn]
	// exprp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if exprp+1 >= len(exprS) {
		nyys := make([]exprSymType, len(exprS)*2)
		copy(nyys, exprS)
		exprS = nyys
	}
	exprVAL = exprS[exprp+1]

	/* consult goto table to find next state */
	exprn = exprR1[exprn]
	exprg := exprPgo[exprn]
	exprj := exprg + exprS[exprp].yys + 1

	if exprj >= exprLast {
		exprstate = exprAct[exprg]
	} else {
		exprstate = exprAct[exprj]
		if exprChk[exprstate] != -exprn {
			exprstate = exprAct[exprg]
		}
	}
	// dummy call; replaced with literal code
	switch exprnt {

	case 1:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:107
		{
			exprlex.(*parser).expr = exprDollar[1].Expr
		}
	case 2:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:110
		{
			exprVAL.Expr = exprDollar[1].LogExpr
		}
	case 3:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:111
		{
			exprVAL.Expr = exprDollar[1].MetricExpr
		}
	case 4:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:115
		{
			exprVAL.MetricExpr = exprDollar[1].RangeAggregationExpr
		}
	case 5:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:116
		{
			exprVAL.MetricExpr = exprDollar[1].VectorAggregationExpr
		}
	case 6:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:117
		{
			exprVAL.MetricExpr = exprDollar[1].BinOpExpr
		}
	case 7:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:118
		{
			exprVAL.MetricExpr = exprDollar[1].LiteralExpr
		}
	case 8:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:119
		{
			exprVAL.MetricExpr = exprDollar[1].LabelReplaceExpr
		}
	case 9:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:120
		{
			exprVAL.MetricExpr = exprDollar[2].MetricExpr
		}
	case 10:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:124
		{
			exprVAL.LogExpr = newMatcherExpr(exprDollar[1].Selector)
		}
	case 11:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:125
		{
			exprVAL.LogExpr = newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].PipelineExpr)
		}
	case 12:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:126
		{
			exprVAL.LogExpr = exprDollar[2].LogExpr
		}
	case 13:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:130
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].duration, nil)
		}
	case 14:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:131
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[4].duration, nil)
		}
	case 15:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:132
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].duration, exprDollar[3].UnwrapExpr)
		}
	case 16:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/expr.y:133
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[4].duration, exprDollar[5].UnwrapExpr)
		}
	case 17:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:134
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[3].duration, exprDollar[2].UnwrapExpr)
		}
	case 18:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/expr.y:135
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[5].duration, exprDollar[3].UnwrapExpr)
		}
	case 19:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:136
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].PipelineExpr), exprDollar[3].duration, nil)
		}
	case 20:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/expr.y:137
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[2].Selector), exprDollar[3].PipelineExpr), exprDollar[5].duration, nil)
		}
	case 21:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:138
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].PipelineExpr), exprDollar[4].duration, exprDollar[3].UnwrapExpr)
		}
	case 22:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/expr.y:139
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[2].Selector), exprDollar[3].PipelineExpr), exprDollar[6].duration, exprDollar[4].UnwrapExpr)
		}
	case 23:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:140
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[3].PipelineExpr), exprDollar[2].duration, nil)
		}
	case 24:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:141
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[3].PipelineExpr), exprDollar[2].duration, exprDollar[4].UnwrapExpr)
		}
	case 25:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:142
		{
			exprVAL.LogRangeExpr = exprDollar[2].LogRangeExpr
		}
	case 27:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:147
		{
			exprVAL.UnwrapExpr = newUnwrapExpr(exprDollar[3].str, "")
		}
	case 28:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/expr.y:148
		{
			exprVAL.UnwrapExpr = newUnwrapExpr(exprDollar[5].str, exprDollar[3].ConvOp)
		}
	case 29:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:149
		{
			exprVAL.UnwrapExpr = exprDollar[1].UnwrapExpr.addPostFilter(exprDollar[3].LabelFilter)
		}
	case 30:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:153
		{
			exprVAL.ConvOp = OpConvBytes
		}
	case 31:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:154
		{
			exprVAL.ConvOp = OpConvDuration
		}
	case 32:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:155
		{
			exprVAL.ConvOp = OpConvDurationSeconds
		}
	case 33:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:159
		{
			exprVAL.RangeAggregationExpr = newRangeAggregationExpr(exprDollar[3].LogRangeExpr, exprDollar[1].RangeOp, nil, nil)
		}
	case 34:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/expr.y:160
		{
			exprVAL.RangeAggregationExpr = newRangeAggregationExpr(exprDollar[5].LogRangeExpr, exprDollar[1].RangeOp, nil, &exprDollar[3].str)
		}
	case 35:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/expr.y:161
		{
			exprVAL.RangeAggregationExpr = newRangeAggregationExpr(exprDollar[3].LogRangeExpr, exprDollar[1].RangeOp, exprDollar[5].Grouping, nil)
		}
	case 36:
		exprDollar = exprS[exprpt-7 : exprpt+1]
//line pkg/logql/expr.y:162
		{
			exprVAL.RangeAggregationExpr = newRangeAggregationExpr(exprDollar[5].LogRangeExpr, exprDollar[1].RangeOp, exprDollar[7].Grouping, &exprDollar[3].str)
		}
	case 37:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:167
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[3].MetricExpr, exprDollar[1].VectorOp, nil, nil)
		}
	case 38:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/expr.y:168
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[4].MetricExpr, exprDollar[1].VectorOp, exprDollar[2].Grouping, nil)
		}
	case 39:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/expr.y:169
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[3].MetricExpr, exprDollar[1].VectorOp, exprDollar[5].Grouping, nil)
		}
	case 40:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/expr.y:171
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[5].MetricExpr, exprDollar[1].VectorOp, nil, &exprDollar[3].str)
		}
	case 41:
		exprDollar = exprS[exprpt-7 : exprpt+1]
//line pkg/logql/expr.y:172
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[5].MetricExpr, exprDollar[1].VectorOp, exprDollar[7].Grouping, &exprDollar[3].str)
		}
	case 42:
		exprDollar = exprS[exprpt-12 : exprpt+1]
//line pkg/logql/expr.y:177
		{
			exprVAL.LabelReplaceExpr = mustNewLabelReplaceExpr(exprDollar[3].MetricExpr, exprDollar[5].str, exprDollar[7].str, exprDollar[9].str, exprDollar[11].str)
		}
	case 43:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:181
		{
			exprVAL.Filter = labels.MatchRegexp
		}
	case 44:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:182
		{
			exprVAL.Filter = labels.MatchEqual
		}
	case 45:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:183
		{
			exprVAL.Filter = labels.MatchNotRegexp
		}
	case 46:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:184
		{
			exprVAL.Filter = labels.MatchNotEqual
		}
	case 47:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:188
		{
			exprVAL.Selector = exprDollar[2].Matchers
		}
	case 48:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:189
		{
			exprVAL.Selector = exprDollar[2].Matchers
		}
	case 49:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:190
		{
		}
	case 50:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:194
		{
			exprVAL.Matchers = []*labels.Matcher{exprDollar[1].Matcher}
		}
	case 51:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:195
		{
			exprVAL.Matchers = append(exprDollar[1].Matchers, exprDollar[3].Matcher)
		}
	case 52:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:199
		{
			exprVAL.Matcher = mustNewMatcher(labels.MatchEqual, exprDollar[1].str, exprDollar[3].str)
		}
	case 53:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:200
		{
			exprVAL.Matcher = mustNewMatcher(labels.MatchNotEqual, exprDollar[1].str, exprDollar[3].str)
		}
	case 54:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:201
		{
			exprVAL.Matcher = mustNewMatcher(labels.MatchRegexp, exprDollar[1].str, exprDollar[3].str)
		}
	case 55:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:202
		{
			exprVAL.Matcher = mustNewMatcher(labels.MatchNotRegexp, exprDollar[1].str, exprDollar[3].str)
		}
	case 56:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:206
		{
			exprVAL.PipelineExpr = MultiStageExpr{exprDollar[1].PipelineStage}
		}
	case 57:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:207
		{
			exprVAL.PipelineExpr = append(exprDollar[1].PipelineExpr, exprDollar[2].PipelineStage)
		}
	case 58:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:211
		{
			exprVAL.PipelineStage = exprDollar[1].LineFilters
		}
	case 59:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:212
		{
			exprVAL.PipelineStage = exprDollar[2].LabelParser
		}
	case 60:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:213
		{
			exprVAL.PipelineStage = &labelFilterExpr{LabelFilterer: exprDollar[2].LabelFilter}
		}
	case 61:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:214
		{
			exprVAL.PipelineStage = exprDollar[2].LineFormatExpr
		}
	case 62:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:215
		{
			exprVAL.PipelineStage = exprDollar[2].LabelFormatExpr
		}
	case 63:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:219
		{
			exprVAL.LineFilters = newLineFilterExpr(nil, exprDollar[1].Filter, exprDollar[2].str)
		}
	case 64:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:220
		{
			exprVAL.LineFilters = newLineFilterExpr(exprDollar[1].LineFilters, exprDollar[2].Filter, exprDollar[3].str)
		}
	case 65:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:223
		{
			exprVAL.LabelParser = newLabelParserExpr(OpParserTypeJSON, "")
		}
	case 66:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:224
		{
			exprVAL.LabelParser = newLabelParserExpr(OpParserTypeLogfmt, "")
		}
	case 67:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:225
		{
			exprVAL.LabelParser = newLabelParserExpr(OpParserTypeRegexp, exprDollar[2].str)
		}
	case 68:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:228
		{
			exprVAL.LineFormatExpr = newLineFmtExpr(exprDollar[2].str)
		}
	case 69:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:231
		{
			exprVAL.LabelFormat = log.NewRenameLabelFmt(exprDollar[1].str, exprDollar[3].str)
		}
	case 70:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:232
		{
			exprVAL.LabelFormat = log.NewTemplateLabelFmt(exprDollar[1].str, exprDollar[3].str)
		}
	case 71:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:236
		{
			exprVAL.LabelsFormat = []log.LabelFmt{exprDollar[1].LabelFormat}
		}
	case 72:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:237
		{
			exprVAL.LabelsFormat = append(exprDollar[1].LabelsFormat, exprDollar[3].LabelFormat)
		}
	case 74:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:241
		{
			exprVAL.LabelFormatExpr = newLabelFmtExpr(exprDollar[2].LabelsFormat)
		}
	case 75:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:244
		{
			exprVAL.LabelFilter = log.NewStringLabelFilter(exprDollar[1].Matcher)
		}
	case 76:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:245
		{
			exprVAL.LabelFilter = exprDollar[1].UnitFilter
		}
	case 77:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:246
		{
			exprVAL.LabelFilter = exprDollar[1].NumberFilter
		}
	case 78:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:247
		{
			exprVAL.LabelFilter = exprDollar[2].LabelFilter
		}
	case 79:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:248
		{
			exprVAL.LabelFilter = log.NewAndLabelFilter(exprDollar[1].LabelFilter, exprDollar[2].LabelFilter)
		}
	case 80:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:249
		{
			exprVAL.LabelFilter = log.NewAndLabelFilter(exprDollar[1].LabelFilter, exprDollar[3].LabelFilter)
		}
	case 81:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:250
		{
			exprVAL.LabelFilter = log.NewAndLabelFilter(exprDollar[1].LabelFilter, exprDollar[3].LabelFilter)
		}
	case 82:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:251
		{
			exprVAL.LabelFilter = log.NewOrLabelFilter(exprDollar[1].LabelFilter, exprDollar[3].LabelFilter)
		}
	case 83:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:255
		{
			exprVAL.UnitFilter = exprDollar[1].DurationFilter
		}
	case 84:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:256
		{
			exprVAL.UnitFilter = exprDollar[1].BytesFilter
		}
	case 85:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:259
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterGreaterThan, exprDollar[1].str, exprDollar[3].duration)
		}
	case 86:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:260
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterGreaterThanOrEqual, exprDollar[1].str, exprDollar[3].duration)
		}
	case 87:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:261
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterLesserThan, exprDollar[1].str, exprDollar[3].duration)
		}
	case 88:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:262
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterLesserThanOrEqual, exprDollar[1].str, exprDollar[3].duration)
		}
	case 89:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:263
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterNotEqual, exprDollar[1].str, exprDollar[3].duration)
		}
	case 90:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:264
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterEqual, exprDollar[1].str, exprDollar[3].duration)
		}
	case 91:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:265
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterEqual, exprDollar[1].str, exprDollar[3].duration)
		}
	case 92:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:269
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterGreaterThan, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 93:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:270
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterGreaterThanOrEqual, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 94:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:271
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterLesserThan, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 95:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:272
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterLesserThanOrEqual, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 96:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:273
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterNotEqual, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 97:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:274
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterEqual, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 98:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:275
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterEqual, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 99:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:279
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterGreaterThan, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 100:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:280
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterGreaterThanOrEqual, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 101:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:281
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterLesserThan, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 102:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:282
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterLesserThanOrEqual, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 103:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:283
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterNotEqual, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 104:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:284
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterEqual, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 105:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:285
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterEqual, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 106:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:291
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("or", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 107:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:292
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("and", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 108:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:293
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("unless", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 109:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:294
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("+", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 110:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:295
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("-", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 111:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:296
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("*", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 112:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:297
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("/", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 113:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:298
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("%", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 114:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:299
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("^", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 115:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:300
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("==", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 116:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:301
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("!=", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 117:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:302
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr(">", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 118:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:303
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr(">=", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 119:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:304
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("<", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 120:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:305
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("<=", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 121:
		exprDollar = exprS[exprpt-0 : exprpt+1]
//line pkg/logql/expr.y:309
		{
			exprVAL.BinOpModifier = BinOpOptions{}
		}
	case 122:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:310
		{
			exprVAL.BinOpModifier = BinOpOptions{ReturnBool: true}
		}
	case 123:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:314
		{
			exprVAL.LiteralExpr = mustNewLiteralExpr(exprDollar[1].str, false)
		}
	case 124:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:315
		{
			exprVAL.LiteralExpr = mustNewLiteralExpr(exprDollar[2].str, false)
		}
	case 125:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/expr.y:316
		{
			exprVAL.LiteralExpr = mustNewLiteralExpr(exprDollar[2].str, true)
		}
	case 126:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:320
		{
			exprVAL.VectorOp = OpTypeSum
		}
	case 127:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:321
		{
			exprVAL.VectorOp = OpTypeAvg
		}
	case 128:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:322
		{
			exprVAL.VectorOp = OpTypeCount
		}
	case 129:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:323
		{
			exprVAL.VectorOp = OpTypeMax
		}
	case 130:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:324
		{
			exprVAL.VectorOp = OpTypeMin
		}
	case 131:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:325
		{
			exprVAL.VectorOp = OpTypeStddev
		}
	case 132:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:326
		{
			exprVAL.VectorOp = OpTypeStdvar
		}
	case 133:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:327
		{
			exprVAL.VectorOp = OpTypeBottomK
		}
	case 134:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:328
		{
			exprVAL.VectorOp = OpTypeTopK
		}
	case 135:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:332
		{
			exprVAL.RangeOp = OpRangeTypeCount
		}
	case 136:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:333
		{
			exprVAL.RangeOp = OpRangeTypeRate
		}
	case 137:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:334
		{
			exprVAL.RangeOp = OpRangeTypeBytes
		}
	case 138:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:335
		{
			exprVAL.RangeOp = OpRangeTypeBytesRate
		}
	case 139:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:336
		{
			exprVAL.RangeOp = OpRangeTypeAvg
		}
	case 140:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:337
		{
			exprVAL.RangeOp = OpRangeTypeSum
		}
	case 141:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:338
		{
			exprVAL.RangeOp = OpRangeTypeMin
		}
	case 142:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:339
		{
			exprVAL.RangeOp = OpRangeTypeMax
		}
	case 143:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:340
		{
			exprVAL.RangeOp = OpRangeTypeStdvar
		}
	case 144:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:341
		{
			exprVAL.RangeOp = OpRangeTypeStddev
		}
	case 145:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:342
		{
			exprVAL.RangeOp = OpRangeTypeQuantile
		}
	case 146:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:343
		{
			exprVAL.RangeOp = OpRangeTypeAbsent
		}
	case 147:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/expr.y:348
		{
			exprVAL.Labels = []string{exprDollar[1].str}
		}
	case 148:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:349
		{
			exprVAL.Labels = append(exprDollar[1].Labels, exprDollar[3].str)
		}
	case 149:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:353
		{
			exprVAL.Grouping = &grouping{without: false, groups: exprDollar[3].Labels}
		}
	case 150:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/expr.y:354
		{
			exprVAL.Grouping = &grouping{without: true, groups: exprDollar[3].Labels}
		}
	case 151:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:355
		{
			exprVAL.Grouping = &grouping{without: false, groups: nil}
		}
	case 152:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/expr.y:356
		{
			exprVAL.Grouping = &grouping{without: true, groups: nil}
		}
	}
	goto exprstack /* stack new state and value */
}
