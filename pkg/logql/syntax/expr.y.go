// Code generated by goyacc -p expr -o pkg/logql/syntax/expr.y.go pkg/logql/syntax/expr.y. DO NOT EDIT.

//line pkg/logql/syntax/expr.y:2
package syntax

import __yyfmt__ "fmt"

//line pkg/logql/syntax/expr.y:2
import (
	"github.com/grafana/loki/pkg/logql/log"
	"github.com/prometheus/prometheus/model/labels"
	"time"
)

//line pkg/logql/syntax/expr.y:12
type exprSymType struct {
	yys                   int
	Expr                  Expr
	Filter                labels.MatchType
	Grouping              *Grouping
	Labels                []string
	LogExpr               LogSelectorExpr
	LogRangeExpr          *LogRange
	Matcher               *labels.Matcher
	Matchers              []*labels.Matcher
	RangeAggregationExpr  SampleExpr
	HistogramExpr         SampleExpr
	BucketExpr            *BucketExpr
	Buckets               []float64
	HistogramOp           string
	BucketOp              string
	RangeOp               string
	ConvOp                string
	Selector              []*labels.Matcher
	VectorAggregationExpr SampleExpr
	VectorExpr            *VectorExpr
	Vector                string
	MetricExpr            SampleExpr
	VectorOp              string
	FilterOp              string
	BinOpExpr             SampleExpr
	LabelReplaceExpr      SampleExpr
	binOp                 string
	bytes                 uint64
	str                   string
	duration              time.Duration
	LiteralExpr           *LiteralExpr
	BinOpModifier         *BinOpOptions
	BoolModifier          *BinOpOptions
	OnOrIgnoringModifier  *BinOpOptions
	LabelParser           *LabelParserExpr
	LineFilters           *LineFilterExpr
	LineFilter            *LineFilterExpr
	PipelineExpr          MultiStageExpr
	PipelineStage         StageExpr
	BytesFilter           log.LabelFilterer
	NumberFilter          log.LabelFilterer
	DurationFilter        log.LabelFilterer
	LabelFilter           log.LabelFilterer
	UnitFilter            log.LabelFilterer
	IPLabelFilter         log.LabelFilterer
	LineFormatExpr        *LineFmtExpr
	LabelFormatExpr       *LabelFmtExpr
	LabelFormat           log.LabelFmt
	LabelsFormat          []log.LabelFmt
	JSONExpressionParser  *JSONExpressionParser
	JSONExpression        log.JSONExpression
	JSONExpressionList    []log.JSONExpression
	UnwrapExpr            *UnwrapExpr
	DecolorizeExpr        *DecolorizeExpr
	OffsetExpr            *OffsetExpr
}

const BYTES = 57346
const IDENTIFIER = 57347
const STRING = 57348
const NUMBER = 57349
const DURATION = 57350
const RANGE = 57351
const MATCHERS = 57352
const LABELS = 57353
const EQ = 57354
const RE = 57355
const NRE = 57356
const OPEN_BRACE = 57357
const CLOSE_BRACE = 57358
const OPEN_BRACKET = 57359
const CLOSE_BRACKET = 57360
const COMMA = 57361
const DOT = 57362
const PIPE_MATCH = 57363
const PIPE_EXACT = 57364
const OPEN_PARENTHESIS = 57365
const CLOSE_PARENTHESIS = 57366
const BY = 57367
const WITHOUT = 57368
const COUNT_OVER_TIME = 57369
const RATE = 57370
const RATE_COUNTER = 57371
const SUM = 57372
const AVG = 57373
const MAX = 57374
const MIN = 57375
const COUNT = 57376
const STDDEV = 57377
const STDVAR = 57378
const BOTTOMK = 57379
const TOPK = 57380
const BYTES_OVER_TIME = 57381
const BYTES_RATE = 57382
const BOOL = 57383
const JSON = 57384
const REGEXP = 57385
const LOGFMT = 57386
const PIPE = 57387
const LINE_FMT = 57388
const LABEL_FMT = 57389
const UNWRAP = 57390
const AVG_OVER_TIME = 57391
const SUM_OVER_TIME = 57392
const MIN_OVER_TIME = 57393
const MAX_OVER_TIME = 57394
const STDVAR_OVER_TIME = 57395
const STDDEV_OVER_TIME = 57396
const QUANTILE_OVER_TIME = 57397
const BYTES_CONV = 57398
const DURATION_CONV = 57399
const DURATION_SECONDS_CONV = 57400
const FIRST_OVER_TIME = 57401
const LAST_OVER_TIME = 57402
const ABSENT_OVER_TIME = 57403
const VECTOR = 57404
const LABEL_REPLACE = 57405
const UNPACK = 57406
const OFFSET = 57407
const PATTERN = 57408
const IP = 57409
const ON = 57410
const IGNORING = 57411
const GROUP_LEFT = 57412
const GROUP_RIGHT = 57413
const DECOLORIZE = 57414
const BUCKETS_OVER_TIME = 57415
const LINEAR_BUCKETS = 57416
const EXPONENTIAL_BUCKETS = 57417
const OR = 57418
const AND = 57419
const UNLESS = 57420
const CMP_EQ = 57421
const NEQ = 57422
const LT = 57423
const LTE = 57424
const GT = 57425
const GTE = 57426
const ADD = 57427
const SUB = 57428
const MUL = 57429
const DIV = 57430
const MOD = 57431
const POW = 57432

var exprToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"BYTES",
	"IDENTIFIER",
	"STRING",
	"NUMBER",
	"DURATION",
	"RANGE",
	"MATCHERS",
	"LABELS",
	"EQ",
	"RE",
	"NRE",
	"OPEN_BRACE",
	"CLOSE_BRACE",
	"OPEN_BRACKET",
	"CLOSE_BRACKET",
	"COMMA",
	"DOT",
	"PIPE_MATCH",
	"PIPE_EXACT",
	"OPEN_PARENTHESIS",
	"CLOSE_PARENTHESIS",
	"BY",
	"WITHOUT",
	"COUNT_OVER_TIME",
	"RATE",
	"RATE_COUNTER",
	"SUM",
	"AVG",
	"MAX",
	"MIN",
	"COUNT",
	"STDDEV",
	"STDVAR",
	"BOTTOMK",
	"TOPK",
	"BYTES_OVER_TIME",
	"BYTES_RATE",
	"BOOL",
	"JSON",
	"REGEXP",
	"LOGFMT",
	"PIPE",
	"LINE_FMT",
	"LABEL_FMT",
	"UNWRAP",
	"AVG_OVER_TIME",
	"SUM_OVER_TIME",
	"MIN_OVER_TIME",
	"MAX_OVER_TIME",
	"STDVAR_OVER_TIME",
	"STDDEV_OVER_TIME",
	"QUANTILE_OVER_TIME",
	"BYTES_CONV",
	"DURATION_CONV",
	"DURATION_SECONDS_CONV",
	"FIRST_OVER_TIME",
	"LAST_OVER_TIME",
	"ABSENT_OVER_TIME",
	"VECTOR",
	"LABEL_REPLACE",
	"UNPACK",
	"OFFSET",
	"PATTERN",
	"IP",
	"ON",
	"IGNORING",
	"GROUP_LEFT",
	"GROUP_RIGHT",
	"DECOLORIZE",
	"BUCKETS_OVER_TIME",
	"LINEAR_BUCKETS",
	"EXPONENTIAL_BUCKETS",
	"OR",
	"AND",
	"UNLESS",
	"CMP_EQ",
	"NEQ",
	"LT",
	"LTE",
	"GT",
	"GTE",
	"ADD",
	"SUB",
	"MUL",
	"DIV",
	"MOD",
	"POW",
}

var exprStatenames = [...]string{}

const exprEofCode = 1
const exprErrCode = 2
const exprInitialStackSize = 16

//line pkg/logql/syntax/expr.y:542

//line yacctab:1
var exprExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const exprPrivate = 57344

const exprLast = 574

var exprAct = [...]int16{
	269, 211, 83, 4, 192, 65, 180, 5, 185, 220,
	74, 122, 17, 64, 76, 2, 57, 145, 164, 165,
	14, 54, 55, 56, 57, 157, 79, 133, 6, 272,
	162, 163, 23, 24, 25, 38, 39, 41, 42, 40,
	43, 44, 45, 46, 26, 27, 52, 53, 54, 55,
	56, 57, 277, 274, 28, 29, 30, 31, 32, 33,
	34, 141, 143, 144, 35, 36, 37, 47, 20, 249,
	109, 204, 250, 248, 113, 348, 159, 160, 48, 94,
	84, 85, 68, 373, 371, 348, 149, 207, 135, 147,
	18, 19, 154, 58, 59, 62, 63, 60, 61, 52,
	53, 54, 55, 56, 57, 272, 161, 320, 222, 333,
	166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
	176, 177, 178, 179, 194, 143, 144, 300, 82, 142,
	84, 85, 247, 189, 49, 50, 51, 58, 59, 62,
	63, 60, 61, 52, 53, 54, 55, 56, 57, 110,
	366, 319, 202, 358, 357, 218, 214, 72, 322, 323,
	324, 212, 273, 223, 70, 71, 215, 50, 51, 58,
	59, 62, 63, 60, 61, 52, 53, 54, 55, 56,
	57, 353, 329, 310, 284, 207, 130, 274, 235, 236,
	237, 200, 195, 198, 199, 196, 197, 275, 274, 226,
	182, 286, 72, 286, 126, 240, 339, 311, 338, 70,
	71, 267, 270, 222, 276, 216, 279, 147, 109, 282,
	113, 283, 137, 73, 271, 275, 286, 268, 280, 136,
	72, 337, 298, 213, 130, 147, 130, 70, 71, 370,
	327, 294, 296, 299, 301, 290, 304, 302, 182, 345,
	182, 210, 126, 207, 126, 286, 72, 183, 181, 222,
	336, 213, 72, 70, 71, 222, 278, 210, 73, 70,
	71, 312, 72, 314, 316, 281, 318, 109, 297, 70,
	71, 317, 328, 313, 295, 222, 109, 213, 309, 330,
	72, 222, 72, 213, 319, 308, 73, 70, 71, 70,
	71, 273, 292, 213, 224, 183, 181, 291, 181, 351,
	221, 130, 286, 272, 342, 343, 326, 288, 207, 109,
	344, 213, 73, 67, 130, 182, 346, 347, 73, 126,
	274, 245, 352, 203, 246, 244, 355, 274, 73, 286,
	208, 146, 126, 315, 287, 219, 14, 234, 360, 14,
	361, 362, 233, 14, 148, 232, 73, 148, 73, 231,
	230, 6, 201, 153, 367, 23, 24, 25, 38, 39,
	41, 42, 40, 43, 44, 45, 46, 26, 27, 152,
	151, 90, 89, 88, 81, 365, 364, 28, 29, 30,
	31, 32, 33, 34, 243, 139, 335, 35, 36, 37,
	47, 20, 332, 285, 241, 150, 238, 227, 225, 138,
	217, 48, 140, 14, 209, 242, 239, 363, 350, 349,
	325, 6, 369, 18, 19, 23, 24, 25, 38, 39,
	41, 42, 40, 43, 44, 45, 46, 26, 27, 264,
	356, 334, 265, 263, 80, 306, 307, 28, 29, 30,
	31, 32, 33, 34, 130, 78, 372, 35, 36, 37,
	47, 20, 293, 130, 261, 368, 258, 262, 260, 259,
	257, 48, 126, 255, 229, 252, 256, 254, 253, 251,
	91, 126, 155, 18, 19, 87, 86, 3, 354, 341,
	340, 117, 119, 118, 75, 127, 129, 277, 303, 289,
	117, 119, 118, 305, 127, 129, 193, 123, 266, 206,
	205, 204, 203, 120, 190, 121, 188, 187, 359, 331,
	186, 128, 120, 80, 121, 193, 124, 184, 112, 191,
	128, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 116, 115, 114, 66, 131,
	125, 132, 111, 93, 92, 11, 10, 9, 134, 21,
	12, 16, 8, 321, 15, 158, 22, 7, 156, 13,
	228, 77, 69, 1,
}

var exprPact = [...]int16{
	5, -1000, 58, -1000, -1000, 278, 5, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 439, 361, 105, -1000, 479, 478,
	360, 359, 358, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 38,
	38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
	38, 38, 38, 38, 278, -1000, 143, 458, -1000, 21,
	-1000, -1000, -1000, -1000, 205, 198, 58, 393, -1000, -1000,
	49, 334, 398, 357, 356, 340, -1000, -1000, 5, 475,
	2, 5, -38, -52, -1000, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, -1000,
	-1000, -1000, -1000, 229, -1000, -1000, -1000, 515, -1000, 511,
	-1000, 510, -1000, -1000, -1000, -1000, 319, 508, -1000, 520,
	112, -1000, -1000, -1000, 339, -1000, -1000, -1000, -1000, -1000,
	518, 506, 505, 504, 503, 316, 395, 258, 331, 191,
	391, 338, 286, 280, 389, 175, 388, 467, 337, -1000,
	-1000, 90, 336, 332, 329, 324, 14, 14, -66, -66,
	-74, -74, -74, -74, -39, -39, -39, -39, -39, -39,
	229, 319, 319, 319, 387, -1000, 404, -1000, -1000, 181,
	-1000, 385, -1000, 403, 327, 65, 471, 469, 462, 460,
	435, 502, -1000, -1000, -1000, -1000, -1000, -1000, 55, 331,
	248, 153, 188, 449, 242, 251, 55, 5, 160, 384,
	320, -1000, -1000, 293, -1000, 493, -1000, 331, 283, -1000,
	455, 260, 254, 208, 103, 306, 229, 231, 515, 492,
	-1000, 501, 440, 272, -1000, -1000, -1000, 265, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 159, -1000, 183, 276,
	8, 276, 335, -36, 319, -36, 142, 102, 411, 292,
	216, -1000, -1000, 158, -1000, 5, 514, -1000, -1000, 383,
	85, -1000, 434, 377, 236, -1000, 207, -1000, -1000, 184,
	-1000, 182, -1000, -1000, -1000, -1000, -1000, -1000, 484, 483,
	-1000, 55, 8, 276, 8, -1000, -1000, 229, -1000, -36,
	-1000, 226, -1000, -1000, -1000, 40, 410, 409, 285, 55,
	157, -1000, 482, 55, -1000, 433, -1000, -1000, -1000, -1000,
	130, 129, -1000, 8, -1000, 513, 30, 8, 4, -36,
	-36, 408, -1000, -1000, 367, -1000, 366, -1000, -1000, 126,
	8, -1000, -1000, -36, 459, 415, -1000, -1000, 220, 60,
	450, -1000, 59, -1000,
}

var exprPgo = [...]int16{
	0, 573, 14, 572, 2, 9, 487, 3, 17, 11,
	571, 570, 569, 568, 567, 566, 565, 564, 563, 7,
	562, 561, 560, 559, 558, 557, 556, 555, 480, 554,
	553, 552, 13, 5, 551, 550, 549, 6, 548, 82,
	547, 546, 545, 4, 529, 528, 8, 527, 1, 526,
	507, 0,
}

var exprR1 = [...]int8{
	0, 1, 2, 2, 7, 7, 7, 7, 7, 7,
	7, 7, 12, 12, 15, 16, 16, 13, 13, 11,
	11, 6, 6, 6, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
	48, 48, 48, 18, 18, 18, 14, 14, 14, 14,
	20, 20, 20, 20, 20, 20, 27, 3, 3, 3,
	3, 19, 19, 19, 10, 10, 9, 9, 9, 9,
	32, 32, 33, 33, 33, 33, 33, 33, 33, 24,
	39, 39, 38, 38, 31, 31, 31, 31, 31, 45,
	40, 41, 43, 43, 44, 44, 44, 42, 37, 37,
	37, 37, 37, 37, 37, 37, 37, 46, 46, 47,
	47, 50, 50, 49, 49, 36, 36, 36, 36, 36,
	36, 36, 34, 34, 34, 34, 34, 34, 34, 35,
	35, 35, 35, 35, 35, 35, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 29, 29, 30, 30, 30, 30, 28, 28, 28,
	28, 28, 28, 28, 28, 26, 26, 26, 22, 23,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 51, 5, 5, 4, 4, 4,
	4,
}

var exprR2 = [...]int8{
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 6, 7, 1, 1, 1, 3, 8, 1,
	3, 1, 2, 3, 2, 3, 4, 5, 3, 4,
	5, 6, 3, 4, 5, 6, 3, 4, 5, 6,
	4, 5, 6, 7, 3, 4, 4, 5, 3, 2,
	3, 6, 3, 1, 1, 1, 4, 6, 5, 7,
	4, 5, 5, 6, 7, 7, 12, 1, 1, 1,
	1, 3, 3, 2, 1, 3, 3, 3, 3, 3,
	1, 2, 1, 2, 2, 2, 2, 2, 2, 1,
	2, 5, 1, 2, 1, 1, 2, 1, 2, 2,
	2, 1, 3, 3, 1, 3, 3, 2, 1, 1,
	1, 1, 3, 2, 3, 3, 3, 3, 1, 1,
	3, 6, 6, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 0, 1, 5, 4, 5, 4, 1, 1, 2,
	4, 5, 2, 4, 5, 1, 2, 2, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 3, 4, 4, 3,
	3,
}

var exprChk = [...]int16{
	-1000, -1, -2, -6, -7, -19, 23, -14, -20, -25,
	-26, -27, -22, -12, 15, -17, -21, 7, 85, 86,
	63, -23, -15, 27, 28, 29, 39, 40, 49, 50,
	51, 52, 53, 54, 55, 59, 60, 61, 30, 31,
	34, 32, 33, 35, 36, 37, 38, 62, 73, 76,
	77, 78, 85, 86, 87, 88, 89, 90, 79, 80,
	83, 84, 81, 82, -32, -33, -38, 45, -39, -3,
	21, 22, 14, 80, -7, -6, -2, -10, 16, -9,
	5, 23, 23, -4, 25, 26, 7, 7, 23, 23,
	23, -28, -29, -30, 41, -28, -28, -28, -28, -28,
	-28, -28, -28, -28, -28, -28, -28, -28, -28, -33,
	-39, -31, -45, -37, -40, -41, -42, 42, 44, 43,
	64, 66, -9, -50, -49, -35, 23, 46, 72, 47,
	5, -36, -34, 6, -24, 67, 24, 24, 16, 2,
	19, 12, 80, 13, 14, -8, 7, -19, 23, -7,
	7, 23, 23, 23, -7, 7, -13, 23, -16, 74,
	75, -2, 68, 69, 70, 71, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-37, 77, 19, 76, -47, -46, 5, 6, 6, -37,
	6, -44, -43, 5, 12, 80, 83, 84, 81, 82,
	79, 23, -9, 6, 6, 6, 6, 2, 24, 19,
	9, -48, -32, 45, -19, -8, 24, 19, -7, 7,
	-5, 24, 5, -5, 24, 19, 24, 19, -11, 7,
	23, 23, 23, 23, 23, -37, -37, -37, 19, 12,
	24, 19, 12, 67, 8, 4, 7, 67, 8, 4,
	7, 8, 4, 7, 8, 4, 7, 8, 4, 7,
	8, 4, 7, 8, 4, 7, 6, -4, -8, -51,
	-48, -32, 65, 9, 45, 9, -48, 48, 24, -48,
	-32, 24, -4, -7, 24, 19, 19, 24, 24, 6,
	-8, 24, 19, 7, -5, 24, -5, 24, 24, -5,
	24, -5, -46, 6, -43, 2, 5, 6, 23, 23,
	24, 24, -48, -32, -48, 8, -51, -37, -51, 9,
	5, -18, 56, 57, 58, 9, 24, 24, -48, 24,
	-7, 5, 19, 24, 7, 19, 24, 24, 24, 24,
	6, 6, -4, -48, -51, 23, -51, -48, 45, 9,
	9, 24, -4, 24, 6, -4, 7, 24, 24, 5,
	-48, -51, -51, 9, 19, 19, 24, -51, 6, 7,
	19, 24, 6, 24,
}

var exprDef = [...]int16{
	0, -2, 1, 2, 3, 21, 0, 4, 5, 6,
	7, 8, 9, 11, 0, 0, 0, 175, 0, 0,
	0, 0, 0, 189, 190, 191, 192, 193, 194, 195,
	196, 197, 198, 199, 200, 201, 202, 203, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 179, 14, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 22, 80, 82, 0, 92, 0,
	67, 68, 69, 70, 3, 2, 0, 0, 73, 74,
	0, 0, 0, 0, 0, 0, 176, 177, 0, 0,
	0, 0, 167, 168, 162, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	93, 83, 84, 85, 86, 87, 88, 94, 95, 0,
	97, 0, 108, 109, 110, 111, 0, 0, 101, 0,
	0, 123, 124, 90, 0, 89, 10, 23, 71, 72,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
	175, 0, 0, 0, 3, 0, 0, 0, 0, 15,
	16, 146, 0, 0, 169, 172, 147, 148, 149, 150,
	151, 152, 153, 154, 155, 156, 157, 158, 159, 160,
	113, 0, 0, 0, 99, 119, 118, 96, 98, 0,
	100, 107, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 76, 77, 78, 79, 49, 56, 0,
	24, 0, 0, 0, 0, 0, 60, 0, 3, 175,
	0, 209, 205, 0, 210, 0, 178, 0, 0, 19,
	0, 0, 0, 0, 0, 114, 115, 116, 0, 0,
	112, 0, 0, 0, 130, 137, 144, 0, 129, 136,
	143, 125, 132, 139, 126, 133, 140, 127, 134, 141,
	128, 135, 142, 131, 138, 145, 0, 58, 0, 25,
	28, 44, 0, 32, 0, 36, 0, 0, 0, 0,
	0, 48, 62, 3, 61, 0, 0, 207, 208, 0,
	0, 17, 0, 0, 0, 164, 0, 166, 170, 0,
	173, 0, 120, 117, 105, 106, 102, 103, 0, 0,
	91, 57, 29, 45, 46, 204, 33, 52, 37, 40,
	50, 0, 53, 54, 55, 26, 0, 0, 0, 63,
	3, 206, 0, 12, 20, 0, 163, 165, 171, 174,
	0, 0, 59, 47, 41, 0, 27, 30, 0, 34,
	38, 0, 64, 65, 0, 13, 0, 121, 122, 0,
	31, 35, 39, 42, 0, 0, 51, 43, 0, 0,
	0, 18, 0, 66,
}

var exprTok1 = [...]int8{
	1,
}

var exprTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90,
}

var exprTok3 = [...]int8{
	0,
}

var exprErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	exprDebug        = 0
	exprErrorVerbose = false
)

type exprLexer interface {
	Lex(lval *exprSymType) int
	Error(s string)
}

type exprParser interface {
	Parse(exprLexer) int
	Lookahead() int
}

type exprParserImpl struct {
	lval  exprSymType
	stack [exprInitialStackSize]exprSymType
	char  int
}

func (p *exprParserImpl) Lookahead() int {
	return p.char
}

func exprNewParser() exprParser {
	return &exprParserImpl{}
}

const exprFlag = -1000

func exprTokname(c int) string {
	if c >= 1 && c-1 < len(exprToknames) {
		if exprToknames[c-1] != "" {
			return exprToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func exprStatname(s int) string {
	if s >= 0 && s < len(exprStatenames) {
		if exprStatenames[s] != "" {
			return exprStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func exprErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !exprErrorVerbose {
		return "syntax error"
	}

	for _, e := range exprErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + exprTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(exprPact[state])
	for tok := TOKSTART; tok-1 < len(exprToknames); tok++ {
		if n := base + tok; n >= 0 && n < exprLast && int(exprChk[int(exprAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if exprDef[state] == -2 {
		i := 0
		for exprExca[i] != -1 || int(exprExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; exprExca[i] >= 0; i += 2 {
			tok := int(exprExca[i])
			if tok < TOKSTART || exprExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if exprExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += exprTokname(tok)
	}
	return res
}

func exprlex1(lex exprLexer, lval *exprSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(exprTok1[0])
		goto out
	}
	if char < len(exprTok1) {
		token = int(exprTok1[char])
		goto out
	}
	if char >= exprPrivate {
		if char < exprPrivate+len(exprTok2) {
			token = int(exprTok2[char-exprPrivate])
			goto out
		}
	}
	for i := 0; i < len(exprTok3); i += 2 {
		token = int(exprTok3[i+0])
		if token == char {
			token = int(exprTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(exprTok2[1]) /* unknown char */
	}
	if exprDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", exprTokname(token), uint(char))
	}
	return char, token
}

func exprParse(exprlex exprLexer) int {
	return exprNewParser().Parse(exprlex)
}

func (exprrcvr *exprParserImpl) Parse(exprlex exprLexer) int {
	var exprn int
	var exprVAL exprSymType
	var exprDollar []exprSymType
	_ = exprDollar // silence set and not used
	exprS := exprrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	exprstate := 0
	exprrcvr.char = -1
	exprtoken := -1 // exprrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		exprstate = -1
		exprrcvr.char = -1
		exprtoken = -1
	}()
	exprp := -1
	goto exprstack

ret0:
	return 0

ret1:
	return 1

exprstack:
	/* put a state and value onto the stack */
	if exprDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", exprTokname(exprtoken), exprStatname(exprstate))
	}

	exprp++
	if exprp >= len(exprS) {
		nyys := make([]exprSymType, len(exprS)*2)
		copy(nyys, exprS)
		exprS = nyys
	}
	exprS[exprp] = exprVAL
	exprS[exprp].yys = exprstate

exprnewstate:
	exprn = int(exprPact[exprstate])
	if exprn <= exprFlag {
		goto exprdefault /* simple state */
	}
	if exprrcvr.char < 0 {
		exprrcvr.char, exprtoken = exprlex1(exprlex, &exprrcvr.lval)
	}
	exprn += exprtoken
	if exprn < 0 || exprn >= exprLast {
		goto exprdefault
	}
	exprn = int(exprAct[exprn])
	if int(exprChk[exprn]) == exprtoken { /* valid shift */
		exprrcvr.char = -1
		exprtoken = -1
		exprVAL = exprrcvr.lval
		exprstate = exprn
		if Errflag > 0 {
			Errflag--
		}
		goto exprstack
	}

exprdefault:
	/* default state action */
	exprn = int(exprDef[exprstate])
	if exprn == -2 {
		if exprrcvr.char < 0 {
			exprrcvr.char, exprtoken = exprlex1(exprlex, &exprrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if exprExca[xi+0] == -1 && int(exprExca[xi+1]) == exprstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			exprn = int(exprExca[xi+0])
			if exprn < 0 || exprn == exprtoken {
				break
			}
		}
		exprn = int(exprExca[xi+1])
		if exprn < 0 {
			goto ret0
		}
	}
	if exprn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			exprlex.Error(exprErrorMessage(exprstate, exprtoken))
			Nerrs++
			if exprDebug >= 1 {
				__yyfmt__.Printf("%s", exprStatname(exprstate))
				__yyfmt__.Printf(" saw %s\n", exprTokname(exprtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for exprp >= 0 {
				exprn = int(exprPact[exprS[exprp].yys]) + exprErrCode
				if exprn >= 0 && exprn < exprLast {
					exprstate = int(exprAct[exprn]) /* simulate a shift of "error" */
					if int(exprChk[exprstate]) == exprErrCode {
						goto exprstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if exprDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", exprS[exprp].yys)
				}
				exprp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if exprDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", exprTokname(exprtoken))
			}
			if exprtoken == exprEofCode {
				goto ret1
			}
			exprrcvr.char = -1
			exprtoken = -1
			goto exprnewstate /* try again in the same state */
		}
	}

	/* reduction by production exprn */
	if exprDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", exprn, exprStatname(exprstate))
	}

	exprnt := exprn
	exprpt := exprp
	_ = exprpt // guard against "declared and not used"

	exprp -= int(exprR2[exprn])
	// exprp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if exprp+1 >= len(exprS) {
		nyys := make([]exprSymType, len(exprS)*2)
		copy(nyys, exprS)
		exprS = nyys
	}
	exprVAL = exprS[exprp+1]

	/* consult goto table to find next state */
	exprn = int(exprR1[exprn])
	exprg := int(exprPgo[exprn])
	exprj := exprg + exprS[exprp].yys + 1

	if exprj >= exprLast {
		exprstate = int(exprAct[exprg])
	} else {
		exprstate = int(exprAct[exprj])
		if int(exprChk[exprstate]) != -exprn {
			exprstate = int(exprAct[exprg])
		}
	}
	// dummy call; replaced with literal code
	switch exprnt {

	case 1:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:142
		{
			exprlex.(*parser).expr = exprDollar[1].Expr
		}
	case 2:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:145
		{
			exprVAL.Expr = exprDollar[1].LogExpr
		}
	case 3:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:146
		{
			exprVAL.Expr = exprDollar[1].MetricExpr
		}
	case 4:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:150
		{
			exprVAL.MetricExpr = exprDollar[1].RangeAggregationExpr
		}
	case 5:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:151
		{
			exprVAL.MetricExpr = exprDollar[1].VectorAggregationExpr
		}
	case 6:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:152
		{
			exprVAL.MetricExpr = exprDollar[1].BinOpExpr
		}
	case 7:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:153
		{
			exprVAL.MetricExpr = exprDollar[1].LiteralExpr
		}
	case 8:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:154
		{
			exprVAL.MetricExpr = exprDollar[1].LabelReplaceExpr
		}
	case 9:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:155
		{
			exprVAL.MetricExpr = exprDollar[1].VectorExpr
		}
	case 10:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:156
		{
			exprVAL.MetricExpr = exprDollar[2].MetricExpr
		}
	case 11:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:157
		{
			exprVAL.MetricExpr = exprDollar[1].HistogramExpr
		}
	case 12:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/syntax/expr.y:161
		{
			exprVAL.HistogramExpr = newHistogramExpr(exprDollar[5].LogRangeExpr, exprDollar[3].BucketExpr, nil)
		}
	case 13:
		exprDollar = exprS[exprpt-7 : exprpt+1]
//line pkg/logql/syntax/expr.y:162
		{
			exprVAL.HistogramExpr = newHistogramExpr(exprDollar[5].LogRangeExpr, exprDollar[3].BucketExpr, exprDollar[7].Grouping)
		}
	case 14:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:166
		{
			exprVAL.HistogramOp = OpRangeTypeHistogram
		}
	case 15:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:170
		{
			exprVAL.BucketOp = OpHistogramLinearBuckets
		}
	case 16:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:171
		{
			exprVAL.BucketOp = OpHistogramExponentialBuckets
		}
	case 17:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:175
		{
			exprVAL.BucketExpr = newBucketExpr("", 0, 0, 0, exprDollar[2].Buckets)
		}
	case 18:
		exprDollar = exprS[exprpt-8 : exprpt+1]
//line pkg/logql/syntax/expr.y:176
		{
			exprVAL.BucketExpr = newBucketExpr(exprDollar[1].BucketOp, mustNewFloat(exprDollar[3].str), mustNewFloat(exprDollar[5].str), mustNewInt(exprDollar[7].str), nil)
		}
	case 19:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:180
		{
			exprVAL.Buckets = []float64{mustNewFloat(exprDollar[1].str)}
		}
	case 20:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:181
		{
			exprVAL.Buckets = append(exprDollar[1].Buckets, mustNewFloat(exprDollar[3].str))
		}
	case 21:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:185
		{
			exprVAL.LogExpr = newMatcherExpr(exprDollar[1].Selector)
		}
	case 22:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:186
		{
			exprVAL.LogExpr = newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].PipelineExpr)
		}
	case 23:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:187
		{
			exprVAL.LogExpr = exprDollar[2].LogExpr
		}
	case 24:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:191
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].duration, nil, nil)
		}
	case 25:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:192
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].duration, nil, exprDollar[3].OffsetExpr)
		}
	case 26:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:193
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[4].duration, nil, nil)
		}
	case 27:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:194
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[4].duration, nil, exprDollar[5].OffsetExpr)
		}
	case 28:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:195
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].duration, exprDollar[3].UnwrapExpr, nil)
		}
	case 29:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:196
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].duration, exprDollar[4].UnwrapExpr, exprDollar[3].OffsetExpr)
		}
	case 30:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:197
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[4].duration, exprDollar[5].UnwrapExpr, nil)
		}
	case 31:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/syntax/expr.y:198
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[4].duration, exprDollar[6].UnwrapExpr, exprDollar[5].OffsetExpr)
		}
	case 32:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:199
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[3].duration, exprDollar[2].UnwrapExpr, nil)
		}
	case 33:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:200
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[3].duration, exprDollar[2].UnwrapExpr, exprDollar[4].OffsetExpr)
		}
	case 34:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:201
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[5].duration, exprDollar[3].UnwrapExpr, nil)
		}
	case 35:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/syntax/expr.y:202
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[5].duration, exprDollar[3].UnwrapExpr, exprDollar[6].OffsetExpr)
		}
	case 36:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:203
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].PipelineExpr), exprDollar[3].duration, nil, nil)
		}
	case 37:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:204
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].PipelineExpr), exprDollar[3].duration, nil, exprDollar[4].OffsetExpr)
		}
	case 38:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:205
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[2].Selector), exprDollar[3].PipelineExpr), exprDollar[5].duration, nil, nil)
		}
	case 39:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/syntax/expr.y:206
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[2].Selector), exprDollar[3].PipelineExpr), exprDollar[5].duration, nil, exprDollar[6].OffsetExpr)
		}
	case 40:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:207
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].PipelineExpr), exprDollar[4].duration, exprDollar[3].UnwrapExpr, nil)
		}
	case 41:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:208
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].PipelineExpr), exprDollar[4].duration, exprDollar[3].UnwrapExpr, exprDollar[5].OffsetExpr)
		}
	case 42:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/syntax/expr.y:209
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[2].Selector), exprDollar[3].PipelineExpr), exprDollar[6].duration, exprDollar[4].UnwrapExpr, nil)
		}
	case 43:
		exprDollar = exprS[exprpt-7 : exprpt+1]
//line pkg/logql/syntax/expr.y:210
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[2].Selector), exprDollar[3].PipelineExpr), exprDollar[6].duration, exprDollar[4].UnwrapExpr, exprDollar[7].OffsetExpr)
		}
	case 44:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:211
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[3].PipelineExpr), exprDollar[2].duration, nil, nil)
		}
	case 45:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:212
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[4].PipelineExpr), exprDollar[2].duration, nil, exprDollar[3].OffsetExpr)
		}
	case 46:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:213
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[3].PipelineExpr), exprDollar[2].duration, exprDollar[4].UnwrapExpr, nil)
		}
	case 47:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:214
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[4].PipelineExpr), exprDollar[2].duration, exprDollar[5].UnwrapExpr, exprDollar[3].OffsetExpr)
		}
	case 48:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:215
		{
			exprVAL.LogRangeExpr = exprDollar[2].LogRangeExpr
		}
	case 50:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:220
		{
			exprVAL.UnwrapExpr = newUnwrapExpr(exprDollar[3].str, "")
		}
	case 51:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/syntax/expr.y:221
		{
			exprVAL.UnwrapExpr = newUnwrapExpr(exprDollar[5].str, exprDollar[3].ConvOp)
		}
	case 52:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:222
		{
			exprVAL.UnwrapExpr = exprDollar[1].UnwrapExpr.addPostFilter(exprDollar[3].LabelFilter)
		}
	case 53:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:226
		{
			exprVAL.ConvOp = OpConvBytes
		}
	case 54:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:227
		{
			exprVAL.ConvOp = OpConvDuration
		}
	case 55:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:228
		{
			exprVAL.ConvOp = OpConvDurationSeconds
		}
	case 56:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:232
		{
			exprVAL.RangeAggregationExpr = newRangeAggregationExpr(exprDollar[3].LogRangeExpr, exprDollar[1].RangeOp, nil, nil)
		}
	case 57:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/syntax/expr.y:233
		{
			exprVAL.RangeAggregationExpr = newRangeAggregationExpr(exprDollar[5].LogRangeExpr, exprDollar[1].RangeOp, nil, &exprDollar[3].str)
		}
	case 58:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:234
		{
			exprVAL.RangeAggregationExpr = newRangeAggregationExpr(exprDollar[3].LogRangeExpr, exprDollar[1].RangeOp, exprDollar[5].Grouping, nil)
		}
	case 59:
		exprDollar = exprS[exprpt-7 : exprpt+1]
//line pkg/logql/syntax/expr.y:235
		{
			exprVAL.RangeAggregationExpr = newRangeAggregationExpr(exprDollar[5].LogRangeExpr, exprDollar[1].RangeOp, exprDollar[7].Grouping, &exprDollar[3].str)
		}
	case 60:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:240
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[3].MetricExpr, exprDollar[1].VectorOp, nil, nil)
		}
	case 61:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:241
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[4].MetricExpr, exprDollar[1].VectorOp, exprDollar[2].Grouping, nil)
		}
	case 62:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:242
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[3].MetricExpr, exprDollar[1].VectorOp, exprDollar[5].Grouping, nil)
		}
	case 63:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/syntax/expr.y:244
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[5].MetricExpr, exprDollar[1].VectorOp, nil, &exprDollar[3].str)
		}
	case 64:
		exprDollar = exprS[exprpt-7 : exprpt+1]
//line pkg/logql/syntax/expr.y:245
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[5].MetricExpr, exprDollar[1].VectorOp, exprDollar[7].Grouping, &exprDollar[3].str)
		}
	case 65:
		exprDollar = exprS[exprpt-7 : exprpt+1]
//line pkg/logql/syntax/expr.y:246
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[6].MetricExpr, exprDollar[1].VectorOp, exprDollar[2].Grouping, &exprDollar[4].str)
		}
	case 66:
		exprDollar = exprS[exprpt-12 : exprpt+1]
//line pkg/logql/syntax/expr.y:251
		{
			exprVAL.LabelReplaceExpr = mustNewLabelReplaceExpr(exprDollar[3].MetricExpr, exprDollar[5].str, exprDollar[7].str, exprDollar[9].str, exprDollar[11].str)
		}
	case 67:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:255
		{
			exprVAL.Filter = labels.MatchRegexp
		}
	case 68:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:256
		{
			exprVAL.Filter = labels.MatchEqual
		}
	case 69:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:257
		{
			exprVAL.Filter = labels.MatchNotRegexp
		}
	case 70:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:258
		{
			exprVAL.Filter = labels.MatchNotEqual
		}
	case 71:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:262
		{
			exprVAL.Selector = exprDollar[2].Matchers
		}
	case 72:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:263
		{
			exprVAL.Selector = exprDollar[2].Matchers
		}
	case 73:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:264
		{
		}
	case 74:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:268
		{
			exprVAL.Matchers = []*labels.Matcher{exprDollar[1].Matcher}
		}
	case 75:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:269
		{
			exprVAL.Matchers = append(exprDollar[1].Matchers, exprDollar[3].Matcher)
		}
	case 76:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:273
		{
			exprVAL.Matcher = mustNewMatcher(labels.MatchEqual, exprDollar[1].str, exprDollar[3].str)
		}
	case 77:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:274
		{
			exprVAL.Matcher = mustNewMatcher(labels.MatchNotEqual, exprDollar[1].str, exprDollar[3].str)
		}
	case 78:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:275
		{
			exprVAL.Matcher = mustNewMatcher(labels.MatchRegexp, exprDollar[1].str, exprDollar[3].str)
		}
	case 79:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:276
		{
			exprVAL.Matcher = mustNewMatcher(labels.MatchNotRegexp, exprDollar[1].str, exprDollar[3].str)
		}
	case 80:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:280
		{
			exprVAL.PipelineExpr = MultiStageExpr{exprDollar[1].PipelineStage}
		}
	case 81:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:281
		{
			exprVAL.PipelineExpr = append(exprDollar[1].PipelineExpr, exprDollar[2].PipelineStage)
		}
	case 82:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:285
		{
			exprVAL.PipelineStage = exprDollar[1].LineFilters
		}
	case 83:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:286
		{
			exprVAL.PipelineStage = exprDollar[2].LabelParser
		}
	case 84:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:287
		{
			exprVAL.PipelineStage = exprDollar[2].JSONExpressionParser
		}
	case 85:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:288
		{
			exprVAL.PipelineStage = &LabelFilterExpr{LabelFilterer: exprDollar[2].LabelFilter}
		}
	case 86:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:289
		{
			exprVAL.PipelineStage = exprDollar[2].LineFormatExpr
		}
	case 87:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:290
		{
			exprVAL.PipelineStage = exprDollar[2].DecolorizeExpr
		}
	case 88:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:291
		{
			exprVAL.PipelineStage = exprDollar[2].LabelFormatExpr
		}
	case 89:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:295
		{
			exprVAL.FilterOp = OpFilterIP
		}
	case 90:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:299
		{
			exprVAL.LineFilter = newLineFilterExpr(exprDollar[1].Filter, "", exprDollar[2].str)
		}
	case 91:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:300
		{
			exprVAL.LineFilter = newLineFilterExpr(exprDollar[1].Filter, exprDollar[2].FilterOp, exprDollar[4].str)
		}
	case 92:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:304
		{
			exprVAL.LineFilters = exprDollar[1].LineFilter
		}
	case 93:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:305
		{
			exprVAL.LineFilters = newNestedLineFilterExpr(exprDollar[1].LineFilters, exprDollar[2].LineFilter)
		}
	case 94:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:309
		{
			exprVAL.LabelParser = newLabelParserExpr(OpParserTypeJSON, "")
		}
	case 95:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:310
		{
			exprVAL.LabelParser = newLabelParserExpr(OpParserTypeLogfmt, "")
		}
	case 96:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:311
		{
			exprVAL.LabelParser = newLabelParserExpr(OpParserTypeRegexp, exprDollar[2].str)
		}
	case 97:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:312
		{
			exprVAL.LabelParser = newLabelParserExpr(OpParserTypeUnpack, "")
		}
	case 98:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:313
		{
			exprVAL.LabelParser = newLabelParserExpr(OpParserTypePattern, exprDollar[2].str)
		}
	case 99:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:317
		{
			exprVAL.JSONExpressionParser = newJSONExpressionParser(exprDollar[2].JSONExpressionList)
		}
	case 100:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:319
		{
			exprVAL.LineFormatExpr = newLineFmtExpr(exprDollar[2].str)
		}
	case 101:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:321
		{
			exprVAL.DecolorizeExpr = newDecolorizeExpr()
		}
	case 102:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:324
		{
			exprVAL.LabelFormat = log.NewRenameLabelFmt(exprDollar[1].str, exprDollar[3].str)
		}
	case 103:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:325
		{
			exprVAL.LabelFormat = log.NewTemplateLabelFmt(exprDollar[1].str, exprDollar[3].str)
		}
	case 104:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:329
		{
			exprVAL.LabelsFormat = []log.LabelFmt{exprDollar[1].LabelFormat}
		}
	case 105:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:330
		{
			exprVAL.LabelsFormat = append(exprDollar[1].LabelsFormat, exprDollar[3].LabelFormat)
		}
	case 107:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:334
		{
			exprVAL.LabelFormatExpr = newLabelFmtExpr(exprDollar[2].LabelsFormat)
		}
	case 108:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:337
		{
			exprVAL.LabelFilter = log.NewStringLabelFilter(exprDollar[1].Matcher)
		}
	case 109:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:338
		{
			exprVAL.LabelFilter = exprDollar[1].IPLabelFilter
		}
	case 110:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:339
		{
			exprVAL.LabelFilter = exprDollar[1].UnitFilter
		}
	case 111:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:340
		{
			exprVAL.LabelFilter = exprDollar[1].NumberFilter
		}
	case 112:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:341
		{
			exprVAL.LabelFilter = exprDollar[2].LabelFilter
		}
	case 113:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:342
		{
			exprVAL.LabelFilter = log.NewAndLabelFilter(exprDollar[1].LabelFilter, exprDollar[2].LabelFilter)
		}
	case 114:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:343
		{
			exprVAL.LabelFilter = log.NewAndLabelFilter(exprDollar[1].LabelFilter, exprDollar[3].LabelFilter)
		}
	case 115:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:344
		{
			exprVAL.LabelFilter = log.NewAndLabelFilter(exprDollar[1].LabelFilter, exprDollar[3].LabelFilter)
		}
	case 116:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:345
		{
			exprVAL.LabelFilter = log.NewOrLabelFilter(exprDollar[1].LabelFilter, exprDollar[3].LabelFilter)
		}
	case 117:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:349
		{
			exprVAL.JSONExpression = log.NewJSONExpr(exprDollar[1].str, exprDollar[3].str)
		}
	case 118:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:350
		{
			exprVAL.JSONExpression = log.NewJSONExpr(exprDollar[1].str, exprDollar[1].str)
		}
	case 119:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:353
		{
			exprVAL.JSONExpressionList = []log.JSONExpression{exprDollar[1].JSONExpression}
		}
	case 120:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:354
		{
			exprVAL.JSONExpressionList = append(exprDollar[1].JSONExpressionList, exprDollar[3].JSONExpression)
		}
	case 121:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/syntax/expr.y:358
		{
			exprVAL.IPLabelFilter = log.NewIPLabelFilter(exprDollar[5].str, exprDollar[1].str, log.LabelFilterEqual)
		}
	case 122:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/syntax/expr.y:359
		{
			exprVAL.IPLabelFilter = log.NewIPLabelFilter(exprDollar[5].str, exprDollar[1].str, log.LabelFilterNotEqual)
		}
	case 123:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:363
		{
			exprVAL.UnitFilter = exprDollar[1].DurationFilter
		}
	case 124:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:364
		{
			exprVAL.UnitFilter = exprDollar[1].BytesFilter
		}
	case 125:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:367
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterGreaterThan, exprDollar[1].str, exprDollar[3].duration)
		}
	case 126:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:368
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterGreaterThanOrEqual, exprDollar[1].str, exprDollar[3].duration)
		}
	case 127:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:369
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterLesserThan, exprDollar[1].str, exprDollar[3].duration)
		}
	case 128:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:370
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterLesserThanOrEqual, exprDollar[1].str, exprDollar[3].duration)
		}
	case 129:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:371
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterNotEqual, exprDollar[1].str, exprDollar[3].duration)
		}
	case 130:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:372
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterEqual, exprDollar[1].str, exprDollar[3].duration)
		}
	case 131:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:373
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterEqual, exprDollar[1].str, exprDollar[3].duration)
		}
	case 132:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:377
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterGreaterThan, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 133:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:378
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterGreaterThanOrEqual, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 134:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:379
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterLesserThan, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 135:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:380
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterLesserThanOrEqual, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 136:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:381
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterNotEqual, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 137:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:382
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterEqual, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 138:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:383
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterEqual, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 139:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:387
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterGreaterThan, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 140:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:388
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterGreaterThanOrEqual, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 141:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:389
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterLesserThan, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 142:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:390
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterLesserThanOrEqual, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 143:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:391
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterNotEqual, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 144:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:392
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterEqual, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 145:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:393
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterEqual, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 146:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:398
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("or", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 147:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:399
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("and", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 148:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:400
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("unless", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 149:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:401
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("+", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 150:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:402
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("-", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 151:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:403
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("*", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 152:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:404
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("/", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 153:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:405
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("%", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 154:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:406
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("^", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 155:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:407
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("==", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 156:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:408
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("!=", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 157:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:409
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr(">", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 158:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:410
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr(">=", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 159:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:411
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("<", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 160:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:412
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("<=", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 161:
		exprDollar = exprS[exprpt-0 : exprpt+1]
//line pkg/logql/syntax/expr.y:416
		{
			exprVAL.BoolModifier = &BinOpOptions{VectorMatching: &VectorMatching{Card: CardOneToOne}}
		}
	case 162:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:420
		{
			exprVAL.BoolModifier = &BinOpOptions{VectorMatching: &VectorMatching{Card: CardOneToOne}, ReturnBool: true}
		}
	case 163:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:427
		{
			exprVAL.OnOrIgnoringModifier = exprDollar[1].BoolModifier
			exprVAL.OnOrIgnoringModifier.VectorMatching.On = true
			exprVAL.OnOrIgnoringModifier.VectorMatching.MatchingLabels = exprDollar[4].Labels
		}
	case 164:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:433
		{
			exprVAL.OnOrIgnoringModifier = exprDollar[1].BoolModifier
			exprVAL.OnOrIgnoringModifier.VectorMatching.On = true
		}
	case 165:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:438
		{
			exprVAL.OnOrIgnoringModifier = exprDollar[1].BoolModifier
			exprVAL.OnOrIgnoringModifier.VectorMatching.MatchingLabels = exprDollar[4].Labels
		}
	case 166:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:443
		{
			exprVAL.OnOrIgnoringModifier = exprDollar[1].BoolModifier
		}
	case 167:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:449
		{
			exprVAL.BinOpModifier = exprDollar[1].BoolModifier
		}
	case 168:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:450
		{
			exprVAL.BinOpModifier = exprDollar[1].OnOrIgnoringModifier
		}
	case 169:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:452
		{
			exprVAL.BinOpModifier = exprDollar[1].OnOrIgnoringModifier
			exprVAL.BinOpModifier.VectorMatching.Card = CardManyToOne
		}
	case 170:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:457
		{
			exprVAL.BinOpModifier = exprDollar[1].OnOrIgnoringModifier
			exprVAL.BinOpModifier.VectorMatching.Card = CardManyToOne
		}
	case 171:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:462
		{
			exprVAL.BinOpModifier = exprDollar[1].OnOrIgnoringModifier
			exprVAL.BinOpModifier.VectorMatching.Card = CardManyToOne
			exprVAL.BinOpModifier.VectorMatching.Include = exprDollar[4].Labels
		}
	case 172:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:468
		{
			exprVAL.BinOpModifier = exprDollar[1].OnOrIgnoringModifier
			exprVAL.BinOpModifier.VectorMatching.Card = CardOneToMany
		}
	case 173:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:473
		{
			exprVAL.BinOpModifier = exprDollar[1].OnOrIgnoringModifier
			exprVAL.BinOpModifier.VectorMatching.Card = CardOneToMany
		}
	case 174:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:478
		{
			exprVAL.BinOpModifier = exprDollar[1].OnOrIgnoringModifier
			exprVAL.BinOpModifier.VectorMatching.Card = CardOneToMany
			exprVAL.BinOpModifier.VectorMatching.Include = exprDollar[4].Labels
		}
	case 175:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:486
		{
			exprVAL.LiteralExpr = mustNewLiteralExpr(exprDollar[1].str, false)
		}
	case 176:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:487
		{
			exprVAL.LiteralExpr = mustNewLiteralExpr(exprDollar[2].str, false)
		}
	case 177:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:488
		{
			exprVAL.LiteralExpr = mustNewLiteralExpr(exprDollar[2].str, true)
		}
	case 178:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:492
		{
			exprVAL.VectorExpr = NewVectorExpr(exprDollar[3].str)
		}
	case 179:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:495
		{
			exprVAL.Vector = OpTypeVector
		}
	case 180:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:499
		{
			exprVAL.VectorOp = OpTypeSum
		}
	case 181:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:500
		{
			exprVAL.VectorOp = OpTypeAvg
		}
	case 182:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:501
		{
			exprVAL.VectorOp = OpTypeCount
		}
	case 183:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:502
		{
			exprVAL.VectorOp = OpTypeMax
		}
	case 184:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:503
		{
			exprVAL.VectorOp = OpTypeMin
		}
	case 185:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:504
		{
			exprVAL.VectorOp = OpTypeStddev
		}
	case 186:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:505
		{
			exprVAL.VectorOp = OpTypeStdvar
		}
	case 187:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:506
		{
			exprVAL.VectorOp = OpTypeBottomK
		}
	case 188:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:507
		{
			exprVAL.VectorOp = OpTypeTopK
		}
	case 189:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:511
		{
			exprVAL.RangeOp = OpRangeTypeCount
		}
	case 190:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:512
		{
			exprVAL.RangeOp = OpRangeTypeRate
		}
	case 191:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:513
		{
			exprVAL.RangeOp = OpRangeTypeRateCounter
		}
	case 192:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:514
		{
			exprVAL.RangeOp = OpRangeTypeBytes
		}
	case 193:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:515
		{
			exprVAL.RangeOp = OpRangeTypeBytesRate
		}
	case 194:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:516
		{
			exprVAL.RangeOp = OpRangeTypeAvg
		}
	case 195:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:517
		{
			exprVAL.RangeOp = OpRangeTypeSum
		}
	case 196:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:518
		{
			exprVAL.RangeOp = OpRangeTypeMin
		}
	case 197:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:519
		{
			exprVAL.RangeOp = OpRangeTypeMax
		}
	case 198:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:520
		{
			exprVAL.RangeOp = OpRangeTypeStdvar
		}
	case 199:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:521
		{
			exprVAL.RangeOp = OpRangeTypeStddev
		}
	case 200:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:522
		{
			exprVAL.RangeOp = OpRangeTypeQuantile
		}
	case 201:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:523
		{
			exprVAL.RangeOp = OpRangeTypeFirst
		}
	case 202:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:524
		{
			exprVAL.RangeOp = OpRangeTypeLast
		}
	case 203:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:525
		{
			exprVAL.RangeOp = OpRangeTypeAbsent
		}
	case 204:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:529
		{
			exprVAL.OffsetExpr = newOffsetExpr(exprDollar[2].duration)
		}
	case 205:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:532
		{
			exprVAL.Labels = []string{exprDollar[1].str}
		}
	case 206:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:533
		{
			exprVAL.Labels = append(exprDollar[1].Labels, exprDollar[3].str)
		}
	case 207:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:537
		{
			exprVAL.Grouping = &Grouping{Without: false, Groups: exprDollar[3].Labels}
		}
	case 208:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:538
		{
			exprVAL.Grouping = &Grouping{Without: true, Groups: exprDollar[3].Labels}
		}
	case 209:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:539
		{
			exprVAL.Grouping = &Grouping{Without: false, Groups: nil}
		}
	case 210:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:540
		{
			exprVAL.Grouping = &Grouping{Without: true, Groups: nil}
		}
	}
	goto exprstack /* stack new state and value */
}
