// Code generated by goyacc -p expr -o pkg/logql/syntax/expr.y.go pkg/logql/syntax/expr.y. DO NOT EDIT.

//line pkg/logql/syntax/expr.y:2
package syntax

import __yyfmt__ "fmt"

//line pkg/logql/syntax/expr.y:2
import (
	"github.com/grafana/loki/pkg/logql/log"
	"github.com/prometheus/prometheus/model/labels"
	"time"
)

//line pkg/logql/syntax/expr.y:12
type exprSymType struct {
	yys                   int
	Expr                  Expr
	Filter                labels.MatchType
	Grouping              *Grouping
	Labels                []string
	LogExpr               LogSelectorExpr
	LogRangeExpr          *LogRange
	Matcher               *labels.Matcher
	Matchers              []*labels.Matcher
	RangeAggregationExpr  SampleExpr
	HistogramExpr         SampleExpr
	HistogramOp           string
	RangeOp               string
	ConvOp                string
	Selector              []*labels.Matcher
	VectorAggregationExpr SampleExpr
	VectorExpr            *VectorExpr
	Vector                string
	MetricExpr            SampleExpr
	VectorOp              string
	FilterOp              string
	BinOpExpr             SampleExpr
	LabelReplaceExpr      SampleExpr
	binOp                 string
	bytes                 uint64
	str                   string
	duration              time.Duration
	LiteralExpr           *LiteralExpr
	BinOpModifier         *BinOpOptions
	BoolModifier          *BinOpOptions
	OnOrIgnoringModifier  *BinOpOptions
	LabelParser           *LabelParserExpr
	LineFilters           *LineFilterExpr
	LineFilter            *LineFilterExpr
	PipelineExpr          MultiStageExpr
	PipelineStage         StageExpr
	BytesFilter           log.LabelFilterer
	NumberFilter          log.LabelFilterer
	DurationFilter        log.LabelFilterer
	LabelFilter           log.LabelFilterer
	UnitFilter            log.LabelFilterer
	IPLabelFilter         log.LabelFilterer
	LineFormatExpr        *LineFmtExpr
	LabelFormatExpr       *LabelFmtExpr
	LabelFormat           log.LabelFmt
	LabelsFormat          []log.LabelFmt
	JSONExpressionParser  *JSONExpressionParser
	JSONExpression        log.JSONExpression
	JSONExpressionList    []log.JSONExpression
	UnwrapExpr            *UnwrapExpr
	DecolorizeExpr        *DecolorizeExpr
	OffsetExpr            *OffsetExpr
}

const BYTES = 57346
const IDENTIFIER = 57347
const STRING = 57348
const NUMBER = 57349
const DURATION = 57350
const RANGE = 57351
const MATCHERS = 57352
const LABELS = 57353
const EQ = 57354
const RE = 57355
const NRE = 57356
const OPEN_BRACE = 57357
const CLOSE_BRACE = 57358
const OPEN_BRACKET = 57359
const CLOSE_BRACKET = 57360
const COMMA = 57361
const DOT = 57362
const PIPE_MATCH = 57363
const PIPE_EXACT = 57364
const OPEN_PARENTHESIS = 57365
const CLOSE_PARENTHESIS = 57366
const BY = 57367
const WITHOUT = 57368
const COUNT_OVER_TIME = 57369
const RATE = 57370
const RATE_COUNTER = 57371
const SUM = 57372
const AVG = 57373
const MAX = 57374
const MIN = 57375
const COUNT = 57376
const STDDEV = 57377
const STDVAR = 57378
const BOTTOMK = 57379
const TOPK = 57380
const BYTES_OVER_TIME = 57381
const BYTES_RATE = 57382
const BOOL = 57383
const JSON = 57384
const REGEXP = 57385
const LOGFMT = 57386
const PIPE = 57387
const LINE_FMT = 57388
const LABEL_FMT = 57389
const UNWRAP = 57390
const AVG_OVER_TIME = 57391
const SUM_OVER_TIME = 57392
const MIN_OVER_TIME = 57393
const MAX_OVER_TIME = 57394
const STDVAR_OVER_TIME = 57395
const STDDEV_OVER_TIME = 57396
const QUANTILE_OVER_TIME = 57397
const BYTES_CONV = 57398
const DURATION_CONV = 57399
const DURATION_SECONDS_CONV = 57400
const FIRST_OVER_TIME = 57401
const LAST_OVER_TIME = 57402
const ABSENT_OVER_TIME = 57403
const VECTOR = 57404
const LABEL_REPLACE = 57405
const UNPACK = 57406
const OFFSET = 57407
const PATTERN = 57408
const IP = 57409
const ON = 57410
const IGNORING = 57411
const GROUP_LEFT = 57412
const GROUP_RIGHT = 57413
const DECOLORIZE = 57414
const BUCKETS_OVER_TIME = 57415
const OR = 57416
const AND = 57417
const UNLESS = 57418
const CMP_EQ = 57419
const NEQ = 57420
const LT = 57421
const LTE = 57422
const GT = 57423
const GTE = 57424
const ADD = 57425
const SUB = 57426
const MUL = 57427
const DIV = 57428
const MOD = 57429
const POW = 57430

var exprToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"BYTES",
	"IDENTIFIER",
	"STRING",
	"NUMBER",
	"DURATION",
	"RANGE",
	"MATCHERS",
	"LABELS",
	"EQ",
	"RE",
	"NRE",
	"OPEN_BRACE",
	"CLOSE_BRACE",
	"OPEN_BRACKET",
	"CLOSE_BRACKET",
	"COMMA",
	"DOT",
	"PIPE_MATCH",
	"PIPE_EXACT",
	"OPEN_PARENTHESIS",
	"CLOSE_PARENTHESIS",
	"BY",
	"WITHOUT",
	"COUNT_OVER_TIME",
	"RATE",
	"RATE_COUNTER",
	"SUM",
	"AVG",
	"MAX",
	"MIN",
	"COUNT",
	"STDDEV",
	"STDVAR",
	"BOTTOMK",
	"TOPK",
	"BYTES_OVER_TIME",
	"BYTES_RATE",
	"BOOL",
	"JSON",
	"REGEXP",
	"LOGFMT",
	"PIPE",
	"LINE_FMT",
	"LABEL_FMT",
	"UNWRAP",
	"AVG_OVER_TIME",
	"SUM_OVER_TIME",
	"MIN_OVER_TIME",
	"MAX_OVER_TIME",
	"STDVAR_OVER_TIME",
	"STDDEV_OVER_TIME",
	"QUANTILE_OVER_TIME",
	"BYTES_CONV",
	"DURATION_CONV",
	"DURATION_SECONDS_CONV",
	"FIRST_OVER_TIME",
	"LAST_OVER_TIME",
	"ABSENT_OVER_TIME",
	"VECTOR",
	"LABEL_REPLACE",
	"UNPACK",
	"OFFSET",
	"PATTERN",
	"IP",
	"ON",
	"IGNORING",
	"GROUP_LEFT",
	"GROUP_RIGHT",
	"DECOLORIZE",
	"BUCKETS_OVER_TIME",
	"OR",
	"AND",
	"UNLESS",
	"CMP_EQ",
	"NEQ",
	"LT",
	"LTE",
	"GT",
	"GTE",
	"ADD",
	"SUB",
	"MUL",
	"DIV",
	"MOD",
	"POW",
}

var exprStatenames = [...]string{}

const exprEofCode = 1
const exprErrCode = 2
const exprInitialStackSize = 16

//line pkg/logql/syntax/expr.y:520

//line yacctab:1
var exprExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const exprPrivate = 57344

const exprLast = 558

var exprAct = [...]int16{
	262, 207, 83, 4, 188, 65, 176, 5, 181, 216,
	74, 122, 57, 64, 76, 2, 265, 145, 52, 53,
	54, 55, 56, 57, 160, 161, 79, 49, 50, 51,
	58, 59, 62, 63, 60, 61, 52, 53, 54, 55,
	56, 57, 50, 51, 58, 59, 62, 63, 60, 61,
	52, 53, 54, 55, 56, 57, 58, 59, 62, 63,
	60, 61, 52, 53, 54, 55, 56, 57, 158, 159,
	109, 190, 143, 144, 113, 54, 55, 56, 57, 141,
	143, 144, 133, 72, 68, 270, 149, 267, 268, 147,
	70, 71, 154, 72, 336, 309, 266, 94, 84, 85,
	70, 71, 357, 317, 352, 242, 157, 200, 243, 241,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 209, 333, 336, 72, 345, 344,
	130, 267, 267, 185, 70, 71, 196, 191, 194, 195,
	192, 193, 72, 135, 178, 142, 265, 73, 126, 70,
	71, 110, 198, 341, 319, 214, 210, 73, 209, 206,
	279, 208, 72, 219, 72, 327, 211, 309, 240, 70,
	71, 70, 71, 209, 271, 268, 279, 300, 265, 277,
	72, 326, 339, 266, 228, 229, 230, 70, 71, 206,
	299, 73, 279, 67, 72, 209, 203, 325, 316, 179,
	177, 70, 71, 267, 279, 222, 73, 260, 263, 324,
	269, 209, 272, 147, 109, 275, 113, 276, 323, 267,
	264, 203, 212, 261, 273, 209, 73, 82, 73, 84,
	85, 147, 130, 218, 284, 286, 289, 291, 218, 294,
	292, 283, 130, 301, 73, 130, 178, 130, 279, 218,
	126, 233, 290, 281, 130, 203, 178, 288, 73, 178,
	126, 218, 218, 126, 302, 126, 304, 306, 287, 308,
	109, 137, 126, 279, 307, 318, 303, 274, 280, 109,
	285, 220, 320, 136, 117, 119, 118, 298, 127, 129,
	270, 117, 119, 118, 310, 127, 129, 203, 227, 218,
	226, 179, 177, 14, 330, 331, 120, 225, 121, 109,
	332, 148, 177, 120, 128, 121, 334, 335, 217, 204,
	224, 128, 340, 197, 130, 146, 343, 238, 153, 199,
	239, 237, 17, 14, 152, 151, 347, 90, 348, 349,
	14, 148, 126, 89, 88, 312, 313, 314, 6, 81,
	355, 353, 23, 24, 25, 38, 39, 41, 42, 40,
	43, 44, 45, 46, 26, 27, 351, 322, 278, 234,
	231, 223, 221, 213, 28, 29, 30, 31, 32, 33,
	34, 205, 80, 139, 35, 36, 37, 47, 20, 356,
	236, 215, 235, 78, 232, 350, 338, 138, 48, 14,
	140, 257, 337, 315, 258, 256, 305, 6, 18, 19,
	156, 23, 24, 25, 38, 39, 41, 42, 40, 43,
	44, 45, 46, 26, 27, 254, 155, 251, 255, 253,
	252, 250, 87, 28, 29, 30, 31, 32, 33, 34,
	296, 297, 354, 35, 36, 37, 47, 20, 248, 86,
	150, 249, 247, 342, 3, 329, 245, 48, 14, 246,
	244, 75, 328, 293, 282, 259, 6, 18, 19, 202,
	23, 24, 25, 38, 39, 41, 42, 40, 43, 44,
	45, 46, 26, 27, 91, 295, 201, 200, 189, 123,
	199, 186, 28, 29, 30, 31, 32, 33, 34, 184,
	183, 346, 35, 36, 37, 47, 20, 321, 182, 80,
	189, 124, 180, 112, 187, 116, 48, 115, 114, 66,
	131, 125, 132, 111, 93, 92, 18, 19, 11, 10,
	9, 134, 21, 12, 16, 95, 96, 97, 98, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 8,
	311, 15, 22, 7, 13, 77, 69, 1,
}

var exprPact = [...]int16{
	325, -1000, -47, -1000, -1000, 148, 325, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 377, 326, 204, -1000, 442, 425,
	321, 320, 314, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 148, -1000, 69, 249, -1000, 76,
	-1000, -1000, -1000, -1000, 259, 247, -47, 381, -1000, -1000,
	67, 318, 443, 312, 311, 305, -1000, -1000, 325, 419,
	403, 325, 0, -46, -1000, 325, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 325, 325, 325, 325, -1000,
	-1000, -1000, -1000, 125, -1000, -1000, -1000, 503, -1000, 494,
	-1000, 493, -1000, -1000, -1000, -1000, 319, 485, -1000, 505,
	59, -1000, -1000, -1000, 300, -1000, -1000, -1000, -1000, -1000,
	504, 484, 481, 480, 463, 295, 362, 180, 288, 198,
	354, 384, 294, 257, 353, 181, 352, -33, 297, 284,
	277, 275, -21, -21, -10, -10, -76, -76, -76, -76,
	-65, -65, -65, -65, -65, -65, 125, 319, 319, 319,
	351, -1000, 382, -1000, -1000, 227, -1000, 350, -1000, 380,
	323, 101, 452, 444, 423, 421, 397, 459, -1000, -1000,
	-1000, -1000, -1000, -1000, 73, 288, 113, 87, 166, 242,
	150, 253, 73, 325, 155, 349, 254, -1000, -1000, 229,
	-1000, 458, -1000, 288, 256, 244, 233, 228, 240, 125,
	237, 503, 457, -1000, 483, 435, 264, -1000, -1000, -1000,
	167, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 153,
	-1000, 219, 128, 42, 128, 398, -49, 319, -49, 86,
	289, 394, 174, 79, -1000, -1000, 130, -1000, 325, 502,
	-1000, -1000, 348, 194, 185, -1000, 173, -1000, -1000, 157,
	-1000, 141, -1000, -1000, -1000, -1000, -1000, -1000, 456, 449,
	-1000, 73, 42, 128, 42, -1000, -1000, 125, -1000, -49,
	-1000, 102, -1000, -1000, -1000, 81, 393, 387, 158, 73,
	129, -1000, 447, 73, -1000, -1000, -1000, -1000, 105, 104,
	-1000, 42, -1000, 496, 49, 42, 37, -49, -49, 386,
	-1000, -1000, 347, -1000, -1000, -1000, 80, 42, -1000, -1000,
	-49, 436, -1000, -1000, 331, 383, 78, -1000,
}

var exprPgo = [...]int16{
	0, 557, 14, 556, 2, 9, 454, 3, 17, 11,
	555, 554, 553, 552, 551, 550, 7, 549, 534, 533,
	532, 531, 530, 529, 528, 484, 525, 524, 523, 13,
	5, 522, 521, 520, 6, 519, 84, 518, 517, 515,
	4, 514, 513, 8, 512, 1, 511, 489, 0,
}

var exprR1 = [...]int8{
	0, 1, 2, 2, 7, 7, 7, 7, 7, 7,
	7, 7, 11, 13, 6, 6, 6, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 45, 45, 45, 15, 15, 15, 12,
	12, 12, 12, 17, 17, 17, 17, 17, 17, 24,
	3, 3, 3, 3, 16, 16, 16, 10, 10, 9,
	9, 9, 9, 29, 29, 30, 30, 30, 30, 30,
	30, 30, 21, 36, 36, 35, 35, 28, 28, 28,
	28, 28, 42, 37, 38, 40, 40, 41, 41, 41,
	39, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	43, 43, 44, 44, 47, 47, 46, 46, 33, 33,
	33, 33, 33, 33, 33, 31, 31, 31, 31, 31,
	31, 31, 32, 32, 32, 32, 32, 32, 32, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 26, 26, 27, 27, 27, 27,
	25, 25, 25, 25, 25, 25, 25, 25, 23, 23,
	23, 19, 20, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 48, 5, 5,
	4, 4, 4, 4,
}

var exprR2 = [...]int8{
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 7, 1, 1, 2, 3, 2, 3, 4,
	5, 3, 4, 5, 6, 3, 4, 5, 6, 3,
	4, 5, 6, 4, 5, 6, 7, 3, 4, 4,
	5, 3, 2, 3, 6, 3, 1, 1, 1, 4,
	6, 5, 7, 4, 5, 5, 6, 7, 7, 12,
	1, 1, 1, 1, 3, 3, 2, 1, 3, 3,
	3, 3, 3, 1, 2, 1, 2, 2, 2, 2,
	2, 2, 1, 2, 5, 1, 2, 1, 1, 2,
	1, 2, 2, 2, 1, 3, 3, 1, 3, 3,
	2, 1, 1, 1, 1, 3, 2, 3, 3, 3,
	3, 1, 1, 3, 6, 6, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 0, 1, 5, 4, 5, 4,
	1, 1, 2, 4, 5, 2, 4, 5, 1, 2,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 3,
	4, 4, 3, 3,
}

var exprChk = [...]int16{
	-1000, -1, -2, -6, -7, -16, 23, -12, -17, -22,
	-23, -24, -19, -11, 15, -14, -18, 7, 83, 84,
	63, -20, -13, 27, 28, 29, 39, 40, 49, 50,
	51, 52, 53, 54, 55, 59, 60, 61, 30, 31,
	34, 32, 33, 35, 36, 37, 38, 62, 73, 74,
	75, 76, 83, 84, 85, 86, 87, 88, 77, 78,
	81, 82, 79, 80, -29, -30, -35, 45, -36, -3,
	21, 22, 14, 78, -7, -6, -2, -10, 16, -9,
	5, 23, 23, -4, 25, 26, 7, 7, 23, 23,
	23, -25, -26, -27, 41, -25, -25, -25, -25, -25,
	-25, -25, -25, -25, -25, -25, -25, -25, -25, -30,
	-36, -28, -42, -34, -37, -38, -39, 42, 44, 43,
	64, 66, -9, -47, -46, -32, 23, 46, 72, 47,
	5, -33, -31, 6, -21, 67, 24, 24, 16, 2,
	19, 12, 78, 13, 14, -8, 7, -16, 23, -7,
	7, 23, 23, 23, -7, 7, 7, -2, 68, 69,
	70, 71, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -34, 75, 19, 74,
	-44, -43, 5, 6, 6, -34, 6, -41, -40, 5,
	12, 78, 81, 82, 79, 80, 77, 23, -9, 6,
	6, 6, 6, 2, 24, 19, 9, -45, -29, 45,
	-16, -8, 24, 19, -7, 7, -5, 24, 5, -5,
	24, 19, 24, 19, 23, 23, 23, 23, -34, -34,
	-34, 19, 12, 24, 19, 12, 67, 8, 4, 7,
	67, 8, 4, 7, 8, 4, 7, 8, 4, 7,
	8, 4, 7, 8, 4, 7, 8, 4, 7, 6,
	-4, -8, -48, -45, -29, 65, 9, 45, 9, -45,
	48, 24, -45, -29, 24, -4, -7, 24, 19, 19,
	24, 24, 6, -8, -5, 24, -5, 24, 24, -5,
	24, -5, -43, 6, -40, 2, 5, 6, 23, 23,
	24, 24, -45, -29, -45, 8, -48, -34, -48, 9,
	5, -15, 56, 57, 58, 9, 24, 24, -45, 24,
	-7, 5, 19, 24, 24, 24, 24, 24, 6, 6,
	-4, -45, -48, 23, -48, -45, 45, 9, 9, 24,
	-4, 24, 6, -4, 24, 24, 5, -45, -48, -48,
	9, 19, 24, -48, 6, 19, 6, 24,
}

var exprDef = [...]int16{
	0, -2, 1, 2, 3, 14, 0, 4, 5, 6,
	7, 8, 9, 11, 0, 0, 0, 168, 0, 0,
	0, 0, 0, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 173, 174,
	175, 176, 177, 178, 179, 180, 181, 172, 13, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 15, 73, 75, 0, 85, 0,
	60, 61, 62, 63, 3, 2, 0, 0, 66, 67,
	0, 0, 0, 0, 0, 0, 169, 170, 0, 0,
	0, 0, 160, 161, 155, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	86, 76, 77, 78, 79, 80, 81, 87, 88, 0,
	90, 0, 101, 102, 103, 104, 0, 0, 94, 0,
	0, 116, 117, 83, 0, 82, 10, 16, 64, 65,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
	168, 0, 0, 0, 3, 0, 0, 139, 0, 0,
	162, 165, 140, 141, 142, 143, 144, 145, 146, 147,
	148, 149, 150, 151, 152, 153, 106, 0, 0, 0,
	92, 112, 111, 89, 91, 0, 93, 100, 97, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 68, 69,
	70, 71, 72, 42, 49, 0, 17, 0, 0, 0,
	0, 0, 53, 0, 3, 168, 0, 202, 198, 0,
	203, 0, 171, 0, 0, 0, 0, 0, 107, 108,
	109, 0, 0, 105, 0, 0, 0, 123, 130, 137,
	0, 122, 129, 136, 118, 125, 132, 119, 126, 133,
	120, 127, 134, 121, 128, 135, 124, 131, 138, 0,
	51, 0, 18, 21, 37, 0, 25, 0, 29, 0,
	0, 0, 0, 0, 41, 55, 3, 54, 0, 0,
	200, 201, 0, 0, 0, 157, 0, 159, 163, 0,
	166, 0, 113, 110, 98, 99, 95, 96, 0, 0,
	84, 50, 22, 38, 39, 197, 26, 45, 30, 33,
	43, 0, 46, 47, 48, 19, 0, 0, 0, 56,
	3, 199, 0, 0, 156, 158, 164, 167, 0, 0,
	52, 40, 34, 0, 20, 23, 0, 27, 31, 0,
	57, 58, 0, 12, 114, 115, 0, 24, 28, 32,
	35, 0, 44, 36, 0, 0, 0, 59,
}

var exprTok1 = [...]int8{
	1,
}

var exprTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88,
}

var exprTok3 = [...]int8{
	0,
}

var exprErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	exprDebug        = 0
	exprErrorVerbose = false
)

type exprLexer interface {
	Lex(lval *exprSymType) int
	Error(s string)
}

type exprParser interface {
	Parse(exprLexer) int
	Lookahead() int
}

type exprParserImpl struct {
	lval  exprSymType
	stack [exprInitialStackSize]exprSymType
	char  int
}

func (p *exprParserImpl) Lookahead() int {
	return p.char
}

func exprNewParser() exprParser {
	return &exprParserImpl{}
}

const exprFlag = -1000

func exprTokname(c int) string {
	if c >= 1 && c-1 < len(exprToknames) {
		if exprToknames[c-1] != "" {
			return exprToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func exprStatname(s int) string {
	if s >= 0 && s < len(exprStatenames) {
		if exprStatenames[s] != "" {
			return exprStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func exprErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !exprErrorVerbose {
		return "syntax error"
	}

	for _, e := range exprErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + exprTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(exprPact[state])
	for tok := TOKSTART; tok-1 < len(exprToknames); tok++ {
		if n := base + tok; n >= 0 && n < exprLast && int(exprChk[int(exprAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if exprDef[state] == -2 {
		i := 0
		for exprExca[i] != -1 || int(exprExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; exprExca[i] >= 0; i += 2 {
			tok := int(exprExca[i])
			if tok < TOKSTART || exprExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if exprExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += exprTokname(tok)
	}
	return res
}

func exprlex1(lex exprLexer, lval *exprSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(exprTok1[0])
		goto out
	}
	if char < len(exprTok1) {
		token = int(exprTok1[char])
		goto out
	}
	if char >= exprPrivate {
		if char < exprPrivate+len(exprTok2) {
			token = int(exprTok2[char-exprPrivate])
			goto out
		}
	}
	for i := 0; i < len(exprTok3); i += 2 {
		token = int(exprTok3[i+0])
		if token == char {
			token = int(exprTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(exprTok2[1]) /* unknown char */
	}
	if exprDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", exprTokname(token), uint(char))
	}
	return char, token
}

func exprParse(exprlex exprLexer) int {
	return exprNewParser().Parse(exprlex)
}

func (exprrcvr *exprParserImpl) Parse(exprlex exprLexer) int {
	var exprn int
	var exprVAL exprSymType
	var exprDollar []exprSymType
	_ = exprDollar // silence set and not used
	exprS := exprrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	exprstate := 0
	exprrcvr.char = -1
	exprtoken := -1 // exprrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		exprstate = -1
		exprrcvr.char = -1
		exprtoken = -1
	}()
	exprp := -1
	goto exprstack

ret0:
	return 0

ret1:
	return 1

exprstack:
	/* put a state and value onto the stack */
	if exprDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", exprTokname(exprtoken), exprStatname(exprstate))
	}

	exprp++
	if exprp >= len(exprS) {
		nyys := make([]exprSymType, len(exprS)*2)
		copy(nyys, exprS)
		exprS = nyys
	}
	exprS[exprp] = exprVAL
	exprS[exprp].yys = exprstate

exprnewstate:
	exprn = int(exprPact[exprstate])
	if exprn <= exprFlag {
		goto exprdefault /* simple state */
	}
	if exprrcvr.char < 0 {
		exprrcvr.char, exprtoken = exprlex1(exprlex, &exprrcvr.lval)
	}
	exprn += exprtoken
	if exprn < 0 || exprn >= exprLast {
		goto exprdefault
	}
	exprn = int(exprAct[exprn])
	if int(exprChk[exprn]) == exprtoken { /* valid shift */
		exprrcvr.char = -1
		exprtoken = -1
		exprVAL = exprrcvr.lval
		exprstate = exprn
		if Errflag > 0 {
			Errflag--
		}
		goto exprstack
	}

exprdefault:
	/* default state action */
	exprn = int(exprDef[exprstate])
	if exprn == -2 {
		if exprrcvr.char < 0 {
			exprrcvr.char, exprtoken = exprlex1(exprlex, &exprrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if exprExca[xi+0] == -1 && int(exprExca[xi+1]) == exprstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			exprn = int(exprExca[xi+0])
			if exprn < 0 || exprn == exprtoken {
				break
			}
		}
		exprn = int(exprExca[xi+1])
		if exprn < 0 {
			goto ret0
		}
	}
	if exprn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			exprlex.Error(exprErrorMessage(exprstate, exprtoken))
			Nerrs++
			if exprDebug >= 1 {
				__yyfmt__.Printf("%s", exprStatname(exprstate))
				__yyfmt__.Printf(" saw %s\n", exprTokname(exprtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for exprp >= 0 {
				exprn = int(exprPact[exprS[exprp].yys]) + exprErrCode
				if exprn >= 0 && exprn < exprLast {
					exprstate = int(exprAct[exprn]) /* simulate a shift of "error" */
					if int(exprChk[exprstate]) == exprErrCode {
						goto exprstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if exprDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", exprS[exprp].yys)
				}
				exprp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if exprDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", exprTokname(exprtoken))
			}
			if exprtoken == exprEofCode {
				goto ret1
			}
			exprrcvr.char = -1
			exprtoken = -1
			goto exprnewstate /* try again in the same state */
		}
	}

	/* reduction by production exprn */
	if exprDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", exprn, exprStatname(exprstate))
	}

	exprnt := exprn
	exprpt := exprp
	_ = exprpt // guard against "declared and not used"

	exprp -= int(exprR2[exprn])
	// exprp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if exprp+1 >= len(exprS) {
		nyys := make([]exprSymType, len(exprS)*2)
		copy(nyys, exprS)
		exprS = nyys
	}
	exprVAL = exprS[exprp+1]

	/* consult goto table to find next state */
	exprn = int(exprR1[exprn])
	exprg := int(exprPgo[exprn])
	exprj := exprg + exprS[exprp].yys + 1

	if exprj >= exprLast {
		exprstate = int(exprAct[exprg])
	} else {
		exprstate = int(exprAct[exprj])
		if int(exprChk[exprstate]) != -exprn {
			exprstate = int(exprAct[exprg])
		}
	}
	// dummy call; replaced with literal code
	switch exprnt {

	case 1:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:136
		{
			exprlex.(*parser).expr = exprDollar[1].Expr
		}
	case 2:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:139
		{
			exprVAL.Expr = exprDollar[1].LogExpr
		}
	case 3:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:140
		{
			exprVAL.Expr = exprDollar[1].MetricExpr
		}
	case 4:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:144
		{
			exprVAL.MetricExpr = exprDollar[1].RangeAggregationExpr
		}
	case 5:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:145
		{
			exprVAL.MetricExpr = exprDollar[1].VectorAggregationExpr
		}
	case 6:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:146
		{
			exprVAL.MetricExpr = exprDollar[1].BinOpExpr
		}
	case 7:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:147
		{
			exprVAL.MetricExpr = exprDollar[1].LiteralExpr
		}
	case 8:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:148
		{
			exprVAL.MetricExpr = exprDollar[1].LabelReplaceExpr
		}
	case 9:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:149
		{
			exprVAL.MetricExpr = exprDollar[1].VectorExpr
		}
	case 10:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:150
		{
			exprVAL.MetricExpr = exprDollar[2].MetricExpr
		}
	case 11:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:151
		{
			exprVAL.MetricExpr = exprDollar[1].HistogramExpr
		}
	case 12:
		exprDollar = exprS[exprpt-7 : exprpt+1]
//line pkg/logql/syntax/expr.y:155
		{
			exprVAL.HistogramExpr = newHistogramExpr(exprDollar[5].LogRangeExpr, exprDollar[3].str, exprDollar[7].Grouping)
		}
	case 13:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:159
		{
			exprVAL.HistogramOp = OpRangeTypeHistogram
		}
	case 14:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:163
		{
			exprVAL.LogExpr = newMatcherExpr(exprDollar[1].Selector)
		}
	case 15:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:164
		{
			exprVAL.LogExpr = newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].PipelineExpr)
		}
	case 16:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:165
		{
			exprVAL.LogExpr = exprDollar[2].LogExpr
		}
	case 17:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:169
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].duration, nil, nil)
		}
	case 18:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:170
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].duration, nil, exprDollar[3].OffsetExpr)
		}
	case 19:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:171
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[4].duration, nil, nil)
		}
	case 20:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:172
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[4].duration, nil, exprDollar[5].OffsetExpr)
		}
	case 21:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:173
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].duration, exprDollar[3].UnwrapExpr, nil)
		}
	case 22:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:174
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].duration, exprDollar[4].UnwrapExpr, exprDollar[3].OffsetExpr)
		}
	case 23:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:175
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[4].duration, exprDollar[5].UnwrapExpr, nil)
		}
	case 24:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/syntax/expr.y:176
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[4].duration, exprDollar[6].UnwrapExpr, exprDollar[5].OffsetExpr)
		}
	case 25:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:177
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[3].duration, exprDollar[2].UnwrapExpr, nil)
		}
	case 26:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:178
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[3].duration, exprDollar[2].UnwrapExpr, exprDollar[4].OffsetExpr)
		}
	case 27:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:179
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[5].duration, exprDollar[3].UnwrapExpr, nil)
		}
	case 28:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/syntax/expr.y:180
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[5].duration, exprDollar[3].UnwrapExpr, exprDollar[6].OffsetExpr)
		}
	case 29:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:181
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].PipelineExpr), exprDollar[3].duration, nil, nil)
		}
	case 30:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:182
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].PipelineExpr), exprDollar[3].duration, nil, exprDollar[4].OffsetExpr)
		}
	case 31:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:183
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[2].Selector), exprDollar[3].PipelineExpr), exprDollar[5].duration, nil, nil)
		}
	case 32:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/syntax/expr.y:184
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[2].Selector), exprDollar[3].PipelineExpr), exprDollar[5].duration, nil, exprDollar[6].OffsetExpr)
		}
	case 33:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:185
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].PipelineExpr), exprDollar[4].duration, exprDollar[3].UnwrapExpr, nil)
		}
	case 34:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:186
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].PipelineExpr), exprDollar[4].duration, exprDollar[3].UnwrapExpr, exprDollar[5].OffsetExpr)
		}
	case 35:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/syntax/expr.y:187
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[2].Selector), exprDollar[3].PipelineExpr), exprDollar[6].duration, exprDollar[4].UnwrapExpr, nil)
		}
	case 36:
		exprDollar = exprS[exprpt-7 : exprpt+1]
//line pkg/logql/syntax/expr.y:188
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[2].Selector), exprDollar[3].PipelineExpr), exprDollar[6].duration, exprDollar[4].UnwrapExpr, exprDollar[7].OffsetExpr)
		}
	case 37:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:189
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[3].PipelineExpr), exprDollar[2].duration, nil, nil)
		}
	case 38:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:190
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[4].PipelineExpr), exprDollar[2].duration, nil, exprDollar[3].OffsetExpr)
		}
	case 39:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:191
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[3].PipelineExpr), exprDollar[2].duration, exprDollar[4].UnwrapExpr, nil)
		}
	case 40:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:192
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[4].PipelineExpr), exprDollar[2].duration, exprDollar[5].UnwrapExpr, exprDollar[3].OffsetExpr)
		}
	case 41:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:193
		{
			exprVAL.LogRangeExpr = exprDollar[2].LogRangeExpr
		}
	case 43:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:198
		{
			exprVAL.UnwrapExpr = newUnwrapExpr(exprDollar[3].str, "")
		}
	case 44:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/syntax/expr.y:199
		{
			exprVAL.UnwrapExpr = newUnwrapExpr(exprDollar[5].str, exprDollar[3].ConvOp)
		}
	case 45:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:200
		{
			exprVAL.UnwrapExpr = exprDollar[1].UnwrapExpr.addPostFilter(exprDollar[3].LabelFilter)
		}
	case 46:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:204
		{
			exprVAL.ConvOp = OpConvBytes
		}
	case 47:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:205
		{
			exprVAL.ConvOp = OpConvDuration
		}
	case 48:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:206
		{
			exprVAL.ConvOp = OpConvDurationSeconds
		}
	case 49:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:210
		{
			exprVAL.RangeAggregationExpr = newRangeAggregationExpr(exprDollar[3].LogRangeExpr, exprDollar[1].RangeOp, nil, nil)
		}
	case 50:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/syntax/expr.y:211
		{
			exprVAL.RangeAggregationExpr = newRangeAggregationExpr(exprDollar[5].LogRangeExpr, exprDollar[1].RangeOp, nil, &exprDollar[3].str)
		}
	case 51:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:212
		{
			exprVAL.RangeAggregationExpr = newRangeAggregationExpr(exprDollar[3].LogRangeExpr, exprDollar[1].RangeOp, exprDollar[5].Grouping, nil)
		}
	case 52:
		exprDollar = exprS[exprpt-7 : exprpt+1]
//line pkg/logql/syntax/expr.y:213
		{
			exprVAL.RangeAggregationExpr = newRangeAggregationExpr(exprDollar[5].LogRangeExpr, exprDollar[1].RangeOp, exprDollar[7].Grouping, &exprDollar[3].str)
		}
	case 53:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:218
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[3].MetricExpr, exprDollar[1].VectorOp, nil, nil)
		}
	case 54:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:219
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[4].MetricExpr, exprDollar[1].VectorOp, exprDollar[2].Grouping, nil)
		}
	case 55:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:220
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[3].MetricExpr, exprDollar[1].VectorOp, exprDollar[5].Grouping, nil)
		}
	case 56:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/syntax/expr.y:222
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[5].MetricExpr, exprDollar[1].VectorOp, nil, &exprDollar[3].str)
		}
	case 57:
		exprDollar = exprS[exprpt-7 : exprpt+1]
//line pkg/logql/syntax/expr.y:223
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[5].MetricExpr, exprDollar[1].VectorOp, exprDollar[7].Grouping, &exprDollar[3].str)
		}
	case 58:
		exprDollar = exprS[exprpt-7 : exprpt+1]
//line pkg/logql/syntax/expr.y:224
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[6].MetricExpr, exprDollar[1].VectorOp, exprDollar[2].Grouping, &exprDollar[4].str)
		}
	case 59:
		exprDollar = exprS[exprpt-12 : exprpt+1]
//line pkg/logql/syntax/expr.y:229
		{
			exprVAL.LabelReplaceExpr = mustNewLabelReplaceExpr(exprDollar[3].MetricExpr, exprDollar[5].str, exprDollar[7].str, exprDollar[9].str, exprDollar[11].str)
		}
	case 60:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:233
		{
			exprVAL.Filter = labels.MatchRegexp
		}
	case 61:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:234
		{
			exprVAL.Filter = labels.MatchEqual
		}
	case 62:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:235
		{
			exprVAL.Filter = labels.MatchNotRegexp
		}
	case 63:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:236
		{
			exprVAL.Filter = labels.MatchNotEqual
		}
	case 64:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:240
		{
			exprVAL.Selector = exprDollar[2].Matchers
		}
	case 65:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:241
		{
			exprVAL.Selector = exprDollar[2].Matchers
		}
	case 66:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:242
		{
		}
	case 67:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:246
		{
			exprVAL.Matchers = []*labels.Matcher{exprDollar[1].Matcher}
		}
	case 68:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:247
		{
			exprVAL.Matchers = append(exprDollar[1].Matchers, exprDollar[3].Matcher)
		}
	case 69:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:251
		{
			exprVAL.Matcher = mustNewMatcher(labels.MatchEqual, exprDollar[1].str, exprDollar[3].str)
		}
	case 70:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:252
		{
			exprVAL.Matcher = mustNewMatcher(labels.MatchNotEqual, exprDollar[1].str, exprDollar[3].str)
		}
	case 71:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:253
		{
			exprVAL.Matcher = mustNewMatcher(labels.MatchRegexp, exprDollar[1].str, exprDollar[3].str)
		}
	case 72:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:254
		{
			exprVAL.Matcher = mustNewMatcher(labels.MatchNotRegexp, exprDollar[1].str, exprDollar[3].str)
		}
	case 73:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:258
		{
			exprVAL.PipelineExpr = MultiStageExpr{exprDollar[1].PipelineStage}
		}
	case 74:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:259
		{
			exprVAL.PipelineExpr = append(exprDollar[1].PipelineExpr, exprDollar[2].PipelineStage)
		}
	case 75:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:263
		{
			exprVAL.PipelineStage = exprDollar[1].LineFilters
		}
	case 76:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:264
		{
			exprVAL.PipelineStage = exprDollar[2].LabelParser
		}
	case 77:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:265
		{
			exprVAL.PipelineStage = exprDollar[2].JSONExpressionParser
		}
	case 78:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:266
		{
			exprVAL.PipelineStage = &LabelFilterExpr{LabelFilterer: exprDollar[2].LabelFilter}
		}
	case 79:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:267
		{
			exprVAL.PipelineStage = exprDollar[2].LineFormatExpr
		}
	case 80:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:268
		{
			exprVAL.PipelineStage = exprDollar[2].DecolorizeExpr
		}
	case 81:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:269
		{
			exprVAL.PipelineStage = exprDollar[2].LabelFormatExpr
		}
	case 82:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:273
		{
			exprVAL.FilterOp = OpFilterIP
		}
	case 83:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:277
		{
			exprVAL.LineFilter = newLineFilterExpr(exprDollar[1].Filter, "", exprDollar[2].str)
		}
	case 84:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:278
		{
			exprVAL.LineFilter = newLineFilterExpr(exprDollar[1].Filter, exprDollar[2].FilterOp, exprDollar[4].str)
		}
	case 85:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:282
		{
			exprVAL.LineFilters = exprDollar[1].LineFilter
		}
	case 86:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:283
		{
			exprVAL.LineFilters = newNestedLineFilterExpr(exprDollar[1].LineFilters, exprDollar[2].LineFilter)
		}
	case 87:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:287
		{
			exprVAL.LabelParser = newLabelParserExpr(OpParserTypeJSON, "")
		}
	case 88:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:288
		{
			exprVAL.LabelParser = newLabelParserExpr(OpParserTypeLogfmt, "")
		}
	case 89:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:289
		{
			exprVAL.LabelParser = newLabelParserExpr(OpParserTypeRegexp, exprDollar[2].str)
		}
	case 90:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:290
		{
			exprVAL.LabelParser = newLabelParserExpr(OpParserTypeUnpack, "")
		}
	case 91:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:291
		{
			exprVAL.LabelParser = newLabelParserExpr(OpParserTypePattern, exprDollar[2].str)
		}
	case 92:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:295
		{
			exprVAL.JSONExpressionParser = newJSONExpressionParser(exprDollar[2].JSONExpressionList)
		}
	case 93:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:297
		{
			exprVAL.LineFormatExpr = newLineFmtExpr(exprDollar[2].str)
		}
	case 94:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:299
		{
			exprVAL.DecolorizeExpr = newDecolorizeExpr()
		}
	case 95:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:302
		{
			exprVAL.LabelFormat = log.NewRenameLabelFmt(exprDollar[1].str, exprDollar[3].str)
		}
	case 96:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:303
		{
			exprVAL.LabelFormat = log.NewTemplateLabelFmt(exprDollar[1].str, exprDollar[3].str)
		}
	case 97:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:307
		{
			exprVAL.LabelsFormat = []log.LabelFmt{exprDollar[1].LabelFormat}
		}
	case 98:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:308
		{
			exprVAL.LabelsFormat = append(exprDollar[1].LabelsFormat, exprDollar[3].LabelFormat)
		}
	case 100:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:312
		{
			exprVAL.LabelFormatExpr = newLabelFmtExpr(exprDollar[2].LabelsFormat)
		}
	case 101:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:315
		{
			exprVAL.LabelFilter = log.NewStringLabelFilter(exprDollar[1].Matcher)
		}
	case 102:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:316
		{
			exprVAL.LabelFilter = exprDollar[1].IPLabelFilter
		}
	case 103:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:317
		{
			exprVAL.LabelFilter = exprDollar[1].UnitFilter
		}
	case 104:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:318
		{
			exprVAL.LabelFilter = exprDollar[1].NumberFilter
		}
	case 105:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:319
		{
			exprVAL.LabelFilter = exprDollar[2].LabelFilter
		}
	case 106:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:320
		{
			exprVAL.LabelFilter = log.NewAndLabelFilter(exprDollar[1].LabelFilter, exprDollar[2].LabelFilter)
		}
	case 107:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:321
		{
			exprVAL.LabelFilter = log.NewAndLabelFilter(exprDollar[1].LabelFilter, exprDollar[3].LabelFilter)
		}
	case 108:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:322
		{
			exprVAL.LabelFilter = log.NewAndLabelFilter(exprDollar[1].LabelFilter, exprDollar[3].LabelFilter)
		}
	case 109:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:323
		{
			exprVAL.LabelFilter = log.NewOrLabelFilter(exprDollar[1].LabelFilter, exprDollar[3].LabelFilter)
		}
	case 110:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:327
		{
			exprVAL.JSONExpression = log.NewJSONExpr(exprDollar[1].str, exprDollar[3].str)
		}
	case 111:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:328
		{
			exprVAL.JSONExpression = log.NewJSONExpr(exprDollar[1].str, exprDollar[1].str)
		}
	case 112:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:331
		{
			exprVAL.JSONExpressionList = []log.JSONExpression{exprDollar[1].JSONExpression}
		}
	case 113:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:332
		{
			exprVAL.JSONExpressionList = append(exprDollar[1].JSONExpressionList, exprDollar[3].JSONExpression)
		}
	case 114:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/syntax/expr.y:336
		{
			exprVAL.IPLabelFilter = log.NewIPLabelFilter(exprDollar[5].str, exprDollar[1].str, log.LabelFilterEqual)
		}
	case 115:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/syntax/expr.y:337
		{
			exprVAL.IPLabelFilter = log.NewIPLabelFilter(exprDollar[5].str, exprDollar[1].str, log.LabelFilterNotEqual)
		}
	case 116:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:341
		{
			exprVAL.UnitFilter = exprDollar[1].DurationFilter
		}
	case 117:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:342
		{
			exprVAL.UnitFilter = exprDollar[1].BytesFilter
		}
	case 118:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:345
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterGreaterThan, exprDollar[1].str, exprDollar[3].duration)
		}
	case 119:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:346
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterGreaterThanOrEqual, exprDollar[1].str, exprDollar[3].duration)
		}
	case 120:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:347
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterLesserThan, exprDollar[1].str, exprDollar[3].duration)
		}
	case 121:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:348
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterLesserThanOrEqual, exprDollar[1].str, exprDollar[3].duration)
		}
	case 122:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:349
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterNotEqual, exprDollar[1].str, exprDollar[3].duration)
		}
	case 123:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:350
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterEqual, exprDollar[1].str, exprDollar[3].duration)
		}
	case 124:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:351
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterEqual, exprDollar[1].str, exprDollar[3].duration)
		}
	case 125:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:355
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterGreaterThan, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 126:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:356
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterGreaterThanOrEqual, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 127:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:357
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterLesserThan, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 128:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:358
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterLesserThanOrEqual, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 129:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:359
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterNotEqual, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 130:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:360
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterEqual, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 131:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:361
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterEqual, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 132:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:365
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterGreaterThan, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 133:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:366
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterGreaterThanOrEqual, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 134:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:367
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterLesserThan, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 135:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:368
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterLesserThanOrEqual, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 136:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:369
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterNotEqual, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 137:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:370
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterEqual, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 138:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:371
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterEqual, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 139:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:376
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("or", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 140:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:377
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("and", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 141:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:378
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("unless", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 142:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:379
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("+", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 143:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:380
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("-", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 144:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:381
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("*", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 145:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:382
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("/", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 146:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:383
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("%", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 147:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:384
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("^", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 148:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:385
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("==", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 149:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:386
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("!=", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 150:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:387
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr(">", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 151:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:388
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr(">=", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 152:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:389
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("<", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 153:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:390
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("<=", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 154:
		exprDollar = exprS[exprpt-0 : exprpt+1]
//line pkg/logql/syntax/expr.y:394
		{
			exprVAL.BoolModifier = &BinOpOptions{VectorMatching: &VectorMatching{Card: CardOneToOne}}
		}
	case 155:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:398
		{
			exprVAL.BoolModifier = &BinOpOptions{VectorMatching: &VectorMatching{Card: CardOneToOne}, ReturnBool: true}
		}
	case 156:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:405
		{
			exprVAL.OnOrIgnoringModifier = exprDollar[1].BoolModifier
			exprVAL.OnOrIgnoringModifier.VectorMatching.On = true
			exprVAL.OnOrIgnoringModifier.VectorMatching.MatchingLabels = exprDollar[4].Labels
		}
	case 157:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:411
		{
			exprVAL.OnOrIgnoringModifier = exprDollar[1].BoolModifier
			exprVAL.OnOrIgnoringModifier.VectorMatching.On = true
		}
	case 158:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:416
		{
			exprVAL.OnOrIgnoringModifier = exprDollar[1].BoolModifier
			exprVAL.OnOrIgnoringModifier.VectorMatching.MatchingLabels = exprDollar[4].Labels
		}
	case 159:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:421
		{
			exprVAL.OnOrIgnoringModifier = exprDollar[1].BoolModifier
		}
	case 160:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:427
		{
			exprVAL.BinOpModifier = exprDollar[1].BoolModifier
		}
	case 161:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:428
		{
			exprVAL.BinOpModifier = exprDollar[1].OnOrIgnoringModifier
		}
	case 162:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:430
		{
			exprVAL.BinOpModifier = exprDollar[1].OnOrIgnoringModifier
			exprVAL.BinOpModifier.VectorMatching.Card = CardManyToOne
		}
	case 163:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:435
		{
			exprVAL.BinOpModifier = exprDollar[1].OnOrIgnoringModifier
			exprVAL.BinOpModifier.VectorMatching.Card = CardManyToOne
		}
	case 164:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:440
		{
			exprVAL.BinOpModifier = exprDollar[1].OnOrIgnoringModifier
			exprVAL.BinOpModifier.VectorMatching.Card = CardManyToOne
			exprVAL.BinOpModifier.VectorMatching.Include = exprDollar[4].Labels
		}
	case 165:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:446
		{
			exprVAL.BinOpModifier = exprDollar[1].OnOrIgnoringModifier
			exprVAL.BinOpModifier.VectorMatching.Card = CardOneToMany
		}
	case 166:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:451
		{
			exprVAL.BinOpModifier = exprDollar[1].OnOrIgnoringModifier
			exprVAL.BinOpModifier.VectorMatching.Card = CardOneToMany
		}
	case 167:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:456
		{
			exprVAL.BinOpModifier = exprDollar[1].OnOrIgnoringModifier
			exprVAL.BinOpModifier.VectorMatching.Card = CardOneToMany
			exprVAL.BinOpModifier.VectorMatching.Include = exprDollar[4].Labels
		}
	case 168:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:464
		{
			exprVAL.LiteralExpr = mustNewLiteralExpr(exprDollar[1].str, false)
		}
	case 169:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:465
		{
			exprVAL.LiteralExpr = mustNewLiteralExpr(exprDollar[2].str, false)
		}
	case 170:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:466
		{
			exprVAL.LiteralExpr = mustNewLiteralExpr(exprDollar[2].str, true)
		}
	case 171:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:470
		{
			exprVAL.VectorExpr = NewVectorExpr(exprDollar[3].str)
		}
	case 172:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:473
		{
			exprVAL.Vector = OpTypeVector
		}
	case 173:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:477
		{
			exprVAL.VectorOp = OpTypeSum
		}
	case 174:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:478
		{
			exprVAL.VectorOp = OpTypeAvg
		}
	case 175:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:479
		{
			exprVAL.VectorOp = OpTypeCount
		}
	case 176:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:480
		{
			exprVAL.VectorOp = OpTypeMax
		}
	case 177:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:481
		{
			exprVAL.VectorOp = OpTypeMin
		}
	case 178:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:482
		{
			exprVAL.VectorOp = OpTypeStddev
		}
	case 179:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:483
		{
			exprVAL.VectorOp = OpTypeStdvar
		}
	case 180:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:484
		{
			exprVAL.VectorOp = OpTypeBottomK
		}
	case 181:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:485
		{
			exprVAL.VectorOp = OpTypeTopK
		}
	case 182:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:489
		{
			exprVAL.RangeOp = OpRangeTypeCount
		}
	case 183:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:490
		{
			exprVAL.RangeOp = OpRangeTypeRate
		}
	case 184:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:491
		{
			exprVAL.RangeOp = OpRangeTypeRateCounter
		}
	case 185:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:492
		{
			exprVAL.RangeOp = OpRangeTypeBytes
		}
	case 186:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:493
		{
			exprVAL.RangeOp = OpRangeTypeBytesRate
		}
	case 187:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:494
		{
			exprVAL.RangeOp = OpRangeTypeAvg
		}
	case 188:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:495
		{
			exprVAL.RangeOp = OpRangeTypeSum
		}
	case 189:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:496
		{
			exprVAL.RangeOp = OpRangeTypeMin
		}
	case 190:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:497
		{
			exprVAL.RangeOp = OpRangeTypeMax
		}
	case 191:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:498
		{
			exprVAL.RangeOp = OpRangeTypeStdvar
		}
	case 192:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:499
		{
			exprVAL.RangeOp = OpRangeTypeStddev
		}
	case 193:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:500
		{
			exprVAL.RangeOp = OpRangeTypeQuantile
		}
	case 194:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:501
		{
			exprVAL.RangeOp = OpRangeTypeFirst
		}
	case 195:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:502
		{
			exprVAL.RangeOp = OpRangeTypeLast
		}
	case 196:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:503
		{
			exprVAL.RangeOp = OpRangeTypeAbsent
		}
	case 197:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:507
		{
			exprVAL.OffsetExpr = newOffsetExpr(exprDollar[2].duration)
		}
	case 198:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:510
		{
			exprVAL.Labels = []string{exprDollar[1].str}
		}
	case 199:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:511
		{
			exprVAL.Labels = append(exprDollar[1].Labels, exprDollar[3].str)
		}
	case 200:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:515
		{
			exprVAL.Grouping = &Grouping{Without: false, Groups: exprDollar[3].Labels}
		}
	case 201:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:516
		{
			exprVAL.Grouping = &Grouping{Without: true, Groups: exprDollar[3].Labels}
		}
	case 202:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:517
		{
			exprVAL.Grouping = &Grouping{Without: false, Groups: nil}
		}
	case 203:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:518
		{
			exprVAL.Grouping = &Grouping{Without: true, Groups: nil}
		}
	}
	goto exprstack /* stack new state and value */
}
