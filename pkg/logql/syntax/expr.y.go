// Code generated by goyacc -p expr -o pkg/logql/syntax/expr.y.go pkg/logql/syntax/expr.y. DO NOT EDIT.

//line pkg/logql/syntax/expr.y:2
package syntax

import __yyfmt__ "fmt"

//line pkg/logql/syntax/expr.y:2

import (
	"github.com/grafana/loki/pkg/logql/log"
	"github.com/prometheus/prometheus/model/labels"
	"time"
)

//line pkg/logql/syntax/expr.y:12
type exprSymType struct {
	yys                   int
	Expr                  Expr
	Filter                labels.MatchType
	Grouping              *Grouping
	Labels                []string
	LogExpr               LogSelectorExpr
	LogRangeExpr          *LogRange
	Matcher               *labels.Matcher
	Matchers              []*labels.Matcher
	RangeAggregationExpr  SampleExpr
	RangeOp               string
	ConvOp                string
	Selector              []*labels.Matcher
	VectorAggregationExpr SampleExpr
	VectorExpr            *VectorExpr
	Vector                string
	MetricExpr            SampleExpr
	VectorOp              string
	FilterOp              string
	BinOpExpr             SampleExpr
	LabelReplaceExpr      SampleExpr
	binOp                 string
	bytes                 uint64
	str                   string
	duration              time.Duration
	LiteralExpr           *LiteralExpr
	BinOpModifier         *BinOpOptions
	BoolModifier          *BinOpOptions
	OnOrIgnoringModifier  *BinOpOptions
	LabelParser           *LabelParserExpr
	LineFilters           *LineFilterExpr
	LineFilter            *LineFilterExpr
	PipelineExpr          MultiStageExpr
	PipelineStage         StageExpr
	BytesFilter           log.LabelFilterer
	NumberFilter          log.LabelFilterer
	DurationFilter        log.LabelFilterer
	LabelFilter           log.LabelFilterer
	UnitFilter            log.LabelFilterer
	IPLabelFilter         log.LabelFilterer
	LineFormatExpr        *LineFmtExpr
	LabelFormatExpr       *LabelFmtExpr
	LabelFormat           log.LabelFmt
	LabelsFormat          []log.LabelFmt
	JSONExpressionParser  *JSONExpressionParser
	JSONExpression        log.JSONExpression
	JSONExpressionList    []log.JSONExpression
	UnwrapExpr            *UnwrapExpr
	DecolorizeExpr        *DecolorizeExpr
	OffsetExpr            *OffsetExpr
}

const BYTES = 57346
const IDENTIFIER = 57347
const STRING = 57348
const NUMBER = 57349
const DURATION = 57350
const RANGE = 57351
const MATCHERS = 57352
const LABELS = 57353
const EQ = 57354
const RE = 57355
const NRE = 57356
const OPEN_BRACE = 57357
const CLOSE_BRACE = 57358
const OPEN_BRACKET = 57359
const CLOSE_BRACKET = 57360
const COMMA = 57361
const DOT = 57362
const PIPE_MATCH = 57363
const PIPE_EXACT = 57364
const OPEN_PARENTHESIS = 57365
const CLOSE_PARENTHESIS = 57366
const BY = 57367
const WITHOUT = 57368
const COUNT_OVER_TIME = 57369
const RATE = 57370
const RATE_COUNTER = 57371
const SUM = 57372
const SORT = 57373
const SORT_DESC = 57374
const AVG = 57375
const MAX = 57376
const MIN = 57377
const COUNT = 57378
const STDDEV = 57379
const STDVAR = 57380
const BOTTOMK = 57381
const TOPK = 57382
const BYTES_OVER_TIME = 57383
const BYTES_RATE = 57384
const BOOL = 57385
const JSON = 57386
const REGEXP = 57387
const LOGFMT = 57388
const PIPE = 57389
const LINE_FMT = 57390
const LABEL_FMT = 57391
const UNWRAP = 57392
const AVG_OVER_TIME = 57393
const SUM_OVER_TIME = 57394
const MIN_OVER_TIME = 57395
const MAX_OVER_TIME = 57396
const STDVAR_OVER_TIME = 57397
const STDDEV_OVER_TIME = 57398
const QUANTILE_OVER_TIME = 57399
const BYTES_CONV = 57400
const DURATION_CONV = 57401
const DURATION_SECONDS_CONV = 57402
const FIRST_OVER_TIME = 57403
const LAST_OVER_TIME = 57404
const ABSENT_OVER_TIME = 57405
const VECTOR = 57406
const LABEL_REPLACE = 57407
const UNPACK = 57408
const OFFSET = 57409
const PATTERN = 57410
const IP = 57411
const ON = 57412
const IGNORING = 57413
const GROUP_LEFT = 57414
const GROUP_RIGHT = 57415
const DECOLORIZE = 57416
const OR = 57417
const AND = 57418
const UNLESS = 57419
const CMP_EQ = 57420
const NEQ = 57421
const LT = 57422
const LTE = 57423
const GT = 57424
const GTE = 57425
const ADD = 57426
const SUB = 57427
const MUL = 57428
const DIV = 57429
const MOD = 57430
const POW = 57431

var exprToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"BYTES",
	"IDENTIFIER",
	"STRING",
	"NUMBER",
	"DURATION",
	"RANGE",
	"MATCHERS",
	"LABELS",
	"EQ",
	"RE",
	"NRE",
	"OPEN_BRACE",
	"CLOSE_BRACE",
	"OPEN_BRACKET",
	"CLOSE_BRACKET",
	"COMMA",
	"DOT",
	"PIPE_MATCH",
	"PIPE_EXACT",
	"OPEN_PARENTHESIS",
	"CLOSE_PARENTHESIS",
	"BY",
	"WITHOUT",
	"COUNT_OVER_TIME",
	"RATE",
	"RATE_COUNTER",
	"SUM",
	"SORT",
	"SORT_DESC",
	"AVG",
	"MAX",
	"MIN",
	"COUNT",
	"STDDEV",
	"STDVAR",
	"BOTTOMK",
	"TOPK",
	"BYTES_OVER_TIME",
	"BYTES_RATE",
	"BOOL",
	"JSON",
	"REGEXP",
	"LOGFMT",
	"PIPE",
	"LINE_FMT",
	"LABEL_FMT",
	"UNWRAP",
	"AVG_OVER_TIME",
	"SUM_OVER_TIME",
	"MIN_OVER_TIME",
	"MAX_OVER_TIME",
	"STDVAR_OVER_TIME",
	"STDDEV_OVER_TIME",
	"QUANTILE_OVER_TIME",
	"BYTES_CONV",
	"DURATION_CONV",
	"DURATION_SECONDS_CONV",
	"FIRST_OVER_TIME",
	"LAST_OVER_TIME",
	"ABSENT_OVER_TIME",
	"VECTOR",
	"LABEL_REPLACE",
	"UNPACK",
	"OFFSET",
	"PATTERN",
	"IP",
	"ON",
	"IGNORING",
	"GROUP_LEFT",
	"GROUP_RIGHT",
	"DECOLORIZE",
	"OR",
	"AND",
	"UNLESS",
	"CMP_EQ",
	"NEQ",
	"LT",
	"LTE",
	"GT",
	"GTE",
	"ADD",
	"SUB",
	"MUL",
	"DIV",
	"MOD",
	"POW",
}

var exprStatenames = [...]string{}

const exprEofCode = 1
const exprErrCode = 2
const exprInitialStackSize = 16

//line pkg/logql/syntax/expr.y:509

//line yacctab:1
var exprExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const exprPrivate = 57344

const exprLast = 551

var exprAct = [...]int16{
	258, 204, 82, 4, 185, 64, 173, 5, 178, 213,
	73, 120, 56, 63, 261, 143, 75, 2, 51, 52,
	53, 54, 55, 56, 266, 78, 48, 49, 50, 57,
	58, 61, 62, 59, 60, 51, 52, 53, 54, 55,
	56, 49, 50, 57, 58, 61, 62, 59, 60, 51,
	52, 53, 54, 55, 56, 57, 58, 61, 62, 59,
	60, 51, 52, 53, 54, 55, 56, 157, 158, 107,
	187, 141, 142, 111, 53, 54, 55, 56, 330, 139,
	141, 142, 71, 155, 156, 147, 131, 264, 145, 69,
	70, 152, 71, 263, 67, 330, 264, 92, 261, 69,
	70, 71, 312, 348, 83, 84, 154, 350, 69, 70,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 345, 206, 304, 262, 338, 304,
	203, 182, 337, 128, 206, 71, 193, 188, 191, 192,
	189, 190, 69, 70, 333, 267, 140, 72, 262, 133,
	195, 124, 327, 211, 207, 335, 314, 72, 200, 205,
	108, 216, 208, 311, 263, 263, 72, 263, 206, 200,
	275, 128, 115, 117, 116, 321, 125, 127, 266, 200,
	296, 224, 225, 226, 305, 175, 263, 275, 275, 124,
	71, 270, 320, 319, 118, 295, 119, 69, 70, 273,
	72, 201, 126, 203, 256, 259, 128, 265, 71, 268,
	145, 107, 271, 111, 272, 69, 70, 260, 257, 71,
	175, 269, 128, 206, 124, 229, 69, 70, 219, 275,
	279, 281, 284, 286, 318, 289, 287, 307, 308, 309,
	124, 206, 174, 261, 209, 81, 128, 83, 84, 71,
	215, 144, 206, 275, 135, 72, 69, 70, 277, 13,
	297, 215, 299, 301, 124, 303, 107, 146, 344, 285,
	302, 313, 298, 72, 134, 107, 176, 174, 315, 128,
	283, 294, 66, 215, 72, 115, 117, 116, 293, 125,
	127, 275, 128, 175, 215, 317, 276, 124, 223, 324,
	325, 215, 282, 215, 107, 326, 175, 118, 13, 119,
	124, 328, 329, 280, 72, 126, 146, 334, 222, 274,
	217, 238, 214, 197, 239, 237, 16, 221, 220, 194,
	340, 151, 341, 342, 13, 234, 150, 196, 235, 233,
	230, 149, 6, 88, 346, 87, 21, 22, 23, 36,
	45, 46, 37, 39, 40, 38, 41, 42, 43, 44,
	24, 25, 176, 174, 80, 227, 218, 210, 202, 231,
	26, 27, 28, 29, 30, 31, 32, 137, 79, 228,
	33, 34, 35, 47, 19, 212, 236, 153, 343, 77,
	332, 136, 253, 13, 138, 254, 252, 349, 331, 310,
	232, 6, 300, 17, 18, 21, 22, 23, 36, 45,
	46, 37, 39, 40, 38, 41, 42, 43, 44, 24,
	25, 250, 86, 247, 251, 249, 248, 246, 85, 26,
	27, 28, 29, 30, 31, 32, 291, 292, 347, 33,
	34, 35, 47, 19, 148, 244, 336, 241, 245, 243,
	242, 240, 13, 89, 3, 323, 322, 288, 278, 255,
	6, 74, 17, 18, 21, 22, 23, 36, 45, 46,
	37, 39, 40, 38, 41, 42, 43, 44, 24, 25,
	290, 199, 198, 186, 121, 197, 196, 183, 26, 27,
	28, 29, 30, 31, 32, 181, 180, 339, 33, 34,
	35, 47, 19, 93, 94, 95, 96, 97, 98, 99,
	100, 101, 102, 103, 104, 105, 106, 316, 179, 79,
	186, 17, 18, 122, 177, 110, 184, 114, 113, 112,
	65, 129, 123, 130, 109, 91, 90, 11, 10, 9,
	132, 20, 12, 15, 8, 306, 14, 7, 76, 68,
	1,
}

var exprPact = [...]int16{
	319, -1000, -49, -1000, -1000, 235, 319, -1000, -1000, -1000,
	-1000, -1000, -1000, 373, 341, 222, -1000, 421, 415, 322,
	320, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	54, 54, 54, 235, -1000, 68, 241, -1000, 80, -1000,
	-1000, -1000, -1000, 250, 230, -49, 375, -1000, -1000, 67,
	244, 437, 318, 313, 308, -1000, -1000, 319, 380, 319,
	13, -5, -1000, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, -1000, -1000, -1000,
	-1000, 287, -1000, -1000, -1000, 513, -1000, 490, -1000, 489,
	-1000, -1000, -1000, -1000, 217, 481, -1000, 515, 58, -1000,
	-1000, -1000, 306, -1000, -1000, -1000, -1000, -1000, 514, 480,
	479, 476, 475, 177, 349, 194, 293, 220, 348, 378,
	298, 296, 347, 204, -35, 305, 304, 295, 275, -23,
	-23, -12, -12, -77, -77, -77, -77, -66, -66, -66,
	-66, -66, -66, 287, 217, 217, 217, 346, -1000, 367,
	-1000, -1000, 201, -1000, 321, -1000, 357, 331, 317, 443,
	441, 419, 417, 388, 453, -1000, -1000, -1000, -1000, -1000,
	-1000, 79, 293, 176, 118, 87, 128, 121, 167, 79,
	319, 175, 300, 272, -1000, -1000, 234, -1000, 452, -1000,
	289, 278, 256, 245, 274, 287, 166, 513, 451, -1000,
	478, 431, 265, -1000, -1000, -1000, 258, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 171, -1000, 156, 205, 46,
	205, 394, -53, 217, -53, 117, 179, 390, 139, 78,
	-1000, -1000, 132, -1000, 319, 512, -1000, -1000, 276, 210,
	-1000, 169, -1000, -1000, 168, -1000, 151, -1000, -1000, -1000,
	-1000, -1000, -1000, 450, 449, -1000, 79, 46, 205, 46,
	-1000, -1000, 287, -1000, -53, -1000, 129, -1000, -1000, -1000,
	31, 389, 381, 120, 79, 131, -1000, 440, -1000, -1000,
	-1000, -1000, 108, 104, -1000, 46, -1000, 492, 48, 46,
	-26, -53, -53, 379, -1000, -1000, 249, -1000, -1000, 100,
	46, -1000, -1000, -53, 432, -1000, -1000, 84, 391, 83,
	-1000,
}

var exprPgo = [...]int16{
	0, 550, 16, 549, 2, 9, 454, 3, 15, 11,
	548, 547, 546, 545, 7, 544, 543, 542, 541, 540,
	539, 538, 537, 453, 536, 535, 534, 13, 5, 533,
	532, 531, 6, 530, 94, 529, 528, 527, 4, 526,
	525, 8, 524, 1, 523, 484, 0,
}

var exprR1 = [...]int8{
	0, 1, 2, 2, 7, 7, 7, 7, 7, 7,
	7, 6, 6, 6, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
	43, 43, 43, 13, 13, 13, 11, 11, 11, 11,
	15, 15, 15, 15, 15, 15, 22, 3, 3, 3,
	3, 14, 14, 14, 10, 10, 9, 9, 9, 9,
	27, 27, 28, 28, 28, 28, 28, 28, 28, 19,
	34, 34, 33, 33, 26, 26, 26, 26, 26, 40,
	35, 36, 38, 38, 39, 39, 39, 37, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 41, 41, 42,
	42, 45, 45, 44, 44, 31, 31, 31, 31, 31,
	31, 31, 29, 29, 29, 29, 29, 29, 29, 30,
	30, 30, 30, 30, 30, 30, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 24, 24, 25, 25, 25, 25, 23, 23, 23,
	23, 23, 23, 23, 23, 21, 21, 21, 17, 18,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 46, 5, 5, 4,
	4, 4, 4,
}

var exprR2 = [...]int8{
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 2, 3, 2, 3, 4, 5, 3, 4,
	5, 6, 3, 4, 5, 6, 3, 4, 5, 6,
	4, 5, 6, 7, 3, 4, 4, 5, 3, 2,
	3, 6, 3, 1, 1, 1, 4, 6, 5, 7,
	4, 5, 5, 6, 7, 7, 12, 1, 1, 1,
	1, 3, 3, 2, 1, 3, 3, 3, 3, 3,
	1, 2, 1, 2, 2, 2, 2, 2, 2, 1,
	2, 5, 1, 2, 1, 1, 2, 1, 2, 2,
	2, 1, 3, 3, 1, 3, 3, 2, 1, 1,
	1, 1, 3, 2, 3, 3, 3, 3, 1, 1,
	3, 6, 6, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 0, 1, 5, 4, 5, 4, 1, 1, 2,
	4, 5, 2, 4, 5, 1, 2, 2, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 3, 4,
	4, 3, 3,
}

var exprChk = [...]int16{
	-1000, -1, -2, -6, -7, -14, 23, -11, -15, -20,
	-21, -22, -17, 15, -12, -16, 7, 84, 85, 65,
	-18, 27, 28, 29, 41, 42, 51, 52, 53, 54,
	55, 56, 57, 61, 62, 63, 30, 33, 36, 34,
	35, 37, 38, 39, 40, 31, 32, 64, 75, 76,
	77, 84, 85, 86, 87, 88, 89, 78, 79, 82,
	83, 80, 81, -27, -28, -33, 47, -34, -3, 21,
	22, 14, 79, -7, -6, -2, -10, 16, -9, 5,
	23, 23, -4, 25, 26, 7, 7, 23, 23, -23,
	-24, -25, 43, -23, -23, -23, -23, -23, -23, -23,
	-23, -23, -23, -23, -23, -23, -23, -28, -34, -26,
	-40, -32, -35, -36, -37, 44, 46, 45, 66, 68,
	-9, -45, -44, -30, 23, 48, 74, 49, 5, -31,
	-29, 6, -19, 69, 24, 24, 16, 2, 19, 12,
	79, 13, 14, -8, 7, -14, 23, -7, 7, 23,
	23, 23, -7, 7, -2, 70, 71, 72, 73, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -32, 76, 19, 75, -42, -41, 5,
	6, 6, -32, 6, -39, -38, 5, 12, 79, 82,
	83, 80, 81, 78, 23, -9, 6, 6, 6, 6,
	2, 24, 19, 9, -43, -27, 47, -14, -8, 24,
	19, -7, 7, -5, 24, 5, -5, 24, 19, 24,
	23, 23, 23, 23, -32, -32, -32, 19, 12, 24,
	19, 12, 69, 8, 4, 7, 69, 8, 4, 7,
	8, 4, 7, 8, 4, 7, 8, 4, 7, 8,
	4, 7, 8, 4, 7, 6, -4, -8, -46, -43,
	-27, 67, 9, 47, 9, -43, 50, 24, -43, -27,
	24, -4, -7, 24, 19, 19, 24, 24, 6, -5,
	24, -5, 24, 24, -5, 24, -5, -41, 6, -38,
	2, 5, 6, 23, 23, 24, 24, -43, -27, -43,
	8, -46, -32, -46, 9, 5, -13, 58, 59, 60,
	9, 24, 24, -43, 24, -7, 5, 19, 24, 24,
	24, 24, 6, 6, -4, -43, -46, 23, -46, -43,
	47, 9, 9, 24, -4, 24, 6, 24, 24, 5,
	-43, -46, -46, 9, 19, 24, -46, 6, 19, 6,
	24,
}

var exprDef = [...]int16{
	0, -2, 1, 2, 3, 11, 0, 4, 5, 6,
	7, 8, 9, 0, 0, 0, 165, 0, 0, 0,
	0, 181, 182, 183, 184, 185, 186, 187, 188, 189,
	190, 191, 192, 193, 194, 195, 170, 171, 172, 173,
	174, 175, 176, 177, 178, 179, 180, 169, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 12, 70, 72, 0, 82, 0, 57,
	58, 59, 60, 3, 2, 0, 0, 63, 64, 0,
	0, 0, 0, 0, 0, 166, 167, 0, 0, 0,
	157, 158, 152, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 71, 83, 73,
	74, 75, 76, 77, 78, 84, 85, 0, 87, 0,
	98, 99, 100, 101, 0, 0, 91, 0, 0, 113,
	114, 80, 0, 79, 10, 13, 61, 62, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3, 165, 0,
	0, 0, 3, 0, 136, 0, 0, 159, 162, 137,
	138, 139, 140, 141, 142, 143, 144, 145, 146, 147,
	148, 149, 150, 103, 0, 0, 0, 89, 109, 108,
	86, 88, 0, 90, 97, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 65, 66, 67, 68, 69,
	39, 46, 0, 14, 0, 0, 0, 0, 0, 50,
	0, 3, 165, 0, 201, 197, 0, 202, 0, 168,
	0, 0, 0, 0, 104, 105, 106, 0, 0, 102,
	0, 0, 0, 120, 127, 134, 0, 119, 126, 133,
	115, 122, 129, 116, 123, 130, 117, 124, 131, 118,
	125, 132, 121, 128, 135, 0, 48, 0, 15, 18,
	34, 0, 22, 0, 26, 0, 0, 0, 0, 0,
	38, 52, 3, 51, 0, 0, 199, 200, 0, 0,
	154, 0, 156, 160, 0, 163, 0, 110, 107, 95,
	96, 92, 93, 0, 0, 81, 47, 19, 35, 36,
	196, 23, 42, 27, 30, 40, 0, 43, 44, 45,
	16, 0, 0, 0, 53, 3, 198, 0, 153, 155,
	161, 164, 0, 0, 49, 37, 31, 0, 17, 20,
	0, 24, 28, 0, 54, 55, 0, 111, 112, 0,
	21, 25, 29, 32, 0, 41, 33, 0, 0, 0,
	56,
}

var exprTok1 = [...]int8{
	1,
}

var exprTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89,
}

var exprTok3 = [...]int8{
	0,
}

var exprErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	exprDebug        = 0
	exprErrorVerbose = false
)

type exprLexer interface {
	Lex(lval *exprSymType) int
	Error(s string)
}

type exprParser interface {
	Parse(exprLexer) int
	Lookahead() int
}

type exprParserImpl struct {
	lval  exprSymType
	stack [exprInitialStackSize]exprSymType
	char  int
}

func (p *exprParserImpl) Lookahead() int {
	return p.char
}

func exprNewParser() exprParser {
	return &exprParserImpl{}
}

const exprFlag = -1000

func exprTokname(c int) string {
	if c >= 1 && c-1 < len(exprToknames) {
		if exprToknames[c-1] != "" {
			return exprToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func exprStatname(s int) string {
	if s >= 0 && s < len(exprStatenames) {
		if exprStatenames[s] != "" {
			return exprStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func exprErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !exprErrorVerbose {
		return "syntax error"
	}

	for _, e := range exprErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + exprTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(exprPact[state])
	for tok := TOKSTART; tok-1 < len(exprToknames); tok++ {
		if n := base + tok; n >= 0 && n < exprLast && int(exprChk[int(exprAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if exprDef[state] == -2 {
		i := 0
		for exprExca[i] != -1 || int(exprExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; exprExca[i] >= 0; i += 2 {
			tok := int(exprExca[i])
			if tok < TOKSTART || exprExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if exprExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += exprTokname(tok)
	}
	return res
}

func exprlex1(lex exprLexer, lval *exprSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(exprTok1[0])
		goto out
	}
	if char < len(exprTok1) {
		token = int(exprTok1[char])
		goto out
	}
	if char >= exprPrivate {
		if char < exprPrivate+len(exprTok2) {
			token = int(exprTok2[char-exprPrivate])
			goto out
		}
	}
	for i := 0; i < len(exprTok3); i += 2 {
		token = int(exprTok3[i+0])
		if token == char {
			token = int(exprTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(exprTok2[1]) /* unknown char */
	}
	if exprDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", exprTokname(token), uint(char))
	}
	return char, token
}

func exprParse(exprlex exprLexer) int {
	return exprNewParser().Parse(exprlex)
}

func (exprrcvr *exprParserImpl) Parse(exprlex exprLexer) int {
	var exprn int
	var exprVAL exprSymType
	var exprDollar []exprSymType
	_ = exprDollar // silence set and not used
	exprS := exprrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	exprstate := 0
	exprrcvr.char = -1
	exprtoken := -1 // exprrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		exprstate = -1
		exprrcvr.char = -1
		exprtoken = -1
	}()
	exprp := -1
	goto exprstack

ret0:
	return 0

ret1:
	return 1

exprstack:
	/* put a state and value onto the stack */
	if exprDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", exprTokname(exprtoken), exprStatname(exprstate))
	}

	exprp++
	if exprp >= len(exprS) {
		nyys := make([]exprSymType, len(exprS)*2)
		copy(nyys, exprS)
		exprS = nyys
	}
	exprS[exprp] = exprVAL
	exprS[exprp].yys = exprstate

exprnewstate:
	exprn = int(exprPact[exprstate])
	if exprn <= exprFlag {
		goto exprdefault /* simple state */
	}
	if exprrcvr.char < 0 {
		exprrcvr.char, exprtoken = exprlex1(exprlex, &exprrcvr.lval)
	}
	exprn += exprtoken
	if exprn < 0 || exprn >= exprLast {
		goto exprdefault
	}
	exprn = int(exprAct[exprn])
	if int(exprChk[exprn]) == exprtoken { /* valid shift */
		exprrcvr.char = -1
		exprtoken = -1
		exprVAL = exprrcvr.lval
		exprstate = exprn
		if Errflag > 0 {
			Errflag--
		}
		goto exprstack
	}

exprdefault:
	/* default state action */
	exprn = int(exprDef[exprstate])
	if exprn == -2 {
		if exprrcvr.char < 0 {
			exprrcvr.char, exprtoken = exprlex1(exprlex, &exprrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if exprExca[xi+0] == -1 && int(exprExca[xi+1]) == exprstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			exprn = int(exprExca[xi+0])
			if exprn < 0 || exprn == exprtoken {
				break
			}
		}
		exprn = int(exprExca[xi+1])
		if exprn < 0 {
			goto ret0
		}
	}
	if exprn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			exprlex.Error(exprErrorMessage(exprstate, exprtoken))
			Nerrs++
			if exprDebug >= 1 {
				__yyfmt__.Printf("%s", exprStatname(exprstate))
				__yyfmt__.Printf(" saw %s\n", exprTokname(exprtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for exprp >= 0 {
				exprn = int(exprPact[exprS[exprp].yys]) + exprErrCode
				if exprn >= 0 && exprn < exprLast {
					exprstate = int(exprAct[exprn]) /* simulate a shift of "error" */
					if int(exprChk[exprstate]) == exprErrCode {
						goto exprstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if exprDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", exprS[exprp].yys)
				}
				exprp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if exprDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", exprTokname(exprtoken))
			}
			if exprtoken == exprEofCode {
				goto ret1
			}
			exprrcvr.char = -1
			exprtoken = -1
			goto exprnewstate /* try again in the same state */
		}
	}

	/* reduction by production exprn */
	if exprDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", exprn, exprStatname(exprstate))
	}

	exprnt := exprn
	exprpt := exprp
	_ = exprpt // guard against "declared and not used"

	exprp -= int(exprR2[exprn])
	// exprp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if exprp+1 >= len(exprS) {
		nyys := make([]exprSymType, len(exprS)*2)
		copy(nyys, exprS)
		exprS = nyys
	}
	exprVAL = exprS[exprp+1]

	/* consult goto table to find next state */
	exprn = int(exprR1[exprn])
	exprg := int(exprPgo[exprn])
	exprj := exprg + exprS[exprp].yys + 1

	if exprj >= exprLast {
		exprstate = int(exprAct[exprg])
	} else {
		exprstate = int(exprAct[exprj])
		if int(exprChk[exprstate]) != -exprn {
			exprstate = int(exprAct[exprg])
		}
	}
	// dummy call; replaced with literal code
	switch exprnt {

	case 1:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:132
		{
			exprlex.(*parser).expr = exprDollar[1].Expr
		}
	case 2:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:135
		{
			exprVAL.Expr = exprDollar[1].LogExpr
		}
	case 3:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:136
		{
			exprVAL.Expr = exprDollar[1].MetricExpr
		}
	case 4:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:140
		{
			exprVAL.MetricExpr = exprDollar[1].RangeAggregationExpr
		}
	case 5:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:141
		{
			exprVAL.MetricExpr = exprDollar[1].VectorAggregationExpr
		}
	case 6:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:142
		{
			exprVAL.MetricExpr = exprDollar[1].BinOpExpr
		}
	case 7:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:143
		{
			exprVAL.MetricExpr = exprDollar[1].LiteralExpr
		}
	case 8:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:144
		{
			exprVAL.MetricExpr = exprDollar[1].LabelReplaceExpr
		}
	case 9:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:145
		{
			exprVAL.MetricExpr = exprDollar[1].VectorExpr
		}
	case 10:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:146
		{
			exprVAL.MetricExpr = exprDollar[2].MetricExpr
		}
	case 11:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:150
		{
			exprVAL.LogExpr = newMatcherExpr(exprDollar[1].Selector)
		}
	case 12:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:151
		{
			exprVAL.LogExpr = newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].PipelineExpr)
		}
	case 13:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:152
		{
			exprVAL.LogExpr = exprDollar[2].LogExpr
		}
	case 14:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:156
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].duration, nil, nil)
		}
	case 15:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:157
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].duration, nil, exprDollar[3].OffsetExpr)
		}
	case 16:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:158
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[4].duration, nil, nil)
		}
	case 17:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:159
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[4].duration, nil, exprDollar[5].OffsetExpr)
		}
	case 18:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:160
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].duration, exprDollar[3].UnwrapExpr, nil)
		}
	case 19:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:161
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].duration, exprDollar[4].UnwrapExpr, exprDollar[3].OffsetExpr)
		}
	case 20:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:162
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[4].duration, exprDollar[5].UnwrapExpr, nil)
		}
	case 21:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/syntax/expr.y:163
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[4].duration, exprDollar[6].UnwrapExpr, exprDollar[5].OffsetExpr)
		}
	case 22:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:164
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[3].duration, exprDollar[2].UnwrapExpr, nil)
		}
	case 23:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:165
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[3].duration, exprDollar[2].UnwrapExpr, exprDollar[4].OffsetExpr)
		}
	case 24:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:166
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[5].duration, exprDollar[3].UnwrapExpr, nil)
		}
	case 25:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/syntax/expr.y:167
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[5].duration, exprDollar[3].UnwrapExpr, exprDollar[6].OffsetExpr)
		}
	case 26:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:168
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].PipelineExpr), exprDollar[3].duration, nil, nil)
		}
	case 27:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:169
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].PipelineExpr), exprDollar[3].duration, nil, exprDollar[4].OffsetExpr)
		}
	case 28:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:170
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[2].Selector), exprDollar[3].PipelineExpr), exprDollar[5].duration, nil, nil)
		}
	case 29:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/syntax/expr.y:171
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[2].Selector), exprDollar[3].PipelineExpr), exprDollar[5].duration, nil, exprDollar[6].OffsetExpr)
		}
	case 30:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:172
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].PipelineExpr), exprDollar[4].duration, exprDollar[3].UnwrapExpr, nil)
		}
	case 31:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:173
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].PipelineExpr), exprDollar[4].duration, exprDollar[3].UnwrapExpr, exprDollar[5].OffsetExpr)
		}
	case 32:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/syntax/expr.y:174
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[2].Selector), exprDollar[3].PipelineExpr), exprDollar[6].duration, exprDollar[4].UnwrapExpr, nil)
		}
	case 33:
		exprDollar = exprS[exprpt-7 : exprpt+1]
//line pkg/logql/syntax/expr.y:175
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[2].Selector), exprDollar[3].PipelineExpr), exprDollar[6].duration, exprDollar[4].UnwrapExpr, exprDollar[7].OffsetExpr)
		}
	case 34:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:176
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[3].PipelineExpr), exprDollar[2].duration, nil, nil)
		}
	case 35:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:177
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[4].PipelineExpr), exprDollar[2].duration, nil, exprDollar[3].OffsetExpr)
		}
	case 36:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:178
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[3].PipelineExpr), exprDollar[2].duration, exprDollar[4].UnwrapExpr, nil)
		}
	case 37:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:179
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[4].PipelineExpr), exprDollar[2].duration, exprDollar[5].UnwrapExpr, exprDollar[3].OffsetExpr)
		}
	case 38:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:180
		{
			exprVAL.LogRangeExpr = exprDollar[2].LogRangeExpr
		}
	case 40:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:185
		{
			exprVAL.UnwrapExpr = newUnwrapExpr(exprDollar[3].str, "")
		}
	case 41:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/syntax/expr.y:186
		{
			exprVAL.UnwrapExpr = newUnwrapExpr(exprDollar[5].str, exprDollar[3].ConvOp)
		}
	case 42:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:187
		{
			exprVAL.UnwrapExpr = exprDollar[1].UnwrapExpr.addPostFilter(exprDollar[3].LabelFilter)
		}
	case 43:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:191
		{
			exprVAL.ConvOp = OpConvBytes
		}
	case 44:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:192
		{
			exprVAL.ConvOp = OpConvDuration
		}
	case 45:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:193
		{
			exprVAL.ConvOp = OpConvDurationSeconds
		}
	case 46:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:197
		{
			exprVAL.RangeAggregationExpr = newRangeAggregationExpr(exprDollar[3].LogRangeExpr, exprDollar[1].RangeOp, nil, nil)
		}
	case 47:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/syntax/expr.y:198
		{
			exprVAL.RangeAggregationExpr = newRangeAggregationExpr(exprDollar[5].LogRangeExpr, exprDollar[1].RangeOp, nil, &exprDollar[3].str)
		}
	case 48:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:199
		{
			exprVAL.RangeAggregationExpr = newRangeAggregationExpr(exprDollar[3].LogRangeExpr, exprDollar[1].RangeOp, exprDollar[5].Grouping, nil)
		}
	case 49:
		exprDollar = exprS[exprpt-7 : exprpt+1]
//line pkg/logql/syntax/expr.y:200
		{
			exprVAL.RangeAggregationExpr = newRangeAggregationExpr(exprDollar[5].LogRangeExpr, exprDollar[1].RangeOp, exprDollar[7].Grouping, &exprDollar[3].str)
		}
	case 50:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:205
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[3].MetricExpr, exprDollar[1].VectorOp, nil, nil)
		}
	case 51:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:206
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[4].MetricExpr, exprDollar[1].VectorOp, exprDollar[2].Grouping, nil)
		}
	case 52:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:207
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[3].MetricExpr, exprDollar[1].VectorOp, exprDollar[5].Grouping, nil)
		}
	case 53:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/syntax/expr.y:209
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[5].MetricExpr, exprDollar[1].VectorOp, nil, &exprDollar[3].str)
		}
	case 54:
		exprDollar = exprS[exprpt-7 : exprpt+1]
//line pkg/logql/syntax/expr.y:210
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[5].MetricExpr, exprDollar[1].VectorOp, exprDollar[7].Grouping, &exprDollar[3].str)
		}
	case 55:
		exprDollar = exprS[exprpt-7 : exprpt+1]
//line pkg/logql/syntax/expr.y:211
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[6].MetricExpr, exprDollar[1].VectorOp, exprDollar[2].Grouping, &exprDollar[4].str)
		}
	case 56:
		exprDollar = exprS[exprpt-12 : exprpt+1]
//line pkg/logql/syntax/expr.y:216
		{
			exprVAL.LabelReplaceExpr = mustNewLabelReplaceExpr(exprDollar[3].MetricExpr, exprDollar[5].str, exprDollar[7].str, exprDollar[9].str, exprDollar[11].str)
		}
	case 57:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:220
		{
			exprVAL.Filter = labels.MatchRegexp
		}
	case 58:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:221
		{
			exprVAL.Filter = labels.MatchEqual
		}
	case 59:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:222
		{
			exprVAL.Filter = labels.MatchNotRegexp
		}
	case 60:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:223
		{
			exprVAL.Filter = labels.MatchNotEqual
		}
	case 61:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:227
		{
			exprVAL.Selector = exprDollar[2].Matchers
		}
	case 62:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:228
		{
			exprVAL.Selector = exprDollar[2].Matchers
		}
	case 63:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:229
		{
		}
	case 64:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:233
		{
			exprVAL.Matchers = []*labels.Matcher{exprDollar[1].Matcher}
		}
	case 65:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:234
		{
			exprVAL.Matchers = append(exprDollar[1].Matchers, exprDollar[3].Matcher)
		}
	case 66:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:238
		{
			exprVAL.Matcher = mustNewMatcher(labels.MatchEqual, exprDollar[1].str, exprDollar[3].str)
		}
	case 67:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:239
		{
			exprVAL.Matcher = mustNewMatcher(labels.MatchNotEqual, exprDollar[1].str, exprDollar[3].str)
		}
	case 68:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:240
		{
			exprVAL.Matcher = mustNewMatcher(labels.MatchRegexp, exprDollar[1].str, exprDollar[3].str)
		}
	case 69:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:241
		{
			exprVAL.Matcher = mustNewMatcher(labels.MatchNotRegexp, exprDollar[1].str, exprDollar[3].str)
		}
	case 70:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:245
		{
			exprVAL.PipelineExpr = MultiStageExpr{exprDollar[1].PipelineStage}
		}
	case 71:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:246
		{
			exprVAL.PipelineExpr = append(exprDollar[1].PipelineExpr, exprDollar[2].PipelineStage)
		}
	case 72:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:250
		{
			exprVAL.PipelineStage = exprDollar[1].LineFilters
		}
	case 73:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:251
		{
			exprVAL.PipelineStage = exprDollar[2].LabelParser
		}
	case 74:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:252
		{
			exprVAL.PipelineStage = exprDollar[2].JSONExpressionParser
		}
	case 75:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:253
		{
			exprVAL.PipelineStage = &LabelFilterExpr{LabelFilterer: exprDollar[2].LabelFilter}
		}
	case 76:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:254
		{
			exprVAL.PipelineStage = exprDollar[2].LineFormatExpr
		}
	case 77:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:255
		{
			exprVAL.PipelineStage = exprDollar[2].DecolorizeExpr
		}
	case 78:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:256
		{
			exprVAL.PipelineStage = exprDollar[2].LabelFormatExpr
		}
	case 79:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:260
		{
			exprVAL.FilterOp = OpFilterIP
		}
	case 80:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:264
		{
			exprVAL.LineFilter = newLineFilterExpr(exprDollar[1].Filter, "", exprDollar[2].str)
		}
	case 81:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:265
		{
			exprVAL.LineFilter = newLineFilterExpr(exprDollar[1].Filter, exprDollar[2].FilterOp, exprDollar[4].str)
		}
	case 82:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:269
		{
			exprVAL.LineFilters = exprDollar[1].LineFilter
		}
	case 83:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:270
		{
			exprVAL.LineFilters = newNestedLineFilterExpr(exprDollar[1].LineFilters, exprDollar[2].LineFilter)
		}
	case 84:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:274
		{
			exprVAL.LabelParser = newLabelParserExpr(OpParserTypeJSON, "")
		}
	case 85:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:275
		{
			exprVAL.LabelParser = newLabelParserExpr(OpParserTypeLogfmt, "")
		}
	case 86:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:276
		{
			exprVAL.LabelParser = newLabelParserExpr(OpParserTypeRegexp, exprDollar[2].str)
		}
	case 87:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:277
		{
			exprVAL.LabelParser = newLabelParserExpr(OpParserTypeUnpack, "")
		}
	case 88:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:278
		{
			exprVAL.LabelParser = newLabelParserExpr(OpParserTypePattern, exprDollar[2].str)
		}
	case 89:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:282
		{
			exprVAL.JSONExpressionParser = newJSONExpressionParser(exprDollar[2].JSONExpressionList)
		}
	case 90:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:284
		{
			exprVAL.LineFormatExpr = newLineFmtExpr(exprDollar[2].str)
		}
	case 91:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:286
		{
			exprVAL.DecolorizeExpr = newDecolorizeExpr()
		}
	case 92:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:289
		{
			exprVAL.LabelFormat = log.NewRenameLabelFmt(exprDollar[1].str, exprDollar[3].str)
		}
	case 93:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:290
		{
			exprVAL.LabelFormat = log.NewTemplateLabelFmt(exprDollar[1].str, exprDollar[3].str)
		}
	case 94:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:294
		{
			exprVAL.LabelsFormat = []log.LabelFmt{exprDollar[1].LabelFormat}
		}
	case 95:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:295
		{
			exprVAL.LabelsFormat = append(exprDollar[1].LabelsFormat, exprDollar[3].LabelFormat)
		}
	case 97:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:299
		{
			exprVAL.LabelFormatExpr = newLabelFmtExpr(exprDollar[2].LabelsFormat)
		}
	case 98:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:302
		{
			exprVAL.LabelFilter = log.NewStringLabelFilter(exprDollar[1].Matcher)
		}
	case 99:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:303
		{
			exprVAL.LabelFilter = exprDollar[1].IPLabelFilter
		}
	case 100:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:304
		{
			exprVAL.LabelFilter = exprDollar[1].UnitFilter
		}
	case 101:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:305
		{
			exprVAL.LabelFilter = exprDollar[1].NumberFilter
		}
	case 102:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:306
		{
			exprVAL.LabelFilter = exprDollar[2].LabelFilter
		}
	case 103:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:307
		{
			exprVAL.LabelFilter = log.NewAndLabelFilter(exprDollar[1].LabelFilter, exprDollar[2].LabelFilter)
		}
	case 104:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:308
		{
			exprVAL.LabelFilter = log.NewAndLabelFilter(exprDollar[1].LabelFilter, exprDollar[3].LabelFilter)
		}
	case 105:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:309
		{
			exprVAL.LabelFilter = log.NewAndLabelFilter(exprDollar[1].LabelFilter, exprDollar[3].LabelFilter)
		}
	case 106:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:310
		{
			exprVAL.LabelFilter = log.NewOrLabelFilter(exprDollar[1].LabelFilter, exprDollar[3].LabelFilter)
		}
	case 107:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:314
		{
			exprVAL.JSONExpression = log.NewJSONExpr(exprDollar[1].str, exprDollar[3].str)
		}
	case 108:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:315
		{
			exprVAL.JSONExpression = log.NewJSONExpr(exprDollar[1].str, exprDollar[1].str)
		}
	case 109:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:318
		{
			exprVAL.JSONExpressionList = []log.JSONExpression{exprDollar[1].JSONExpression}
		}
	case 110:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:319
		{
			exprVAL.JSONExpressionList = append(exprDollar[1].JSONExpressionList, exprDollar[3].JSONExpression)
		}
	case 111:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/syntax/expr.y:323
		{
			exprVAL.IPLabelFilter = log.NewIPLabelFilter(exprDollar[5].str, exprDollar[1].str, log.LabelFilterEqual)
		}
	case 112:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/syntax/expr.y:324
		{
			exprVAL.IPLabelFilter = log.NewIPLabelFilter(exprDollar[5].str, exprDollar[1].str, log.LabelFilterNotEqual)
		}
	case 113:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:328
		{
			exprVAL.UnitFilter = exprDollar[1].DurationFilter
		}
	case 114:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:329
		{
			exprVAL.UnitFilter = exprDollar[1].BytesFilter
		}
	case 115:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:332
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterGreaterThan, exprDollar[1].str, exprDollar[3].duration)
		}
	case 116:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:333
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterGreaterThanOrEqual, exprDollar[1].str, exprDollar[3].duration)
		}
	case 117:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:334
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterLesserThan, exprDollar[1].str, exprDollar[3].duration)
		}
	case 118:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:335
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterLesserThanOrEqual, exprDollar[1].str, exprDollar[3].duration)
		}
	case 119:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:336
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterNotEqual, exprDollar[1].str, exprDollar[3].duration)
		}
	case 120:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:337
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterEqual, exprDollar[1].str, exprDollar[3].duration)
		}
	case 121:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:338
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterEqual, exprDollar[1].str, exprDollar[3].duration)
		}
	case 122:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:342
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterGreaterThan, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 123:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:343
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterGreaterThanOrEqual, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 124:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:344
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterLesserThan, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 125:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:345
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterLesserThanOrEqual, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 126:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:346
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterNotEqual, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 127:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:347
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterEqual, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 128:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:348
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterEqual, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 129:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:352
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterGreaterThan, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 130:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:353
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterGreaterThanOrEqual, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 131:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:354
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterLesserThan, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 132:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:355
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterLesserThanOrEqual, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 133:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:356
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterNotEqual, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 134:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:357
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterEqual, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 135:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:358
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterEqual, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 136:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:363
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("or", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 137:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:364
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("and", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 138:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:365
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("unless", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 139:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:366
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("+", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 140:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:367
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("-", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 141:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:368
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("*", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 142:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:369
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("/", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 143:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:370
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("%", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 144:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:371
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("^", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 145:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:372
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("==", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 146:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:373
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("!=", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 147:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:374
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr(">", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 148:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:375
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr(">=", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 149:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:376
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("<", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 150:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:377
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("<=", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 151:
		exprDollar = exprS[exprpt-0 : exprpt+1]
//line pkg/logql/syntax/expr.y:381
		{
			exprVAL.BoolModifier = &BinOpOptions{VectorMatching: &VectorMatching{Card: CardOneToOne}}
		}
	case 152:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:385
		{
			exprVAL.BoolModifier = &BinOpOptions{VectorMatching: &VectorMatching{Card: CardOneToOne}, ReturnBool: true}
		}
	case 153:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:392
		{
			exprVAL.OnOrIgnoringModifier = exprDollar[1].BoolModifier
			exprVAL.OnOrIgnoringModifier.VectorMatching.On = true
			exprVAL.OnOrIgnoringModifier.VectorMatching.MatchingLabels = exprDollar[4].Labels
		}
	case 154:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:398
		{
			exprVAL.OnOrIgnoringModifier = exprDollar[1].BoolModifier
			exprVAL.OnOrIgnoringModifier.VectorMatching.On = true
		}
	case 155:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:403
		{
			exprVAL.OnOrIgnoringModifier = exprDollar[1].BoolModifier
			exprVAL.OnOrIgnoringModifier.VectorMatching.MatchingLabels = exprDollar[4].Labels
		}
	case 156:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:408
		{
			exprVAL.OnOrIgnoringModifier = exprDollar[1].BoolModifier
		}
	case 157:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:414
		{
			exprVAL.BinOpModifier = exprDollar[1].BoolModifier
		}
	case 158:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:415
		{
			exprVAL.BinOpModifier = exprDollar[1].OnOrIgnoringModifier
		}
	case 159:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:417
		{
			exprVAL.BinOpModifier = exprDollar[1].OnOrIgnoringModifier
			exprVAL.BinOpModifier.VectorMatching.Card = CardManyToOne
		}
	case 160:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:422
		{
			exprVAL.BinOpModifier = exprDollar[1].OnOrIgnoringModifier
			exprVAL.BinOpModifier.VectorMatching.Card = CardManyToOne
		}
	case 161:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:427
		{
			exprVAL.BinOpModifier = exprDollar[1].OnOrIgnoringModifier
			exprVAL.BinOpModifier.VectorMatching.Card = CardManyToOne
			exprVAL.BinOpModifier.VectorMatching.Include = exprDollar[4].Labels
		}
	case 162:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:433
		{
			exprVAL.BinOpModifier = exprDollar[1].OnOrIgnoringModifier
			exprVAL.BinOpModifier.VectorMatching.Card = CardOneToMany
		}
	case 163:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:438
		{
			exprVAL.BinOpModifier = exprDollar[1].OnOrIgnoringModifier
			exprVAL.BinOpModifier.VectorMatching.Card = CardOneToMany
		}
	case 164:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:443
		{
			exprVAL.BinOpModifier = exprDollar[1].OnOrIgnoringModifier
			exprVAL.BinOpModifier.VectorMatching.Card = CardOneToMany
			exprVAL.BinOpModifier.VectorMatching.Include = exprDollar[4].Labels
		}
	case 165:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:451
		{
			exprVAL.LiteralExpr = mustNewLiteralExpr(exprDollar[1].str, false)
		}
	case 166:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:452
		{
			exprVAL.LiteralExpr = mustNewLiteralExpr(exprDollar[2].str, false)
		}
	case 167:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:453
		{
			exprVAL.LiteralExpr = mustNewLiteralExpr(exprDollar[2].str, true)
		}
	case 168:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:457
		{
			exprVAL.VectorExpr = NewVectorExpr(exprDollar[3].str)
		}
	case 169:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:460
		{
			exprVAL.Vector = OpTypeVector
		}
	case 170:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:464
		{
			exprVAL.VectorOp = OpTypeSum
		}
	case 171:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:465
		{
			exprVAL.VectorOp = OpTypeAvg
		}
	case 172:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:466
		{
			exprVAL.VectorOp = OpTypeCount
		}
	case 173:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:467
		{
			exprVAL.VectorOp = OpTypeMax
		}
	case 174:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:468
		{
			exprVAL.VectorOp = OpTypeMin
		}
	case 175:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:469
		{
			exprVAL.VectorOp = OpTypeStddev
		}
	case 176:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:470
		{
			exprVAL.VectorOp = OpTypeStdvar
		}
	case 177:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:471
		{
			exprVAL.VectorOp = OpTypeBottomK
		}
	case 178:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:472
		{
			exprVAL.VectorOp = OpTypeTopK
		}
	case 179:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:473
		{
			exprVAL.VectorOp = OpTypeSort
		}
	case 180:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:474
		{
			exprVAL.VectorOp = OpTypeSortDesc
		}
	case 181:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:478
		{
			exprVAL.RangeOp = OpRangeTypeCount
		}
	case 182:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:479
		{
			exprVAL.RangeOp = OpRangeTypeRate
		}
	case 183:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:480
		{
			exprVAL.RangeOp = OpRangeTypeRateCounter
		}
	case 184:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:481
		{
			exprVAL.RangeOp = OpRangeTypeBytes
		}
	case 185:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:482
		{
			exprVAL.RangeOp = OpRangeTypeBytesRate
		}
	case 186:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:483
		{
			exprVAL.RangeOp = OpRangeTypeAvg
		}
	case 187:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:484
		{
			exprVAL.RangeOp = OpRangeTypeSum
		}
	case 188:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:485
		{
			exprVAL.RangeOp = OpRangeTypeMin
		}
	case 189:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:486
		{
			exprVAL.RangeOp = OpRangeTypeMax
		}
	case 190:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:487
		{
			exprVAL.RangeOp = OpRangeTypeStdvar
		}
	case 191:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:488
		{
			exprVAL.RangeOp = OpRangeTypeStddev
		}
	case 192:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:489
		{
			exprVAL.RangeOp = OpRangeTypeQuantile
		}
	case 193:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:490
		{
			exprVAL.RangeOp = OpRangeTypeFirst
		}
	case 194:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:491
		{
			exprVAL.RangeOp = OpRangeTypeLast
		}
	case 195:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:492
		{
			exprVAL.RangeOp = OpRangeTypeAbsent
		}
	case 196:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:496
		{
			exprVAL.OffsetExpr = newOffsetExpr(exprDollar[2].duration)
		}
	case 197:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:499
		{
			exprVAL.Labels = []string{exprDollar[1].str}
		}
	case 198:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:500
		{
			exprVAL.Labels = append(exprDollar[1].Labels, exprDollar[3].str)
		}
	case 199:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:504
		{
			exprVAL.Grouping = &Grouping{Without: false, Groups: exprDollar[3].Labels}
		}
	case 200:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:505
		{
			exprVAL.Grouping = &Grouping{Without: true, Groups: exprDollar[3].Labels}
		}
	case 201:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:506
		{
			exprVAL.Grouping = &Grouping{Without: false, Groups: nil}
		}
	case 202:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:507
		{
			exprVAL.Grouping = &Grouping{Without: true, Groups: nil}
		}
	}
	goto exprstack /* stack new state and value */
}
