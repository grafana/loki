// Code generated by goyacc -p expr -o expr.y.go -v parsetable expr.y. DO NOT EDIT.

<<<<<<< HEAD
//line pkg/logql/syntax/expr.y:2
=======
//line expr.y:2
>>>>>>> 1e825301b (adding logfmt label extraction syntax)
package syntax

import __yyfmt__ "fmt"

<<<<<<< HEAD
//line pkg/logql/syntax/expr.y:2
=======
//line expr.y:2
>>>>>>> 1e825301b (adding logfmt label extraction syntax)
import (
	"github.com/grafana/loki/pkg/logql/log"
	"github.com/prometheus/prometheus/model/labels"
	"time"
)

<<<<<<< HEAD
//line pkg/logql/syntax/expr.y:12
type exprSymType struct {
	yys                   int
	Expr                  Expr
	Filter                labels.MatchType
	Grouping              *Grouping
	Labels                []string
	LogExpr               LogSelectorExpr
	LogRangeExpr          *LogRange
	Matcher               *labels.Matcher
	Matchers              []*labels.Matcher
	RangeAggregationExpr  SampleExpr
	RangeOp               string
	ConvOp                string
	Selector              []*labels.Matcher
	VectorAggregationExpr SampleExpr
	VectorExpr            *VectorExpr
	Vector                string
	MetricExpr            SampleExpr
	VectorOp              string
	FilterOp              string
	BinOpExpr             SampleExpr
	LabelReplaceExpr      SampleExpr
	binOp                 string
	bytes                 uint64
	str                   string
	duration              time.Duration
	LiteralExpr           *LiteralExpr
	BinOpModifier         *BinOpOptions
	BoolModifier          *BinOpOptions
	OnOrIgnoringModifier  *BinOpOptions
	LabelParser           *LabelParserExpr
	LineFilters           *LineFilterExpr
	LineFilter            *LineFilterExpr
	PipelineExpr          MultiStageExpr
	PipelineStage         StageExpr
	BytesFilter           log.LabelFilterer
	NumberFilter          log.LabelFilterer
	DurationFilter        log.LabelFilterer
	LabelFilter           log.LabelFilterer
	UnitFilter            log.LabelFilterer
	IPLabelFilter         log.LabelFilterer
	LineFormatExpr        *LineFmtExpr
	LabelFormatExpr       *LabelFmtExpr
	LabelFormat           log.LabelFmt
	LabelsFormat          []log.LabelFmt
	JSONExpressionParser  *JSONExpressionParser
	JSONExpression        log.JSONExpression
	JSONExpressionList    []log.JSONExpression
	UnwrapExpr            *UnwrapExpr
	DecolorizeExpr        *DecolorizeExpr
	OffsetExpr            *OffsetExpr
}

const BYTES = 57346
const IDENTIFIER = 57347
const STRING = 57348
const NUMBER = 57349
const DURATION = 57350
const RANGE = 57351
const MATCHERS = 57352
const LABELS = 57353
const EQ = 57354
const RE = 57355
const NRE = 57356
const OPEN_BRACE = 57357
const CLOSE_BRACE = 57358
const OPEN_BRACKET = 57359
const CLOSE_BRACKET = 57360
const COMMA = 57361
const DOT = 57362
const PIPE_MATCH = 57363
const PIPE_EXACT = 57364
const OPEN_PARENTHESIS = 57365
const CLOSE_PARENTHESIS = 57366
const BY = 57367
const WITHOUT = 57368
const COUNT_OVER_TIME = 57369
const RATE = 57370
const RATE_COUNTER = 57371
const SUM = 57372
const SORT = 57373
const SORT_DESC = 57374
const AVG = 57375
const MAX = 57376
const MIN = 57377
const COUNT = 57378
const STDDEV = 57379
const STDVAR = 57380
const BOTTOMK = 57381
const TOPK = 57382
const BYTES_OVER_TIME = 57383
const BYTES_RATE = 57384
const BOOL = 57385
const JSON = 57386
const REGEXP = 57387
const LOGFMT = 57388
const PIPE = 57389
const LINE_FMT = 57390
const LABEL_FMT = 57391
const UNWRAP = 57392
const AVG_OVER_TIME = 57393
const SUM_OVER_TIME = 57394
const MIN_OVER_TIME = 57395
const MAX_OVER_TIME = 57396
const STDVAR_OVER_TIME = 57397
const STDDEV_OVER_TIME = 57398
const QUANTILE_OVER_TIME = 57399
const BYTES_CONV = 57400
const DURATION_CONV = 57401
const DURATION_SECONDS_CONV = 57402
const FIRST_OVER_TIME = 57403
const LAST_OVER_TIME = 57404
const ABSENT_OVER_TIME = 57405
const VECTOR = 57406
const LABEL_REPLACE = 57407
const UNPACK = 57408
const OFFSET = 57409
const PATTERN = 57410
const IP = 57411
const ON = 57412
const IGNORING = 57413
const GROUP_LEFT = 57414
const GROUP_RIGHT = 57415
const DECOLORIZE = 57416
const DROP = 57417
const OR = 57418
const AND = 57419
const UNLESS = 57420
const CMP_EQ = 57421
const NEQ = 57422
const LT = 57423
const LTE = 57424
const GT = 57425
const GTE = 57426
const ADD = 57427
const SUB = 57428
const MUL = 57429
const DIV = 57430
const MOD = 57431
const POW = 57432

var exprToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"BYTES",
	"IDENTIFIER",
	"STRING",
	"NUMBER",
	"DURATION",
	"RANGE",
	"MATCHERS",
	"LABELS",
	"EQ",
	"RE",
	"NRE",
	"OPEN_BRACE",
	"CLOSE_BRACE",
	"OPEN_BRACKET",
	"CLOSE_BRACKET",
	"COMMA",
	"DOT",
	"PIPE_MATCH",
	"PIPE_EXACT",
	"OPEN_PARENTHESIS",
	"CLOSE_PARENTHESIS",
	"BY",
	"WITHOUT",
	"COUNT_OVER_TIME",
	"RATE",
	"RATE_COUNTER",
	"SUM",
	"SORT",
	"SORT_DESC",
	"AVG",
	"MAX",
	"MIN",
	"COUNT",
	"STDDEV",
	"STDVAR",
	"BOTTOMK",
	"TOPK",
	"BYTES_OVER_TIME",
	"BYTES_RATE",
	"BOOL",
	"JSON",
	"REGEXP",
	"LOGFMT",
	"PIPE",
	"LINE_FMT",
	"LABEL_FMT",
	"UNWRAP",
	"AVG_OVER_TIME",
	"SUM_OVER_TIME",
	"MIN_OVER_TIME",
	"MAX_OVER_TIME",
	"STDVAR_OVER_TIME",
	"STDDEV_OVER_TIME",
	"QUANTILE_OVER_TIME",
	"BYTES_CONV",
	"DURATION_CONV",
	"DURATION_SECONDS_CONV",
	"FIRST_OVER_TIME",
	"LAST_OVER_TIME",
	"ABSENT_OVER_TIME",
	"VECTOR",
	"LABEL_REPLACE",
	"UNPACK",
	"OFFSET",
	"PATTERN",
	"IP",
	"ON",
	"IGNORING",
	"GROUP_LEFT",
	"GROUP_RIGHT",
	"DECOLORIZE",
	"DROP",
	"OR",
	"AND",
	"UNLESS",
	"CMP_EQ",
	"NEQ",
	"LT",
	"LTE",
	"GT",
	"GTE",
	"ADD",
	"SUB",
	"MUL",
	"DIV",
	"MOD",
	"POW",
}

var exprStatenames = [...]string{}

const exprEofCode = 1
const exprErrCode = 2
const exprInitialStackSize = 16

//line pkg/logql/syntax/expr.y:501

//line yacctab:1
var exprExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const exprPrivate = 57344

const exprLast = 561

var exprAct = [...]int16{
	255, 201, 80, 4, 182, 62, 170, 5, 175, 210,
	71, 117, 54, 61, 258, 140, 73, 2, 49, 50,
	51, 52, 53, 54, 65, 76, 46, 47, 48, 55,
	56, 59, 60, 57, 58, 49, 50, 51, 52, 53,
	54, 47, 48, 55, 56, 59, 60, 57, 58, 49,
	50, 51, 52, 53, 54, 55, 56, 59, 60, 57,
	58, 49, 50, 51, 52, 53, 54, 105, 184, 138,
	139, 109, 51, 52, 53, 54, 124, 69, 136, 138,
	139, 154, 155, 144, 67, 68, 142, 261, 106, 149,
	172, 263, 69, 261, 121, 226, 152, 153, 69, 67,
	68, 90, 309, 260, 151, 67, 68, 127, 156, 157,
	158, 159, 160, 161, 162, 163, 164, 165, 166, 167,
	168, 169, 327, 203, 302, 200, 212, 327, 179, 203,
	69, 190, 185, 188, 189, 186, 187, 67, 68, 70,
	264, 69, 137, 173, 171, 282, 192, 258, 67, 68,
	208, 204, 200, 347, 70, 342, 202, 69, 213, 205,
	70, 203, 69, 335, 67, 68, 81, 82, 129, 67,
	68, 124, 203, 124, 69, 304, 305, 306, 221, 222,
	223, 67, 68, 334, 324, 172, 301, 172, 203, 121,
	259, 121, 70, 203, 332, 235, 311, 194, 236, 234,
	292, 253, 256, 70, 262, 64, 265, 142, 105, 268,
	109, 269, 272, 258, 257, 254, 301, 318, 266, 70,
	259, 270, 260, 216, 70, 206, 260, 276, 278, 281,
	283, 330, 286, 284, 212, 308, 70, 131, 173, 171,
	231, 171, 193, 232, 230, 79, 124, 81, 82, 272,
	272, 197, 260, 280, 317, 316, 260, 294, 233, 296,
	298, 272, 300, 105, 121, 272, 315, 299, 310, 295,
	274, 130, 105, 293, 124, 312, 124, 272, 197, 212,
	212, 345, 273, 112, 114, 113, 124, 122, 123, 263,
	172, 212, 121, 291, 121, 197, 321, 322, 279, 277,
	267, 105, 323, 229, 121, 115, 212, 116, 325, 326,
	214, 112, 114, 113, 331, 122, 123, 198, 141, 290,
	13, 220, 219, 16, 135, 211, 13, 337, 143, 338,
	339, 13, 218, 115, 143, 116, 217, 191, 148, 6,
	147, 343, 146, 21, 22, 23, 36, 37, 39, 40,
	38, 41, 42, 43, 44, 24, 25, 86, 85, 78,
	341, 314, 271, 227, 224, 26, 27, 28, 29, 30,
	31, 32, 133, 215, 207, 33, 34, 35, 45, 19,
	209, 199, 297, 228, 225, 340, 132, 250, 13, 134,
	251, 249, 336, 329, 328, 307, 6, 17, 18, 150,
	21, 22, 23, 36, 37, 39, 40, 38, 41, 42,
	43, 44, 24, 25, 247, 84, 244, 248, 246, 245,
	243, 83, 26, 27, 28, 29, 30, 31, 32, 288,
	289, 346, 33, 34, 35, 45, 19, 145, 241, 344,
	238, 242, 240, 239, 237, 13, 87, 333, 320, 3,
	319, 285, 275, 6, 17, 18, 72, 21, 22, 23,
	36, 37, 39, 40, 38, 41, 42, 43, 44, 24,
	25, 287, 252, 196, 183, 118, 195, 194, 193, 26,
	27, 28, 29, 30, 31, 32, 180, 178, 177, 33,
	34, 35, 45, 19, 91, 92, 93, 94, 95, 96,
	97, 98, 99, 100, 101, 102, 103, 104, 313, 176,
	75, 17, 18, 77, 77, 183, 119, 174, 108, 181,
	111, 110, 63, 125, 120, 126, 107, 89, 88, 11,
	10, 9, 128, 20, 12, 15, 8, 303, 14, 7,
	74, 66, 1,
}

var exprPact = [...]int16{
	316, -1000, -46, -1000, -1000, 160, 316, -1000, -1000, -1000,
	-1000, -1000, -1000, 508, 336, 222, -1000, 414, 408, 335,
	334, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 146, -1000, 174, 448, -1000, 113, -1000,
	-1000, -1000, -1000, 292, 291, -57, 384, -1000, -1000, 67,
	320, 447, 325, 324, 323, -1000, -1000, 327, 399, 327,
	33, -6, -1000, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, -1000, -1000, -1000,
	-1000, 185, -1000, -1000, -1000, -1000, 521, -1000, 514, -1000,
	511, -1000, -1000, -1000, -1000, 301, 501, -1000, 523, 520,
	58, -1000, -1000, -1000, 322, -1000, -1000, -1000, -1000, -1000,
	522, 499, 489, 485, 484, 308, 377, 242, 303, 290,
	376, 387, 306, 299, 374, 257, -43, 321, 316, 314,
	313, -31, -31, -13, -13, -73, -73, -73, -73, -25,
	-25, -25, -25, -25, -25, 185, 301, 301, 301, 368,
	-1000, 386, -1000, -1000, 252, -1000, 366, -1000, 319, 358,
	-1000, 67, -1000, 172, 82, 453, 451, 428, 426, 397,
	463, -1000, -1000, -1000, -1000, -1000, -1000, 166, 303, 107,
	150, 200, 184, 122, 285, 166, 327, 236, 357, 264,
	-1000, -1000, 182, -1000, 462, -1000, 281, 260, 250, 244,
	193, 185, 79, 521, 461, -1000, 513, 440, 520, 310,
	-1000, -1000, -1000, 298, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 176, -1000, 249, 127, 58, 127, 374, -51,
	281, -51, 177, 119, 386, 211, 78, -1000, -1000, 172,
	-1000, 316, 503, -1000, -1000, 342, 242, -1000, 231, -1000,
	-1000, 230, -1000, 193, -1000, -1000, -1000, -1000, -1000, -1000,
	444, 442, -1000, 141, 58, 127, 58, -1000, -1000, 166,
	-1000, -51, -1000, 161, -1000, -1000, -1000, 82, 385, 384,
	207, 141, 170, -1000, 441, -1000, -1000, -1000, -1000, 159,
	139, -1000, 58, -1000, 387, 77, 58, 43, -51, -51,
	376, -1000, -1000, 341, -1000, -1000, 131, 58, -1000, -1000,
	-51, 433, -1000, -1000, 262, 425, 129, -1000,
}

var exprPgo = [...]int16{
	0, 542, 16, 541, 2, 9, 449, 3, 15, 11,
	540, 539, 538, 537, 7, 536, 535, 534, 533, 532,
	531, 530, 529, 446, 528, 527, 526, 13, 5, 525,
	524, 523, 6, 522, 24, 521, 520, 4, 519, 518,
	8, 517, 1, 516, 475, 0,
}

var exprPgo = [...]int16{
	0, 542, 17, 541, 2, 9, 488, 3, 16, 11,
	540, 539, 538, 537, 15, 536, 535, 534, 533, 532,
	531, 406, 530, 529, 528, 13, 5, 527, 526, 525,
	6, 524, 38, 523, 522, 4, 521, 520, 7, 519,
	518, 8, 517, 1, 516, 497, 0,
>>>>>>> 1e825301b (adding logfmt label extraction syntax)
}

var exprR1 = [...]int8{
	0, 1, 2, 2, 7, 7, 7, 7, 7, 7,
	7, 6, 6, 6, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
<<<<<<< HEAD
	8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
	46, 46, 46, 13, 13, 13, 11, 11, 11, 11,
	15, 15, 15, 15, 15, 15, 22, 3, 3, 3,
	3, 14, 14, 14, 10, 10, 9, 9, 9, 9,
	27, 27, 28, 28, 28, 28, 28, 28, 28, 28,
	19, 34, 34, 33, 33, 26, 26, 26, 26, 26,
	43, 35, 36, 41, 41, 42, 42, 42, 40, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 44, 44,
	45, 45, 48, 48, 47, 47, 31, 31, 31, 31,
	31, 31, 31, 29, 29, 29, 29, 29, 29, 29,
	30, 30, 30, 30, 30, 30, 30, 39, 39, 38,
	38, 37, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 24, 24, 25,
	25, 25, 25, 23, 23, 23, 23, 23, 23, 23,
	23, 21, 21, 21, 17, 18, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 49, 5, 5, 4, 4, 4, 4,
}

var exprR2 = [...]int8{
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 2, 3, 2, 3, 4, 5, 3, 4,
	5, 6, 3, 4, 5, 6, 3, 4, 5, 6,
	4, 5, 6, 7, 3, 4, 4, 5, 3, 2,
	3, 6, 3, 1, 1, 1, 4, 6, 5, 7,
	4, 5, 5, 6, 7, 7, 12, 1, 1, 1,
	1, 3, 3, 2, 1, 3, 3, 3, 3, 3,
	1, 2, 1, 2, 2, 2, 2, 2, 2, 2,
	1, 2, 5, 1, 2, 1, 1, 2, 1, 2,
	2, 2, 1, 3, 3, 1, 3, 3, 2, 1,
	1, 1, 1, 3, 2, 3, 3, 3, 3, 1,
	1, 3, 6, 6, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 1, 1, 1,
	3, 2, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 0, 1, 5,
	4, 5, 4, 1, 1, 2, 4, 5, 2, 4,
	5, 1, 2, 2, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 3, 4, 4, 3, 3,
}

var exprChk = [...]int16{
	-1000, -1, -2, -6, -7, -14, 23, -11, -15, -20,
	-21, -22, -17, 15, -12, -16, 7, 85, 86, 65,
	-18, 27, 28, 29, 41, 42, 51, 52, 53, 54,
	55, 56, 57, 61, 62, 63, 30, 33, 36, 34,
	35, 37, 38, 39, 40, 31, 32, 64, 76, 77,
	78, 85, 86, 87, 88, 89, 90, 79, 80, 83,
	84, 81, 82, -27, -28, -33, 47, -34, -3, 21,
	22, 14, 80, -7, -6, -2, -10, 16, -9, 5,
	23, 23, -4, 25, 26, 7, 7, 23, 23, -23,
	-24, -25, 43, -23, -23, -23, -23, -23, -23, -23,
	-23, -23, -23, -23, -23, -23, -23, -28, -34, -26,
	-43, -32, -35, -36, -40, -37, 44, 46, 45, 66,
	68, -9, -48, -47, -30, 23, 48, 74, 49, 75,
	5, -31, -29, 6, -19, 69, 24, 24, 16, 2,
	19, 12, 80, 13, 14, -8, 7, -14, 23, -7,
	7, 23, 23, 23, -7, 7, -2, 70, 71, 72,
	73, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -32, 77, 19, 76, -45,
	-44, 5, 6, 6, -32, 6, -42, -41, 5, -38,
	-39, 5, -9, 12, 80, 83, 84, 81, 82, 79,
	23, -9, 6, 6, 6, 6, 2, 24, 19, 9,
	-46, -27, 47, -14, -8, 24, 19, -7, 7, -5,
	24, 5, -5, 24, 19, 24, 23, 23, 23, 23,
	-32, -32, -32, 19, 12, 24, 19, 12, 19, 69,
	8, 4, 7, 69, 8, 4, 7, 8, 4, 7,
	8, 4, 7, 8, 4, 7, 8, 4, 7, 8,
	4, 7, 6, -4, -8, -49, -46, -27, 67, 9,
	47, 9, -46, 50, 24, -46, -27, 24, -4, -7,
	24, 19, 19, 24, 24, 6, -5, 24, -5, 24,
	24, -5, 24, -5, -44, 6, -41, 2, 5, 6,
	-39, 23, 23, 24, 24, -46, -27, -46, 8, -49,
	-32, -49, 9, 5, -13, 58, 59, 60, 9, 24,
	24, -46, 24, -7, 5, 19, 24, 24, 24, 24,
	6, 6, -4, -46, -49, 23, -49, -46, 47, 9,
	9, 24, -4, 24, 6, 24, 24, 5, -46, -49,
	-49, 9, 19, 24, -49, 6, 19, 6, 24,
}

var exprDef = [...]int16{
	0, -2, 1, 2, 3, 11, 0, 4, 5, 6,
	7, 8, 9, 0, 0, 0, 171, 0, 0, 0,
	0, 187, 188, 189, 190, 191, 192, 193, 194, 195,
	196, 197, 198, 199, 200, 201, 176, 177, 178, 179,
	180, 181, 182, 183, 184, 185, 186, 175, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 12, 70, 72, 0, 83, 0, 57,
	58, 59, 60, 3, 2, 0, 0, 63, 64, 0,
	0, 0, 0, 0, 0, 172, 173, 0, 0, 0,
	163, 164, 158, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 71, 84, 73,
	74, 75, 76, 77, 78, 79, 85, 86, 0, 88,
	0, 99, 100, 101, 102, 0, 0, 92, 0, 0,
	0, 114, 115, 81, 0, 80, 10, 13, 61, 62,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
	171, 0, 0, 0, 3, 0, 142, 0, 0, 165,
	168, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 104, 0, 0, 0, 90,
	110, 109, 87, 89, 0, 91, 98, 95, 0, 141,
	139, 137, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 65, 66, 67, 68, 69, 39, 46, 0, 14,
	0, 0, 0, 0, 0, 50, 0, 3, 171, 0,
	207, 203, 0, 208, 0, 174, 0, 0, 0, 0,
	105, 106, 107, 0, 0, 103, 0, 0, 0, 0,
	121, 128, 135, 0, 120, 127, 134, 116, 123, 130,
	117, 124, 131, 118, 125, 132, 119, 126, 133, 122,
	129, 136, 0, 48, 0, 15, 18, 34, 0, 22,
	0, 26, 0, 0, 0, 0, 0, 38, 52, 3,
	51, 0, 0, 195, 196, 0, 0, 152, 0, 154,
	158, 0, 161, 0, 108, 105, 93, 94, 90, 91,
	0, 0, 80, 47, 19, 35, 36, 192, 23, 42,
	27, 30, 40, 0, 43, 44, 45, 16, 0, 0,
	0, 53, 3, 194, 0, 151, 153, 159, 162, 0,
	0, 49, 37, 31, 0, 17, 20, 0, 24, 28,
	0, 54, 55, 0, 109, 110, 0, 21, 25, 29,
	32, 0, 41, 33, 0, 0, 0, 56,
}

var exprR2 = [...]int8{
	0, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 2, 3, 2, 3, 4, 5, 3, 4, 5,
	6, 3, 4, 5, 6, 3, 4, 5, 6, 4,
	5, 6, 7, 3, 4, 4, 5, 3, 2, 3,
	6, 3, 1, 1, 1, 4, 6, 5, 7, 4,
	5, 5, 6, 7, 7, 12, 1, 1, 1, 1,
	3, 3, 3, 1, 3, 3, 3, 3, 3, 1,
	2, 1, 2, 2, 2, 2, 2, 2, 1, 2,
	5, 1, 2, 1, 1, 2, 1, 2, 2, 2,
	2, 3, 3, 1, 3, 3, 2, 1, 1, 1,
	1, 3, 2, 3, 3, 3, 3, 1, 1, 3,
	3, 1, 1, 3, 6, 6, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 0, 1, 5, 4, 5, 4,
	1, 1, 2, 4, 5, 2, 4, 5, 1, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 3, 4, 4,
	3, 3,
}

var exprChk = [...]int16{
	-1000, -1, -2, -6, -7, -14, 23, -11, -15, -18,
	-19, -20, 15, -12, -16, 7, 80, 81, 62, 27,
	28, 29, 39, 40, 49, 50, 51, 52, 53, 54,
	55, 59, 60, 61, 30, 31, 34, 32, 33, 35,
	36, 37, 38, 71, 72, 73, 80, 81, 82, 83,
	84, 85, 74, 75, 78, 79, 76, 77, -25, -26,
	-31, 45, -32, -3, 21, 22, 14, 75, -7, -6,
	-2, -10, 2, -9, 5, 23, 23, -4, 25, 26,
	7, 7, 23, -21, -22, -23, 41, -21, -21, -21,
	-21, -21, -21, -21, -21, -21, -21, -21, -21, -21,
	-21, -26, -32, -24, -37, -40, -30, -33, -34, 42,
	44, 43, 63, 65, -9, -45, -44, -28, 23, 46,
	47, 5, -29, -27, 6, -17, 66, 24, 24, 16,
	2, 19, 16, 12, 75, 13, 14, -8, 7, -14,
	23, -7, 7, 23, 23, 23, -7, -2, 67, 68,
	69, 70, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -30, 72, 19, 71,
	-39, -38, 5, -42, -41, 5, 6, 6, -30, 6,
	-36, -35, 5, 12, 75, 78, 79, 76, 77, 74,
	23, -9, 6, 6, 6, 6, 2, 24, 19, 9,
	-43, -25, 45, -14, -8, 24, 19, -7, 7, -5,
	24, 5, -5, 24, 19, 23, 23, 23, 23, -30,
	-30, -30, 19, 12, 19, 12, 24, 19, 12, 66,
	8, 4, 7, 66, 8, 4, 7, 8, 4, 7,
	8, 4, 7, 8, 4, 7, 8, 4, 7, 8,
	4, 7, 6, -4, -8, -46, -43, -25, 64, 9,
	45, 9, -43, 48, 24, -43, -25, 24, -4, -7,
	24, 19, 19, 24, 24, 6, -5, 24, -5, 24,
	24, -5, 24, -5, -38, 6, -41, 6, -35, 2,
	5, 6, 23, 23, 24, 24, -43, -25, -43, 8,
	-46, -30, -46, 9, 5, -13, 56, 57, 58, 9,
	24, 24, -43, 24, -7, 5, 19, 24, 24, 24,
	24, 6, 6, -4, -43, -46, 23, -46, -43, 45,
	9, 9, 24, -4, 24, 6, 24, 24, 5, -43,
	-46, -46, 9, 19, 24, -46, 6, 19, 6, 24,
}

var exprDef = [...]int16{
	0, -2, 1, 2, 3, 10, 0, 4, 5, 6,
	7, 8, 0, 0, 0, 168, 0, 0, 0, 180,
	181, 182, 183, 184, 185, 186, 187, 188, 189, 190,
	191, 192, 193, 194, 171, 172, 173, 174, 175, 176,
	177, 178, 179, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 11, 69,
	71, 0, 81, 0, 56, 57, 58, 59, 3, 2,
	0, 0, 0, 63, 0, 0, 0, 0, 0, 0,
	169, 170, 0, 0, 160, 161, 155, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 70, 82, 72, 73, 74, 75, 76, 77, 83,
	84, 0, 86, 0, 97, 98, 99, 100, 0, 0,
	0, 0, 116, 117, 79, 0, 78, 9, 12, 60,
	61, 0, 62, 0, 0, 0, 0, 0, 0, 0,
	0, 3, 168, 0, 0, 0, 3, 139, 0, 0,
	162, 165, 140, 141, 142, 143, 144, 145, 146, 147,
	148, 149, 150, 151, 152, 153, 102, 0, 0, 0,
	88, 108, 107, 89, 112, 111, 85, 87, 0, 90,
	96, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 64, 65, 66, 67, 68, 38, 45, 0, 13,
	0, 0, 0, 0, 0, 49, 0, 3, 168, 0,
	200, 196, 0, 201, 0, 0, 0, 0, 0, 103,
	104, 105, 0, 0, 0, 0, 101, 0, 0, 0,
	123, 130, 137, 0, 122, 129, 136, 118, 125, 132,
	119, 126, 133, 120, 127, 134, 121, 128, 135, 124,
	131, 138, 0, 47, 0, 14, 17, 33, 0, 21,
	0, 25, 0, 0, 0, 0, 0, 37, 51, 3,
	50, 0, 0, 198, 199, 0, 0, 157, 0, 159,
	163, 0, 166, 0, 109, 106, 113, 110, 94, 95,
	91, 92, 0, 0, 80, 46, 18, 34, 35, 195,
	22, 41, 26, 29, 39, 0, 42, 43, 44, 15,
	0, 0, 0, 52, 3, 197, 0, 156, 158, 164,
	167, 0, 0, 48, 36, 30, 0, 16, 19, 0,
	23, 27, 0, 53, 54, 0, 114, 115, 0, 20,
	24, 28, 31, 0, 40, 32, 0, 0, 0, 55,
>>>>>>> 1e825301b (adding logfmt label extraction syntax)
}

var exprTok1 = [...]int8{
	1,
}

var exprTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90,
}

var exprTok3 = [...]int8{
	0,
}

var exprErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	exprDebug        = 0
	exprErrorVerbose = false
)

type exprLexer interface {
	Lex(lval *exprSymType) int
	Error(s string)
}

type exprParser interface {
	Parse(exprLexer) int
	Lookahead() int
}

type exprParserImpl struct {
	lval  exprSymType
	stack [exprInitialStackSize]exprSymType
	char  int
}

func (p *exprParserImpl) Lookahead() int {
	return p.char
}

func exprNewParser() exprParser {
	return &exprParserImpl{}
}

const exprFlag = -1000

func exprTokname(c int) string {
	if c >= 1 && c-1 < len(exprToknames) {
		if exprToknames[c-1] != "" {
			return exprToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func exprStatname(s int) string {
	if s >= 0 && s < len(exprStatenames) {
		if exprStatenames[s] != "" {
			return exprStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func exprErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !exprErrorVerbose {
		return "syntax error"
	}

	for _, e := range exprErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + exprTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(exprPact[state])
	for tok := TOKSTART; tok-1 < len(exprToknames); tok++ {
		if n := base + tok; n >= 0 && n < exprLast && int(exprChk[int(exprAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if exprDef[state] == -2 {
		i := 0
		for exprExca[i] != -1 || int(exprExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; exprExca[i] >= 0; i += 2 {
			tok := int(exprExca[i])
			if tok < TOKSTART || exprExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if exprExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += exprTokname(tok)
	}
	return res
}

func exprlex1(lex exprLexer, lval *exprSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(exprTok1[0])
		goto out
	}
	if char < len(exprTok1) {
		token = int(exprTok1[char])
		goto out
	}
	if char >= exprPrivate {
		if char < exprPrivate+len(exprTok2) {
			token = int(exprTok2[char-exprPrivate])
			goto out
		}
	}
	for i := 0; i < len(exprTok3); i += 2 {
		token = int(exprTok3[i+0])
		if token == char {
			token = int(exprTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(exprTok2[1]) /* unknown char */
	}
	if exprDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", exprTokname(token), uint(char))
	}
	return char, token
}

func exprParse(exprlex exprLexer) int {
	return exprNewParser().Parse(exprlex)
}

func (exprrcvr *exprParserImpl) Parse(exprlex exprLexer) int {
	var exprn int
	var exprVAL exprSymType
	var exprDollar []exprSymType
	_ = exprDollar // silence set and not used
	exprS := exprrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	exprstate := 0
	exprrcvr.char = -1
	exprtoken := -1 // exprrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		exprstate = -1
		exprrcvr.char = -1
		exprtoken = -1
	}()
	exprp := -1
	goto exprstack

ret0:
	return 0

ret1:
	return 1

exprstack:
	/* put a state and value onto the stack */
	if exprDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", exprTokname(exprtoken), exprStatname(exprstate))
	}

	exprp++
	if exprp >= len(exprS) {
		nyys := make([]exprSymType, len(exprS)*2)
		copy(nyys, exprS)
		exprS = nyys
	}
	exprS[exprp] = exprVAL
	exprS[exprp].yys = exprstate

exprnewstate:
	exprn = int(exprPact[exprstate])
	if exprn <= exprFlag {
		goto exprdefault /* simple state */
	}
	if exprrcvr.char < 0 {
		exprrcvr.char, exprtoken = exprlex1(exprlex, &exprrcvr.lval)
	}
	exprn += exprtoken
	if exprn < 0 || exprn >= exprLast {
		goto exprdefault
	}
	exprn = int(exprAct[exprn])
	if int(exprChk[exprn]) == exprtoken { /* valid shift */
		exprrcvr.char = -1
		exprtoken = -1
		exprVAL = exprrcvr.lval
		exprstate = exprn
		if Errflag > 0 {
			Errflag--
		}
		goto exprstack
	}

exprdefault:
	/* default state action */
	exprn = int(exprDef[exprstate])
	if exprn == -2 {
		if exprrcvr.char < 0 {
			exprrcvr.char, exprtoken = exprlex1(exprlex, &exprrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if exprExca[xi+0] == -1 && int(exprExca[xi+1]) == exprstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			exprn = int(exprExca[xi+0])
			if exprn < 0 || exprn == exprtoken {
				break
			}
		}
		exprn = int(exprExca[xi+1])
		if exprn < 0 {
			goto ret0
		}
	}
	if exprn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			exprlex.Error(exprErrorMessage(exprstate, exprtoken))
			Nerrs++
			if exprDebug >= 1 {
				__yyfmt__.Printf("%s", exprStatname(exprstate))
				__yyfmt__.Printf(" saw %s\n", exprTokname(exprtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for exprp >= 0 {
				exprn = int(exprPact[exprS[exprp].yys]) + exprErrCode
				if exprn >= 0 && exprn < exprLast {
					exprstate = int(exprAct[exprn]) /* simulate a shift of "error" */
					if int(exprChk[exprstate]) == exprErrCode {
						goto exprstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if exprDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", exprS[exprp].yys)
				}
				exprp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if exprDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", exprTokname(exprtoken))
			}
			if exprtoken == exprEofCode {
				goto ret1
			}
			exprrcvr.char = -1
			exprtoken = -1
			goto exprnewstate /* try again in the same state */
		}
	}

	/* reduction by production exprn */
	if exprDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", exprn, exprStatname(exprstate))
	}

	exprnt := exprn
	exprpt := exprp
	_ = exprpt // guard against "declared and not used"

	exprp -= int(exprR2[exprn])
	// exprp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if exprp+1 >= len(exprS) {
		nyys := make([]exprSymType, len(exprS)*2)
		copy(nyys, exprS)
		exprS = nyys
	}
	exprVAL = exprS[exprp+1]

	/* consult goto table to find next state */
	exprn = int(exprR1[exprn])
	exprg := int(exprPgo[exprn])
	exprj := exprg + exprS[exprp].yys + 1

	if exprj >= exprLast {
		exprstate = int(exprAct[exprg])
	} else {
		exprstate = int(exprAct[exprj])
		if int(exprChk[exprstate]) != -exprn {
			exprstate = int(exprAct[exprg])
		}
	}
	// dummy call; replaced with literal code
	switch exprnt {

	case 1:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:129
		{
			exprlex.(*parser).expr = exprDollar[1].Expr
		}
	case 2:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:132
		{
			exprVAL.Expr = exprDollar[1].LogExpr
		}
	case 3:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:133
		{
			exprVAL.Expr = exprDollar[1].MetricExpr
		}
	case 4:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:137
		{
			exprVAL.MetricExpr = exprDollar[1].RangeAggregationExpr
		}
	case 5:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:138
		{
			exprVAL.MetricExpr = exprDollar[1].VectorAggregationExpr
		}
	case 6:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:139
		{
			exprVAL.MetricExpr = exprDollar[1].BinOpExpr
		}
	case 7:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:140
		{
			exprVAL.MetricExpr = exprDollar[1].LiteralExpr
		}
	case 8:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:141
		{
			exprVAL.MetricExpr = exprDollar[1].LabelReplaceExpr
		}
	case 9:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:151
		{
			exprVAL.MetricExpr = exprDollar[1].VectorExpr
		}
	case 10:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:143
		{
			exprVAL.MetricExpr = exprDollar[2].MetricExpr
		}
	case 11:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:147
		{
			exprVAL.LogExpr = newMatcherExpr(exprDollar[1].Selector)
		}
	case 12:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:148
		{
			exprVAL.LogExpr = newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].PipelineExpr)
		}
	case 13:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:149
		{
			exprVAL.LogExpr = exprDollar[2].LogExpr
		}
	case 14:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:153
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].duration, nil, nil)
		}
	case 15:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:154
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].duration, nil, exprDollar[3].OffsetExpr)
		}
	case 16:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:155
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[4].duration, nil, nil)
		}
	case 17:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:156
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[4].duration, nil, exprDollar[5].OffsetExpr)
		}
	case 18:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:157
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].duration, exprDollar[3].UnwrapExpr, nil)
		}
	case 19:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:158
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].duration, exprDollar[4].UnwrapExpr, exprDollar[3].OffsetExpr)
		}
	case 20:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:159
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[4].duration, exprDollar[5].UnwrapExpr, nil)
		}
	case 21:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/syntax/expr.y:160
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[4].duration, exprDollar[6].UnwrapExpr, exprDollar[5].OffsetExpr)
		}
	case 22:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:161
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[3].duration, exprDollar[2].UnwrapExpr, nil)
		}
	case 23:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:162
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[1].Selector), exprDollar[3].duration, exprDollar[2].UnwrapExpr, exprDollar[4].OffsetExpr)
		}
	case 24:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:163
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[5].duration, exprDollar[3].UnwrapExpr, nil)
		}
	case 25:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/syntax/expr.y:164
		{
			exprVAL.LogRangeExpr = newLogRange(newMatcherExpr(exprDollar[2].Selector), exprDollar[5].duration, exprDollar[3].UnwrapExpr, exprDollar[6].OffsetExpr)
		}
	case 26:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:165
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].PipelineExpr), exprDollar[3].duration, nil, nil)
		}
	case 27:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:166
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].PipelineExpr), exprDollar[3].duration, nil, exprDollar[4].OffsetExpr)
		}
	case 28:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:167
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[2].Selector), exprDollar[3].PipelineExpr), exprDollar[5].duration, nil, nil)
		}
	case 29:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/syntax/expr.y:168
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[2].Selector), exprDollar[3].PipelineExpr), exprDollar[5].duration, nil, exprDollar[6].OffsetExpr)
		}
	case 30:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:169
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].PipelineExpr), exprDollar[4].duration, exprDollar[3].UnwrapExpr, nil)
		}
	case 31:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:170
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[2].PipelineExpr), exprDollar[4].duration, exprDollar[3].UnwrapExpr, exprDollar[5].OffsetExpr)
		}
	case 32:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/syntax/expr.y:171
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[2].Selector), exprDollar[3].PipelineExpr), exprDollar[6].duration, exprDollar[4].UnwrapExpr, nil)
		}
	case 33:
		exprDollar = exprS[exprpt-7 : exprpt+1]
//line pkg/logql/syntax/expr.y:172
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[2].Selector), exprDollar[3].PipelineExpr), exprDollar[6].duration, exprDollar[4].UnwrapExpr, exprDollar[7].OffsetExpr)
		}
	case 34:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:173
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[3].PipelineExpr), exprDollar[2].duration, nil, nil)
		}
	case 35:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:174
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[4].PipelineExpr), exprDollar[2].duration, nil, exprDollar[3].OffsetExpr)
		}
	case 36:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:175
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[3].PipelineExpr), exprDollar[2].duration, exprDollar[4].UnwrapExpr, nil)
		}
	case 37:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:176
		{
			exprVAL.LogRangeExpr = newLogRange(newPipelineExpr(newMatcherExpr(exprDollar[1].Selector), exprDollar[4].PipelineExpr), exprDollar[2].duration, exprDollar[5].UnwrapExpr, exprDollar[3].OffsetExpr)
		}
	case 38:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:177
		{
			exprVAL.LogRangeExpr = exprDollar[2].LogRangeExpr
		}
	case 40:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:182
		{
			exprVAL.UnwrapExpr = newUnwrapExpr(exprDollar[3].str, "")
		}
	case 41:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/syntax/expr.y:183
		{
			exprVAL.UnwrapExpr = newUnwrapExpr(exprDollar[5].str, exprDollar[3].ConvOp)
		}
	case 42:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:184
		{
			exprVAL.UnwrapExpr = exprDollar[1].UnwrapExpr.addPostFilter(exprDollar[3].LabelFilter)
		}
	case 43:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:188
		{
			exprVAL.ConvOp = OpConvBytes
		}
	case 44:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:189
		{
			exprVAL.ConvOp = OpConvDuration
		}
	case 45:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:190
		{
			exprVAL.ConvOp = OpConvDurationSeconds
		}
	case 46:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:194
		{
			exprVAL.RangeAggregationExpr = newRangeAggregationExpr(exprDollar[3].LogRangeExpr, exprDollar[1].RangeOp, nil, nil)
		}
	case 47:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/syntax/expr.y:195
		{
			exprVAL.RangeAggregationExpr = newRangeAggregationExpr(exprDollar[5].LogRangeExpr, exprDollar[1].RangeOp, nil, &exprDollar[3].str)
		}
	case 48:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:196
		{
			exprVAL.RangeAggregationExpr = newRangeAggregationExpr(exprDollar[3].LogRangeExpr, exprDollar[1].RangeOp, exprDollar[5].Grouping, nil)
		}
	case 49:
		exprDollar = exprS[exprpt-7 : exprpt+1]
//line pkg/logql/syntax/expr.y:197
		{
			exprVAL.RangeAggregationExpr = newRangeAggregationExpr(exprDollar[5].LogRangeExpr, exprDollar[1].RangeOp, exprDollar[7].Grouping, &exprDollar[3].str)
		}
	case 50:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:202
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[3].MetricExpr, exprDollar[1].VectorOp, nil, nil)
		}
	case 51:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:203
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[4].MetricExpr, exprDollar[1].VectorOp, exprDollar[2].Grouping, nil)
		}
	case 52:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:204
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[3].MetricExpr, exprDollar[1].VectorOp, exprDollar[5].Grouping, nil)
		}
	case 53:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/syntax/expr.y:206
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[5].MetricExpr, exprDollar[1].VectorOp, nil, &exprDollar[3].str)
		}
	case 54:
		exprDollar = exprS[exprpt-7 : exprpt+1]
//line pkg/logql/syntax/expr.y:207
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[5].MetricExpr, exprDollar[1].VectorOp, exprDollar[7].Grouping, &exprDollar[3].str)
		}
	case 55:
		exprDollar = exprS[exprpt-7 : exprpt+1]
//line pkg/logql/syntax/expr.y:208
		{
			exprVAL.VectorAggregationExpr = mustNewVectorAggregationExpr(exprDollar[6].MetricExpr, exprDollar[1].VectorOp, exprDollar[2].Grouping, &exprDollar[4].str)
		}
	case 56:
		exprDollar = exprS[exprpt-12 : exprpt+1]
//line pkg/logql/syntax/expr.y:213
		{
			exprVAL.LabelReplaceExpr = mustNewLabelReplaceExpr(exprDollar[3].MetricExpr, exprDollar[5].str, exprDollar[7].str, exprDollar[9].str, exprDollar[11].str)
		}
	case 57:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:217
		{
			exprVAL.Filter = labels.MatchRegexp
		}
	case 58:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:218
		{
			exprVAL.Filter = labels.MatchEqual
		}
	case 59:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:219
		{
			exprVAL.Filter = labels.MatchNotRegexp
		}
	case 60:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:220
		{
			exprVAL.Filter = labels.MatchNotEqual
		}
	case 61:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:224
		{
			exprVAL.Filter = labels.MatchNotEqual
		}
	case 60:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line expr.y:226
		{
			exprVAL.Selector = exprDollar[2].Matchers
		}
	case 61:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line expr.y:227
>>>>>>> 1e825301b (adding logfmt label extraction syntax)
		{
			exprVAL.Selector = exprDollar[2].Matchers
		}
	case 62:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:225
		{
			exprVAL.Selector = exprDollar[2].Matchers
		}
	case 63:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:235
		{
		}
	case 64:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:230
		{
			exprVAL.Matchers = []*labels.Matcher{exprDollar[1].Matcher}
		}
	case 65:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:231
		{
			exprVAL.Matchers = append(exprDollar[1].Matchers, exprDollar[3].Matcher)
		}
	case 66:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:235
		{
			exprVAL.Matcher = mustNewMatcher(labels.MatchEqual, exprDollar[1].str, exprDollar[3].str)
		}
	case 67:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:236
		{
			exprVAL.Matcher = mustNewMatcher(labels.MatchNotEqual, exprDollar[1].str, exprDollar[3].str)
		}
	case 68:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:237
		{
			exprVAL.Matcher = mustNewMatcher(labels.MatchRegexp, exprDollar[1].str, exprDollar[3].str)
		}
	case 69:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:238
		{
			exprVAL.Matcher = mustNewMatcher(labels.MatchNotRegexp, exprDollar[1].str, exprDollar[3].str)
		}
	case 70:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:242
		{
			exprVAL.PipelineExpr = MultiStageExpr{exprDollar[1].PipelineStage}
		}
	case 71:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:243
		{
			exprVAL.PipelineExpr = append(exprDollar[1].PipelineExpr, exprDollar[2].PipelineStage)
		}
	case 72:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:247
		{
			exprVAL.PipelineStage = exprDollar[1].LineFilters
		}
	case 73:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:248
		{
			exprVAL.PipelineStage = exprDollar[2].LabelParser
		}
	case 74:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:249
		{
			exprVAL.PipelineStage = exprDollar[2].JSONExpressionParser
		}
	case 75:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:250
		{
			exprVAL.PipelineStage = exprDollar[2].LogfmtExpressionParser
		}
	case 76:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:251
		{
			exprVAL.PipelineStage = &LabelFilterExpr{LabelFilterer: exprDollar[2].LabelFilter}
		}
	case 77:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:252
		{
			exprVAL.PipelineStage = exprDollar[2].LabelFormatExpr
		}
	case 78:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:262
		{
			exprVAL.PipelineStage = exprDollar[2].LabelFormatExpr
		}
	case 79:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:263
		{
			exprVAL.PipelineStage = exprDollar[2].DropLabelsExpr
		}
	case 80:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:256
		{
			exprVAL.FilterOp = OpFilterIP
		}
	case 81:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:260
		{
			exprVAL.LineFilter = newLineFilterExpr(exprDollar[1].Filter, "", exprDollar[2].str)
		}
	case 82:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:261
		{
			exprVAL.LineFilter = newLineFilterExpr(exprDollar[1].Filter, exprDollar[2].FilterOp, exprDollar[4].str)
		}
	case 83:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:265
		{
			exprVAL.LineFilters = exprDollar[1].LineFilter
		}
	case 84:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:266
		{
			exprVAL.LineFilters = newNestedLineFilterExpr(exprDollar[1].LineFilters, exprDollar[2].LineFilter)
		}
	case 85:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:270
		{
			exprVAL.LabelParser = newLabelParserExpr(OpParserTypeJSON, "")
		}
	case 86:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:271
		{
			exprVAL.LabelParser = newLabelParserExpr(OpParserTypeLogfmt, "")
		}
	case 87:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:272
		{
			exprVAL.LabelParser = newLabelParserExpr(OpParserTypeRegexp, exprDollar[2].str)
		}
	case 88:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:273
		{
			exprVAL.LabelParser = newLabelParserExpr(OpParserTypeUnpack, "")
		}
	case 89:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:274
		{
			exprVAL.LabelParser = newLabelParserExpr(OpParserTypePattern, exprDollar[2].str)
		}
	case 90:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:278
		{
			exprVAL.JSONExpressionParser = newJSONExpressionParser(exprDollar[2].JSONExpressionList)
		}
	case 91:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:280
		{
			exprVAL.LineFormatExpr = newLineFmtExpr(exprDollar[2].str)
		}
	case 92:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:293
		{
			exprVAL.DecolorizeExpr = newDecolorizeExpr()
		}
	case 93:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:296
		{
			exprVAL.LabelFormat = log.NewRenameLabelFmt(exprDollar[1].str, exprDollar[3].str)
		}
	case 94:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:297
		{
			exprVAL.LabelFormat = log.NewTemplateLabelFmt(exprDollar[1].str, exprDollar[3].str)
		}
	case 95:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:301
		{
			exprVAL.LabelsFormat = []log.LabelFmt{exprDollar[1].LabelFormat}
		}
	case 96:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:302
		{
			exprVAL.LabelsFormat = append(exprDollar[1].LabelsFormat, exprDollar[3].LabelFormat)
		}
	case 98:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:307
		{
			exprVAL.LabelFormatExpr = newLabelFmtExpr(exprDollar[2].LabelsFormat)
		}
	case 99:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:310
		{
			exprVAL.LabelFilter = log.NewStringLabelFilter(exprDollar[1].Matcher)
		}
	case 100:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:311
		{
			exprVAL.LabelFilter = exprDollar[1].IPLabelFilter
		}
	case 101:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:312
		{
			exprVAL.LabelFilter = exprDollar[1].UnitFilter
		}
	case 102:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:313
		{
			exprVAL.LabelFilter = exprDollar[1].NumberFilter
		}
	case 103:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:314
		{
			exprVAL.LabelFilter = exprDollar[2].LabelFilter
		}
	case 104:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:315
		{
			exprVAL.LabelFilter = log.NewAndLabelFilter(exprDollar[1].LabelFilter, exprDollar[2].LabelFilter)
		}
	case 105:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:316
		{
			exprVAL.LabelFilter = log.NewAndLabelFilter(exprDollar[1].LabelFilter, exprDollar[3].LabelFilter)
		}
	case 106:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:303
		{
			exprVAL.LogfmtExpressionParser = newLogfmtExpressionParser(exprDollar[2].LogfmtExpressionList)
		}
	case 90:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line expr.y:286
		{
			exprVAL.LineFormatExpr = newLineFmtExpr(exprDollar[2].str)
		}
	case 91:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line expr.y:289
		{
			exprVAL.LabelFormat = log.NewRenameLabelFmt(exprDollar[1].str, exprDollar[3].str)
		}
	case 92:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line expr.y:290
		{
			exprVAL.LabelFormat = log.NewTemplateLabelFmt(exprDollar[1].str, exprDollar[3].str)
		}
	case 93:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:294
		{
			exprVAL.LabelsFormat = []log.LabelFmt{exprDollar[1].LabelFormat}
		}
	case 94:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line expr.y:295
		{
			exprVAL.LabelsFormat = append(exprDollar[1].LabelsFormat, exprDollar[3].LabelFormat)
		}
	case 96:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line expr.y:299
		{
			exprVAL.LabelFormatExpr = newLabelFmtExpr(exprDollar[2].LabelsFormat)
		}
	case 97:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:302
		{
			exprVAL.LabelFilter = log.NewStringLabelFilter(exprDollar[1].Matcher)
		}
	case 98:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:303
		{
			exprVAL.LabelFilter = exprDollar[1].IPLabelFilter
		}
	case 99:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:304
		{
			exprVAL.LabelFilter = exprDollar[1].UnitFilter
		}
	case 100:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:305
		{
			exprVAL.LabelFilter = exprDollar[1].NumberFilter
		}
	case 101:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line expr.y:306
		{
			exprVAL.LabelFilter = exprDollar[2].LabelFilter
		}
	case 102:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line expr.y:307
		{
			exprVAL.LabelFilter = log.NewAndLabelFilter(exprDollar[1].LabelFilter, exprDollar[2].LabelFilter)
		}
	case 103:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line expr.y:308
>>>>>>> 1e825301b (adding logfmt label extraction syntax)
		{
			exprVAL.LabelFilter = log.NewAndLabelFilter(exprDollar[1].LabelFilter, exprDollar[3].LabelFilter)
		}
	case 107:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:304
		{
			exprVAL.LabelFilter = log.NewOrLabelFilter(exprDollar[1].LabelFilter, exprDollar[3].LabelFilter)
		}
	case 108:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:322
		{
			exprVAL.JSONExpression = log.NewJSONExpr(exprDollar[1].str, exprDollar[3].str)
		}
	case 109:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:323
		{
			exprVAL.JSONExpression = log.NewJSONExpr(exprDollar[1].str, exprDollar[1].str)
		}
	case 110:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:326
		{
			exprVAL.JSONExpressionList = []log.JSONExpression{exprDollar[1].JSONExpression}
		}
	case 111:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:327
		{
			exprVAL.JSONExpressionList = append(exprDollar[1].JSONExpressionList, exprDollar[3].JSONExpression)
		}
	case 112:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/syntax/expr.y:331
		{
			exprVAL.IPLabelFilter = log.NewIPLabelFilter(exprDollar[5].str, exprDollar[1].str, log.LabelFilterEqual)
		}
	case 113:
		exprDollar = exprS[exprpt-6 : exprpt+1]
//line pkg/logql/syntax/expr.y:332
		{
			exprVAL.IPLabelFilter = log.NewIPLabelFilter(exprDollar[5].str, exprDollar[1].str, log.LabelFilterNotEqual)
		}
	case 114:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:322
		{
			exprVAL.LabelFilter = log.NewAndLabelFilter(exprDollar[1].LabelFilter, exprDollar[3].LabelFilter)
		}
	case 112:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:323
		{
			exprVAL.LogfmtExpression = log.NewLogfmtExpr(exprDollar[1].str, exprDollar[1].str)
		}
	case 113:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:326
		{
			exprVAL.LogfmtExpressionList = []log.LogfmtExpression{exprDollar[1].LogfmtExpression}
		}
	case 117:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:327
		{
			exprVAL.LogfmtExpressionList = append(exprDollar[1].LogfmtExpressionList, exprDollar[3].LogfmtExpression)
		}
	case 115:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:328
		{
			exprVAL.IPLabelFilter = log.NewIPLabelFilter(exprDollar[5].str, exprDollar[1].str, log.LabelFilterEqual)
		}
	case 116:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:329
		{
			exprVAL.IPLabelFilter = log.NewIPLabelFilter(exprDollar[5].str, exprDollar[1].str, log.LabelFilterNotEqual)
		}
	case 117:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:330
		{
			exprVAL.UnitFilter = exprDollar[1].DurationFilter
		}
	case 118:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:331
		{
			exprVAL.UnitFilter = exprDollar[1].BytesFilter
		}
	case 119:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:332
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterEqual, exprDollar[1].str, exprDollar[3].duration)
		}
	case 123:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:350
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterGreaterThan, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 124:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:351
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterGreaterThanOrEqual, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 125:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:352
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterLesserThan, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 126:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:353
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterLesserThanOrEqual, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 127:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:354
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterNotEqual, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 128:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:341
		{
			exprVAL.DurationFilter = log.NewDurationLabelFilter(log.LabelFilterGreaterThanOrEqual, exprDollar[1].str, exprDollar[3].duration)
		}
	case 126:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:342
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterEqual, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 130:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:360
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterGreaterThan, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 131:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:361
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterGreaterThanOrEqual, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 132:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:362
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterLesserThan, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 133:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:363
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterLesserThanOrEqual, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 134:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:364
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterNotEqual, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 135:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:365
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterEqual, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 136:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:366
		{
			exprVAL.NumberFilter = log.NewNumericLabelFilter(log.LabelFilterEqual, exprDollar[1].str, mustNewFloat(exprDollar[3].str))
		}
	case 137:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:370
		{
			exprVAL.DropLabel = log.NewDropLabel(nil, exprDollar[1].str)
		}
	case 138:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:371
		{
			exprVAL.DropLabel = log.NewDropLabel(exprDollar[1].Matcher, "")
		}
	case 139:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:374
		{
			exprVAL.DropLabels = []log.DropLabel{exprDollar[1].DropLabel}
		}
	case 140:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:375
		{
			exprVAL.DropLabels = append(exprDollar[1].DropLabels, exprDollar[3].DropLabel)
		}
	case 141:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:378
		{
			exprVAL.DropLabelsExpr = newDropLabelsExpr(exprDollar[2].DropLabels)
		}
	case 142:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:382
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("or", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 143:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:383
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("and", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 144:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:384
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("unless", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 145:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:385
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("+", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 146:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:386
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("-", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 147:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:387
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("*", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 148:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:388
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("/", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 149:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:389
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("%", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 150:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:390
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("^", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 151:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:391
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("==", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 152:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:392
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("!=", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 153:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:393
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr(">", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 154:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:394
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr(">=", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 155:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:395
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("<", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 156:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:371
		{
			exprVAL.BytesFilter = log.NewBytesLabelFilter(log.LabelFilterGreaterThanOrEqual, exprDollar[1].str, exprDollar[3].bytes)
		}
	case 149:
		exprDollar = exprS[exprpt-0 : exprpt+1]
//line pkg/logql/syntax/expr.y:375
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("==", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 150:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:379
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("!=", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 151:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:386
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr(">", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
<<<<<<< HEAD
	case 152:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:392
=======
	case 151:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line expr.y:384
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr(">=", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 152:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line expr.y:385
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("<", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 153:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line expr.y:386
		{
			exprVAL.BinOpExpr = mustNewBinOpExpr("<=", exprDollar[3].BinOpModifier, exprDollar[1].Expr, exprDollar[4].Expr)
		}
	case 154:
		exprDollar = exprS[exprpt-0 : exprpt+1]
//line expr.y:390
		{
			exprVAL.BoolModifier = &BinOpOptions{VectorMatching: &VectorMatching{Card: CardOneToOne}}
		}
	case 155:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:394
		{
			exprVAL.BoolModifier = &BinOpOptions{VectorMatching: &VectorMatching{Card: CardOneToOne}, ReturnBool: true}
		}
	case 156:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line expr.y:401
		{
			exprVAL.OnOrIgnoringModifier = exprDollar[1].BoolModifier
			exprVAL.OnOrIgnoringModifier.VectorMatching.On = true
			exprVAL.OnOrIgnoringModifier.VectorMatching.MatchingLabels = exprDollar[4].Labels
		}
	case 152:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:392
		{
			exprVAL.OnOrIgnoringModifier = exprDollar[1].BoolModifier
			exprVAL.OnOrIgnoringModifier.VectorMatching.On = true
		}
	case 153:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:397
		{
			exprVAL.OnOrIgnoringModifier = exprDollar[1].BoolModifier
			exprVAL.OnOrIgnoringModifier.VectorMatching.MatchingLabels = exprDollar[4].Labels
		}
	case 154:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:427
		{
			exprVAL.OnOrIgnoringModifier = exprDollar[1].BoolModifier
		}
	case 163:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:433
		{
			exprVAL.BinOpModifier = exprDollar[1].BoolModifier
		}
	case 164:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:434
		{
			exprVAL.BinOpModifier = exprDollar[1].OnOrIgnoringModifier
		}
	case 165:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:436
		{
			exprVAL.BinOpModifier = exprDollar[1].OnOrIgnoringModifier
			exprVAL.BinOpModifier.VectorMatching.Card = CardManyToOne
		}
	case 166:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:441
		{
			exprVAL.BinOpModifier = exprDollar[1].OnOrIgnoringModifier
			exprVAL.BinOpModifier.VectorMatching.Card = CardManyToOne
		}
	case 167:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:446
		{
			exprVAL.BinOpModifier = exprDollar[1].OnOrIgnoringModifier
			exprVAL.BinOpModifier.VectorMatching.Card = CardManyToOne
			exprVAL.BinOpModifier.VectorMatching.Include = exprDollar[4].Labels
		}
	case 168:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:452
		{
			exprVAL.BinOpModifier = exprDollar[1].OnOrIgnoringModifier
			exprVAL.BinOpModifier.VectorMatching.Card = CardOneToMany
		}
	case 169:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:457
		{
			exprVAL.BinOpModifier = exprDollar[1].OnOrIgnoringModifier
			exprVAL.BinOpModifier.VectorMatching.Card = CardOneToMany
		}
	case 170:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line pkg/logql/syntax/expr.y:437
		{
			exprVAL.OnOrIgnoringModifier = exprDollar[1].BoolModifier
		}
	case 160:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:423
		{
			exprVAL.BinOpModifier = exprDollar[1].BoolModifier
		}
	case 161:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:424
>>>>>>> 1e825301b (adding logfmt label extraction syntax)
		{
			exprVAL.BinOpModifier = exprDollar[1].OnOrIgnoringModifier
		}
	case 163:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:445
		{
			exprVAL.BinOpModifier = exprDollar[1].OnOrIgnoringModifier
			exprVAL.BinOpModifier.VectorMatching.Card = CardManyToOne
		}
	case 164:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:446
		{
			exprVAL.BinOpModifier = exprDollar[1].OnOrIgnoringModifier
			exprVAL.BinOpModifier.VectorMatching.Card = CardManyToOne
		}
	case 165:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:447
		{
			exprVAL.BinOpModifier = exprDollar[1].OnOrIgnoringModifier
			exprVAL.BinOpModifier.VectorMatching.Card = CardManyToOne
			exprVAL.BinOpModifier.VectorMatching.Include = exprDollar[4].Labels
		}
	case 166:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:476
		{
			exprVAL.VectorExpr = NewVectorExpr(exprDollar[3].str)
		}
	case 175:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:479
		{
			exprVAL.Vector = OpTypeVector
		}
	case 176:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:483
		{
			exprVAL.VectorOp = OpTypeSum
		}
	case 177:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:484
		{
			exprVAL.VectorOp = OpTypeAvg
		}
	case 178:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:485
		{
			exprVAL.VectorOp = OpTypeCount
		}
	case 179:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:486
		{
			exprVAL.VectorOp = OpTypeMax
		}
	case 180:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:487
		{
			exprVAL.VectorOp = OpTypeMin
		}
	case 181:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:488
		{
			exprVAL.VectorOp = OpTypeStddev
		}
	case 182:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:489
		{
			exprVAL.VectorOp = OpTypeStdvar
		}
	case 183:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:490
		{
			exprVAL.VectorOp = OpTypeBottomK
		}
	case 184:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:491
		{
			exprVAL.VectorOp = OpTypeTopK
		}
	case 185:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:492
		{
			exprVAL.VectorOp = OpTypeSort
		}
	case 186:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:493
		{
			exprVAL.VectorOp = OpTypeSortDesc
		}
	case 187:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:497
		{
			exprVAL.RangeOp = OpRangeTypeCount
		}
	case 188:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:498
		{
			exprVAL.RangeOp = OpRangeTypeRate
		}
	case 189:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:499
		{
			exprVAL.RangeOp = OpRangeTypeRateCounter
		}
	case 190:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:500
		{
			exprVAL.RangeOp = OpRangeTypeBytes
		}
	case 191:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:501
		{
			exprVAL.RangeOp = OpRangeTypeBytesRate
		}
	case 192:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:502
		{
			exprVAL.RangeOp = OpRangeTypeAvg
		}
	case 193:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:503
		{
			exprVAL.RangeOp = OpRangeTypeSum
		}
	case 194:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:504
		{
			exprVAL.RangeOp = OpRangeTypeMin
		}
	case 195:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:505
		{
			exprVAL.RangeOp = OpRangeTypeMax
		}
	case 196:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:506
		{
			exprVAL.RangeOp = OpRangeTypeStdvar
		}
	case 197:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:507
		{
			exprVAL.RangeOp = OpRangeTypeStddev
		}
	case 198:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:508
		{
			exprVAL.RangeOp = OpRangeTypeQuantile
		}
	case 199:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:509
		{
			exprVAL.RangeOp = OpRangeTypeFirst
		}
	case 200:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:510
		{
			exprVAL.RangeOp = OpRangeTypeLast
		}
	case 201:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:511
		{
			exprVAL.RangeOp = OpRangeTypeAbsent
		}
	case 202:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line pkg/logql/syntax/expr.y:515
		{
			exprVAL.OffsetExpr = newOffsetExpr(exprDollar[2].duration)
		}
	case 203:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line pkg/logql/syntax/expr.y:518
		{
			exprVAL.Labels = []string{exprDollar[1].str}
		}
	case 204:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:519
		{
			exprVAL.Labels = append(exprDollar[1].Labels, exprDollar[3].str)
		}
	case 205:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:523
		{
			exprVAL.Grouping = &Grouping{Without: false, Groups: exprDollar[3].Labels}
		}
	case 206:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line pkg/logql/syntax/expr.y:524
		{
			exprVAL.Grouping = &Grouping{Without: true, Groups: exprDollar[3].Labels}
		}
	case 207:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:525
		{
			exprVAL.Grouping = &Grouping{Without: false, Groups: nil}
		}
	case 208:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line pkg/logql/syntax/expr.y:499
		{
			exprVAL.BinOpModifier = exprDollar[1].OnOrIgnoringModifier
			exprVAL.BinOpModifier.VectorMatching.Card = CardOneToMany
		}
	case 166:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line expr.y:447
		{
			exprVAL.BinOpModifier = exprDollar[1].OnOrIgnoringModifier
			exprVAL.BinOpModifier.VectorMatching.Card = CardOneToMany
		}
	case 167:
		exprDollar = exprS[exprpt-5 : exprpt+1]
//line expr.y:452
		{
			exprVAL.BinOpModifier = exprDollar[1].OnOrIgnoringModifier
			exprVAL.BinOpModifier.VectorMatching.Card = CardOneToMany
			exprVAL.BinOpModifier.VectorMatching.Include = exprDollar[4].Labels
		}
	case 168:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:460
		{
			exprVAL.LiteralExpr = mustNewLiteralExpr(exprDollar[1].str, false)
		}
	case 169:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line expr.y:461
		{
			exprVAL.LiteralExpr = mustNewLiteralExpr(exprDollar[2].str, false)
		}
	case 170:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line expr.y:462
		{
			exprVAL.LiteralExpr = mustNewLiteralExpr(exprDollar[2].str, true)
		}
	case 171:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:466
		{
			exprVAL.VectorOp = OpTypeSum
		}
	case 172:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:467
		{
			exprVAL.VectorOp = OpTypeAvg
		}
	case 173:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:468
		{
			exprVAL.VectorOp = OpTypeCount
		}
	case 174:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:469
		{
			exprVAL.VectorOp = OpTypeMax
		}
	case 175:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:470
		{
			exprVAL.VectorOp = OpTypeMin
		}
	case 176:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:471
		{
			exprVAL.VectorOp = OpTypeStddev
		}
	case 177:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:472
		{
			exprVAL.VectorOp = OpTypeStdvar
		}
	case 178:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:473
		{
			exprVAL.VectorOp = OpTypeBottomK
		}
	case 179:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:474
		{
			exprVAL.VectorOp = OpTypeTopK
		}
	case 180:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:478
		{
			exprVAL.RangeOp = OpRangeTypeCount
		}
	case 181:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:479
		{
			exprVAL.RangeOp = OpRangeTypeRate
		}
	case 182:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:480
		{
			exprVAL.RangeOp = OpRangeTypeRateCounter
		}
	case 183:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:481
		{
			exprVAL.RangeOp = OpRangeTypeBytes
		}
	case 184:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:482
		{
			exprVAL.RangeOp = OpRangeTypeBytesRate
		}
	case 185:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:483
		{
			exprVAL.RangeOp = OpRangeTypeAvg
		}
	case 186:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:484
		{
			exprVAL.RangeOp = OpRangeTypeSum
		}
	case 187:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:485
		{
			exprVAL.RangeOp = OpRangeTypeMin
		}
	case 188:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:486
		{
			exprVAL.RangeOp = OpRangeTypeMax
		}
	case 189:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:487
		{
			exprVAL.RangeOp = OpRangeTypeStdvar
		}
	case 190:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:488
		{
			exprVAL.RangeOp = OpRangeTypeStddev
		}
	case 191:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:489
		{
			exprVAL.RangeOp = OpRangeTypeQuantile
		}
	case 192:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:490
		{
			exprVAL.RangeOp = OpRangeTypeFirst
		}
	case 193:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:491
		{
			exprVAL.RangeOp = OpRangeTypeLast
		}
	case 194:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:492
		{
			exprVAL.RangeOp = OpRangeTypeAbsent
		}
	case 195:
		exprDollar = exprS[exprpt-2 : exprpt+1]
//line expr.y:496
		{
			exprVAL.OffsetExpr = newOffsetExpr(exprDollar[2].duration)
		}
	case 196:
		exprDollar = exprS[exprpt-1 : exprpt+1]
//line expr.y:499
		{
			exprVAL.Labels = []string{exprDollar[1].str}
		}
	case 197:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line expr.y:500
		{
			exprVAL.Labels = append(exprDollar[1].Labels, exprDollar[3].str)
		}
	case 198:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line expr.y:504
		{
			exprVAL.Grouping = &Grouping{Without: false, Groups: exprDollar[3].Labels}
		}
	case 199:
		exprDollar = exprS[exprpt-4 : exprpt+1]
//line expr.y:505
		{
			exprVAL.Grouping = &Grouping{Without: true, Groups: exprDollar[3].Labels}
		}
	case 200:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line expr.y:506
		{
			exprVAL.Grouping = &Grouping{Without: false, Groups: nil}
		}
	case 201:
		exprDollar = exprS[exprpt-3 : exprpt+1]
//line expr.y:507
>>>>>>> 1e825301b (adding logfmt label extraction syntax)
		{
			exprVAL.Grouping = &Grouping{Without: true, Groups: nil}
		}
	}
	goto exprstack /* stack new state and value */
}
