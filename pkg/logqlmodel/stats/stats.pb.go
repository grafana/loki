// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/logqlmodel/stats/stats.proto

package stats

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Result contains LogQL query statistics.
type Result struct {
	Summary  Summary  `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary"`
	Querier  Querier  `protobuf:"bytes,2,opt,name=querier,proto3" json:"querier"`
	Ingester Ingester `protobuf:"bytes,3,opt,name=ingester,proto3" json:"ingester"`
	Caches   Caches   `protobuf:"bytes,4,opt,name=caches,proto3" json:"cache"`
	Index    Index    `protobuf:"bytes,5,opt,name=index,proto3" json:"index"`
}

func (m *Result) Reset()      { *m = Result{} }
func (*Result) ProtoMessage() {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cdfe5d2aea33ebb, []int{0}
}
func (m *Result) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Result.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return m.Size()
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetSummary() Summary {
	if m != nil {
		return m.Summary
	}
	return Summary{}
}

func (m *Result) GetQuerier() Querier {
	if m != nil {
		return m.Querier
	}
	return Querier{}
}

func (m *Result) GetIngester() Ingester {
	if m != nil {
		return m.Ingester
	}
	return Ingester{}
}

func (m *Result) GetCaches() Caches {
	if m != nil {
		return m.Caches
	}
	return Caches{}
}

func (m *Result) GetIndex() Index {
	if m != nil {
		return m.Index
	}
	return Index{}
}

type Caches struct {
	Chunk               Cache `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk"`
	Index               Cache `protobuf:"bytes,2,opt,name=index,proto3" json:"index"`
	Result              Cache `protobuf:"bytes,3,opt,name=result,proto3" json:"result"`
	StatsResult         Cache `protobuf:"bytes,4,opt,name=statsResult,proto3" json:"statsResult"`
	VolumeResult        Cache `protobuf:"bytes,5,opt,name=volumeResult,proto3" json:"volumeResult"`
	SeriesResult        Cache `protobuf:"bytes,6,opt,name=seriesResult,proto3" json:"seriesResult"`
	LabelResult         Cache `protobuf:"bytes,7,opt,name=labelResult,proto3" json:"labelResult"`
	InstantMetricResult Cache `protobuf:"bytes,8,opt,name=instantMetricResult,proto3" json:"instantMetricResult"`
}

func (m *Caches) Reset()      { *m = Caches{} }
func (*Caches) ProtoMessage() {}
func (*Caches) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cdfe5d2aea33ebb, []int{1}
}
func (m *Caches) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Caches) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Caches.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Caches) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Caches.Merge(m, src)
}
func (m *Caches) XXX_Size() int {
	return m.Size()
}
func (m *Caches) XXX_DiscardUnknown() {
	xxx_messageInfo_Caches.DiscardUnknown(m)
}

var xxx_messageInfo_Caches proto.InternalMessageInfo

func (m *Caches) GetChunk() Cache {
	if m != nil {
		return m.Chunk
	}
	return Cache{}
}

func (m *Caches) GetIndex() Cache {
	if m != nil {
		return m.Index
	}
	return Cache{}
}

func (m *Caches) GetResult() Cache {
	if m != nil {
		return m.Result
	}
	return Cache{}
}

func (m *Caches) GetStatsResult() Cache {
	if m != nil {
		return m.StatsResult
	}
	return Cache{}
}

func (m *Caches) GetVolumeResult() Cache {
	if m != nil {
		return m.VolumeResult
	}
	return Cache{}
}

func (m *Caches) GetSeriesResult() Cache {
	if m != nil {
		return m.SeriesResult
	}
	return Cache{}
}

func (m *Caches) GetLabelResult() Cache {
	if m != nil {
		return m.LabelResult
	}
	return Cache{}
}

func (m *Caches) GetInstantMetricResult() Cache {
	if m != nil {
		return m.InstantMetricResult
	}
	return Cache{}
}

// Summary is the summary of a query statistics.
type Summary struct {
	// Total bytes processed per second.
	BytesProcessedPerSecond int64 `protobuf:"varint,1,opt,name=bytesProcessedPerSecond,proto3" json:"bytesProcessedPerSecond"`
	// Total lines processed per second.
	LinesProcessedPerSecond int64 `protobuf:"varint,2,opt,name=linesProcessedPerSecond,proto3" json:"linesProcessedPerSecond"`
	// Total bytes processed. Includes structured metadata bytes.
	TotalBytesProcessed int64 `protobuf:"varint,3,opt,name=totalBytesProcessed,proto3" json:"totalBytesProcessed"`
	// Total lines processed.
	TotalLinesProcessed int64 `protobuf:"varint,4,opt,name=totalLinesProcessed,proto3" json:"totalLinesProcessed"`
	// Execution time in seconds.
	// In addition to internal calculations this is also returned by the HTTP API.
	// Grafana expects time values to be returned in seconds as float.
	ExecTime float64 `protobuf:"fixed64,5,opt,name=execTime,proto3" json:"execTime"`
	// Queue time in seconds.
	// In addition to internal calculations this is also returned by the HTTP API.
	// Grafana expects time values to be returned in seconds as float.
	QueueTime float64 `protobuf:"fixed64,6,opt,name=queueTime,proto3" json:"queueTime"`
	// Subqueries exists for backwards compatibility reasons and is deprecated. Do not use.
	// Instead use splits and shards
	Subqueries int64 `protobuf:"varint,7,opt,name=subqueries,proto3" json:"subqueries"`
	// Total number of result entries returned
	TotalEntriesReturned int64 `protobuf:"varint,8,opt,name=totalEntriesReturned,proto3" json:"totalEntriesReturned"`
	// Total number of splits by time
	Splits int64 `protobuf:"varint,9,opt,name=splits,proto3" json:"splits"`
	// Total number of shards
	Shards int64 `protobuf:"varint,10,opt,name=shards,proto3" json:"shards"`
	// Total lines post query filtering
	TotalPostFilterLines int64 `protobuf:"varint,11,opt,name=totalPostFilterLines,proto3" json:"totalPostFilterLines"`
	// Total bytes processed of metadata.
	TotalStructuredMetadataBytesProcessed int64 `protobuf:"varint,12,opt,name=totalStructuredMetadataBytesProcessed,proto3" json:"totalStructuredMetadataBytesProcessed"`
}

func (m *Summary) Reset()      { *m = Summary{} }
func (*Summary) ProtoMessage() {}
func (*Summary) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cdfe5d2aea33ebb, []int{2}
}
func (m *Summary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Summary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Summary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Summary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Summary.Merge(m, src)
}
func (m *Summary) XXX_Size() int {
	return m.Size()
}
func (m *Summary) XXX_DiscardUnknown() {
	xxx_messageInfo_Summary.DiscardUnknown(m)
}

var xxx_messageInfo_Summary proto.InternalMessageInfo

func (m *Summary) GetBytesProcessedPerSecond() int64 {
	if m != nil {
		return m.BytesProcessedPerSecond
	}
	return 0
}

func (m *Summary) GetLinesProcessedPerSecond() int64 {
	if m != nil {
		return m.LinesProcessedPerSecond
	}
	return 0
}

func (m *Summary) GetTotalBytesProcessed() int64 {
	if m != nil {
		return m.TotalBytesProcessed
	}
	return 0
}

func (m *Summary) GetTotalLinesProcessed() int64 {
	if m != nil {
		return m.TotalLinesProcessed
	}
	return 0
}

func (m *Summary) GetExecTime() float64 {
	if m != nil {
		return m.ExecTime
	}
	return 0
}

func (m *Summary) GetQueueTime() float64 {
	if m != nil {
		return m.QueueTime
	}
	return 0
}

func (m *Summary) GetSubqueries() int64 {
	if m != nil {
		return m.Subqueries
	}
	return 0
}

func (m *Summary) GetTotalEntriesReturned() int64 {
	if m != nil {
		return m.TotalEntriesReturned
	}
	return 0
}

func (m *Summary) GetSplits() int64 {
	if m != nil {
		return m.Splits
	}
	return 0
}

func (m *Summary) GetShards() int64 {
	if m != nil {
		return m.Shards
	}
	return 0
}

func (m *Summary) GetTotalPostFilterLines() int64 {
	if m != nil {
		return m.TotalPostFilterLines
	}
	return 0
}

func (m *Summary) GetTotalStructuredMetadataBytesProcessed() int64 {
	if m != nil {
		return m.TotalStructuredMetadataBytesProcessed
	}
	return 0
}

// Statistics from Index queries
// TODO(owen-d): include bytes.
// Needs some index methods added to return _sized_ chunk refs to know
type Index struct {
	// Total chunks
	TotalChunks int64 `protobuf:"varint,1,opt,name=totalChunks,proto3" json:"totalChunks"`
	// Post-filtered chunks
	PostFilterChunks int64 `protobuf:"varint,2,opt,name=postFilterChunks,proto3" json:"postFilterChunks"`
	// Nanosecond duration spent fetching shards
	ShardsDuration int64 `protobuf:"varint,3,opt,name=shardsDuration,proto3" json:"shardsDuration"`
}

func (m *Index) Reset()      { *m = Index{} }
func (*Index) ProtoMessage() {}
func (*Index) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cdfe5d2aea33ebb, []int{3}
}
func (m *Index) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Index) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Index.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Index) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Index.Merge(m, src)
}
func (m *Index) XXX_Size() int {
	return m.Size()
}
func (m *Index) XXX_DiscardUnknown() {
	xxx_messageInfo_Index.DiscardUnknown(m)
}

var xxx_messageInfo_Index proto.InternalMessageInfo

func (m *Index) GetTotalChunks() int64 {
	if m != nil {
		return m.TotalChunks
	}
	return 0
}

func (m *Index) GetPostFilterChunks() int64 {
	if m != nil {
		return m.PostFilterChunks
	}
	return 0
}

func (m *Index) GetShardsDuration() int64 {
	if m != nil {
		return m.ShardsDuration
	}
	return 0
}

type Querier struct {
	Store Store `protobuf:"bytes,1,opt,name=store,proto3" json:"store"`
}

func (m *Querier) Reset()      { *m = Querier{} }
func (*Querier) ProtoMessage() {}
func (*Querier) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cdfe5d2aea33ebb, []int{4}
}
func (m *Querier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Querier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Querier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Querier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Querier.Merge(m, src)
}
func (m *Querier) XXX_Size() int {
	return m.Size()
}
func (m *Querier) XXX_DiscardUnknown() {
	xxx_messageInfo_Querier.DiscardUnknown(m)
}

var xxx_messageInfo_Querier proto.InternalMessageInfo

func (m *Querier) GetStore() Store {
	if m != nil {
		return m.Store
	}
	return Store{}
}

type Ingester struct {
	// Total ingester reached for this query.
	TotalReached int32 `protobuf:"varint,1,opt,name=totalReached,proto3" json:"totalReached"`
	// Total of chunks matched by the query from ingesters
	TotalChunksMatched int64 `protobuf:"varint,2,opt,name=totalChunksMatched,proto3" json:"totalChunksMatched"`
	// Total of batches sent from ingesters.
	TotalBatches int64 `protobuf:"varint,3,opt,name=totalBatches,proto3" json:"totalBatches"`
	// Total lines sent by ingesters.
	TotalLinesSent int64 `protobuf:"varint,4,opt,name=totalLinesSent,proto3" json:"totalLinesSent"`
	Store          Store `protobuf:"bytes,5,opt,name=store,proto3" json:"store"`
}

func (m *Ingester) Reset()      { *m = Ingester{} }
func (*Ingester) ProtoMessage() {}
func (*Ingester) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cdfe5d2aea33ebb, []int{5}
}
func (m *Ingester) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ingester) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ingester.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ingester) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ingester.Merge(m, src)
}
func (m *Ingester) XXX_Size() int {
	return m.Size()
}
func (m *Ingester) XXX_DiscardUnknown() {
	xxx_messageInfo_Ingester.DiscardUnknown(m)
}

var xxx_messageInfo_Ingester proto.InternalMessageInfo

func (m *Ingester) GetTotalReached() int32 {
	if m != nil {
		return m.TotalReached
	}
	return 0
}

func (m *Ingester) GetTotalChunksMatched() int64 {
	if m != nil {
		return m.TotalChunksMatched
	}
	return 0
}

func (m *Ingester) GetTotalBatches() int64 {
	if m != nil {
		return m.TotalBatches
	}
	return 0
}

func (m *Ingester) GetTotalLinesSent() int64 {
	if m != nil {
		return m.TotalLinesSent
	}
	return 0
}

func (m *Ingester) GetStore() Store {
	if m != nil {
		return m.Store
	}
	return Store{}
}

type Store struct {
	// The total of chunk reference fetched from index.
	TotalChunksRef int64 `protobuf:"varint,1,opt,name=totalChunksRef,proto3" json:"totalChunksRef"`
	// Total number of chunks fetched.
	TotalChunksDownloaded int64 `protobuf:"varint,2,opt,name=totalChunksDownloaded,proto3" json:"totalChunksDownloaded"`
	// Time spent fetching chunks in nanoseconds.
	ChunksDownloadTime int64 `protobuf:"varint,3,opt,name=chunksDownloadTime,proto3" json:"chunksDownloadTime"`
	// Whether the query referenced structured metadata
	QueryReferencedStructured bool  `protobuf:"varint,13,opt,name=queryReferencedStructured,proto3" json:"queryReferencedStructuredMetadata"`
	Chunk                     Chunk `protobuf:"bytes,4,opt,name=chunk,proto3" json:"chunk"`
	// Time spent fetching chunk refs from index.
	ChunkRefsFetchTime int64 `protobuf:"varint,5,opt,name=chunkRefsFetchTime,proto3" json:"chunkRefsFetchTime"`
	// Time spent being blocked on congestion control.
	CongestionControlLatency int64 `protobuf:"varint,6,opt,name=congestionControlLatency,proto3" json:"congestionControlLatency"`
	// Total number of lines filtered by pipeline wrapper.
	PipelineWrapperFilteredLines int64 `protobuf:"varint,7,opt,name=pipelineWrapperFilteredLines,proto3" json:"pipelineWrapperFilteredLines"`
}

func (m *Store) Reset()      { *m = Store{} }
func (*Store) ProtoMessage() {}
func (*Store) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cdfe5d2aea33ebb, []int{6}
}
func (m *Store) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Store) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Store.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Store) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Store.Merge(m, src)
}
func (m *Store) XXX_Size() int {
	return m.Size()
}
func (m *Store) XXX_DiscardUnknown() {
	xxx_messageInfo_Store.DiscardUnknown(m)
}

var xxx_messageInfo_Store proto.InternalMessageInfo

func (m *Store) GetTotalChunksRef() int64 {
	if m != nil {
		return m.TotalChunksRef
	}
	return 0
}

func (m *Store) GetTotalChunksDownloaded() int64 {
	if m != nil {
		return m.TotalChunksDownloaded
	}
	return 0
}

func (m *Store) GetChunksDownloadTime() int64 {
	if m != nil {
		return m.ChunksDownloadTime
	}
	return 0
}

func (m *Store) GetQueryReferencedStructured() bool {
	if m != nil {
		return m.QueryReferencedStructured
	}
	return false
}

func (m *Store) GetChunk() Chunk {
	if m != nil {
		return m.Chunk
	}
	return Chunk{}
}

func (m *Store) GetChunkRefsFetchTime() int64 {
	if m != nil {
		return m.ChunkRefsFetchTime
	}
	return 0
}

func (m *Store) GetCongestionControlLatency() int64 {
	if m != nil {
		return m.CongestionControlLatency
	}
	return 0
}

func (m *Store) GetPipelineWrapperFilteredLines() int64 {
	if m != nil {
		return m.PipelineWrapperFilteredLines
	}
	return 0
}

type Chunk struct {
	// Total bytes processed but was already in memory (found in the headchunk). Includes structured metadata bytes.
	HeadChunkBytes int64 `protobuf:"varint,4,opt,name=headChunkBytes,proto3" json:"headChunkBytes"`
	// Total lines processed but was already in memory. (found in the headchunk)
	HeadChunkLines int64 `protobuf:"varint,5,opt,name=headChunkLines,proto3" json:"headChunkLines"`
	// Total bytes decompressed and processed from chunks. Includes structured metadata bytes.
	DecompressedBytes int64 `protobuf:"varint,6,opt,name=decompressedBytes,proto3" json:"decompressedBytes"`
	// Total lines decompressed and processed from chunks.
	DecompressedLines int64 `protobuf:"varint,7,opt,name=decompressedLines,proto3" json:"decompressedLines"`
	// Total bytes of compressed chunks (blocks) processed.
	CompressedBytes int64 `protobuf:"varint,8,opt,name=compressedBytes,proto3" json:"compressedBytes"`
	// Total duplicates found while processing.
	TotalDuplicates int64 `protobuf:"varint,9,opt,name=totalDuplicates,proto3" json:"totalDuplicates"`
	// Total lines post filtering
	PostFilterLines int64 `protobuf:"varint,10,opt,name=postFilterLines,proto3" json:"postFilterLines"`
	// Total bytes processed for metadata but was already in memory. (found in the headchunk)
	HeadChunkStructuredMetadataBytes int64 `protobuf:"varint,11,opt,name=headChunkStructuredMetadataBytes,proto3" json:"headChunkStructuredMetadataBytes"`
	// Total bytes of entries metadata decompressed and processed from chunks.
	DecompressedStructuredMetadataBytes int64 `protobuf:"varint,12,opt,name=decompressedStructuredMetadataBytes,proto3" json:"decompressedStructuredMetadataBytes"`
}

func (m *Chunk) Reset()      { *m = Chunk{} }
func (*Chunk) ProtoMessage() {}
func (*Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cdfe5d2aea33ebb, []int{7}
}
func (m *Chunk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Chunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Chunk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Chunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chunk.Merge(m, src)
}
func (m *Chunk) XXX_Size() int {
	return m.Size()
}
func (m *Chunk) XXX_DiscardUnknown() {
	xxx_messageInfo_Chunk.DiscardUnknown(m)
}

var xxx_messageInfo_Chunk proto.InternalMessageInfo

func (m *Chunk) GetHeadChunkBytes() int64 {
	if m != nil {
		return m.HeadChunkBytes
	}
	return 0
}

func (m *Chunk) GetHeadChunkLines() int64 {
	if m != nil {
		return m.HeadChunkLines
	}
	return 0
}

func (m *Chunk) GetDecompressedBytes() int64 {
	if m != nil {
		return m.DecompressedBytes
	}
	return 0
}

func (m *Chunk) GetDecompressedLines() int64 {
	if m != nil {
		return m.DecompressedLines
	}
	return 0
}

func (m *Chunk) GetCompressedBytes() int64 {
	if m != nil {
		return m.CompressedBytes
	}
	return 0
}

func (m *Chunk) GetTotalDuplicates() int64 {
	if m != nil {
		return m.TotalDuplicates
	}
	return 0
}

func (m *Chunk) GetPostFilterLines() int64 {
	if m != nil {
		return m.PostFilterLines
	}
	return 0
}

func (m *Chunk) GetHeadChunkStructuredMetadataBytes() int64 {
	if m != nil {
		return m.HeadChunkStructuredMetadataBytes
	}
	return 0
}

func (m *Chunk) GetDecompressedStructuredMetadataBytes() int64 {
	if m != nil {
		return m.DecompressedStructuredMetadataBytes
	}
	return 0
}

type Cache struct {
	EntriesFound      int32 `protobuf:"varint,1,opt,name=entriesFound,proto3" json:"entriesFound"`
	EntriesRequested  int32 `protobuf:"varint,2,opt,name=entriesRequested,proto3" json:"entriesRequested"`
	EntriesStored     int32 `protobuf:"varint,3,opt,name=entriesStored,proto3" json:"entriesStored"`
	BytesReceived     int64 `protobuf:"varint,4,opt,name=bytesReceived,proto3" json:"bytesReceived"`
	BytesSent         int64 `protobuf:"varint,5,opt,name=bytesSent,proto3" json:"bytesSent"`
	Requests          int32 `protobuf:"varint,6,opt,name=requests,proto3" json:"requests"`
	DownloadTime      int64 `protobuf:"varint,7,opt,name=downloadTime,proto3" json:"downloadTime"`
	QueryLengthServed int64 `protobuf:"varint,8,opt,name=queryLengthServed,proto3" json:"queryLengthServed"`
}

func (m *Cache) Reset()      { *m = Cache{} }
func (*Cache) ProtoMessage() {}
func (*Cache) Descriptor() ([]byte, []int) {
	return fileDescriptor_6cdfe5d2aea33ebb, []int{8}
}
func (m *Cache) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cache) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cache.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Cache) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cache.Merge(m, src)
}
func (m *Cache) XXX_Size() int {
	return m.Size()
}
func (m *Cache) XXX_DiscardUnknown() {
	xxx_messageInfo_Cache.DiscardUnknown(m)
}

var xxx_messageInfo_Cache proto.InternalMessageInfo

func (m *Cache) GetEntriesFound() int32 {
	if m != nil {
		return m.EntriesFound
	}
	return 0
}

func (m *Cache) GetEntriesRequested() int32 {
	if m != nil {
		return m.EntriesRequested
	}
	return 0
}

func (m *Cache) GetEntriesStored() int32 {
	if m != nil {
		return m.EntriesStored
	}
	return 0
}

func (m *Cache) GetBytesReceived() int64 {
	if m != nil {
		return m.BytesReceived
	}
	return 0
}

func (m *Cache) GetBytesSent() int64 {
	if m != nil {
		return m.BytesSent
	}
	return 0
}

func (m *Cache) GetRequests() int32 {
	if m != nil {
		return m.Requests
	}
	return 0
}

func (m *Cache) GetDownloadTime() int64 {
	if m != nil {
		return m.DownloadTime
	}
	return 0
}

func (m *Cache) GetQueryLengthServed() int64 {
	if m != nil {
		return m.QueryLengthServed
	}
	return 0
}

func init() {
	proto.RegisterType((*Result)(nil), "stats.Result")
	proto.RegisterType((*Caches)(nil), "stats.Caches")
	proto.RegisterType((*Summary)(nil), "stats.Summary")
	proto.RegisterType((*Index)(nil), "stats.Index")
	proto.RegisterType((*Querier)(nil), "stats.Querier")
	proto.RegisterType((*Ingester)(nil), "stats.Ingester")
	proto.RegisterType((*Store)(nil), "stats.Store")
	proto.RegisterType((*Chunk)(nil), "stats.Chunk")
	proto.RegisterType((*Cache)(nil), "stats.Cache")
}

func init() { proto.RegisterFile("pkg/logqlmodel/stats/stats.proto", fileDescriptor_6cdfe5d2aea33ebb) }

var fileDescriptor_6cdfe5d2aea33ebb = []byte{
	// 1378 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x58, 0xcf, 0x6f, 0xdc, 0x44,
	0x14, 0xde, 0xcd, 0xd6, 0x9b, 0x74, 0xf2, 0xab, 0x9d, 0xa4, 0x74, 0x4b, 0x2b, 0x3b, 0x2c, 0x54,
	0x14, 0x21, 0x65, 0x55, 0x8a, 0x84, 0x40, 0x54, 0x42, 0x4e, 0x89, 0x54, 0x29, 0x15, 0xe5, 0x2d,
	0x08, 0x04, 0x27, 0xc7, 0x9e, 0xec, 0x5a, 0xf5, 0xda, 0x8e, 0x3d, 0x0e, 0xcd, 0x09, 0xfe, 0x04,
	0xee, 0xdc, 0x11, 0x17, 0x4e, 0x5c, 0xe0, 0xcc, 0xa5, 0xc7, 0x1e, 0x7b, 0xb2, 0xe8, 0xe6, 0x82,
	0x7c, 0xea, 0x1f, 0xc0, 0x01, 0xcd, 0x9b, 0x59, 0xff, 0x5a, 0x6f, 0x9a, 0xcb, 0x7a, 0xde, 0xf7,
	0xbe, 0xef, 0xcd, 0xf8, 0x79, 0xe6, 0xbd, 0xd1, 0x92, 0x9d, 0xf0, 0xc9, 0x68, 0xe0, 0x05, 0xa3,
	0x63, 0x6f, 0x12, 0x38, 0xcc, 0x1b, 0xc4, 0xdc, 0xe2, 0xb1, 0xfc, 0xdd, 0x0d, 0xa3, 0x80, 0x07,
	0x54, 0x43, 0xe3, 0xcd, 0xed, 0x51, 0x30, 0x0a, 0x10, 0x19, 0x88, 0x91, 0x74, 0xf6, 0x7f, 0x5d,
	0x22, 0x5d, 0x60, 0x71, 0xe2, 0x71, 0xfa, 0x31, 0x59, 0x8e, 0x93, 0xc9, 0xc4, 0x8a, 0x4e, 0x7b,
	0xed, 0x9d, 0xf6, 0x9d, 0xd5, 0x0f, 0x36, 0x76, 0x65, 0x98, 0xa1, 0x44, 0xcd, 0xcd, 0x67, 0xa9,
	0xd1, 0xca, 0x52, 0x63, 0x46, 0x83, 0xd9, 0x40, 0x48, 0x8f, 0x13, 0x16, 0xb9, 0x2c, 0xea, 0x2d,
	0x55, 0xa4, 0x5f, 0x4a, 0xb4, 0x90, 0x2a, 0x1a, 0xcc, 0x06, 0xf4, 0x3e, 0x59, 0x71, 0xfd, 0x11,
	0x8b, 0x39, 0x8b, 0x7a, 0x1d, 0xd4, 0x6e, 0x2a, 0xed, 0x43, 0x05, 0x9b, 0x57, 0x94, 0x38, 0x27,
	0x42, 0x3e, 0xa2, 0x1f, 0x92, 0xae, 0x6d, 0xd9, 0x63, 0x16, 0xf7, 0x2e, 0xa1, 0x78, 0x5d, 0x89,
	0xf7, 0x10, 0x34, 0xd7, 0x95, 0x54, 0x43, 0x12, 0x28, 0x2e, 0xbd, 0x4b, 0x34, 0xd7, 0x77, 0xd8,
	0xd3, 0x9e, 0x86, 0xa2, 0xb5, 0x7c, 0x46, 0x87, 0x3d, 0x2d, 0x34, 0x48, 0x01, 0xf9, 0xe8, 0xff,
	0x72, 0x89, 0x74, 0xf7, 0x72, 0xb5, 0x3d, 0x4e, 0xfc, 0x27, 0x2a, 0x4d, 0x6b, 0xe5, 0x29, 0x4b,
	0x33, 0x0a, 0x0a, 0xc8, 0x47, 0x31, 0xe1, 0xd2, 0x79, 0x92, 0xf2, 0x84, 0xe2, 0xcd, 0x22, 0xfc,
	0x30, 0x2a, 0x2d, 0x55, 0xcd, 0x86, 0xd2, 0x28, 0x0e, 0xa8, 0x27, 0xdd, 0x23, 0xab, 0x48, 0x93,
	0xdf, 0x54, 0x25, 0xa5, 0x2a, 0xdd, 0x52, 0xd2, 0x32, 0x11, 0xca, 0x06, 0xdd, 0x27, 0x6b, 0x27,
	0x81, 0x97, 0x4c, 0x98, 0x8a, 0xa2, 0x35, 0x44, 0xd9, 0x56, 0x51, 0x2a, 0x4c, 0xa8, 0x58, 0x22,
	0x4e, 0x2c, 0xbe, 0xf2, 0x6c, 0x35, 0xdd, 0xf3, 0xe2, 0x94, 0x99, 0x50, 0xb1, 0xc4, 0x4b, 0x79,
	0xd6, 0x21, 0xf3, 0x54, 0x98, 0xe5, 0xf3, 0x5e, 0xaa, 0x44, 0x84, 0xb2, 0x41, 0xbf, 0x27, 0x5b,
	0xae, 0x1f, 0x73, 0xcb, 0xe7, 0x8f, 0x18, 0x8f, 0x5c, 0x5b, 0x05, 0x5b, 0x69, 0x08, 0x76, 0x53,
	0x05, 0x6b, 0x12, 0x40, 0x13, 0xd8, 0xff, 0xab, 0x4b, 0x96, 0xd5, 0x31, 0xa1, 0x5f, 0x93, 0xeb,
	0x87, 0xa7, 0x9c, 0xc5, 0x8f, 0xa3, 0xc0, 0x66, 0x71, 0xcc, 0x9c, 0xc7, 0x2c, 0x1a, 0x32, 0x3b,
	0xf0, 0x1d, 0xdc, 0x30, 0x1d, 0xf3, 0x66, 0x96, 0x1a, 0x8b, 0x28, 0xb0, 0xc8, 0x21, 0xc2, 0x7a,
	0xae, 0xdf, 0x18, 0x76, 0xa9, 0x08, 0xbb, 0x80, 0x02, 0x8b, 0x1c, 0xf4, 0x21, 0xd9, 0xe2, 0x01,
	0xb7, 0x3c, 0xb3, 0x32, 0x2d, 0xee, 0xb9, 0x8e, 0x79, 0x5d, 0x24, 0xa1, 0xc1, 0x0d, 0x4d, 0x60,
	0x1e, 0xea, 0xa0, 0x32, 0x15, 0xee, 0xc1, 0x72, 0xa8, 0xaa, 0x1b, 0x9a, 0x40, 0x7a, 0x87, 0xac,
	0xb0, 0xa7, 0xcc, 0xfe, 0xca, 0x9d, 0x30, 0xdc, 0x7d, 0x6d, 0x73, 0x4d, 0x14, 0x80, 0x19, 0x06,
	0xf9, 0x88, 0xbe, 0x4f, 0x2e, 0x1f, 0x27, 0x2c, 0x61, 0x48, 0xed, 0x22, 0x75, 0x3d, 0x4b, 0x8d,
	0x02, 0x84, 0x62, 0x48, 0x77, 0x09, 0x89, 0x93, 0x43, 0x59, 0x7a, 0x62, 0xdc, 0x47, 0x1d, 0x73,
	0x23, 0x4b, 0x8d, 0x12, 0x0a, 0xa5, 0x31, 0x3d, 0x20, 0xdb, 0xb8, 0xba, 0xcf, 0x7d, 0x2e, 0xb7,
	0x23, 0x4f, 0x22, 0x9f, 0x39, 0xb8, 0x69, 0x3a, 0x66, 0x2f, 0x4b, 0x8d, 0x46, 0x3f, 0x34, 0xa2,
	0xb4, 0x4f, 0xba, 0x71, 0xe8, 0xb9, 0x3c, 0xee, 0x5d, 0x46, 0x3d, 0x11, 0xe7, 0x57, 0x22, 0xa0,
	0x9e, 0xc8, 0x19, 0x5b, 0x91, 0x13, 0xf7, 0x48, 0x89, 0x83, 0x08, 0xa8, 0x67, 0xbe, 0xaa, 0xc7,
	0x41, 0xcc, 0xf7, 0x5d, 0x8f, 0xb3, 0x08, 0xb3, 0xd7, 0x5b, 0xad, 0xad, 0xaa, 0xe6, 0x87, 0x46,
	0x94, 0xfe, 0x48, 0x6e, 0x23, 0x3e, 0xe4, 0x51, 0x62, 0xf3, 0x24, 0x62, 0xce, 0x23, 0xc6, 0x2d,
	0xc7, 0xe2, 0x56, 0x6d, 0x4b, 0xac, 0x61, 0xf8, 0xf7, 0xb2, 0xd4, 0xb8, 0x98, 0x00, 0x2e, 0x46,
	0xeb, 0xff, 0xd9, 0x26, 0x1a, 0x56, 0x5e, 0x7a, 0x97, 0xac, 0xa2, 0x64, 0x4f, 0xd4, 0xcc, 0x58,
	0x9d, 0x96, 0x4d, 0x71, 0xaa, 0x4b, 0x30, 0x94, 0x0d, 0xfa, 0x19, 0xb9, 0x12, 0xe6, 0x2f, 0xa4,
	0x74, 0xf2, 0x38, 0x6c, 0x67, 0xa9, 0x31, 0xe7, 0x83, 0x39, 0x84, 0x7e, 0x42, 0x36, 0x64, 0x5e,
	0x1f, 0x24, 0x91, 0xc5, 0xdd, 0xc0, 0x57, 0x7b, 0x9f, 0x66, 0xa9, 0x51, 0xf3, 0x40, 0xcd, 0xee,
	0x7f, 0x4a, 0x96, 0x55, 0x87, 0x13, 0x15, 0x3e, 0xe6, 0x41, 0xc4, 0x6a, 0x4d, 0x61, 0x28, 0xb0,
	0xa2, 0xc2, 0x23, 0x05, 0xe4, 0xa3, 0xff, 0xfb, 0x12, 0x59, 0x79, 0x58, 0x34, 0xb2, 0x35, 0x7c,
	0x2f, 0x60, 0xa2, 0x04, 0xc9, 0x52, 0xa1, 0x99, 0x57, 0x44, 0x65, 0x2c, 0xe3, 0x50, 0xb1, 0xe8,
	0x3e, 0xa1, 0xa5, 0x6c, 0x3c, 0xb2, 0x38, 0x6a, 0x65, 0x02, 0xde, 0xc8, 0x52, 0xa3, 0xc1, 0x0b,
	0x0d, 0x58, 0x3e, 0xbb, 0x89, 0x76, 0xac, 0x52, 0x50, 0xcc, 0xae, 0x70, 0xa8, 0x58, 0x22, 0x75,
	0xc5, 0xe1, 0x1d, 0x32, 0x9f, 0xab, 0xb3, 0x8e, 0xa9, 0xab, 0x7a, 0xa0, 0x66, 0x17, 0xf9, 0xd2,
	0x2e, 0x9c, 0xaf, 0xff, 0x2e, 0x11, 0x0d, 0xfd, 0xf9, 0xc4, 0xea, 0xa3, 0xb2, 0x23, 0xb5, 0x57,
	0x8a, 0x89, 0x73, 0x0f, 0xd4, 0x6c, 0xfa, 0x05, 0xb9, 0x56, 0x42, 0x1e, 0x04, 0x3f, 0xf8, 0x5e,
	0x60, 0x39, 0x79, 0xd6, 0x6e, 0x64, 0xa9, 0xd1, 0x4c, 0x80, 0x66, 0x58, 0x7c, 0x03, 0xbb, 0x82,
	0x61, 0x29, 0xea, 0x14, 0xdf, 0x60, 0xde, 0x0b, 0x0d, 0x18, 0xb5, 0xc9, 0x0d, 0x51, 0x77, 0x4e,
	0x81, 0x1d, 0xb1, 0x88, 0xf9, 0x36, 0x73, 0x8a, 0xa3, 0xd3, 0x5b, 0xdf, 0x69, 0xdf, 0x59, 0x31,
	0x6f, 0x67, 0xa9, 0xf1, 0xd6, 0x42, 0xd2, 0xec, 0x7c, 0xc1, 0xe2, 0x38, 0xc5, 0xdd, 0xa5, 0x76,
	0x33, 0x10, 0xd8, 0x82, 0xbb, 0xcb, 0xec, 0xfd, 0x80, 0x1d, 0xc5, 0xfb, 0x8c, 0xdb, 0xe3, 0xbc,
	0x2a, 0x97, 0xdf, 0xaf, 0xe2, 0x85, 0x06, 0x8c, 0x7e, 0x4b, 0x7a, 0x76, 0x80, 0xdb, 0xdd, 0x0d,
	0xfc, 0xbd, 0xc0, 0xe7, 0x51, 0xe0, 0x1d, 0x58, 0x9c, 0xf9, 0xf6, 0x29, 0x16, 0xee, 0x8e, 0x79,
	0x2b, 0x4b, 0x8d, 0x85, 0x1c, 0x58, 0xe8, 0xa1, 0x0e, 0xb9, 0x15, 0xba, 0x21, 0x13, 0x2d, 0xee,
	0x9b, 0xc8, 0x0a, 0x43, 0x16, 0xc9, 0x13, 0xce, 0x1c, 0x59, 0x18, 0x65, 0xa1, 0xdf, 0xc9, 0x52,
	0xe3, 0x5c, 0x1e, 0x9c, 0xeb, 0xed, 0xff, 0xa1, 0x11, 0x0d, 0xf3, 0x24, 0xb6, 0xdf, 0x98, 0x59,
	0x8e, 0x4c, 0x9a, 0x28, 0x66, 0xe5, 0x7d, 0x5f, 0xf5, 0x40, 0xcd, 0xae, 0x68, 0xe5, 0xea, 0xb4,
	0x06, 0xad, 0x5c, 0x4f, 0xcd, 0xa6, 0x7b, 0xe4, 0xaa, 0xc3, 0xec, 0x60, 0x12, 0x46, 0x58, 0x39,
	0xe5, 0xd4, 0x32, 0x75, 0xd7, 0xb2, 0xd4, 0x98, 0x77, 0xc2, 0x3c, 0x54, 0x0f, 0x52, 0xce, 0xd0,
	0x5c, 0x10, 0xb9, 0x8c, 0x79, 0x88, 0xde, 0x27, 0x9b, 0xf5, 0x75, 0xc8, 0x9e, 0xb8, 0x95, 0xa5,
	0x46, 0xdd, 0x05, 0x75, 0x40, 0xc8, 0xf1, 0x2c, 0x3d, 0x48, 0x42, 0xcf, 0xb5, 0x2d, 0x21, 0xbf,
	0x5c, 0xc8, 0x6b, 0x2e, 0xa8, 0x03, 0x42, 0x1e, 0xd6, 0x7a, 0x1f, 0x29, 0xe4, 0x35, 0x17, 0xd4,
	0x01, 0x1a, 0x92, 0x9d, 0x3c, 0xb1, 0x0b, 0xba, 0x93, 0xea, 0xa5, 0xef, 0x64, 0xa9, 0xf1, 0x5a,
	0x2e, 0xbc, 0x96, 0x41, 0x4f, 0xc9, 0xdb, 0xe5, 0x1c, 0x2e, 0x9a, 0x54, 0x76, 0xd8, 0x77, 0xb3,
	0xd4, 0xb8, 0x08, 0x1d, 0x2e, 0x42, 0xea, 0xff, 0xdd, 0x21, 0x1a, 0xde, 0x6a, 0x45, 0x8d, 0x67,
	0xf2, 0x46, 0xb2, 0x1f, 0x24, 0x7e, 0xa5, 0xc3, 0x94, 0x71, 0xa8, 0x58, 0xa2, 0xc1, 0xb2, 0xd9,
	0x3d, 0xe6, 0x38, 0x11, 0xbd, 0x4a, 0x56, 0x4a, 0x4d, 0x36, 0xd8, 0xba, 0x0f, 0xe6, 0x10, 0xfa,
	0x11, 0x59, 0x57, 0x18, 0x16, 0x6f, 0x79, 0xb7, 0xd4, 0xcc, 0xab, 0x59, 0x6a, 0x54, 0x1d, 0x50,
	0x35, 0x85, 0x10, 0x2f, 0xc3, 0xc0, 0x6c, 0xe6, 0x9e, 0xe4, 0x37, 0x49, 0x14, 0x56, 0x1c, 0x50,
	0x35, 0xc5, 0x9d, 0x10, 0x01, 0x6c, 0x49, 0xf2, 0x78, 0xe1, 0x9d, 0x30, 0x07, 0xa1, 0x18, 0x8a,
	0xab, 0x66, 0x24, 0xd7, 0x2a, 0xcf, 0x92, 0x26, 0xaf, 0x9a, 0x33, 0x0c, 0xf2, 0x91, 0x48, 0xa0,
	0x53, 0x2e, 0xf1, 0xcb, 0x45, 0x93, 0x2c, 0xe3, 0x50, 0xb1, 0xc4, 0x79, 0xc3, 0x72, 0x7c, 0xc0,
	0xfc, 0x11, 0x1f, 0x0f, 0x59, 0x74, 0x92, 0x5f, 0x20, 0xf1, 0xbc, 0xcd, 0x39, 0x61, 0x1e, 0x32,
	0xd9, 0xf3, 0x97, 0x7a, 0xeb, 0xc5, 0x4b, 0xbd, 0xf5, 0xea, 0xa5, 0xde, 0xfe, 0x69, 0xaa, 0xb7,
	0x7f, 0x9b, 0xea, 0xed, 0x67, 0x53, 0xbd, 0xfd, 0x7c, 0xaa, 0xb7, 0xff, 0x99, 0xea, 0xed, 0x7f,
	0xa7, 0x7a, 0xeb, 0xd5, 0x54, 0x6f, 0xff, 0x7c, 0xa6, 0xb7, 0x9e, 0x9f, 0xe9, 0xad, 0x17, 0x67,
	0x7a, 0xeb, 0xbb, 0xc1, 0xc8, 0xe5, 0xe3, 0xe4, 0x70, 0xd7, 0x0e, 0x26, 0x83, 0x51, 0x64, 0x1d,
	0x59, 0xbe, 0x35, 0xf0, 0x82, 0x27, 0xee, 0xe0, 0xe4, 0xde, 0xa0, 0xe9, 0x6f, 0x83, 0xc3, 0x2e,
	0xfe, 0x29, 0x70, 0xef, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x64, 0x90, 0x88, 0xaf, 0x55, 0x10,
	0x00, 0x00,
}

func (this *Result) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Result)
	if !ok {
		that2, ok := that.(Result)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Summary.Equal(&that1.Summary) {
		return false
	}
	if !this.Querier.Equal(&that1.Querier) {
		return false
	}
	if !this.Ingester.Equal(&that1.Ingester) {
		return false
	}
	if !this.Caches.Equal(&that1.Caches) {
		return false
	}
	if !this.Index.Equal(&that1.Index) {
		return false
	}
	return true
}
func (this *Caches) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Caches)
	if !ok {
		that2, ok := that.(Caches)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Chunk.Equal(&that1.Chunk) {
		return false
	}
	if !this.Index.Equal(&that1.Index) {
		return false
	}
	if !this.Result.Equal(&that1.Result) {
		return false
	}
	if !this.StatsResult.Equal(&that1.StatsResult) {
		return false
	}
	if !this.VolumeResult.Equal(&that1.VolumeResult) {
		return false
	}
	if !this.SeriesResult.Equal(&that1.SeriesResult) {
		return false
	}
	if !this.LabelResult.Equal(&that1.LabelResult) {
		return false
	}
	if !this.InstantMetricResult.Equal(&that1.InstantMetricResult) {
		return false
	}
	return true
}
func (this *Summary) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Summary)
	if !ok {
		that2, ok := that.(Summary)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BytesProcessedPerSecond != that1.BytesProcessedPerSecond {
		return false
	}
	if this.LinesProcessedPerSecond != that1.LinesProcessedPerSecond {
		return false
	}
	if this.TotalBytesProcessed != that1.TotalBytesProcessed {
		return false
	}
	if this.TotalLinesProcessed != that1.TotalLinesProcessed {
		return false
	}
	if this.ExecTime != that1.ExecTime {
		return false
	}
	if this.QueueTime != that1.QueueTime {
		return false
	}
	if this.Subqueries != that1.Subqueries {
		return false
	}
	if this.TotalEntriesReturned != that1.TotalEntriesReturned {
		return false
	}
	if this.Splits != that1.Splits {
		return false
	}
	if this.Shards != that1.Shards {
		return false
	}
	if this.TotalPostFilterLines != that1.TotalPostFilterLines {
		return false
	}
	if this.TotalStructuredMetadataBytesProcessed != that1.TotalStructuredMetadataBytesProcessed {
		return false
	}
	return true
}
func (this *Index) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Index)
	if !ok {
		that2, ok := that.(Index)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TotalChunks != that1.TotalChunks {
		return false
	}
	if this.PostFilterChunks != that1.PostFilterChunks {
		return false
	}
	if this.ShardsDuration != that1.ShardsDuration {
		return false
	}
	return true
}
func (this *Querier) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Querier)
	if !ok {
		that2, ok := that.(Querier)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Store.Equal(&that1.Store) {
		return false
	}
	return true
}
func (this *Ingester) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Ingester)
	if !ok {
		that2, ok := that.(Ingester)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TotalReached != that1.TotalReached {
		return false
	}
	if this.TotalChunksMatched != that1.TotalChunksMatched {
		return false
	}
	if this.TotalBatches != that1.TotalBatches {
		return false
	}
	if this.TotalLinesSent != that1.TotalLinesSent {
		return false
	}
	if !this.Store.Equal(&that1.Store) {
		return false
	}
	return true
}
func (this *Store) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Store)
	if !ok {
		that2, ok := that.(Store)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TotalChunksRef != that1.TotalChunksRef {
		return false
	}
	if this.TotalChunksDownloaded != that1.TotalChunksDownloaded {
		return false
	}
	if this.ChunksDownloadTime != that1.ChunksDownloadTime {
		return false
	}
	if this.QueryReferencedStructured != that1.QueryReferencedStructured {
		return false
	}
	if !this.Chunk.Equal(&that1.Chunk) {
		return false
	}
	if this.ChunkRefsFetchTime != that1.ChunkRefsFetchTime {
		return false
	}
	if this.CongestionControlLatency != that1.CongestionControlLatency {
		return false
	}
	if this.PipelineWrapperFilteredLines != that1.PipelineWrapperFilteredLines {
		return false
	}
	return true
}
func (this *Chunk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Chunk)
	if !ok {
		that2, ok := that.(Chunk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HeadChunkBytes != that1.HeadChunkBytes {
		return false
	}
	if this.HeadChunkLines != that1.HeadChunkLines {
		return false
	}
	if this.DecompressedBytes != that1.DecompressedBytes {
		return false
	}
	if this.DecompressedLines != that1.DecompressedLines {
		return false
	}
	if this.CompressedBytes != that1.CompressedBytes {
		return false
	}
	if this.TotalDuplicates != that1.TotalDuplicates {
		return false
	}
	if this.PostFilterLines != that1.PostFilterLines {
		return false
	}
	if this.HeadChunkStructuredMetadataBytes != that1.HeadChunkStructuredMetadataBytes {
		return false
	}
	if this.DecompressedStructuredMetadataBytes != that1.DecompressedStructuredMetadataBytes {
		return false
	}
	return true
}
func (this *Cache) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Cache)
	if !ok {
		that2, ok := that.(Cache)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EntriesFound != that1.EntriesFound {
		return false
	}
	if this.EntriesRequested != that1.EntriesRequested {
		return false
	}
	if this.EntriesStored != that1.EntriesStored {
		return false
	}
	if this.BytesReceived != that1.BytesReceived {
		return false
	}
	if this.BytesSent != that1.BytesSent {
		return false
	}
	if this.Requests != that1.Requests {
		return false
	}
	if this.DownloadTime != that1.DownloadTime {
		return false
	}
	if this.QueryLengthServed != that1.QueryLengthServed {
		return false
	}
	return true
}
func (this *Result) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&stats.Result{")
	s = append(s, "Summary: "+strings.Replace(this.Summary.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Querier: "+strings.Replace(this.Querier.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Ingester: "+strings.Replace(this.Ingester.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Caches: "+strings.Replace(this.Caches.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Index: "+strings.Replace(this.Index.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Caches) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&stats.Caches{")
	s = append(s, "Chunk: "+strings.Replace(this.Chunk.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Index: "+strings.Replace(this.Index.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Result: "+strings.Replace(this.Result.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "StatsResult: "+strings.Replace(this.StatsResult.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "VolumeResult: "+strings.Replace(this.VolumeResult.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "SeriesResult: "+strings.Replace(this.SeriesResult.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "LabelResult: "+strings.Replace(this.LabelResult.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "InstantMetricResult: "+strings.Replace(this.InstantMetricResult.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Summary) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&stats.Summary{")
	s = append(s, "BytesProcessedPerSecond: "+fmt.Sprintf("%#v", this.BytesProcessedPerSecond)+",\n")
	s = append(s, "LinesProcessedPerSecond: "+fmt.Sprintf("%#v", this.LinesProcessedPerSecond)+",\n")
	s = append(s, "TotalBytesProcessed: "+fmt.Sprintf("%#v", this.TotalBytesProcessed)+",\n")
	s = append(s, "TotalLinesProcessed: "+fmt.Sprintf("%#v", this.TotalLinesProcessed)+",\n")
	s = append(s, "ExecTime: "+fmt.Sprintf("%#v", this.ExecTime)+",\n")
	s = append(s, "QueueTime: "+fmt.Sprintf("%#v", this.QueueTime)+",\n")
	s = append(s, "Subqueries: "+fmt.Sprintf("%#v", this.Subqueries)+",\n")
	s = append(s, "TotalEntriesReturned: "+fmt.Sprintf("%#v", this.TotalEntriesReturned)+",\n")
	s = append(s, "Splits: "+fmt.Sprintf("%#v", this.Splits)+",\n")
	s = append(s, "Shards: "+fmt.Sprintf("%#v", this.Shards)+",\n")
	s = append(s, "TotalPostFilterLines: "+fmt.Sprintf("%#v", this.TotalPostFilterLines)+",\n")
	s = append(s, "TotalStructuredMetadataBytesProcessed: "+fmt.Sprintf("%#v", this.TotalStructuredMetadataBytesProcessed)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Index) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&stats.Index{")
	s = append(s, "TotalChunks: "+fmt.Sprintf("%#v", this.TotalChunks)+",\n")
	s = append(s, "PostFilterChunks: "+fmt.Sprintf("%#v", this.PostFilterChunks)+",\n")
	s = append(s, "ShardsDuration: "+fmt.Sprintf("%#v", this.ShardsDuration)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Querier) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&stats.Querier{")
	s = append(s, "Store: "+strings.Replace(this.Store.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Ingester) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&stats.Ingester{")
	s = append(s, "TotalReached: "+fmt.Sprintf("%#v", this.TotalReached)+",\n")
	s = append(s, "TotalChunksMatched: "+fmt.Sprintf("%#v", this.TotalChunksMatched)+",\n")
	s = append(s, "TotalBatches: "+fmt.Sprintf("%#v", this.TotalBatches)+",\n")
	s = append(s, "TotalLinesSent: "+fmt.Sprintf("%#v", this.TotalLinesSent)+",\n")
	s = append(s, "Store: "+strings.Replace(this.Store.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Store) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&stats.Store{")
	s = append(s, "TotalChunksRef: "+fmt.Sprintf("%#v", this.TotalChunksRef)+",\n")
	s = append(s, "TotalChunksDownloaded: "+fmt.Sprintf("%#v", this.TotalChunksDownloaded)+",\n")
	s = append(s, "ChunksDownloadTime: "+fmt.Sprintf("%#v", this.ChunksDownloadTime)+",\n")
	s = append(s, "QueryReferencedStructured: "+fmt.Sprintf("%#v", this.QueryReferencedStructured)+",\n")
	s = append(s, "Chunk: "+strings.Replace(this.Chunk.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "ChunkRefsFetchTime: "+fmt.Sprintf("%#v", this.ChunkRefsFetchTime)+",\n")
	s = append(s, "CongestionControlLatency: "+fmt.Sprintf("%#v", this.CongestionControlLatency)+",\n")
	s = append(s, "PipelineWrapperFilteredLines: "+fmt.Sprintf("%#v", this.PipelineWrapperFilteredLines)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Chunk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&stats.Chunk{")
	s = append(s, "HeadChunkBytes: "+fmt.Sprintf("%#v", this.HeadChunkBytes)+",\n")
	s = append(s, "HeadChunkLines: "+fmt.Sprintf("%#v", this.HeadChunkLines)+",\n")
	s = append(s, "DecompressedBytes: "+fmt.Sprintf("%#v", this.DecompressedBytes)+",\n")
	s = append(s, "DecompressedLines: "+fmt.Sprintf("%#v", this.DecompressedLines)+",\n")
	s = append(s, "CompressedBytes: "+fmt.Sprintf("%#v", this.CompressedBytes)+",\n")
	s = append(s, "TotalDuplicates: "+fmt.Sprintf("%#v", this.TotalDuplicates)+",\n")
	s = append(s, "PostFilterLines: "+fmt.Sprintf("%#v", this.PostFilterLines)+",\n")
	s = append(s, "HeadChunkStructuredMetadataBytes: "+fmt.Sprintf("%#v", this.HeadChunkStructuredMetadataBytes)+",\n")
	s = append(s, "DecompressedStructuredMetadataBytes: "+fmt.Sprintf("%#v", this.DecompressedStructuredMetadataBytes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Cache) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&stats.Cache{")
	s = append(s, "EntriesFound: "+fmt.Sprintf("%#v", this.EntriesFound)+",\n")
	s = append(s, "EntriesRequested: "+fmt.Sprintf("%#v", this.EntriesRequested)+",\n")
	s = append(s, "EntriesStored: "+fmt.Sprintf("%#v", this.EntriesStored)+",\n")
	s = append(s, "BytesReceived: "+fmt.Sprintf("%#v", this.BytesReceived)+",\n")
	s = append(s, "BytesSent: "+fmt.Sprintf("%#v", this.BytesSent)+",\n")
	s = append(s, "Requests: "+fmt.Sprintf("%#v", this.Requests)+",\n")
	s = append(s, "DownloadTime: "+fmt.Sprintf("%#v", this.DownloadTime)+",\n")
	s = append(s, "QueryLengthServed: "+fmt.Sprintf("%#v", this.QueryLengthServed)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringStats(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Result) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Result) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Result) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Index.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Caches.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Ingester.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Querier.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Summary.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Caches) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Caches) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Caches) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.InstantMetricResult.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size, err := m.LabelResult.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.SeriesResult.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.VolumeResult.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.StatsResult.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Index.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Chunk.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Summary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Summary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Summary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalStructuredMetadataBytesProcessed != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.TotalStructuredMetadataBytesProcessed))
		i--
		dAtA[i] = 0x60
	}
	if m.TotalPostFilterLines != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.TotalPostFilterLines))
		i--
		dAtA[i] = 0x58
	}
	if m.Shards != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.Shards))
		i--
		dAtA[i] = 0x50
	}
	if m.Splits != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.Splits))
		i--
		dAtA[i] = 0x48
	}
	if m.TotalEntriesReturned != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.TotalEntriesReturned))
		i--
		dAtA[i] = 0x40
	}
	if m.Subqueries != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.Subqueries))
		i--
		dAtA[i] = 0x38
	}
	if m.QueueTime != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.QueueTime))))
		i--
		dAtA[i] = 0x31
	}
	if m.ExecTime != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ExecTime))))
		i--
		dAtA[i] = 0x29
	}
	if m.TotalLinesProcessed != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.TotalLinesProcessed))
		i--
		dAtA[i] = 0x20
	}
	if m.TotalBytesProcessed != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.TotalBytesProcessed))
		i--
		dAtA[i] = 0x18
	}
	if m.LinesProcessedPerSecond != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.LinesProcessedPerSecond))
		i--
		dAtA[i] = 0x10
	}
	if m.BytesProcessedPerSecond != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.BytesProcessedPerSecond))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Index) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Index) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Index) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ShardsDuration != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.ShardsDuration))
		i--
		dAtA[i] = 0x18
	}
	if m.PostFilterChunks != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.PostFilterChunks))
		i--
		dAtA[i] = 0x10
	}
	if m.TotalChunks != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.TotalChunks))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Querier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Querier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Querier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Store.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Ingester) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ingester) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ingester) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Store.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.TotalLinesSent != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.TotalLinesSent))
		i--
		dAtA[i] = 0x20
	}
	if m.TotalBatches != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.TotalBatches))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalChunksMatched != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.TotalChunksMatched))
		i--
		dAtA[i] = 0x10
	}
	if m.TotalReached != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.TotalReached))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Store) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Store) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Store) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QueryReferencedStructured {
		i--
		if m.QueryReferencedStructured {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.PipelineWrapperFilteredLines != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.PipelineWrapperFilteredLines))
		i--
		dAtA[i] = 0x38
	}
	if m.CongestionControlLatency != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.CongestionControlLatency))
		i--
		dAtA[i] = 0x30
	}
	if m.ChunkRefsFetchTime != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.ChunkRefsFetchTime))
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.Chunk.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.ChunksDownloadTime != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.ChunksDownloadTime))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalChunksDownloaded != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.TotalChunksDownloaded))
		i--
		dAtA[i] = 0x10
	}
	if m.TotalChunksRef != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.TotalChunksRef))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Chunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Chunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Chunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DecompressedStructuredMetadataBytes != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.DecompressedStructuredMetadataBytes))
		i--
		dAtA[i] = 0x60
	}
	if m.HeadChunkStructuredMetadataBytes != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.HeadChunkStructuredMetadataBytes))
		i--
		dAtA[i] = 0x58
	}
	if m.PostFilterLines != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.PostFilterLines))
		i--
		dAtA[i] = 0x50
	}
	if m.TotalDuplicates != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.TotalDuplicates))
		i--
		dAtA[i] = 0x48
	}
	if m.CompressedBytes != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.CompressedBytes))
		i--
		dAtA[i] = 0x40
	}
	if m.DecompressedLines != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.DecompressedLines))
		i--
		dAtA[i] = 0x38
	}
	if m.DecompressedBytes != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.DecompressedBytes))
		i--
		dAtA[i] = 0x30
	}
	if m.HeadChunkLines != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.HeadChunkLines))
		i--
		dAtA[i] = 0x28
	}
	if m.HeadChunkBytes != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.HeadChunkBytes))
		i--
		dAtA[i] = 0x20
	}
	return len(dAtA) - i, nil
}

func (m *Cache) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cache) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Cache) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QueryLengthServed != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.QueryLengthServed))
		i--
		dAtA[i] = 0x40
	}
	if m.DownloadTime != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.DownloadTime))
		i--
		dAtA[i] = 0x38
	}
	if m.Requests != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.Requests))
		i--
		dAtA[i] = 0x30
	}
	if m.BytesSent != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.BytesSent))
		i--
		dAtA[i] = 0x28
	}
	if m.BytesReceived != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.BytesReceived))
		i--
		dAtA[i] = 0x20
	}
	if m.EntriesStored != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.EntriesStored))
		i--
		dAtA[i] = 0x18
	}
	if m.EntriesRequested != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.EntriesRequested))
		i--
		dAtA[i] = 0x10
	}
	if m.EntriesFound != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.EntriesFound))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintStats(dAtA []byte, offset int, v uint64) int {
	offset -= sovStats(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Result) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Summary.Size()
	n += 1 + l + sovStats(uint64(l))
	l = m.Querier.Size()
	n += 1 + l + sovStats(uint64(l))
	l = m.Ingester.Size()
	n += 1 + l + sovStats(uint64(l))
	l = m.Caches.Size()
	n += 1 + l + sovStats(uint64(l))
	l = m.Index.Size()
	n += 1 + l + sovStats(uint64(l))
	return n
}

func (m *Caches) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Chunk.Size()
	n += 1 + l + sovStats(uint64(l))
	l = m.Index.Size()
	n += 1 + l + sovStats(uint64(l))
	l = m.Result.Size()
	n += 1 + l + sovStats(uint64(l))
	l = m.StatsResult.Size()
	n += 1 + l + sovStats(uint64(l))
	l = m.VolumeResult.Size()
	n += 1 + l + sovStats(uint64(l))
	l = m.SeriesResult.Size()
	n += 1 + l + sovStats(uint64(l))
	l = m.LabelResult.Size()
	n += 1 + l + sovStats(uint64(l))
	l = m.InstantMetricResult.Size()
	n += 1 + l + sovStats(uint64(l))
	return n
}

func (m *Summary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BytesProcessedPerSecond != 0 {
		n += 1 + sovStats(uint64(m.BytesProcessedPerSecond))
	}
	if m.LinesProcessedPerSecond != 0 {
		n += 1 + sovStats(uint64(m.LinesProcessedPerSecond))
	}
	if m.TotalBytesProcessed != 0 {
		n += 1 + sovStats(uint64(m.TotalBytesProcessed))
	}
	if m.TotalLinesProcessed != 0 {
		n += 1 + sovStats(uint64(m.TotalLinesProcessed))
	}
	if m.ExecTime != 0 {
		n += 9
	}
	if m.QueueTime != 0 {
		n += 9
	}
	if m.Subqueries != 0 {
		n += 1 + sovStats(uint64(m.Subqueries))
	}
	if m.TotalEntriesReturned != 0 {
		n += 1 + sovStats(uint64(m.TotalEntriesReturned))
	}
	if m.Splits != 0 {
		n += 1 + sovStats(uint64(m.Splits))
	}
	if m.Shards != 0 {
		n += 1 + sovStats(uint64(m.Shards))
	}
	if m.TotalPostFilterLines != 0 {
		n += 1 + sovStats(uint64(m.TotalPostFilterLines))
	}
	if m.TotalStructuredMetadataBytesProcessed != 0 {
		n += 1 + sovStats(uint64(m.TotalStructuredMetadataBytesProcessed))
	}
	return n
}

func (m *Index) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalChunks != 0 {
		n += 1 + sovStats(uint64(m.TotalChunks))
	}
	if m.PostFilterChunks != 0 {
		n += 1 + sovStats(uint64(m.PostFilterChunks))
	}
	if m.ShardsDuration != 0 {
		n += 1 + sovStats(uint64(m.ShardsDuration))
	}
	return n
}

func (m *Querier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Store.Size()
	n += 1 + l + sovStats(uint64(l))
	return n
}

func (m *Ingester) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalReached != 0 {
		n += 1 + sovStats(uint64(m.TotalReached))
	}
	if m.TotalChunksMatched != 0 {
		n += 1 + sovStats(uint64(m.TotalChunksMatched))
	}
	if m.TotalBatches != 0 {
		n += 1 + sovStats(uint64(m.TotalBatches))
	}
	if m.TotalLinesSent != 0 {
		n += 1 + sovStats(uint64(m.TotalLinesSent))
	}
	l = m.Store.Size()
	n += 1 + l + sovStats(uint64(l))
	return n
}

func (m *Store) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalChunksRef != 0 {
		n += 1 + sovStats(uint64(m.TotalChunksRef))
	}
	if m.TotalChunksDownloaded != 0 {
		n += 1 + sovStats(uint64(m.TotalChunksDownloaded))
	}
	if m.ChunksDownloadTime != 0 {
		n += 1 + sovStats(uint64(m.ChunksDownloadTime))
	}
	l = m.Chunk.Size()
	n += 1 + l + sovStats(uint64(l))
	if m.ChunkRefsFetchTime != 0 {
		n += 1 + sovStats(uint64(m.ChunkRefsFetchTime))
	}
	if m.CongestionControlLatency != 0 {
		n += 1 + sovStats(uint64(m.CongestionControlLatency))
	}
	if m.PipelineWrapperFilteredLines != 0 {
		n += 1 + sovStats(uint64(m.PipelineWrapperFilteredLines))
	}
	if m.QueryReferencedStructured {
		n += 2
	}
	return n
}

func (m *Chunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HeadChunkBytes != 0 {
		n += 1 + sovStats(uint64(m.HeadChunkBytes))
	}
	if m.HeadChunkLines != 0 {
		n += 1 + sovStats(uint64(m.HeadChunkLines))
	}
	if m.DecompressedBytes != 0 {
		n += 1 + sovStats(uint64(m.DecompressedBytes))
	}
	if m.DecompressedLines != 0 {
		n += 1 + sovStats(uint64(m.DecompressedLines))
	}
	if m.CompressedBytes != 0 {
		n += 1 + sovStats(uint64(m.CompressedBytes))
	}
	if m.TotalDuplicates != 0 {
		n += 1 + sovStats(uint64(m.TotalDuplicates))
	}
	if m.PostFilterLines != 0 {
		n += 1 + sovStats(uint64(m.PostFilterLines))
	}
	if m.HeadChunkStructuredMetadataBytes != 0 {
		n += 1 + sovStats(uint64(m.HeadChunkStructuredMetadataBytes))
	}
	if m.DecompressedStructuredMetadataBytes != 0 {
		n += 1 + sovStats(uint64(m.DecompressedStructuredMetadataBytes))
	}
	return n
}

func (m *Cache) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EntriesFound != 0 {
		n += 1 + sovStats(uint64(m.EntriesFound))
	}
	if m.EntriesRequested != 0 {
		n += 1 + sovStats(uint64(m.EntriesRequested))
	}
	if m.EntriesStored != 0 {
		n += 1 + sovStats(uint64(m.EntriesStored))
	}
	if m.BytesReceived != 0 {
		n += 1 + sovStats(uint64(m.BytesReceived))
	}
	if m.BytesSent != 0 {
		n += 1 + sovStats(uint64(m.BytesSent))
	}
	if m.Requests != 0 {
		n += 1 + sovStats(uint64(m.Requests))
	}
	if m.DownloadTime != 0 {
		n += 1 + sovStats(uint64(m.DownloadTime))
	}
	if m.QueryLengthServed != 0 {
		n += 1 + sovStats(uint64(m.QueryLengthServed))
	}
	return n
}

func sovStats(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStats(x uint64) (n int) {
	return sovStats(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Result) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Result{`,
		`Summary:` + strings.Replace(strings.Replace(this.Summary.String(), "Summary", "Summary", 1), `&`, ``, 1) + `,`,
		`Querier:` + strings.Replace(strings.Replace(this.Querier.String(), "Querier", "Querier", 1), `&`, ``, 1) + `,`,
		`Ingester:` + strings.Replace(strings.Replace(this.Ingester.String(), "Ingester", "Ingester", 1), `&`, ``, 1) + `,`,
		`Caches:` + strings.Replace(strings.Replace(this.Caches.String(), "Caches", "Caches", 1), `&`, ``, 1) + `,`,
		`Index:` + strings.Replace(strings.Replace(this.Index.String(), "Index", "Index", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Caches) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Caches{`,
		`Chunk:` + strings.Replace(strings.Replace(this.Chunk.String(), "Cache", "Cache", 1), `&`, ``, 1) + `,`,
		`Index:` + strings.Replace(strings.Replace(this.Index.String(), "Cache", "Cache", 1), `&`, ``, 1) + `,`,
		`Result:` + strings.Replace(strings.Replace(this.Result.String(), "Cache", "Cache", 1), `&`, ``, 1) + `,`,
		`StatsResult:` + strings.Replace(strings.Replace(this.StatsResult.String(), "Cache", "Cache", 1), `&`, ``, 1) + `,`,
		`VolumeResult:` + strings.Replace(strings.Replace(this.VolumeResult.String(), "Cache", "Cache", 1), `&`, ``, 1) + `,`,
		`SeriesResult:` + strings.Replace(strings.Replace(this.SeriesResult.String(), "Cache", "Cache", 1), `&`, ``, 1) + `,`,
		`LabelResult:` + strings.Replace(strings.Replace(this.LabelResult.String(), "Cache", "Cache", 1), `&`, ``, 1) + `,`,
		`InstantMetricResult:` + strings.Replace(strings.Replace(this.InstantMetricResult.String(), "Cache", "Cache", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Summary) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Summary{`,
		`BytesProcessedPerSecond:` + fmt.Sprintf("%v", this.BytesProcessedPerSecond) + `,`,
		`LinesProcessedPerSecond:` + fmt.Sprintf("%v", this.LinesProcessedPerSecond) + `,`,
		`TotalBytesProcessed:` + fmt.Sprintf("%v", this.TotalBytesProcessed) + `,`,
		`TotalLinesProcessed:` + fmt.Sprintf("%v", this.TotalLinesProcessed) + `,`,
		`ExecTime:` + fmt.Sprintf("%v", this.ExecTime) + `,`,
		`QueueTime:` + fmt.Sprintf("%v", this.QueueTime) + `,`,
		`Subqueries:` + fmt.Sprintf("%v", this.Subqueries) + `,`,
		`TotalEntriesReturned:` + fmt.Sprintf("%v", this.TotalEntriesReturned) + `,`,
		`Splits:` + fmt.Sprintf("%v", this.Splits) + `,`,
		`Shards:` + fmt.Sprintf("%v", this.Shards) + `,`,
		`TotalPostFilterLines:` + fmt.Sprintf("%v", this.TotalPostFilterLines) + `,`,
		`TotalStructuredMetadataBytesProcessed:` + fmt.Sprintf("%v", this.TotalStructuredMetadataBytesProcessed) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Index) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Index{`,
		`TotalChunks:` + fmt.Sprintf("%v", this.TotalChunks) + `,`,
		`PostFilterChunks:` + fmt.Sprintf("%v", this.PostFilterChunks) + `,`,
		`ShardsDuration:` + fmt.Sprintf("%v", this.ShardsDuration) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Querier) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Querier{`,
		`Store:` + strings.Replace(strings.Replace(this.Store.String(), "Store", "Store", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Ingester) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Ingester{`,
		`TotalReached:` + fmt.Sprintf("%v", this.TotalReached) + `,`,
		`TotalChunksMatched:` + fmt.Sprintf("%v", this.TotalChunksMatched) + `,`,
		`TotalBatches:` + fmt.Sprintf("%v", this.TotalBatches) + `,`,
		`TotalLinesSent:` + fmt.Sprintf("%v", this.TotalLinesSent) + `,`,
		`Store:` + strings.Replace(strings.Replace(this.Store.String(), "Store", "Store", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Store) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Store{`,
		`TotalChunksRef:` + fmt.Sprintf("%v", this.TotalChunksRef) + `,`,
		`TotalChunksDownloaded:` + fmt.Sprintf("%v", this.TotalChunksDownloaded) + `,`,
		`ChunksDownloadTime:` + fmt.Sprintf("%v", this.ChunksDownloadTime) + `,`,
		`Chunk:` + strings.Replace(strings.Replace(this.Chunk.String(), "Chunk", "Chunk", 1), `&`, ``, 1) + `,`,
		`ChunkRefsFetchTime:` + fmt.Sprintf("%v", this.ChunkRefsFetchTime) + `,`,
		`CongestionControlLatency:` + fmt.Sprintf("%v", this.CongestionControlLatency) + `,`,
		`PipelineWrapperFilteredLines:` + fmt.Sprintf("%v", this.PipelineWrapperFilteredLines) + `,`,
		`QueryReferencedStructured:` + fmt.Sprintf("%v", this.QueryReferencedStructured) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Chunk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Chunk{`,
		`HeadChunkBytes:` + fmt.Sprintf("%v", this.HeadChunkBytes) + `,`,
		`HeadChunkLines:` + fmt.Sprintf("%v", this.HeadChunkLines) + `,`,
		`DecompressedBytes:` + fmt.Sprintf("%v", this.DecompressedBytes) + `,`,
		`DecompressedLines:` + fmt.Sprintf("%v", this.DecompressedLines) + `,`,
		`CompressedBytes:` + fmt.Sprintf("%v", this.CompressedBytes) + `,`,
		`TotalDuplicates:` + fmt.Sprintf("%v", this.TotalDuplicates) + `,`,
		`PostFilterLines:` + fmt.Sprintf("%v", this.PostFilterLines) + `,`,
		`HeadChunkStructuredMetadataBytes:` + fmt.Sprintf("%v", this.HeadChunkStructuredMetadataBytes) + `,`,
		`DecompressedStructuredMetadataBytes:` + fmt.Sprintf("%v", this.DecompressedStructuredMetadataBytes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Cache) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Cache{`,
		`EntriesFound:` + fmt.Sprintf("%v", this.EntriesFound) + `,`,
		`EntriesRequested:` + fmt.Sprintf("%v", this.EntriesRequested) + `,`,
		`EntriesStored:` + fmt.Sprintf("%v", this.EntriesStored) + `,`,
		`BytesReceived:` + fmt.Sprintf("%v", this.BytesReceived) + `,`,
		`BytesSent:` + fmt.Sprintf("%v", this.BytesSent) + `,`,
		`Requests:` + fmt.Sprintf("%v", this.Requests) + `,`,
		`DownloadTime:` + fmt.Sprintf("%v", this.DownloadTime) + `,`,
		`QueryLengthServed:` + fmt.Sprintf("%v", this.QueryLengthServed) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringStats(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Result) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Result: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Result: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Summary.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Querier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Querier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ingester", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Ingester.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Caches.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Index.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Caches) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Caches: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Caches: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Chunk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Index.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatsResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StatsResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VolumeResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeriesResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SeriesResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LabelResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstantMetricResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InstantMetricResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Summary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Summary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Summary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesProcessedPerSecond", wireType)
			}
			m.BytesProcessedPerSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesProcessedPerSecond |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinesProcessedPerSecond", wireType)
			}
			m.LinesProcessedPerSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LinesProcessedPerSecond |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBytesProcessed", wireType)
			}
			m.TotalBytesProcessed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalBytesProcessed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLinesProcessed", wireType)
			}
			m.TotalLinesProcessed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalLinesProcessed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecTime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ExecTime = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueTime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.QueueTime = float64(math.Float64frombits(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subqueries", wireType)
			}
			m.Subqueries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Subqueries |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalEntriesReturned", wireType)
			}
			m.TotalEntriesReturned = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalEntriesReturned |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Splits", wireType)
			}
			m.Splits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Splits |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shards", wireType)
			}
			m.Shards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shards |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPostFilterLines", wireType)
			}
			m.TotalPostFilterLines = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPostFilterLines |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStructuredMetadataBytesProcessed", wireType)
			}
			m.TotalStructuredMetadataBytesProcessed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalStructuredMetadataBytesProcessed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Index) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Index: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Index: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalChunks", wireType)
			}
			m.TotalChunks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalChunks |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostFilterChunks", wireType)
			}
			m.PostFilterChunks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PostFilterChunks |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardsDuration", wireType)
			}
			m.ShardsDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardsDuration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Querier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Querier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Querier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Store.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ingester) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ingester: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ingester: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalReached", wireType)
			}
			m.TotalReached = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalReached |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalChunksMatched", wireType)
			}
			m.TotalChunksMatched = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalChunksMatched |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBatches", wireType)
			}
			m.TotalBatches = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalBatches |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLinesSent", wireType)
			}
			m.TotalLinesSent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalLinesSent |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Store.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Store) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Store: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Store: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalChunksRef", wireType)
			}
			m.TotalChunksRef = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalChunksRef |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalChunksDownloaded", wireType)
			}
			m.TotalChunksDownloaded = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalChunksDownloaded |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunksDownloadTime", wireType)
			}
			m.ChunksDownloadTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChunksDownloadTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Chunk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkRefsFetchTime", wireType)
			}
			m.ChunkRefsFetchTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChunkRefsFetchTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CongestionControlLatency", wireType)
			}
			m.CongestionControlLatency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CongestionControlLatency |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PipelineWrapperFilteredLines", wireType)
			}
			m.PipelineWrapperFilteredLines = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PipelineWrapperFilteredLines |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryReferencedStructured", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.QueryReferencedStructured = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Chunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Chunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Chunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadChunkBytes", wireType)
			}
			m.HeadChunkBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeadChunkBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadChunkLines", wireType)
			}
			m.HeadChunkLines = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeadChunkLines |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecompressedBytes", wireType)
			}
			m.DecompressedBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecompressedBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecompressedLines", wireType)
			}
			m.DecompressedLines = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecompressedLines |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompressedBytes", wireType)
			}
			m.CompressedBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompressedBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDuplicates", wireType)
			}
			m.TotalDuplicates = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDuplicates |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostFilterLines", wireType)
			}
			m.PostFilterLines = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PostFilterLines |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadChunkStructuredMetadataBytes", wireType)
			}
			m.HeadChunkStructuredMetadataBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeadChunkStructuredMetadataBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecompressedStructuredMetadataBytes", wireType)
			}
			m.DecompressedStructuredMetadataBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecompressedStructuredMetadataBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cache) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cache: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cache: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntriesFound", wireType)
			}
			m.EntriesFound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntriesFound |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntriesRequested", wireType)
			}
			m.EntriesRequested = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntriesRequested |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntriesStored", wireType)
			}
			m.EntriesStored = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntriesStored |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesReceived", wireType)
			}
			m.BytesReceived = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesReceived |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesSent", wireType)
			}
			m.BytesSent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesSent |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			m.Requests = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Requests |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownloadTime", wireType)
			}
			m.DownloadTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DownloadTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryLengthServed", wireType)
			}
			m.QueryLengthServed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryLengthServed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStats(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStats
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStats
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthStats
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowStats
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipStats(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthStats
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthStats = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStats   = fmt.Errorf("proto: integer overflow")
)
