// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/coprocessor/proto/coprocessor.proto

package proto

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryPreQueryRequest struct {
	Selector string    `protobuf:"bytes,1,opt,name=selector,proto3" json:"selector,omitempty"`
	Limit    uint32    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Start    time.Time `protobuf:"bytes,3,opt,name=start,proto3,stdtime" json:"start"`
	End      time.Time `protobuf:"bytes,4,opt,name=end,proto3,stdtime" json:"end"`
	Shards   []string  `protobuf:"bytes,5,rep,name=shards,proto3" json:"shards,omitempty"`
}

func (m *QueryPreQueryRequest) Reset()      { *m = QueryPreQueryRequest{} }
func (*QueryPreQueryRequest) ProtoMessage() {}
func (*QueryPreQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fab86fe596a48e9, []int{0}
}
func (m *QueryPreQueryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPreQueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPreQueryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPreQueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPreQueryRequest.Merge(m, src)
}
func (m *QueryPreQueryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPreQueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPreQueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPreQueryRequest proto.InternalMessageInfo

func (m *QueryPreQueryRequest) GetSelector() string {
	if m != nil {
		return m.Selector
	}
	return ""
}

func (m *QueryPreQueryRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *QueryPreQueryRequest) GetStart() time.Time {
	if m != nil {
		return m.Start
	}
	return time.Time{}
}

func (m *QueryPreQueryRequest) GetEnd() time.Time {
	if m != nil {
		return m.End
	}
	return time.Time{}
}

func (m *QueryPreQueryRequest) GetShards() []string {
	if m != nil {
		return m.Shards
	}
	return nil
}

type QueryPreQueryResponse struct {
	Pass bool `protobuf:"varint,1,opt,name=pass,proto3" json:"pass,omitempty"`
}

func (m *QueryPreQueryResponse) Reset()      { *m = QueryPreQueryResponse{} }
func (*QueryPreQueryResponse) ProtoMessage() {}
func (*QueryPreQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fab86fe596a48e9, []int{1}
}
func (m *QueryPreQueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPreQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPreQueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPreQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPreQueryResponse.Merge(m, src)
}
func (m *QueryPreQueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPreQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPreQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPreQueryResponse proto.InternalMessageInfo

func (m *QueryPreQueryResponse) GetPass() bool {
	if m != nil {
		return m.Pass
	}
	return false
}

func init() {
	proto.RegisterType((*QueryPreQueryRequest)(nil), "logproto.QueryPreQueryRequest")
	proto.RegisterType((*QueryPreQueryResponse)(nil), "logproto.QueryPreQueryResponse")
}

func init() {
	proto.RegisterFile("pkg/coprocessor/proto/coprocessor.proto", fileDescriptor_2fab86fe596a48e9)
}

var fileDescriptor_2fab86fe596a48e9 = []byte{
	// 350 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xbf, 0x4e, 0xf3, 0x30,
	0x14, 0xc5, 0xe3, 0xaf, 0x7f, 0x94, 0xfa, 0x13, 0x12, 0xb2, 0x82, 0x14, 0x65, 0x70, 0xa2, 0x2e,
	0x44, 0xa2, 0x24, 0x12, 0x48, 0x0c, 0x8c, 0x7d, 0x02, 0x88, 0x98, 0xd8, 0xd2, 0xd4, 0x75, 0xa3,
	0x26, 0xbd, 0xc1, 0x76, 0x86, 0x6e, 0x3c, 0x42, 0x1f, 0x83, 0x47, 0xe9, 0xd8, 0xb1, 0x53, 0xa1,
	0xe9, 0x82, 0x3a, 0xf5, 0x11, 0x50, 0x63, 0x8a, 0x10, 0x62, 0x61, 0xba, 0xe7, 0x1e, 0x9f, 0x9f,
	0x8e, 0xae, 0x8c, 0xcf, 0x8b, 0x09, 0x0f, 0x13, 0x28, 0x04, 0x24, 0x4c, 0x4a, 0x10, 0x61, 0x21,
	0x40, 0xc1, 0x77, 0x27, 0xa8, 0x1d, 0x62, 0x66, 0xc0, 0x6b, 0xe5, 0x58, 0x1c, 0x38, 0xe8, 0xd8,
	0x41, 0xe9, 0x77, 0xc7, 0xe5, 0x00, 0x3c, 0x63, 0x9a, 0x1f, 0x94, 0xa3, 0x50, 0xa5, 0x39, 0x93,
	0x2a, 0xce, 0x0b, 0x1d, 0xe8, 0xee, 0x10, 0xb6, 0xee, 0x4b, 0x26, 0x66, 0x77, 0x82, 0xd5, 0x33,
	0x62, 0x4f, 0x25, 0x93, 0x8a, 0x38, 0xd8, 0x94, 0x2c, 0x63, 0x89, 0x02, 0x61, 0x23, 0x0f, 0xf9,
	0x9d, 0xe8, 0x6b, 0x27, 0x16, 0x6e, 0x65, 0x69, 0x9e, 0x2a, 0xfb, 0x9f, 0x87, 0xfc, 0x93, 0x48,
	0x2f, 0xe4, 0x16, 0xb7, 0xa4, 0x8a, 0x85, 0xb2, 0x1b, 0x1e, 0xf2, 0xff, 0x5f, 0x39, 0x81, 0xee,
	0x0e, 0x8e, 0xdd, 0xc1, 0xc3, 0xb1, 0xbb, 0x6f, 0x2e, 0xd6, 0xae, 0x31, 0x7f, 0x75, 0x51, 0xa4,
	0x11, 0x72, 0x83, 0x1b, 0x6c, 0x3a, 0xb4, 0x9b, 0x7f, 0x20, 0x0f, 0x00, 0xe9, 0xe1, 0xb6, 0x1c,
	0xc7, 0x62, 0x28, 0xed, 0x96, 0xd7, 0xf0, 0x3b, 0x7d, 0x6b, 0xb7, 0x76, 0x4f, 0xb5, 0xd3, 0x83,
	0x3c, 0x55, 0x2c, 0x2f, 0xd4, 0x2c, 0xfa, 0xcc, 0x74, 0x2f, 0xf0, 0xd9, 0x8f, 0x5b, 0x65, 0x01,
	0x53, 0xc9, 0x08, 0xc1, 0xcd, 0x22, 0x96, 0xb2, 0x3e, 0xd4, 0x8c, 0x6a, 0xdd, 0x4f, 0x96, 0x1b,
	0x6a, 0xac, 0x36, 0xd4, 0xd8, 0x6f, 0x28, 0x7a, 0xae, 0x28, 0x7a, 0xa9, 0x28, 0x5a, 0x54, 0x14,
	0x2d, 0x2b, 0x8a, 0xde, 0x2a, 0x8a, 0xde, 0x2b, 0x6a, 0xec, 0x2b, 0x8a, 0xe6, 0x5b, 0x6a, 0x2c,
	0xb7, 0xd4, 0x58, 0x6d, 0xa9, 0xf1, 0x78, 0xc9, 0x53, 0x35, 0x2e, 0x07, 0x41, 0x02, 0x79, 0xc8,
	0x45, 0x3c, 0x8a, 0xa7, 0x71, 0x98, 0xc1, 0x24, 0x0d, 0x7f, 0xfd, 0xd1, 0x41, 0xbb, 0x1e, 0xd7,
	0x1f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x90, 0xcb, 0x99, 0x23, 0xf1, 0x01, 0x00, 0x00,
}

func (this *QueryPreQueryRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryPreQueryRequest)
	if !ok {
		that2, ok := that.(QueryPreQueryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Selector != that1.Selector {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if !this.Start.Equal(that1.Start) {
		return false
	}
	if !this.End.Equal(that1.End) {
		return false
	}
	if len(this.Shards) != len(that1.Shards) {
		return false
	}
	for i := range this.Shards {
		if this.Shards[i] != that1.Shards[i] {
			return false
		}
	}
	return true
}
func (this *QueryPreQueryResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryPreQueryResponse)
	if !ok {
		that2, ok := that.(QueryPreQueryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Pass != that1.Pass {
		return false
	}
	return true
}
func (this *QueryPreQueryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&proto.QueryPreQueryRequest{")
	s = append(s, "Selector: "+fmt.Sprintf("%#v", this.Selector)+",\n")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Start: "+fmt.Sprintf("%#v", this.Start)+",\n")
	s = append(s, "End: "+fmt.Sprintf("%#v", this.End)+",\n")
	s = append(s, "Shards: "+fmt.Sprintf("%#v", this.Shards)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryPreQueryResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.QueryPreQueryResponse{")
	s = append(s, "Pass: "+fmt.Sprintf("%#v", this.Pass)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCoprocessor(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *QueryPreQueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPreQueryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPreQueryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Shards) > 0 {
		for iNdEx := len(m.Shards) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Shards[iNdEx])
			copy(dAtA[i:], m.Shards[iNdEx])
			i = encodeVarintCoprocessor(dAtA, i, uint64(len(m.Shards[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.End, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.End):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintCoprocessor(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Start, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Start):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintCoprocessor(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x1a
	if m.Limit != 0 {
		i = encodeVarintCoprocessor(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Selector) > 0 {
		i -= len(m.Selector)
		copy(dAtA[i:], m.Selector)
		i = encodeVarintCoprocessor(dAtA, i, uint64(len(m.Selector)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPreQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPreQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPreQueryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pass {
		i--
		if m.Pass {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCoprocessor(dAtA []byte, offset int, v uint64) int {
	offset -= sovCoprocessor(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryPreQueryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Selector)
	if l > 0 {
		n += 1 + l + sovCoprocessor(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovCoprocessor(uint64(m.Limit))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Start)
	n += 1 + l + sovCoprocessor(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.End)
	n += 1 + l + sovCoprocessor(uint64(l))
	if len(m.Shards) > 0 {
		for _, s := range m.Shards {
			l = len(s)
			n += 1 + l + sovCoprocessor(uint64(l))
		}
	}
	return n
}

func (m *QueryPreQueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pass {
		n += 2
	}
	return n
}

func sovCoprocessor(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCoprocessor(x uint64) (n int) {
	return sovCoprocessor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *QueryPreQueryRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryPreQueryRequest{`,
		`Selector:` + fmt.Sprintf("%v", this.Selector) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Start:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Start), "Timestamp", "timestamp.Timestamp", 1), `&`, ``, 1) + `,`,
		`End:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.End), "Timestamp", "timestamp.Timestamp", 1), `&`, ``, 1) + `,`,
		`Shards:` + fmt.Sprintf("%v", this.Shards) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryPreQueryResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryPreQueryResponse{`,
		`Pass:` + fmt.Sprintf("%v", this.Pass) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCoprocessor(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *QueryPreQueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoprocessor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPreQueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPreQueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoprocessor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoprocessor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoprocessor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Selector = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoprocessor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoprocessor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoprocessor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoprocessor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Start, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoprocessor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoprocessor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoprocessor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.End, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shards", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoprocessor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoprocessor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoprocessor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shards = append(m.Shards, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoprocessor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCoprocessor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPreQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoprocessor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPreQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPreQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pass", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoprocessor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pass = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCoprocessor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCoprocessor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCoprocessor(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCoprocessor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCoprocessor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCoprocessor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCoprocessor
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCoprocessor
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCoprocessor
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCoprocessor        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCoprocessor          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCoprocessor = fmt.Errorf("proto: unexpected end of group")
)
